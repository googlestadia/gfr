/*
 * Copyright (C) 2021 Google Inc.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 *
 * THIS FILE IS GENERATED BY VkSpecGen. DO NOT EDIT.
 */
      
// clang-format off


void CommandBuffer::PreCmdDrawMultiEXT(VkCommandBuffer commandBuffer, uint32_t drawCount, const VkMultiDrawInfoEXT* pVertexInfo, uint32_t instanceCount, uint32_t firstInstance, uint32_t stride)
{
  tracker_.TrackPreCmdDrawMultiEXT(commandBuffer, drawCount, pVertexInfo, instanceCount, firstInstance, stride);
  if (instrument_all_commands_) {
    WriteBeginCommandExecutionMarker(tracker_.GetCommands().back().id);
  }
}

void CommandBuffer::PostCmdDrawMultiEXT(VkCommandBuffer commandBuffer, uint32_t drawCount, const VkMultiDrawInfoEXT* pVertexInfo, uint32_t instanceCount, uint32_t firstInstance, uint32_t stride)
{
  tracker_.TrackPostCmdDrawMultiEXT(commandBuffer, drawCount, pVertexInfo, instanceCount, firstInstance, stride);
  if (instrument_all_commands_) {
    WriteEndCommandExecutionMarker(tracker_.GetCommands().back().id);
  }
}

void CommandBuffer::PreCmdDrawMultiIndexedEXT(VkCommandBuffer commandBuffer, uint32_t drawCount, const VkMultiDrawIndexedInfoEXT* pIndexInfo, uint32_t instanceCount, uint32_t firstInstance, uint32_t stride, const int32_t* pVertexOffset)
{
  tracker_.TrackPreCmdDrawMultiIndexedEXT(commandBuffer, drawCount, pIndexInfo, instanceCount, firstInstance, stride, pVertexOffset);
  if (instrument_all_commands_) {
    WriteBeginCommandExecutionMarker(tracker_.GetCommands().back().id);
  }
}

void CommandBuffer::PostCmdDrawMultiIndexedEXT(VkCommandBuffer commandBuffer, uint32_t drawCount, const VkMultiDrawIndexedInfoEXT* pIndexInfo, uint32_t instanceCount, uint32_t firstInstance, uint32_t stride, const int32_t* pVertexOffset)
{
  tracker_.TrackPostCmdDrawMultiIndexedEXT(commandBuffer, drawCount, pIndexInfo, instanceCount, firstInstance, stride, pVertexOffset);
  if (instrument_all_commands_) {
    WriteEndCommandExecutionMarker(tracker_.GetCommands().back().id);
  }
}

void CommandBuffer::PreCmdDebugMarkerBeginEXT(VkCommandBuffer commandBuffer, const VkDebugMarkerMarkerInfoEXT* pMarkerInfo)
{
  tracker_.TrackPreCmdDebugMarkerBeginEXT(commandBuffer, pMarkerInfo);
  WriteBeginCommandExecutionMarker(tracker_.GetCommands().back().id);
}

void CommandBuffer::PostCmdDebugMarkerBeginEXT(VkCommandBuffer commandBuffer, const VkDebugMarkerMarkerInfoEXT* pMarkerInfo)
{
  tracker_.TrackPostCmdDebugMarkerBeginEXT(commandBuffer, pMarkerInfo);
  WriteEndCommandExecutionMarker(tracker_.GetCommands().back().id);
}

void CommandBuffer::PreCmdDebugMarkerEndEXT(VkCommandBuffer commandBuffer)
{
  tracker_.TrackPreCmdDebugMarkerEndEXT(commandBuffer);
  WriteBeginCommandExecutionMarker(tracker_.GetCommands().back().id);
}

void CommandBuffer::PostCmdDebugMarkerEndEXT(VkCommandBuffer commandBuffer)
{
  tracker_.TrackPostCmdDebugMarkerEndEXT(commandBuffer);
  WriteEndCommandExecutionMarker(tracker_.GetCommands().back().id);
}

void CommandBuffer::PreCmdDebugMarkerInsertEXT(VkCommandBuffer commandBuffer, const VkDebugMarkerMarkerInfoEXT* pMarkerInfo)
{
  tracker_.TrackPreCmdDebugMarkerInsertEXT(commandBuffer, pMarkerInfo);
  WriteBeginCommandExecutionMarker(tracker_.GetCommands().back().id);
}

void CommandBuffer::PostCmdDebugMarkerInsertEXT(VkCommandBuffer commandBuffer, const VkDebugMarkerMarkerInfoEXT* pMarkerInfo)
{
  tracker_.TrackPostCmdDebugMarkerInsertEXT(commandBuffer, pMarkerInfo);
  WriteEndCommandExecutionMarker(tracker_.GetCommands().back().id);
}

void CommandBuffer::PreCmdPushDescriptorSetKHR(VkCommandBuffer commandBuffer, VkPipelineBindPoint pipelineBindPoint, VkPipelineLayout layout, uint32_t set, uint32_t descriptorWriteCount, const VkWriteDescriptorSet* pDescriptorWrites)
{
  tracker_.TrackPreCmdPushDescriptorSetKHR(commandBuffer, pipelineBindPoint, layout, set, descriptorWriteCount, pDescriptorWrites);
  if (instrument_all_commands_) {
    WriteBeginCommandExecutionMarker(tracker_.GetCommands().back().id);
  }
}

void CommandBuffer::PostCmdPushDescriptorSetKHR(VkCommandBuffer commandBuffer, VkPipelineBindPoint pipelineBindPoint, VkPipelineLayout layout, uint32_t set, uint32_t descriptorWriteCount, const VkWriteDescriptorSet* pDescriptorWrites)
{
  tracker_.TrackPostCmdPushDescriptorSetKHR(commandBuffer, pipelineBindPoint, layout, set, descriptorWriteCount, pDescriptorWrites);
  if (instrument_all_commands_) {
    WriteEndCommandExecutionMarker(tracker_.GetCommands().back().id);
  }
}

void CommandBuffer::PreCmdSetDeviceMask(VkCommandBuffer commandBuffer, uint32_t deviceMask)
{
  tracker_.TrackPreCmdSetDeviceMask(commandBuffer, deviceMask);
  if (instrument_all_commands_) {
    WriteBeginCommandExecutionMarker(tracker_.GetCommands().back().id);
  }
}

void CommandBuffer::PostCmdSetDeviceMask(VkCommandBuffer commandBuffer, uint32_t deviceMask)
{
  tracker_.TrackPostCmdSetDeviceMask(commandBuffer, deviceMask);
  if (instrument_all_commands_) {
    WriteEndCommandExecutionMarker(tracker_.GetCommands().back().id);
  }
}

void CommandBuffer::PreCmdSetDeviceMaskKHR(VkCommandBuffer commandBuffer, uint32_t deviceMask)
{
  tracker_.TrackPreCmdSetDeviceMaskKHR(commandBuffer, deviceMask);
  if (instrument_all_commands_) {
    WriteBeginCommandExecutionMarker(tracker_.GetCommands().back().id);
  }
}

void CommandBuffer::PostCmdSetDeviceMaskKHR(VkCommandBuffer commandBuffer, uint32_t deviceMask)
{
  tracker_.TrackPostCmdSetDeviceMaskKHR(commandBuffer, deviceMask);
  if (instrument_all_commands_) {
    WriteEndCommandExecutionMarker(tracker_.GetCommands().back().id);
  }
}

void CommandBuffer::PreCmdDispatchBase(VkCommandBuffer commandBuffer, uint32_t baseGroupX, uint32_t baseGroupY, uint32_t baseGroupZ, uint32_t groupCountX, uint32_t groupCountY, uint32_t groupCountZ)
{
  tracker_.TrackPreCmdDispatchBase(commandBuffer, baseGroupX, baseGroupY, baseGroupZ, groupCountX, groupCountY, groupCountZ);
  if (instrument_all_commands_) {
    WriteBeginCommandExecutionMarker(tracker_.GetCommands().back().id);
  }
}

void CommandBuffer::PostCmdDispatchBase(VkCommandBuffer commandBuffer, uint32_t baseGroupX, uint32_t baseGroupY, uint32_t baseGroupZ, uint32_t groupCountX, uint32_t groupCountY, uint32_t groupCountZ)
{
  tracker_.TrackPostCmdDispatchBase(commandBuffer, baseGroupX, baseGroupY, baseGroupZ, groupCountX, groupCountY, groupCountZ);
  if (instrument_all_commands_) {
    WriteEndCommandExecutionMarker(tracker_.GetCommands().back().id);
  }
}

void CommandBuffer::PreCmdDispatchBaseKHR(VkCommandBuffer commandBuffer, uint32_t baseGroupX, uint32_t baseGroupY, uint32_t baseGroupZ, uint32_t groupCountX, uint32_t groupCountY, uint32_t groupCountZ)
{
  tracker_.TrackPreCmdDispatchBaseKHR(commandBuffer, baseGroupX, baseGroupY, baseGroupZ, groupCountX, groupCountY, groupCountZ);
  if (instrument_all_commands_) {
    WriteBeginCommandExecutionMarker(tracker_.GetCommands().back().id);
  }
}

void CommandBuffer::PostCmdDispatchBaseKHR(VkCommandBuffer commandBuffer, uint32_t baseGroupX, uint32_t baseGroupY, uint32_t baseGroupZ, uint32_t groupCountX, uint32_t groupCountY, uint32_t groupCountZ)
{
  tracker_.TrackPostCmdDispatchBaseKHR(commandBuffer, baseGroupX, baseGroupY, baseGroupZ, groupCountX, groupCountY, groupCountZ);
  if (instrument_all_commands_) {
    WriteEndCommandExecutionMarker(tracker_.GetCommands().back().id);
  }
}

void CommandBuffer::PreCmdPushDescriptorSetWithTemplateKHR(VkCommandBuffer commandBuffer, VkDescriptorUpdateTemplate descriptorUpdateTemplate, VkPipelineLayout layout, uint32_t set, const void* pData)
{
  tracker_.TrackPreCmdPushDescriptorSetWithTemplateKHR(commandBuffer, descriptorUpdateTemplate, layout, set, pData);
  if (instrument_all_commands_) {
    WriteBeginCommandExecutionMarker(tracker_.GetCommands().back().id);
  }
}

void CommandBuffer::PostCmdPushDescriptorSetWithTemplateKHR(VkCommandBuffer commandBuffer, VkDescriptorUpdateTemplate descriptorUpdateTemplate, VkPipelineLayout layout, uint32_t set, const void* pData)
{
  tracker_.TrackPostCmdPushDescriptorSetWithTemplateKHR(commandBuffer, descriptorUpdateTemplate, layout, set, pData);
  if (instrument_all_commands_) {
    WriteEndCommandExecutionMarker(tracker_.GetCommands().back().id);
  }
}

void CommandBuffer::PreCmdSetSampleLocationsEXT(VkCommandBuffer commandBuffer, const VkSampleLocationsInfoEXT* pSampleLocationsInfo)
{
  tracker_.TrackPreCmdSetSampleLocationsEXT(commandBuffer, pSampleLocationsInfo);
  if (instrument_all_commands_) {
    WriteBeginCommandExecutionMarker(tracker_.GetCommands().back().id);
  }
}

void CommandBuffer::PostCmdSetSampleLocationsEXT(VkCommandBuffer commandBuffer, const VkSampleLocationsInfoEXT* pSampleLocationsInfo)
{
  tracker_.TrackPostCmdSetSampleLocationsEXT(commandBuffer, pSampleLocationsInfo);
  if (instrument_all_commands_) {
    WriteEndCommandExecutionMarker(tracker_.GetCommands().back().id);
  }
}

void CommandBuffer::PreCmdBeginDebugUtilsLabelEXT(VkCommandBuffer commandBuffer, const VkDebugUtilsLabelEXT* pLabelInfo)
{
  tracker_.TrackPreCmdBeginDebugUtilsLabelEXT(commandBuffer, pLabelInfo);
  WriteBeginCommandExecutionMarker(tracker_.GetCommands().back().id);
}

void CommandBuffer::PostCmdBeginDebugUtilsLabelEXT(VkCommandBuffer commandBuffer, const VkDebugUtilsLabelEXT* pLabelInfo)
{
  tracker_.TrackPostCmdBeginDebugUtilsLabelEXT(commandBuffer, pLabelInfo);
  WriteEndCommandExecutionMarker(tracker_.GetCommands().back().id);
}

void CommandBuffer::PreCmdEndDebugUtilsLabelEXT(VkCommandBuffer commandBuffer)
{
  tracker_.TrackPreCmdEndDebugUtilsLabelEXT(commandBuffer);
  WriteBeginCommandExecutionMarker(tracker_.GetCommands().back().id);
}

void CommandBuffer::PostCmdEndDebugUtilsLabelEXT(VkCommandBuffer commandBuffer)
{
  tracker_.TrackPostCmdEndDebugUtilsLabelEXT(commandBuffer);
  WriteEndCommandExecutionMarker(tracker_.GetCommands().back().id);
}

void CommandBuffer::PreCmdInsertDebugUtilsLabelEXT(VkCommandBuffer commandBuffer, const VkDebugUtilsLabelEXT* pLabelInfo)
{
  tracker_.TrackPreCmdInsertDebugUtilsLabelEXT(commandBuffer, pLabelInfo);
  WriteBeginCommandExecutionMarker(tracker_.GetCommands().back().id);
}

void CommandBuffer::PostCmdInsertDebugUtilsLabelEXT(VkCommandBuffer commandBuffer, const VkDebugUtilsLabelEXT* pLabelInfo)
{
  tracker_.TrackPostCmdInsertDebugUtilsLabelEXT(commandBuffer, pLabelInfo);
  WriteEndCommandExecutionMarker(tracker_.GetCommands().back().id);
}

void CommandBuffer::PreCmdWriteBufferMarkerAMD(VkCommandBuffer commandBuffer, VkPipelineStageFlagBits pipelineStage, VkBuffer dstBuffer, VkDeviceSize dstOffset, uint32_t marker)
{
  tracker_.TrackPreCmdWriteBufferMarkerAMD(commandBuffer, pipelineStage, dstBuffer, dstOffset, marker);
  if (instrument_all_commands_) {
    WriteBeginCommandExecutionMarker(tracker_.GetCommands().back().id);
  }
}

void CommandBuffer::PostCmdWriteBufferMarkerAMD(VkCommandBuffer commandBuffer, VkPipelineStageFlagBits pipelineStage, VkBuffer dstBuffer, VkDeviceSize dstOffset, uint32_t marker)
{
  tracker_.TrackPostCmdWriteBufferMarkerAMD(commandBuffer, pipelineStage, dstBuffer, dstOffset, marker);
  if (instrument_all_commands_) {
    WriteEndCommandExecutionMarker(tracker_.GetCommands().back().id);
  }
}

void CommandBuffer::PreCmdBeginRenderPass2(VkCommandBuffer commandBuffer, const VkRenderPassBeginInfo* pRenderPassBegin, const VkSubpassBeginInfo* pSubpassBeginInfo)
{
  tracker_.TrackPreCmdBeginRenderPass2(commandBuffer, pRenderPassBegin, pSubpassBeginInfo);
  if (instrument_all_commands_) {
    WriteBeginCommandExecutionMarker(tracker_.GetCommands().back().id);
  }
}

void CommandBuffer::PostCmdBeginRenderPass2(VkCommandBuffer commandBuffer, const VkRenderPassBeginInfo* pRenderPassBegin, const VkSubpassBeginInfo* pSubpassBeginInfo)
{
  tracker_.TrackPostCmdBeginRenderPass2(commandBuffer, pRenderPassBegin, pSubpassBeginInfo);
  if (instrument_all_commands_) {
    WriteEndCommandExecutionMarker(tracker_.GetCommands().back().id);
  }
}

void CommandBuffer::PreCmdBeginRenderPass2KHR(VkCommandBuffer commandBuffer, const VkRenderPassBeginInfo* pRenderPassBegin, const VkSubpassBeginInfo* pSubpassBeginInfo)
{
  tracker_.TrackPreCmdBeginRenderPass2KHR(commandBuffer, pRenderPassBegin, pSubpassBeginInfo);
  if (instrument_all_commands_) {
    WriteBeginCommandExecutionMarker(tracker_.GetCommands().back().id);
  }
}

void CommandBuffer::PostCmdBeginRenderPass2KHR(VkCommandBuffer commandBuffer, const VkRenderPassBeginInfo* pRenderPassBegin, const VkSubpassBeginInfo* pSubpassBeginInfo)
{
  tracker_.TrackPostCmdBeginRenderPass2KHR(commandBuffer, pRenderPassBegin, pSubpassBeginInfo);
  if (instrument_all_commands_) {
    WriteEndCommandExecutionMarker(tracker_.GetCommands().back().id);
  }
}

void CommandBuffer::PreCmdNextSubpass2(VkCommandBuffer commandBuffer, const VkSubpassBeginInfo* pSubpassBeginInfo, const VkSubpassEndInfo* pSubpassEndInfo)
{
  tracker_.TrackPreCmdNextSubpass2(commandBuffer, pSubpassBeginInfo, pSubpassEndInfo);
  if (instrument_all_commands_) {
    WriteBeginCommandExecutionMarker(tracker_.GetCommands().back().id);
  }
}

void CommandBuffer::PostCmdNextSubpass2(VkCommandBuffer commandBuffer, const VkSubpassBeginInfo* pSubpassBeginInfo, const VkSubpassEndInfo* pSubpassEndInfo)
{
  tracker_.TrackPostCmdNextSubpass2(commandBuffer, pSubpassBeginInfo, pSubpassEndInfo);
  if (instrument_all_commands_) {
    WriteEndCommandExecutionMarker(tracker_.GetCommands().back().id);
  }
}

void CommandBuffer::PreCmdNextSubpass2KHR(VkCommandBuffer commandBuffer, const VkSubpassBeginInfo* pSubpassBeginInfo, const VkSubpassEndInfo* pSubpassEndInfo)
{
  tracker_.TrackPreCmdNextSubpass2KHR(commandBuffer, pSubpassBeginInfo, pSubpassEndInfo);
  if (instrument_all_commands_) {
    WriteBeginCommandExecutionMarker(tracker_.GetCommands().back().id);
  }
}

void CommandBuffer::PostCmdNextSubpass2KHR(VkCommandBuffer commandBuffer, const VkSubpassBeginInfo* pSubpassBeginInfo, const VkSubpassEndInfo* pSubpassEndInfo)
{
  tracker_.TrackPostCmdNextSubpass2KHR(commandBuffer, pSubpassBeginInfo, pSubpassEndInfo);
  if (instrument_all_commands_) {
    WriteEndCommandExecutionMarker(tracker_.GetCommands().back().id);
  }
}

void CommandBuffer::PreCmdEndRenderPass2(VkCommandBuffer commandBuffer, const VkSubpassEndInfo* pSubpassEndInfo)
{
  tracker_.TrackPreCmdEndRenderPass2(commandBuffer, pSubpassEndInfo);
  if (instrument_all_commands_) {
    WriteBeginCommandExecutionMarker(tracker_.GetCommands().back().id);
  }
}

void CommandBuffer::PostCmdEndRenderPass2(VkCommandBuffer commandBuffer, const VkSubpassEndInfo* pSubpassEndInfo)
{
  tracker_.TrackPostCmdEndRenderPass2(commandBuffer, pSubpassEndInfo);
  if (instrument_all_commands_) {
    WriteEndCommandExecutionMarker(tracker_.GetCommands().back().id);
  }
}

void CommandBuffer::PreCmdEndRenderPass2KHR(VkCommandBuffer commandBuffer, const VkSubpassEndInfo* pSubpassEndInfo)
{
  tracker_.TrackPreCmdEndRenderPass2KHR(commandBuffer, pSubpassEndInfo);
  if (instrument_all_commands_) {
    WriteBeginCommandExecutionMarker(tracker_.GetCommands().back().id);
  }
}

void CommandBuffer::PostCmdEndRenderPass2KHR(VkCommandBuffer commandBuffer, const VkSubpassEndInfo* pSubpassEndInfo)
{
  tracker_.TrackPostCmdEndRenderPass2KHR(commandBuffer, pSubpassEndInfo);
  if (instrument_all_commands_) {
    WriteEndCommandExecutionMarker(tracker_.GetCommands().back().id);
  }
}

void CommandBuffer::PreCmdDrawIndirectCount(VkCommandBuffer commandBuffer, VkBuffer buffer, VkDeviceSize offset, VkBuffer countBuffer, VkDeviceSize countBufferOffset, uint32_t maxDrawCount, uint32_t stride)
{
  tracker_.TrackPreCmdDrawIndirectCount(commandBuffer, buffer, offset, countBuffer, countBufferOffset, maxDrawCount, stride);
  if (instrument_all_commands_) {
    WriteBeginCommandExecutionMarker(tracker_.GetCommands().back().id);
  }
}

void CommandBuffer::PostCmdDrawIndirectCount(VkCommandBuffer commandBuffer, VkBuffer buffer, VkDeviceSize offset, VkBuffer countBuffer, VkDeviceSize countBufferOffset, uint32_t maxDrawCount, uint32_t stride)
{
  tracker_.TrackPostCmdDrawIndirectCount(commandBuffer, buffer, offset, countBuffer, countBufferOffset, maxDrawCount, stride);
  if (instrument_all_commands_) {
    WriteEndCommandExecutionMarker(tracker_.GetCommands().back().id);
  }
}

void CommandBuffer::PreCmdDrawIndirectCountKHR(VkCommandBuffer commandBuffer, VkBuffer buffer, VkDeviceSize offset, VkBuffer countBuffer, VkDeviceSize countBufferOffset, uint32_t maxDrawCount, uint32_t stride)
{
  tracker_.TrackPreCmdDrawIndirectCountKHR(commandBuffer, buffer, offset, countBuffer, countBufferOffset, maxDrawCount, stride);
  if (instrument_all_commands_) {
    WriteBeginCommandExecutionMarker(tracker_.GetCommands().back().id);
  }
}

void CommandBuffer::PostCmdDrawIndirectCountKHR(VkCommandBuffer commandBuffer, VkBuffer buffer, VkDeviceSize offset, VkBuffer countBuffer, VkDeviceSize countBufferOffset, uint32_t maxDrawCount, uint32_t stride)
{
  tracker_.TrackPostCmdDrawIndirectCountKHR(commandBuffer, buffer, offset, countBuffer, countBufferOffset, maxDrawCount, stride);
  if (instrument_all_commands_) {
    WriteEndCommandExecutionMarker(tracker_.GetCommands().back().id);
  }
}

void CommandBuffer::PreCmdDrawIndirectCountAMD(VkCommandBuffer commandBuffer, VkBuffer buffer, VkDeviceSize offset, VkBuffer countBuffer, VkDeviceSize countBufferOffset, uint32_t maxDrawCount, uint32_t stride)
{
  tracker_.TrackPreCmdDrawIndirectCountAMD(commandBuffer, buffer, offset, countBuffer, countBufferOffset, maxDrawCount, stride);
  if (instrument_all_commands_) {
    WriteBeginCommandExecutionMarker(tracker_.GetCommands().back().id);
  }
}

void CommandBuffer::PostCmdDrawIndirectCountAMD(VkCommandBuffer commandBuffer, VkBuffer buffer, VkDeviceSize offset, VkBuffer countBuffer, VkDeviceSize countBufferOffset, uint32_t maxDrawCount, uint32_t stride)
{
  tracker_.TrackPostCmdDrawIndirectCountAMD(commandBuffer, buffer, offset, countBuffer, countBufferOffset, maxDrawCount, stride);
  if (instrument_all_commands_) {
    WriteEndCommandExecutionMarker(tracker_.GetCommands().back().id);
  }
}

void CommandBuffer::PreCmdDrawIndexedIndirectCount(VkCommandBuffer commandBuffer, VkBuffer buffer, VkDeviceSize offset, VkBuffer countBuffer, VkDeviceSize countBufferOffset, uint32_t maxDrawCount, uint32_t stride)
{
  tracker_.TrackPreCmdDrawIndexedIndirectCount(commandBuffer, buffer, offset, countBuffer, countBufferOffset, maxDrawCount, stride);
  if (instrument_all_commands_) {
    WriteBeginCommandExecutionMarker(tracker_.GetCommands().back().id);
  }
}

void CommandBuffer::PostCmdDrawIndexedIndirectCount(VkCommandBuffer commandBuffer, VkBuffer buffer, VkDeviceSize offset, VkBuffer countBuffer, VkDeviceSize countBufferOffset, uint32_t maxDrawCount, uint32_t stride)
{
  tracker_.TrackPostCmdDrawIndexedIndirectCount(commandBuffer, buffer, offset, countBuffer, countBufferOffset, maxDrawCount, stride);
  if (instrument_all_commands_) {
    WriteEndCommandExecutionMarker(tracker_.GetCommands().back().id);
  }
}

void CommandBuffer::PreCmdDrawIndexedIndirectCountKHR(VkCommandBuffer commandBuffer, VkBuffer buffer, VkDeviceSize offset, VkBuffer countBuffer, VkDeviceSize countBufferOffset, uint32_t maxDrawCount, uint32_t stride)
{
  tracker_.TrackPreCmdDrawIndexedIndirectCountKHR(commandBuffer, buffer, offset, countBuffer, countBufferOffset, maxDrawCount, stride);
  if (instrument_all_commands_) {
    WriteBeginCommandExecutionMarker(tracker_.GetCommands().back().id);
  }
}

void CommandBuffer::PostCmdDrawIndexedIndirectCountKHR(VkCommandBuffer commandBuffer, VkBuffer buffer, VkDeviceSize offset, VkBuffer countBuffer, VkDeviceSize countBufferOffset, uint32_t maxDrawCount, uint32_t stride)
{
  tracker_.TrackPostCmdDrawIndexedIndirectCountKHR(commandBuffer, buffer, offset, countBuffer, countBufferOffset, maxDrawCount, stride);
  if (instrument_all_commands_) {
    WriteEndCommandExecutionMarker(tracker_.GetCommands().back().id);
  }
}

void CommandBuffer::PreCmdDrawIndexedIndirectCountAMD(VkCommandBuffer commandBuffer, VkBuffer buffer, VkDeviceSize offset, VkBuffer countBuffer, VkDeviceSize countBufferOffset, uint32_t maxDrawCount, uint32_t stride)
{
  tracker_.TrackPreCmdDrawIndexedIndirectCountAMD(commandBuffer, buffer, offset, countBuffer, countBufferOffset, maxDrawCount, stride);
  if (instrument_all_commands_) {
    WriteBeginCommandExecutionMarker(tracker_.GetCommands().back().id);
  }
}

void CommandBuffer::PostCmdDrawIndexedIndirectCountAMD(VkCommandBuffer commandBuffer, VkBuffer buffer, VkDeviceSize offset, VkBuffer countBuffer, VkDeviceSize countBufferOffset, uint32_t maxDrawCount, uint32_t stride)
{
  tracker_.TrackPostCmdDrawIndexedIndirectCountAMD(commandBuffer, buffer, offset, countBuffer, countBufferOffset, maxDrawCount, stride);
  if (instrument_all_commands_) {
    WriteEndCommandExecutionMarker(tracker_.GetCommands().back().id);
  }
}

void CommandBuffer::PreCmdCopyAccelerationStructureKHR(VkCommandBuffer commandBuffer, const VkCopyAccelerationStructureInfoKHR* pInfo)
{
  tracker_.TrackPreCmdCopyAccelerationStructureKHR(commandBuffer, pInfo);
  if (instrument_all_commands_) {
    WriteBeginCommandExecutionMarker(tracker_.GetCommands().back().id);
  }
}

void CommandBuffer::PostCmdCopyAccelerationStructureKHR(VkCommandBuffer commandBuffer, const VkCopyAccelerationStructureInfoKHR* pInfo)
{
  tracker_.TrackPostCmdCopyAccelerationStructureKHR(commandBuffer, pInfo);
  if (instrument_all_commands_) {
    WriteEndCommandExecutionMarker(tracker_.GetCommands().back().id);
  }
}

void CommandBuffer::PreCmdCopyAccelerationStructureToMemoryKHR(VkCommandBuffer commandBuffer, const VkCopyAccelerationStructureToMemoryInfoKHR* pInfo)
{
  tracker_.TrackPreCmdCopyAccelerationStructureToMemoryKHR(commandBuffer, pInfo);
  if (instrument_all_commands_) {
    WriteBeginCommandExecutionMarker(tracker_.GetCommands().back().id);
  }
}

void CommandBuffer::PostCmdCopyAccelerationStructureToMemoryKHR(VkCommandBuffer commandBuffer, const VkCopyAccelerationStructureToMemoryInfoKHR* pInfo)
{
  tracker_.TrackPostCmdCopyAccelerationStructureToMemoryKHR(commandBuffer, pInfo);
  if (instrument_all_commands_) {
    WriteEndCommandExecutionMarker(tracker_.GetCommands().back().id);
  }
}

void CommandBuffer::PreCmdCopyMemoryToAccelerationStructureKHR(VkCommandBuffer commandBuffer, const VkCopyMemoryToAccelerationStructureInfoKHR* pInfo)
{
  tracker_.TrackPreCmdCopyMemoryToAccelerationStructureKHR(commandBuffer, pInfo);
  if (instrument_all_commands_) {
    WriteBeginCommandExecutionMarker(tracker_.GetCommands().back().id);
  }
}

void CommandBuffer::PostCmdCopyMemoryToAccelerationStructureKHR(VkCommandBuffer commandBuffer, const VkCopyMemoryToAccelerationStructureInfoKHR* pInfo)
{
  tracker_.TrackPostCmdCopyMemoryToAccelerationStructureKHR(commandBuffer, pInfo);
  if (instrument_all_commands_) {
    WriteEndCommandExecutionMarker(tracker_.GetCommands().back().id);
  }
}

void CommandBuffer::PreCmdWriteAccelerationStructuresPropertiesKHR(VkCommandBuffer commandBuffer, uint32_t accelerationStructureCount, const VkAccelerationStructureKHR* pAccelerationStructures, VkQueryType queryType, VkQueryPool queryPool, uint32_t firstQuery)
{
  tracker_.TrackPreCmdWriteAccelerationStructuresPropertiesKHR(commandBuffer, accelerationStructureCount, pAccelerationStructures, queryType, queryPool, firstQuery);
  if (instrument_all_commands_) {
    WriteBeginCommandExecutionMarker(tracker_.GetCommands().back().id);
  }
}

void CommandBuffer::PostCmdWriteAccelerationStructuresPropertiesKHR(VkCommandBuffer commandBuffer, uint32_t accelerationStructureCount, const VkAccelerationStructureKHR* pAccelerationStructures, VkQueryType queryType, VkQueryPool queryPool, uint32_t firstQuery)
{
  tracker_.TrackPostCmdWriteAccelerationStructuresPropertiesKHR(commandBuffer, accelerationStructureCount, pAccelerationStructures, queryType, queryPool, firstQuery);
  if (instrument_all_commands_) {
    WriteEndCommandExecutionMarker(tracker_.GetCommands().back().id);
  }
}

void CommandBuffer::PreCmdTraceRaysKHR(VkCommandBuffer commandBuffer, const VkStridedDeviceAddressRegionKHR* pRaygenShaderBindingTable, const VkStridedDeviceAddressRegionKHR* pMissShaderBindingTable, const VkStridedDeviceAddressRegionKHR* pHitShaderBindingTable, const VkStridedDeviceAddressRegionKHR* pCallableShaderBindingTable, uint32_t width, uint32_t height, uint32_t depth)
{
  tracker_.TrackPreCmdTraceRaysKHR(commandBuffer, pRaygenShaderBindingTable, pMissShaderBindingTable, pHitShaderBindingTable, pCallableShaderBindingTable, width, height, depth);
  if (instrument_all_commands_) {
    WriteBeginCommandExecutionMarker(tracker_.GetCommands().back().id);
  }
}

void CommandBuffer::PostCmdTraceRaysKHR(VkCommandBuffer commandBuffer, const VkStridedDeviceAddressRegionKHR* pRaygenShaderBindingTable, const VkStridedDeviceAddressRegionKHR* pMissShaderBindingTable, const VkStridedDeviceAddressRegionKHR* pHitShaderBindingTable, const VkStridedDeviceAddressRegionKHR* pCallableShaderBindingTable, uint32_t width, uint32_t height, uint32_t depth)
{
  tracker_.TrackPostCmdTraceRaysKHR(commandBuffer, pRaygenShaderBindingTable, pMissShaderBindingTable, pHitShaderBindingTable, pCallableShaderBindingTable, width, height, depth);
  if (instrument_all_commands_) {
    WriteEndCommandExecutionMarker(tracker_.GetCommands().back().id);
  }
}

void CommandBuffer::PreCmdTraceRaysIndirectKHR(VkCommandBuffer commandBuffer, const VkStridedDeviceAddressRegionKHR* pRaygenShaderBindingTable, const VkStridedDeviceAddressRegionKHR* pMissShaderBindingTable, const VkStridedDeviceAddressRegionKHR* pHitShaderBindingTable, const VkStridedDeviceAddressRegionKHR* pCallableShaderBindingTable, VkDeviceAddress indirectDeviceAddress)
{
  tracker_.TrackPreCmdTraceRaysIndirectKHR(commandBuffer, pRaygenShaderBindingTable, pMissShaderBindingTable, pHitShaderBindingTable, pCallableShaderBindingTable, indirectDeviceAddress);
  if (instrument_all_commands_) {
    WriteBeginCommandExecutionMarker(tracker_.GetCommands().back().id);
  }
}

void CommandBuffer::PostCmdTraceRaysIndirectKHR(VkCommandBuffer commandBuffer, const VkStridedDeviceAddressRegionKHR* pRaygenShaderBindingTable, const VkStridedDeviceAddressRegionKHR* pMissShaderBindingTable, const VkStridedDeviceAddressRegionKHR* pHitShaderBindingTable, const VkStridedDeviceAddressRegionKHR* pCallableShaderBindingTable, VkDeviceAddress indirectDeviceAddress)
{
  tracker_.TrackPostCmdTraceRaysIndirectKHR(commandBuffer, pRaygenShaderBindingTable, pMissShaderBindingTable, pHitShaderBindingTable, pCallableShaderBindingTable, indirectDeviceAddress);
  if (instrument_all_commands_) {
    WriteEndCommandExecutionMarker(tracker_.GetCommands().back().id);
  }
}

void CommandBuffer::PreCmdSetRayTracingPipelineStackSizeKHR(VkCommandBuffer commandBuffer, uint32_t pipelineStackSize)
{
  tracker_.TrackPreCmdSetRayTracingPipelineStackSizeKHR(commandBuffer, pipelineStackSize);
  if (instrument_all_commands_) {
    WriteBeginCommandExecutionMarker(tracker_.GetCommands().back().id);
  }
}

void CommandBuffer::PostCmdSetRayTracingPipelineStackSizeKHR(VkCommandBuffer commandBuffer, uint32_t pipelineStackSize)
{
  tracker_.TrackPostCmdSetRayTracingPipelineStackSizeKHR(commandBuffer, pipelineStackSize);
  if (instrument_all_commands_) {
    WriteEndCommandExecutionMarker(tracker_.GetCommands().back().id);
  }
}

void CommandBuffer::PreCmdSetLineStippleEXT(VkCommandBuffer commandBuffer, uint32_t lineStippleFactor, uint16_t lineStipplePattern)
{
  tracker_.TrackPreCmdSetLineStippleEXT(commandBuffer, lineStippleFactor, lineStipplePattern);
  if (instrument_all_commands_) {
    WriteBeginCommandExecutionMarker(tracker_.GetCommands().back().id);
  }
}

void CommandBuffer::PostCmdSetLineStippleEXT(VkCommandBuffer commandBuffer, uint32_t lineStippleFactor, uint16_t lineStipplePattern)
{
  tracker_.TrackPostCmdSetLineStippleEXT(commandBuffer, lineStippleFactor, lineStipplePattern);
  if (instrument_all_commands_) {
    WriteEndCommandExecutionMarker(tracker_.GetCommands().back().id);
  }
}

void CommandBuffer::PreCmdBuildAccelerationStructuresKHR(VkCommandBuffer commandBuffer, uint32_t infoCount, const VkAccelerationStructureBuildGeometryInfoKHR* pInfos, const VkAccelerationStructureBuildRangeInfoKHR** ppBuildRangeInfos)
{
  tracker_.TrackPreCmdBuildAccelerationStructuresKHR(commandBuffer, infoCount, pInfos, ppBuildRangeInfos);
  if (instrument_all_commands_) {
    WriteBeginCommandExecutionMarker(tracker_.GetCommands().back().id);
  }
}

void CommandBuffer::PostCmdBuildAccelerationStructuresKHR(VkCommandBuffer commandBuffer, uint32_t infoCount, const VkAccelerationStructureBuildGeometryInfoKHR* pInfos, const VkAccelerationStructureBuildRangeInfoKHR** ppBuildRangeInfos)
{
  tracker_.TrackPostCmdBuildAccelerationStructuresKHR(commandBuffer, infoCount, pInfos, ppBuildRangeInfos);
  if (instrument_all_commands_) {
    WriteEndCommandExecutionMarker(tracker_.GetCommands().back().id);
  }
}

void CommandBuffer::PreCmdBuildAccelerationStructuresIndirectKHR(VkCommandBuffer commandBuffer, uint32_t infoCount, const VkAccelerationStructureBuildGeometryInfoKHR* pInfos, const VkDeviceAddress* pIndirectDeviceAddresses, const uint32_t* pIndirectStrides, const uint32_t** ppMaxPrimitiveCounts)
{
  tracker_.TrackPreCmdBuildAccelerationStructuresIndirectKHR(commandBuffer, infoCount, pInfos, pIndirectDeviceAddresses, pIndirectStrides, ppMaxPrimitiveCounts);
  if (instrument_all_commands_) {
    WriteBeginCommandExecutionMarker(tracker_.GetCommands().back().id);
  }
}

void CommandBuffer::PostCmdBuildAccelerationStructuresIndirectKHR(VkCommandBuffer commandBuffer, uint32_t infoCount, const VkAccelerationStructureBuildGeometryInfoKHR* pInfos, const VkDeviceAddress* pIndirectDeviceAddresses, const uint32_t* pIndirectStrides, const uint32_t** ppMaxPrimitiveCounts)
{
  tracker_.TrackPostCmdBuildAccelerationStructuresIndirectKHR(commandBuffer, infoCount, pInfos, pIndirectDeviceAddresses, pIndirectStrides, ppMaxPrimitiveCounts);
  if (instrument_all_commands_) {
    WriteEndCommandExecutionMarker(tracker_.GetCommands().back().id);
  }
}

void CommandBuffer::PreCmdSetCullModeEXT(VkCommandBuffer commandBuffer, VkCullModeFlags cullMode)
{
  tracker_.TrackPreCmdSetCullModeEXT(commandBuffer, cullMode);
  if (instrument_all_commands_) {
    WriteBeginCommandExecutionMarker(tracker_.GetCommands().back().id);
  }
}

void CommandBuffer::PostCmdSetCullModeEXT(VkCommandBuffer commandBuffer, VkCullModeFlags cullMode)
{
  tracker_.TrackPostCmdSetCullModeEXT(commandBuffer, cullMode);
  if (instrument_all_commands_) {
    WriteEndCommandExecutionMarker(tracker_.GetCommands().back().id);
  }
}

void CommandBuffer::PreCmdSetFrontFaceEXT(VkCommandBuffer commandBuffer, VkFrontFace frontFace)
{
  tracker_.TrackPreCmdSetFrontFaceEXT(commandBuffer, frontFace);
  if (instrument_all_commands_) {
    WriteBeginCommandExecutionMarker(tracker_.GetCommands().back().id);
  }
}

void CommandBuffer::PostCmdSetFrontFaceEXT(VkCommandBuffer commandBuffer, VkFrontFace frontFace)
{
  tracker_.TrackPostCmdSetFrontFaceEXT(commandBuffer, frontFace);
  if (instrument_all_commands_) {
    WriteEndCommandExecutionMarker(tracker_.GetCommands().back().id);
  }
}

void CommandBuffer::PreCmdSetPrimitiveTopologyEXT(VkCommandBuffer commandBuffer, VkPrimitiveTopology primitiveTopology)
{
  tracker_.TrackPreCmdSetPrimitiveTopologyEXT(commandBuffer, primitiveTopology);
  if (instrument_all_commands_) {
    WriteBeginCommandExecutionMarker(tracker_.GetCommands().back().id);
  }
}

void CommandBuffer::PostCmdSetPrimitiveTopologyEXT(VkCommandBuffer commandBuffer, VkPrimitiveTopology primitiveTopology)
{
  tracker_.TrackPostCmdSetPrimitiveTopologyEXT(commandBuffer, primitiveTopology);
  if (instrument_all_commands_) {
    WriteEndCommandExecutionMarker(tracker_.GetCommands().back().id);
  }
}

void CommandBuffer::PreCmdSetViewportWithCountEXT(VkCommandBuffer commandBuffer, uint32_t viewportCount, const VkViewport* pViewports)
{
  tracker_.TrackPreCmdSetViewportWithCountEXT(commandBuffer, viewportCount, pViewports);
  if (instrument_all_commands_) {
    WriteBeginCommandExecutionMarker(tracker_.GetCommands().back().id);
  }
}

void CommandBuffer::PostCmdSetViewportWithCountEXT(VkCommandBuffer commandBuffer, uint32_t viewportCount, const VkViewport* pViewports)
{
  tracker_.TrackPostCmdSetViewportWithCountEXT(commandBuffer, viewportCount, pViewports);
  if (instrument_all_commands_) {
    WriteEndCommandExecutionMarker(tracker_.GetCommands().back().id);
  }
}

void CommandBuffer::PreCmdSetScissorWithCountEXT(VkCommandBuffer commandBuffer, uint32_t scissorCount, const VkRect2D* pScissors)
{
  tracker_.TrackPreCmdSetScissorWithCountEXT(commandBuffer, scissorCount, pScissors);
  if (instrument_all_commands_) {
    WriteBeginCommandExecutionMarker(tracker_.GetCommands().back().id);
  }
}

void CommandBuffer::PostCmdSetScissorWithCountEXT(VkCommandBuffer commandBuffer, uint32_t scissorCount, const VkRect2D* pScissors)
{
  tracker_.TrackPostCmdSetScissorWithCountEXT(commandBuffer, scissorCount, pScissors);
  if (instrument_all_commands_) {
    WriteEndCommandExecutionMarker(tracker_.GetCommands().back().id);
  }
}

void CommandBuffer::PreCmdBindVertexBuffers2EXT(VkCommandBuffer commandBuffer, uint32_t firstBinding, uint32_t bindingCount, const VkBuffer* pBuffers, const VkDeviceSize* pOffsets, const VkDeviceSize* pSizes, const VkDeviceSize* pStrides)
{
  tracker_.TrackPreCmdBindVertexBuffers2EXT(commandBuffer, firstBinding, bindingCount, pBuffers, pOffsets, pSizes, pStrides);
  if (instrument_all_commands_) {
    WriteBeginCommandExecutionMarker(tracker_.GetCommands().back().id);
  }
}

void CommandBuffer::PostCmdBindVertexBuffers2EXT(VkCommandBuffer commandBuffer, uint32_t firstBinding, uint32_t bindingCount, const VkBuffer* pBuffers, const VkDeviceSize* pOffsets, const VkDeviceSize* pSizes, const VkDeviceSize* pStrides)
{
  tracker_.TrackPostCmdBindVertexBuffers2EXT(commandBuffer, firstBinding, bindingCount, pBuffers, pOffsets, pSizes, pStrides);
  if (instrument_all_commands_) {
    WriteEndCommandExecutionMarker(tracker_.GetCommands().back().id);
  }
}

void CommandBuffer::PreCmdSetDepthTestEnableEXT(VkCommandBuffer commandBuffer, VkBool32 depthTestEnable)
{
  tracker_.TrackPreCmdSetDepthTestEnableEXT(commandBuffer, depthTestEnable);
  if (instrument_all_commands_) {
    WriteBeginCommandExecutionMarker(tracker_.GetCommands().back().id);
  }
}

void CommandBuffer::PostCmdSetDepthTestEnableEXT(VkCommandBuffer commandBuffer, VkBool32 depthTestEnable)
{
  tracker_.TrackPostCmdSetDepthTestEnableEXT(commandBuffer, depthTestEnable);
  if (instrument_all_commands_) {
    WriteEndCommandExecutionMarker(tracker_.GetCommands().back().id);
  }
}

void CommandBuffer::PreCmdSetDepthWriteEnableEXT(VkCommandBuffer commandBuffer, VkBool32 depthWriteEnable)
{
  tracker_.TrackPreCmdSetDepthWriteEnableEXT(commandBuffer, depthWriteEnable);
  if (instrument_all_commands_) {
    WriteBeginCommandExecutionMarker(tracker_.GetCommands().back().id);
  }
}

void CommandBuffer::PostCmdSetDepthWriteEnableEXT(VkCommandBuffer commandBuffer, VkBool32 depthWriteEnable)
{
  tracker_.TrackPostCmdSetDepthWriteEnableEXT(commandBuffer, depthWriteEnable);
  if (instrument_all_commands_) {
    WriteEndCommandExecutionMarker(tracker_.GetCommands().back().id);
  }
}

void CommandBuffer::PreCmdSetDepthCompareOpEXT(VkCommandBuffer commandBuffer, VkCompareOp depthCompareOp)
{
  tracker_.TrackPreCmdSetDepthCompareOpEXT(commandBuffer, depthCompareOp);
  if (instrument_all_commands_) {
    WriteBeginCommandExecutionMarker(tracker_.GetCommands().back().id);
  }
}

void CommandBuffer::PostCmdSetDepthCompareOpEXT(VkCommandBuffer commandBuffer, VkCompareOp depthCompareOp)
{
  tracker_.TrackPostCmdSetDepthCompareOpEXT(commandBuffer, depthCompareOp);
  if (instrument_all_commands_) {
    WriteEndCommandExecutionMarker(tracker_.GetCommands().back().id);
  }
}

void CommandBuffer::PreCmdSetDepthBoundsTestEnableEXT(VkCommandBuffer commandBuffer, VkBool32 depthBoundsTestEnable)
{
  tracker_.TrackPreCmdSetDepthBoundsTestEnableEXT(commandBuffer, depthBoundsTestEnable);
  if (instrument_all_commands_) {
    WriteBeginCommandExecutionMarker(tracker_.GetCommands().back().id);
  }
}

void CommandBuffer::PostCmdSetDepthBoundsTestEnableEXT(VkCommandBuffer commandBuffer, VkBool32 depthBoundsTestEnable)
{
  tracker_.TrackPostCmdSetDepthBoundsTestEnableEXT(commandBuffer, depthBoundsTestEnable);
  if (instrument_all_commands_) {
    WriteEndCommandExecutionMarker(tracker_.GetCommands().back().id);
  }
}

void CommandBuffer::PreCmdSetStencilTestEnableEXT(VkCommandBuffer commandBuffer, VkBool32 stencilTestEnable)
{
  tracker_.TrackPreCmdSetStencilTestEnableEXT(commandBuffer, stencilTestEnable);
  if (instrument_all_commands_) {
    WriteBeginCommandExecutionMarker(tracker_.GetCommands().back().id);
  }
}

void CommandBuffer::PostCmdSetStencilTestEnableEXT(VkCommandBuffer commandBuffer, VkBool32 stencilTestEnable)
{
  tracker_.TrackPostCmdSetStencilTestEnableEXT(commandBuffer, stencilTestEnable);
  if (instrument_all_commands_) {
    WriteEndCommandExecutionMarker(tracker_.GetCommands().back().id);
  }
}

void CommandBuffer::PreCmdSetStencilOpEXT(VkCommandBuffer commandBuffer, VkStencilFaceFlags faceMask, VkStencilOp failOp, VkStencilOp passOp, VkStencilOp depthFailOp, VkCompareOp compareOp)
{
  tracker_.TrackPreCmdSetStencilOpEXT(commandBuffer, faceMask, failOp, passOp, depthFailOp, compareOp);
  if (instrument_all_commands_) {
    WriteBeginCommandExecutionMarker(tracker_.GetCommands().back().id);
  }
}

void CommandBuffer::PostCmdSetStencilOpEXT(VkCommandBuffer commandBuffer, VkStencilFaceFlags faceMask, VkStencilOp failOp, VkStencilOp passOp, VkStencilOp depthFailOp, VkCompareOp compareOp)
{
  tracker_.TrackPostCmdSetStencilOpEXT(commandBuffer, faceMask, failOp, passOp, depthFailOp, compareOp);
  if (instrument_all_commands_) {
    WriteEndCommandExecutionMarker(tracker_.GetCommands().back().id);
  }
}

void CommandBuffer::PreCmdSetPatchControlPointsEXT(VkCommandBuffer commandBuffer, uint32_t patchControlPoints)
{
  tracker_.TrackPreCmdSetPatchControlPointsEXT(commandBuffer, patchControlPoints);
  if (instrument_all_commands_) {
    WriteBeginCommandExecutionMarker(tracker_.GetCommands().back().id);
  }
}

void CommandBuffer::PostCmdSetPatchControlPointsEXT(VkCommandBuffer commandBuffer, uint32_t patchControlPoints)
{
  tracker_.TrackPostCmdSetPatchControlPointsEXT(commandBuffer, patchControlPoints);
  if (instrument_all_commands_) {
    WriteEndCommandExecutionMarker(tracker_.GetCommands().back().id);
  }
}

void CommandBuffer::PreCmdSetRasterizerDiscardEnableEXT(VkCommandBuffer commandBuffer, VkBool32 rasterizerDiscardEnable)
{
  tracker_.TrackPreCmdSetRasterizerDiscardEnableEXT(commandBuffer, rasterizerDiscardEnable);
  if (instrument_all_commands_) {
    WriteBeginCommandExecutionMarker(tracker_.GetCommands().back().id);
  }
}

void CommandBuffer::PostCmdSetRasterizerDiscardEnableEXT(VkCommandBuffer commandBuffer, VkBool32 rasterizerDiscardEnable)
{
  tracker_.TrackPostCmdSetRasterizerDiscardEnableEXT(commandBuffer, rasterizerDiscardEnable);
  if (instrument_all_commands_) {
    WriteEndCommandExecutionMarker(tracker_.GetCommands().back().id);
  }
}

void CommandBuffer::PreCmdSetDepthBiasEnableEXT(VkCommandBuffer commandBuffer, VkBool32 depthBiasEnable)
{
  tracker_.TrackPreCmdSetDepthBiasEnableEXT(commandBuffer, depthBiasEnable);
  if (instrument_all_commands_) {
    WriteBeginCommandExecutionMarker(tracker_.GetCommands().back().id);
  }
}

void CommandBuffer::PostCmdSetDepthBiasEnableEXT(VkCommandBuffer commandBuffer, VkBool32 depthBiasEnable)
{
  tracker_.TrackPostCmdSetDepthBiasEnableEXT(commandBuffer, depthBiasEnable);
  if (instrument_all_commands_) {
    WriteEndCommandExecutionMarker(tracker_.GetCommands().back().id);
  }
}

void CommandBuffer::PreCmdSetLogicOpEXT(VkCommandBuffer commandBuffer, VkLogicOp logicOp)
{
  tracker_.TrackPreCmdSetLogicOpEXT(commandBuffer, logicOp);
  if (instrument_all_commands_) {
    WriteBeginCommandExecutionMarker(tracker_.GetCommands().back().id);
  }
}

void CommandBuffer::PostCmdSetLogicOpEXT(VkCommandBuffer commandBuffer, VkLogicOp logicOp)
{
  tracker_.TrackPostCmdSetLogicOpEXT(commandBuffer, logicOp);
  if (instrument_all_commands_) {
    WriteEndCommandExecutionMarker(tracker_.GetCommands().back().id);
  }
}

void CommandBuffer::PreCmdSetPrimitiveRestartEnableEXT(VkCommandBuffer commandBuffer, VkBool32 primitiveRestartEnable)
{
  tracker_.TrackPreCmdSetPrimitiveRestartEnableEXT(commandBuffer, primitiveRestartEnable);
  if (instrument_all_commands_) {
    WriteBeginCommandExecutionMarker(tracker_.GetCommands().back().id);
  }
}

void CommandBuffer::PostCmdSetPrimitiveRestartEnableEXT(VkCommandBuffer commandBuffer, VkBool32 primitiveRestartEnable)
{
  tracker_.TrackPostCmdSetPrimitiveRestartEnableEXT(commandBuffer, primitiveRestartEnable);
  if (instrument_all_commands_) {
    WriteEndCommandExecutionMarker(tracker_.GetCommands().back().id);
  }
}

void CommandBuffer::PreCmdCopyBuffer2KHR(VkCommandBuffer commandBuffer, const VkCopyBufferInfo2KHR* pCopyBufferInfo)
{
  tracker_.TrackPreCmdCopyBuffer2KHR(commandBuffer, pCopyBufferInfo);
  if (instrument_all_commands_) {
    WriteBeginCommandExecutionMarker(tracker_.GetCommands().back().id);
  }
}

void CommandBuffer::PostCmdCopyBuffer2KHR(VkCommandBuffer commandBuffer, const VkCopyBufferInfo2KHR* pCopyBufferInfo)
{
  tracker_.TrackPostCmdCopyBuffer2KHR(commandBuffer, pCopyBufferInfo);
  if (instrument_all_commands_) {
    WriteEndCommandExecutionMarker(tracker_.GetCommands().back().id);
  }
}

void CommandBuffer::PreCmdCopyImage2KHR(VkCommandBuffer commandBuffer, const VkCopyImageInfo2KHR* pCopyImageInfo)
{
  tracker_.TrackPreCmdCopyImage2KHR(commandBuffer, pCopyImageInfo);
  if (instrument_all_commands_) {
    WriteBeginCommandExecutionMarker(tracker_.GetCommands().back().id);
  }
}

void CommandBuffer::PostCmdCopyImage2KHR(VkCommandBuffer commandBuffer, const VkCopyImageInfo2KHR* pCopyImageInfo)
{
  tracker_.TrackPostCmdCopyImage2KHR(commandBuffer, pCopyImageInfo);
  if (instrument_all_commands_) {
    WriteEndCommandExecutionMarker(tracker_.GetCommands().back().id);
  }
}

void CommandBuffer::PreCmdBlitImage2KHR(VkCommandBuffer commandBuffer, const VkBlitImageInfo2KHR* pBlitImageInfo)
{
  tracker_.TrackPreCmdBlitImage2KHR(commandBuffer, pBlitImageInfo);
  if (instrument_all_commands_) {
    WriteBeginCommandExecutionMarker(tracker_.GetCommands().back().id);
  }
}

void CommandBuffer::PostCmdBlitImage2KHR(VkCommandBuffer commandBuffer, const VkBlitImageInfo2KHR* pBlitImageInfo)
{
  tracker_.TrackPostCmdBlitImage2KHR(commandBuffer, pBlitImageInfo);
  if (instrument_all_commands_) {
    WriteEndCommandExecutionMarker(tracker_.GetCommands().back().id);
  }
}

void CommandBuffer::PreCmdCopyBufferToImage2KHR(VkCommandBuffer commandBuffer, const VkCopyBufferToImageInfo2KHR* pCopyBufferToImageInfo)
{
  tracker_.TrackPreCmdCopyBufferToImage2KHR(commandBuffer, pCopyBufferToImageInfo);
  if (instrument_all_commands_) {
    WriteBeginCommandExecutionMarker(tracker_.GetCommands().back().id);
  }
}

void CommandBuffer::PostCmdCopyBufferToImage2KHR(VkCommandBuffer commandBuffer, const VkCopyBufferToImageInfo2KHR* pCopyBufferToImageInfo)
{
  tracker_.TrackPostCmdCopyBufferToImage2KHR(commandBuffer, pCopyBufferToImageInfo);
  if (instrument_all_commands_) {
    WriteEndCommandExecutionMarker(tracker_.GetCommands().back().id);
  }
}

void CommandBuffer::PreCmdCopyImageToBuffer2KHR(VkCommandBuffer commandBuffer, const VkCopyImageToBufferInfo2KHR* pCopyImageToBufferInfo)
{
  tracker_.TrackPreCmdCopyImageToBuffer2KHR(commandBuffer, pCopyImageToBufferInfo);
  if (instrument_all_commands_) {
    WriteBeginCommandExecutionMarker(tracker_.GetCommands().back().id);
  }
}

void CommandBuffer::PostCmdCopyImageToBuffer2KHR(VkCommandBuffer commandBuffer, const VkCopyImageToBufferInfo2KHR* pCopyImageToBufferInfo)
{
  tracker_.TrackPostCmdCopyImageToBuffer2KHR(commandBuffer, pCopyImageToBufferInfo);
  if (instrument_all_commands_) {
    WriteEndCommandExecutionMarker(tracker_.GetCommands().back().id);
  }
}

void CommandBuffer::PreCmdResolveImage2KHR(VkCommandBuffer commandBuffer, const VkResolveImageInfo2KHR* pResolveImageInfo)
{
  tracker_.TrackPreCmdResolveImage2KHR(commandBuffer, pResolveImageInfo);
  if (instrument_all_commands_) {
    WriteBeginCommandExecutionMarker(tracker_.GetCommands().back().id);
  }
}

void CommandBuffer::PostCmdResolveImage2KHR(VkCommandBuffer commandBuffer, const VkResolveImageInfo2KHR* pResolveImageInfo)
{
  tracker_.TrackPostCmdResolveImage2KHR(commandBuffer, pResolveImageInfo);
  if (instrument_all_commands_) {
    WriteEndCommandExecutionMarker(tracker_.GetCommands().back().id);
  }
}

void CommandBuffer::PreCmdSetFragmentShadingRateKHR(VkCommandBuffer commandBuffer, const VkExtent2D* pFragmentSize, const VkFragmentShadingRateCombinerOpKHR combinerOps[2])
{
  tracker_.TrackPreCmdSetFragmentShadingRateKHR(commandBuffer, pFragmentSize, combinerOps);
  if (instrument_all_commands_) {
    WriteBeginCommandExecutionMarker(tracker_.GetCommands().back().id);
  }
}

void CommandBuffer::PostCmdSetFragmentShadingRateKHR(VkCommandBuffer commandBuffer, const VkExtent2D* pFragmentSize, const VkFragmentShadingRateCombinerOpKHR combinerOps[2])
{
  tracker_.TrackPostCmdSetFragmentShadingRateKHR(commandBuffer, pFragmentSize, combinerOps);
  if (instrument_all_commands_) {
    WriteEndCommandExecutionMarker(tracker_.GetCommands().back().id);
  }
}

void CommandBuffer::PreCmdSetVertexInputEXT(VkCommandBuffer commandBuffer, uint32_t vertexBindingDescriptionCount, const VkVertexInputBindingDescription2EXT* pVertexBindingDescriptions, uint32_t vertexAttributeDescriptionCount, const VkVertexInputAttributeDescription2EXT* pVertexAttributeDescriptions)
{
  tracker_.TrackPreCmdSetVertexInputEXT(commandBuffer, vertexBindingDescriptionCount, pVertexBindingDescriptions, vertexAttributeDescriptionCount, pVertexAttributeDescriptions);
  if (instrument_all_commands_) {
    WriteBeginCommandExecutionMarker(tracker_.GetCommands().back().id);
  }
}

void CommandBuffer::PostCmdSetVertexInputEXT(VkCommandBuffer commandBuffer, uint32_t vertexBindingDescriptionCount, const VkVertexInputBindingDescription2EXT* pVertexBindingDescriptions, uint32_t vertexAttributeDescriptionCount, const VkVertexInputAttributeDescription2EXT* pVertexAttributeDescriptions)
{
  tracker_.TrackPostCmdSetVertexInputEXT(commandBuffer, vertexBindingDescriptionCount, pVertexBindingDescriptions, vertexAttributeDescriptionCount, pVertexAttributeDescriptions);
  if (instrument_all_commands_) {
    WriteEndCommandExecutionMarker(tracker_.GetCommands().back().id);
  }
}

void CommandBuffer::PreCmdSetColorWriteEnableEXT(VkCommandBuffer commandBuffer, uint32_t attachmentCount, const VkBool32* pColorWriteEnables)
{
  tracker_.TrackPreCmdSetColorWriteEnableEXT(commandBuffer, attachmentCount, pColorWriteEnables);
  if (instrument_all_commands_) {
    WriteBeginCommandExecutionMarker(tracker_.GetCommands().back().id);
  }
}

void CommandBuffer::PostCmdSetColorWriteEnableEXT(VkCommandBuffer commandBuffer, uint32_t attachmentCount, const VkBool32* pColorWriteEnables)
{
  tracker_.TrackPostCmdSetColorWriteEnableEXT(commandBuffer, attachmentCount, pColorWriteEnables);
  if (instrument_all_commands_) {
    WriteEndCommandExecutionMarker(tracker_.GetCommands().back().id);
  }
}

void CommandBuffer::PreCmdSetEvent2KHR(VkCommandBuffer commandBuffer, VkEvent event, const VkDependencyInfoKHR* pDependencyInfo)
{
  tracker_.TrackPreCmdSetEvent2KHR(commandBuffer, event, pDependencyInfo);
  if (instrument_all_commands_) {
    WriteBeginCommandExecutionMarker(tracker_.GetCommands().back().id);
  }
}

void CommandBuffer::PostCmdSetEvent2KHR(VkCommandBuffer commandBuffer, VkEvent event, const VkDependencyInfoKHR* pDependencyInfo)
{
  tracker_.TrackPostCmdSetEvent2KHR(commandBuffer, event, pDependencyInfo);
  if (instrument_all_commands_) {
    WriteEndCommandExecutionMarker(tracker_.GetCommands().back().id);
  }
}

void CommandBuffer::PreCmdResetEvent2KHR(VkCommandBuffer commandBuffer, VkEvent event, VkPipelineStageFlags2KHR stageMask)
{
  tracker_.TrackPreCmdResetEvent2KHR(commandBuffer, event, stageMask);
  if (instrument_all_commands_) {
    WriteBeginCommandExecutionMarker(tracker_.GetCommands().back().id);
  }
}

void CommandBuffer::PostCmdResetEvent2KHR(VkCommandBuffer commandBuffer, VkEvent event, VkPipelineStageFlags2KHR stageMask)
{
  tracker_.TrackPostCmdResetEvent2KHR(commandBuffer, event, stageMask);
  if (instrument_all_commands_) {
    WriteEndCommandExecutionMarker(tracker_.GetCommands().back().id);
  }
}

void CommandBuffer::PreCmdWaitEvents2KHR(VkCommandBuffer commandBuffer, uint32_t eventCount, const VkEvent* pEvents, const VkDependencyInfoKHR* pDependencyInfos)
{
  tracker_.TrackPreCmdWaitEvents2KHR(commandBuffer, eventCount, pEvents, pDependencyInfos);
  if (instrument_all_commands_) {
    WriteBeginCommandExecutionMarker(tracker_.GetCommands().back().id);
  }
}

void CommandBuffer::PostCmdWaitEvents2KHR(VkCommandBuffer commandBuffer, uint32_t eventCount, const VkEvent* pEvents, const VkDependencyInfoKHR* pDependencyInfos)
{
  tracker_.TrackPostCmdWaitEvents2KHR(commandBuffer, eventCount, pEvents, pDependencyInfos);
  if (instrument_all_commands_) {
    WriteEndCommandExecutionMarker(tracker_.GetCommands().back().id);
  }
}

void CommandBuffer::PreCmdPipelineBarrier2KHR(VkCommandBuffer commandBuffer, const VkDependencyInfoKHR* pDependencyInfo)
{
  tracker_.TrackPreCmdPipelineBarrier2KHR(commandBuffer, pDependencyInfo);
  if (instrument_all_commands_) {
    WriteBeginCommandExecutionMarker(tracker_.GetCommands().back().id);
  }
}

void CommandBuffer::PostCmdPipelineBarrier2KHR(VkCommandBuffer commandBuffer, const VkDependencyInfoKHR* pDependencyInfo)
{
  tracker_.TrackPostCmdPipelineBarrier2KHR(commandBuffer, pDependencyInfo);
  if (instrument_all_commands_) {
    WriteEndCommandExecutionMarker(tracker_.GetCommands().back().id);
  }
}

void CommandBuffer::PreCmdWriteTimestamp2KHR(VkCommandBuffer commandBuffer, VkPipelineStageFlags2KHR stage, VkQueryPool queryPool, uint32_t query)
{
  tracker_.TrackPreCmdWriteTimestamp2KHR(commandBuffer, stage, queryPool, query);
  if (instrument_all_commands_) {
    WriteBeginCommandExecutionMarker(tracker_.GetCommands().back().id);
  }
}

void CommandBuffer::PostCmdWriteTimestamp2KHR(VkCommandBuffer commandBuffer, VkPipelineStageFlags2KHR stage, VkQueryPool queryPool, uint32_t query)
{
  tracker_.TrackPostCmdWriteTimestamp2KHR(commandBuffer, stage, queryPool, query);
  if (instrument_all_commands_) {
    WriteEndCommandExecutionMarker(tracker_.GetCommands().back().id);
  }
}

void CommandBuffer::PreCmdWriteBufferMarker2AMD(VkCommandBuffer commandBuffer, VkPipelineStageFlags2KHR stage, VkBuffer dstBuffer, VkDeviceSize dstOffset, uint32_t marker)
{
  tracker_.TrackPreCmdWriteBufferMarker2AMD(commandBuffer, stage, dstBuffer, dstOffset, marker);
  if (instrument_all_commands_) {
    WriteBeginCommandExecutionMarker(tracker_.GetCommands().back().id);
  }
}

void CommandBuffer::PostCmdWriteBufferMarker2AMD(VkCommandBuffer commandBuffer, VkPipelineStageFlags2KHR stage, VkBuffer dstBuffer, VkDeviceSize dstOffset, uint32_t marker)
{
  tracker_.TrackPostCmdWriteBufferMarker2AMD(commandBuffer, stage, dstBuffer, dstOffset, marker);
  if (instrument_all_commands_) {
    WriteEndCommandExecutionMarker(tracker_.GetCommands().back().id);
  }
}

void CommandBuffer::PreCmdBindPipeline(VkCommandBuffer commandBuffer, VkPipelineBindPoint pipelineBindPoint, VkPipeline pipeline)
{
  tracker_.TrackPreCmdBindPipeline(commandBuffer, pipelineBindPoint, pipeline);
  WriteBeginCommandExecutionMarker(tracker_.GetCommands().back().id);
}

void CommandBuffer::PostCmdBindPipeline(VkCommandBuffer commandBuffer, VkPipelineBindPoint pipelineBindPoint, VkPipeline pipeline)
{
  tracker_.TrackPostCmdBindPipeline(commandBuffer, pipelineBindPoint, pipeline);
  WriteEndCommandExecutionMarker(tracker_.GetCommands().back().id);
}

void CommandBuffer::PreCmdSetViewport(VkCommandBuffer commandBuffer, uint32_t firstViewport, uint32_t viewportCount, const VkViewport* pViewports)
{
  tracker_.TrackPreCmdSetViewport(commandBuffer, firstViewport, viewportCount, pViewports);
  if (instrument_all_commands_) {
    WriteBeginCommandExecutionMarker(tracker_.GetCommands().back().id);
  }
}

void CommandBuffer::PostCmdSetViewport(VkCommandBuffer commandBuffer, uint32_t firstViewport, uint32_t viewportCount, const VkViewport* pViewports)
{
  tracker_.TrackPostCmdSetViewport(commandBuffer, firstViewport, viewportCount, pViewports);
  if (instrument_all_commands_) {
    WriteEndCommandExecutionMarker(tracker_.GetCommands().back().id);
  }
}

void CommandBuffer::PreCmdSetScissor(VkCommandBuffer commandBuffer, uint32_t firstScissor, uint32_t scissorCount, const VkRect2D* pScissors)
{
  tracker_.TrackPreCmdSetScissor(commandBuffer, firstScissor, scissorCount, pScissors);
  if (instrument_all_commands_) {
    WriteBeginCommandExecutionMarker(tracker_.GetCommands().back().id);
  }
}

void CommandBuffer::PostCmdSetScissor(VkCommandBuffer commandBuffer, uint32_t firstScissor, uint32_t scissorCount, const VkRect2D* pScissors)
{
  tracker_.TrackPostCmdSetScissor(commandBuffer, firstScissor, scissorCount, pScissors);
  if (instrument_all_commands_) {
    WriteEndCommandExecutionMarker(tracker_.GetCommands().back().id);
  }
}

void CommandBuffer::PreCmdSetLineWidth(VkCommandBuffer commandBuffer, float lineWidth)
{
  tracker_.TrackPreCmdSetLineWidth(commandBuffer, lineWidth);
  if (instrument_all_commands_) {
    WriteBeginCommandExecutionMarker(tracker_.GetCommands().back().id);
  }
}

void CommandBuffer::PostCmdSetLineWidth(VkCommandBuffer commandBuffer, float lineWidth)
{
  tracker_.TrackPostCmdSetLineWidth(commandBuffer, lineWidth);
  if (instrument_all_commands_) {
    WriteEndCommandExecutionMarker(tracker_.GetCommands().back().id);
  }
}

void CommandBuffer::PreCmdSetDepthBias(VkCommandBuffer commandBuffer, float depthBiasConstantFactor, float depthBiasClamp, float depthBiasSlopeFactor)
{
  tracker_.TrackPreCmdSetDepthBias(commandBuffer, depthBiasConstantFactor, depthBiasClamp, depthBiasSlopeFactor);
  if (instrument_all_commands_) {
    WriteBeginCommandExecutionMarker(tracker_.GetCommands().back().id);
  }
}

void CommandBuffer::PostCmdSetDepthBias(VkCommandBuffer commandBuffer, float depthBiasConstantFactor, float depthBiasClamp, float depthBiasSlopeFactor)
{
  tracker_.TrackPostCmdSetDepthBias(commandBuffer, depthBiasConstantFactor, depthBiasClamp, depthBiasSlopeFactor);
  if (instrument_all_commands_) {
    WriteEndCommandExecutionMarker(tracker_.GetCommands().back().id);
  }
}

void CommandBuffer::PreCmdSetBlendConstants(VkCommandBuffer commandBuffer, const float blendConstants[4])
{
  tracker_.TrackPreCmdSetBlendConstants(commandBuffer, blendConstants);
  if (instrument_all_commands_) {
    WriteBeginCommandExecutionMarker(tracker_.GetCommands().back().id);
  }
}

void CommandBuffer::PostCmdSetBlendConstants(VkCommandBuffer commandBuffer, const float blendConstants[4])
{
  tracker_.TrackPostCmdSetBlendConstants(commandBuffer, blendConstants);
  if (instrument_all_commands_) {
    WriteEndCommandExecutionMarker(tracker_.GetCommands().back().id);
  }
}

void CommandBuffer::PreCmdSetDepthBounds(VkCommandBuffer commandBuffer, float minDepthBounds, float maxDepthBounds)
{
  tracker_.TrackPreCmdSetDepthBounds(commandBuffer, minDepthBounds, maxDepthBounds);
  if (instrument_all_commands_) {
    WriteBeginCommandExecutionMarker(tracker_.GetCommands().back().id);
  }
}

void CommandBuffer::PostCmdSetDepthBounds(VkCommandBuffer commandBuffer, float minDepthBounds, float maxDepthBounds)
{
  tracker_.TrackPostCmdSetDepthBounds(commandBuffer, minDepthBounds, maxDepthBounds);
  if (instrument_all_commands_) {
    WriteEndCommandExecutionMarker(tracker_.GetCommands().back().id);
  }
}

void CommandBuffer::PreCmdSetStencilCompareMask(VkCommandBuffer commandBuffer, VkStencilFaceFlags faceMask, uint32_t compareMask)
{
  tracker_.TrackPreCmdSetStencilCompareMask(commandBuffer, faceMask, compareMask);
  if (instrument_all_commands_) {
    WriteBeginCommandExecutionMarker(tracker_.GetCommands().back().id);
  }
}

void CommandBuffer::PostCmdSetStencilCompareMask(VkCommandBuffer commandBuffer, VkStencilFaceFlags faceMask, uint32_t compareMask)
{
  tracker_.TrackPostCmdSetStencilCompareMask(commandBuffer, faceMask, compareMask);
  if (instrument_all_commands_) {
    WriteEndCommandExecutionMarker(tracker_.GetCommands().back().id);
  }
}

void CommandBuffer::PreCmdSetStencilWriteMask(VkCommandBuffer commandBuffer, VkStencilFaceFlags faceMask, uint32_t writeMask)
{
  tracker_.TrackPreCmdSetStencilWriteMask(commandBuffer, faceMask, writeMask);
  if (instrument_all_commands_) {
    WriteBeginCommandExecutionMarker(tracker_.GetCommands().back().id);
  }
}

void CommandBuffer::PostCmdSetStencilWriteMask(VkCommandBuffer commandBuffer, VkStencilFaceFlags faceMask, uint32_t writeMask)
{
  tracker_.TrackPostCmdSetStencilWriteMask(commandBuffer, faceMask, writeMask);
  if (instrument_all_commands_) {
    WriteEndCommandExecutionMarker(tracker_.GetCommands().back().id);
  }
}

void CommandBuffer::PreCmdSetStencilReference(VkCommandBuffer commandBuffer, VkStencilFaceFlags faceMask, uint32_t reference)
{
  tracker_.TrackPreCmdSetStencilReference(commandBuffer, faceMask, reference);
  if (instrument_all_commands_) {
    WriteBeginCommandExecutionMarker(tracker_.GetCommands().back().id);
  }
}

void CommandBuffer::PostCmdSetStencilReference(VkCommandBuffer commandBuffer, VkStencilFaceFlags faceMask, uint32_t reference)
{
  tracker_.TrackPostCmdSetStencilReference(commandBuffer, faceMask, reference);
  if (instrument_all_commands_) {
    WriteEndCommandExecutionMarker(tracker_.GetCommands().back().id);
  }
}

void CommandBuffer::PreCmdBindDescriptorSets(VkCommandBuffer commandBuffer, VkPipelineBindPoint pipelineBindPoint, VkPipelineLayout layout, uint32_t firstSet, uint32_t descriptorSetCount, const VkDescriptorSet* pDescriptorSets, uint32_t dynamicOffsetCount, const uint32_t* pDynamicOffsets)
{
  tracker_.TrackPreCmdBindDescriptorSets(commandBuffer, pipelineBindPoint, layout, firstSet, descriptorSetCount, pDescriptorSets, dynamicOffsetCount, pDynamicOffsets);
  if (instrument_all_commands_) {
    WriteBeginCommandExecutionMarker(tracker_.GetCommands().back().id);
  }
}

void CommandBuffer::PostCmdBindDescriptorSets(VkCommandBuffer commandBuffer, VkPipelineBindPoint pipelineBindPoint, VkPipelineLayout layout, uint32_t firstSet, uint32_t descriptorSetCount, const VkDescriptorSet* pDescriptorSets, uint32_t dynamicOffsetCount, const uint32_t* pDynamicOffsets)
{
  tracker_.TrackPostCmdBindDescriptorSets(commandBuffer, pipelineBindPoint, layout, firstSet, descriptorSetCount, pDescriptorSets, dynamicOffsetCount, pDynamicOffsets);
  if (instrument_all_commands_) {
    WriteEndCommandExecutionMarker(tracker_.GetCommands().back().id);
  }
}

void CommandBuffer::PreCmdBindIndexBuffer(VkCommandBuffer commandBuffer, VkBuffer buffer, VkDeviceSize offset, VkIndexType indexType)
{
  tracker_.TrackPreCmdBindIndexBuffer(commandBuffer, buffer, offset, indexType);
  if (instrument_all_commands_) {
    WriteBeginCommandExecutionMarker(tracker_.GetCommands().back().id);
  }
}

void CommandBuffer::PostCmdBindIndexBuffer(VkCommandBuffer commandBuffer, VkBuffer buffer, VkDeviceSize offset, VkIndexType indexType)
{
  tracker_.TrackPostCmdBindIndexBuffer(commandBuffer, buffer, offset, indexType);
  if (instrument_all_commands_) {
    WriteEndCommandExecutionMarker(tracker_.GetCommands().back().id);
  }
}

void CommandBuffer::PreCmdBindVertexBuffers(VkCommandBuffer commandBuffer, uint32_t firstBinding, uint32_t bindingCount, const VkBuffer* pBuffers, const VkDeviceSize* pOffsets)
{
  tracker_.TrackPreCmdBindVertexBuffers(commandBuffer, firstBinding, bindingCount, pBuffers, pOffsets);
  if (instrument_all_commands_) {
    WriteBeginCommandExecutionMarker(tracker_.GetCommands().back().id);
  }
}

void CommandBuffer::PostCmdBindVertexBuffers(VkCommandBuffer commandBuffer, uint32_t firstBinding, uint32_t bindingCount, const VkBuffer* pBuffers, const VkDeviceSize* pOffsets)
{
  tracker_.TrackPostCmdBindVertexBuffers(commandBuffer, firstBinding, bindingCount, pBuffers, pOffsets);
  if (instrument_all_commands_) {
    WriteEndCommandExecutionMarker(tracker_.GetCommands().back().id);
  }
}

void CommandBuffer::PreCmdDraw(VkCommandBuffer commandBuffer, uint32_t vertexCount, uint32_t instanceCount, uint32_t firstVertex, uint32_t firstInstance)
{
  tracker_.TrackPreCmdDraw(commandBuffer, vertexCount, instanceCount, firstVertex, firstInstance);
  WriteBeginCommandExecutionMarker(tracker_.GetCommands().back().id);
}

void CommandBuffer::PostCmdDraw(VkCommandBuffer commandBuffer, uint32_t vertexCount, uint32_t instanceCount, uint32_t firstVertex, uint32_t firstInstance)
{
  tracker_.TrackPostCmdDraw(commandBuffer, vertexCount, instanceCount, firstVertex, firstInstance);
  WriteEndCommandExecutionMarker(tracker_.GetCommands().back().id);
}

void CommandBuffer::PreCmdDrawIndexed(VkCommandBuffer commandBuffer, uint32_t indexCount, uint32_t instanceCount, uint32_t firstIndex, int32_t vertexOffset, uint32_t firstInstance)
{
  tracker_.TrackPreCmdDrawIndexed(commandBuffer, indexCount, instanceCount, firstIndex, vertexOffset, firstInstance);
  WriteBeginCommandExecutionMarker(tracker_.GetCommands().back().id);
}

void CommandBuffer::PostCmdDrawIndexed(VkCommandBuffer commandBuffer, uint32_t indexCount, uint32_t instanceCount, uint32_t firstIndex, int32_t vertexOffset, uint32_t firstInstance)
{
  tracker_.TrackPostCmdDrawIndexed(commandBuffer, indexCount, instanceCount, firstIndex, vertexOffset, firstInstance);
  WriteEndCommandExecutionMarker(tracker_.GetCommands().back().id);
}

void CommandBuffer::PreCmdDrawIndirect(VkCommandBuffer commandBuffer, VkBuffer buffer, VkDeviceSize offset, uint32_t drawCount, uint32_t stride)
{
  tracker_.TrackPreCmdDrawIndirect(commandBuffer, buffer, offset, drawCount, stride);
  WriteBeginCommandExecutionMarker(tracker_.GetCommands().back().id);
}

void CommandBuffer::PostCmdDrawIndirect(VkCommandBuffer commandBuffer, VkBuffer buffer, VkDeviceSize offset, uint32_t drawCount, uint32_t stride)
{
  tracker_.TrackPostCmdDrawIndirect(commandBuffer, buffer, offset, drawCount, stride);
  WriteEndCommandExecutionMarker(tracker_.GetCommands().back().id);
}

void CommandBuffer::PreCmdDrawIndexedIndirect(VkCommandBuffer commandBuffer, VkBuffer buffer, VkDeviceSize offset, uint32_t drawCount, uint32_t stride)
{
  tracker_.TrackPreCmdDrawIndexedIndirect(commandBuffer, buffer, offset, drawCount, stride);
  WriteBeginCommandExecutionMarker(tracker_.GetCommands().back().id);
}

void CommandBuffer::PostCmdDrawIndexedIndirect(VkCommandBuffer commandBuffer, VkBuffer buffer, VkDeviceSize offset, uint32_t drawCount, uint32_t stride)
{
  tracker_.TrackPostCmdDrawIndexedIndirect(commandBuffer, buffer, offset, drawCount, stride);
  WriteEndCommandExecutionMarker(tracker_.GetCommands().back().id);
}

void CommandBuffer::PreCmdDispatch(VkCommandBuffer commandBuffer, uint32_t groupCountX, uint32_t groupCountY, uint32_t groupCountZ)
{
  tracker_.TrackPreCmdDispatch(commandBuffer, groupCountX, groupCountY, groupCountZ);
  WriteBeginCommandExecutionMarker(tracker_.GetCommands().back().id);
}

void CommandBuffer::PostCmdDispatch(VkCommandBuffer commandBuffer, uint32_t groupCountX, uint32_t groupCountY, uint32_t groupCountZ)
{
  tracker_.TrackPostCmdDispatch(commandBuffer, groupCountX, groupCountY, groupCountZ);
  WriteEndCommandExecutionMarker(tracker_.GetCommands().back().id);
}

void CommandBuffer::PreCmdDispatchIndirect(VkCommandBuffer commandBuffer, VkBuffer buffer, VkDeviceSize offset)
{
  tracker_.TrackPreCmdDispatchIndirect(commandBuffer, buffer, offset);
  WriteBeginCommandExecutionMarker(tracker_.GetCommands().back().id);
}

void CommandBuffer::PostCmdDispatchIndirect(VkCommandBuffer commandBuffer, VkBuffer buffer, VkDeviceSize offset)
{
  tracker_.TrackPostCmdDispatchIndirect(commandBuffer, buffer, offset);
  WriteEndCommandExecutionMarker(tracker_.GetCommands().back().id);
}

void CommandBuffer::PreCmdCopyBuffer(VkCommandBuffer commandBuffer, VkBuffer srcBuffer, VkBuffer dstBuffer, uint32_t regionCount, const VkBufferCopy* pRegions)
{
  tracker_.TrackPreCmdCopyBuffer(commandBuffer, srcBuffer, dstBuffer, regionCount, pRegions);
  WriteBeginCommandExecutionMarker(tracker_.GetCommands().back().id);
}

void CommandBuffer::PostCmdCopyBuffer(VkCommandBuffer commandBuffer, VkBuffer srcBuffer, VkBuffer dstBuffer, uint32_t regionCount, const VkBufferCopy* pRegions)
{
  tracker_.TrackPostCmdCopyBuffer(commandBuffer, srcBuffer, dstBuffer, regionCount, pRegions);
  WriteEndCommandExecutionMarker(tracker_.GetCommands().back().id);
}

void CommandBuffer::PreCmdCopyImage(VkCommandBuffer commandBuffer, VkImage srcImage, VkImageLayout srcImageLayout, VkImage dstImage, VkImageLayout dstImageLayout, uint32_t regionCount, const VkImageCopy* pRegions)
{
  tracker_.TrackPreCmdCopyImage(commandBuffer, srcImage, srcImageLayout, dstImage, dstImageLayout, regionCount, pRegions);
  WriteBeginCommandExecutionMarker(tracker_.GetCommands().back().id);
}

void CommandBuffer::PostCmdCopyImage(VkCommandBuffer commandBuffer, VkImage srcImage, VkImageLayout srcImageLayout, VkImage dstImage, VkImageLayout dstImageLayout, uint32_t regionCount, const VkImageCopy* pRegions)
{
  tracker_.TrackPostCmdCopyImage(commandBuffer, srcImage, srcImageLayout, dstImage, dstImageLayout, regionCount, pRegions);
  WriteEndCommandExecutionMarker(tracker_.GetCommands().back().id);
}

void CommandBuffer::PreCmdBlitImage(VkCommandBuffer commandBuffer, VkImage srcImage, VkImageLayout srcImageLayout, VkImage dstImage, VkImageLayout dstImageLayout, uint32_t regionCount, const VkImageBlit* pRegions, VkFilter filter)
{
  tracker_.TrackPreCmdBlitImage(commandBuffer, srcImage, srcImageLayout, dstImage, dstImageLayout, regionCount, pRegions, filter);
  if (instrument_all_commands_) {
    WriteBeginCommandExecutionMarker(tracker_.GetCommands().back().id);
  }
}

void CommandBuffer::PostCmdBlitImage(VkCommandBuffer commandBuffer, VkImage srcImage, VkImageLayout srcImageLayout, VkImage dstImage, VkImageLayout dstImageLayout, uint32_t regionCount, const VkImageBlit* pRegions, VkFilter filter)
{
  tracker_.TrackPostCmdBlitImage(commandBuffer, srcImage, srcImageLayout, dstImage, dstImageLayout, regionCount, pRegions, filter);
  if (instrument_all_commands_) {
    WriteEndCommandExecutionMarker(tracker_.GetCommands().back().id);
  }
}

void CommandBuffer::PreCmdCopyBufferToImage(VkCommandBuffer commandBuffer, VkBuffer srcBuffer, VkImage dstImage, VkImageLayout dstImageLayout, uint32_t regionCount, const VkBufferImageCopy* pRegions)
{
  tracker_.TrackPreCmdCopyBufferToImage(commandBuffer, srcBuffer, dstImage, dstImageLayout, regionCount, pRegions);
  WriteBeginCommandExecutionMarker(tracker_.GetCommands().back().id);
}

void CommandBuffer::PostCmdCopyBufferToImage(VkCommandBuffer commandBuffer, VkBuffer srcBuffer, VkImage dstImage, VkImageLayout dstImageLayout, uint32_t regionCount, const VkBufferImageCopy* pRegions)
{
  tracker_.TrackPostCmdCopyBufferToImage(commandBuffer, srcBuffer, dstImage, dstImageLayout, regionCount, pRegions);
  WriteEndCommandExecutionMarker(tracker_.GetCommands().back().id);
}

void CommandBuffer::PreCmdCopyImageToBuffer(VkCommandBuffer commandBuffer, VkImage srcImage, VkImageLayout srcImageLayout, VkBuffer dstBuffer, uint32_t regionCount, const VkBufferImageCopy* pRegions)
{
  tracker_.TrackPreCmdCopyImageToBuffer(commandBuffer, srcImage, srcImageLayout, dstBuffer, regionCount, pRegions);
  WriteBeginCommandExecutionMarker(tracker_.GetCommands().back().id);
}

void CommandBuffer::PostCmdCopyImageToBuffer(VkCommandBuffer commandBuffer, VkImage srcImage, VkImageLayout srcImageLayout, VkBuffer dstBuffer, uint32_t regionCount, const VkBufferImageCopy* pRegions)
{
  tracker_.TrackPostCmdCopyImageToBuffer(commandBuffer, srcImage, srcImageLayout, dstBuffer, regionCount, pRegions);
  WriteEndCommandExecutionMarker(tracker_.GetCommands().back().id);
}

void CommandBuffer::PreCmdUpdateBuffer(VkCommandBuffer commandBuffer, VkBuffer dstBuffer, VkDeviceSize dstOffset, VkDeviceSize dataSize, const void* pData)
{
  tracker_.TrackPreCmdUpdateBuffer(commandBuffer, dstBuffer, dstOffset, dataSize, pData);
  if (instrument_all_commands_) {
    WriteBeginCommandExecutionMarker(tracker_.GetCommands().back().id);
  }
}

void CommandBuffer::PostCmdUpdateBuffer(VkCommandBuffer commandBuffer, VkBuffer dstBuffer, VkDeviceSize dstOffset, VkDeviceSize dataSize, const void* pData)
{
  tracker_.TrackPostCmdUpdateBuffer(commandBuffer, dstBuffer, dstOffset, dataSize, pData);
  if (instrument_all_commands_) {
    WriteEndCommandExecutionMarker(tracker_.GetCommands().back().id);
  }
}

void CommandBuffer::PreCmdFillBuffer(VkCommandBuffer commandBuffer, VkBuffer dstBuffer, VkDeviceSize dstOffset, VkDeviceSize size, uint32_t data)
{
  tracker_.TrackPreCmdFillBuffer(commandBuffer, dstBuffer, dstOffset, size, data);
  if (instrument_all_commands_) {
    WriteBeginCommandExecutionMarker(tracker_.GetCommands().back().id);
  }
}

void CommandBuffer::PostCmdFillBuffer(VkCommandBuffer commandBuffer, VkBuffer dstBuffer, VkDeviceSize dstOffset, VkDeviceSize size, uint32_t data)
{
  tracker_.TrackPostCmdFillBuffer(commandBuffer, dstBuffer, dstOffset, size, data);
  if (instrument_all_commands_) {
    WriteEndCommandExecutionMarker(tracker_.GetCommands().back().id);
  }
}

void CommandBuffer::PreCmdClearColorImage(VkCommandBuffer commandBuffer, VkImage image, VkImageLayout imageLayout, const VkClearColorValue* pColor, uint32_t rangeCount, const VkImageSubresourceRange* pRanges)
{
  tracker_.TrackPreCmdClearColorImage(commandBuffer, image, imageLayout, pColor, rangeCount, pRanges);
  if (instrument_all_commands_) {
    WriteBeginCommandExecutionMarker(tracker_.GetCommands().back().id);
  }
}

void CommandBuffer::PostCmdClearColorImage(VkCommandBuffer commandBuffer, VkImage image, VkImageLayout imageLayout, const VkClearColorValue* pColor, uint32_t rangeCount, const VkImageSubresourceRange* pRanges)
{
  tracker_.TrackPostCmdClearColorImage(commandBuffer, image, imageLayout, pColor, rangeCount, pRanges);
  if (instrument_all_commands_) {
    WriteEndCommandExecutionMarker(tracker_.GetCommands().back().id);
  }
}

void CommandBuffer::PreCmdClearDepthStencilImage(VkCommandBuffer commandBuffer, VkImage image, VkImageLayout imageLayout, const VkClearDepthStencilValue* pDepthStencil, uint32_t rangeCount, const VkImageSubresourceRange* pRanges)
{
  tracker_.TrackPreCmdClearDepthStencilImage(commandBuffer, image, imageLayout, pDepthStencil, rangeCount, pRanges);
  if (instrument_all_commands_) {
    WriteBeginCommandExecutionMarker(tracker_.GetCommands().back().id);
  }
}

void CommandBuffer::PostCmdClearDepthStencilImage(VkCommandBuffer commandBuffer, VkImage image, VkImageLayout imageLayout, const VkClearDepthStencilValue* pDepthStencil, uint32_t rangeCount, const VkImageSubresourceRange* pRanges)
{
  tracker_.TrackPostCmdClearDepthStencilImage(commandBuffer, image, imageLayout, pDepthStencil, rangeCount, pRanges);
  if (instrument_all_commands_) {
    WriteEndCommandExecutionMarker(tracker_.GetCommands().back().id);
  }
}

void CommandBuffer::PreCmdClearAttachments(VkCommandBuffer commandBuffer, uint32_t attachmentCount, const VkClearAttachment* pAttachments, uint32_t rectCount, const VkClearRect* pRects)
{
  tracker_.TrackPreCmdClearAttachments(commandBuffer, attachmentCount, pAttachments, rectCount, pRects);
  if (instrument_all_commands_) {
    WriteBeginCommandExecutionMarker(tracker_.GetCommands().back().id);
  }
}

void CommandBuffer::PostCmdClearAttachments(VkCommandBuffer commandBuffer, uint32_t attachmentCount, const VkClearAttachment* pAttachments, uint32_t rectCount, const VkClearRect* pRects)
{
  tracker_.TrackPostCmdClearAttachments(commandBuffer, attachmentCount, pAttachments, rectCount, pRects);
  if (instrument_all_commands_) {
    WriteEndCommandExecutionMarker(tracker_.GetCommands().back().id);
  }
}

void CommandBuffer::PreCmdResolveImage(VkCommandBuffer commandBuffer, VkImage srcImage, VkImageLayout srcImageLayout, VkImage dstImage, VkImageLayout dstImageLayout, uint32_t regionCount, const VkImageResolve* pRegions)
{
  tracker_.TrackPreCmdResolveImage(commandBuffer, srcImage, srcImageLayout, dstImage, dstImageLayout, regionCount, pRegions);
  if (instrument_all_commands_) {
    WriteBeginCommandExecutionMarker(tracker_.GetCommands().back().id);
  }
}

void CommandBuffer::PostCmdResolveImage(VkCommandBuffer commandBuffer, VkImage srcImage, VkImageLayout srcImageLayout, VkImage dstImage, VkImageLayout dstImageLayout, uint32_t regionCount, const VkImageResolve* pRegions)
{
  tracker_.TrackPostCmdResolveImage(commandBuffer, srcImage, srcImageLayout, dstImage, dstImageLayout, regionCount, pRegions);
  if (instrument_all_commands_) {
    WriteEndCommandExecutionMarker(tracker_.GetCommands().back().id);
  }
}

void CommandBuffer::PreCmdSetEvent(VkCommandBuffer commandBuffer, VkEvent event, VkPipelineStageFlags stageMask)
{
  tracker_.TrackPreCmdSetEvent(commandBuffer, event, stageMask);
  WriteBeginCommandExecutionMarker(tracker_.GetCommands().back().id);
}

void CommandBuffer::PostCmdSetEvent(VkCommandBuffer commandBuffer, VkEvent event, VkPipelineStageFlags stageMask)
{
  tracker_.TrackPostCmdSetEvent(commandBuffer, event, stageMask);
  WriteEndCommandExecutionMarker(tracker_.GetCommands().back().id);
}

void CommandBuffer::PreCmdResetEvent(VkCommandBuffer commandBuffer, VkEvent event, VkPipelineStageFlags stageMask)
{
  tracker_.TrackPreCmdResetEvent(commandBuffer, event, stageMask);
  WriteBeginCommandExecutionMarker(tracker_.GetCommands().back().id);
}

void CommandBuffer::PostCmdResetEvent(VkCommandBuffer commandBuffer, VkEvent event, VkPipelineStageFlags stageMask)
{
  tracker_.TrackPostCmdResetEvent(commandBuffer, event, stageMask);
  WriteEndCommandExecutionMarker(tracker_.GetCommands().back().id);
}

void CommandBuffer::PreCmdWaitEvents(VkCommandBuffer commandBuffer, uint32_t eventCount, const VkEvent* pEvents, VkPipelineStageFlags srcStageMask, VkPipelineStageFlags dstStageMask, uint32_t memoryBarrierCount, const VkMemoryBarrier* pMemoryBarriers, uint32_t bufferMemoryBarrierCount, const VkBufferMemoryBarrier* pBufferMemoryBarriers, uint32_t imageMemoryBarrierCount, const VkImageMemoryBarrier* pImageMemoryBarriers)
{
  tracker_.TrackPreCmdWaitEvents(commandBuffer, eventCount, pEvents, srcStageMask, dstStageMask, memoryBarrierCount, pMemoryBarriers, bufferMemoryBarrierCount, pBufferMemoryBarriers, imageMemoryBarrierCount, pImageMemoryBarriers);
  WriteBeginCommandExecutionMarker(tracker_.GetCommands().back().id);
}

void CommandBuffer::PostCmdWaitEvents(VkCommandBuffer commandBuffer, uint32_t eventCount, const VkEvent* pEvents, VkPipelineStageFlags srcStageMask, VkPipelineStageFlags dstStageMask, uint32_t memoryBarrierCount, const VkMemoryBarrier* pMemoryBarriers, uint32_t bufferMemoryBarrierCount, const VkBufferMemoryBarrier* pBufferMemoryBarriers, uint32_t imageMemoryBarrierCount, const VkImageMemoryBarrier* pImageMemoryBarriers)
{
  tracker_.TrackPostCmdWaitEvents(commandBuffer, eventCount, pEvents, srcStageMask, dstStageMask, memoryBarrierCount, pMemoryBarriers, bufferMemoryBarrierCount, pBufferMemoryBarriers, imageMemoryBarrierCount, pImageMemoryBarriers);
  WriteEndCommandExecutionMarker(tracker_.GetCommands().back().id);
}

void CommandBuffer::PreCmdPipelineBarrier(VkCommandBuffer commandBuffer, VkPipelineStageFlags srcStageMask, VkPipelineStageFlags dstStageMask, VkDependencyFlags dependencyFlags, uint32_t memoryBarrierCount, const VkMemoryBarrier* pMemoryBarriers, uint32_t bufferMemoryBarrierCount, const VkBufferMemoryBarrier* pBufferMemoryBarriers, uint32_t imageMemoryBarrierCount, const VkImageMemoryBarrier* pImageMemoryBarriers)
{
  tracker_.TrackPreCmdPipelineBarrier(commandBuffer, srcStageMask, dstStageMask, dependencyFlags, memoryBarrierCount, pMemoryBarriers, bufferMemoryBarrierCount, pBufferMemoryBarriers, imageMemoryBarrierCount, pImageMemoryBarriers);
  WriteBeginCommandExecutionMarker(tracker_.GetCommands().back().id);
}

void CommandBuffer::PostCmdPipelineBarrier(VkCommandBuffer commandBuffer, VkPipelineStageFlags srcStageMask, VkPipelineStageFlags dstStageMask, VkDependencyFlags dependencyFlags, uint32_t memoryBarrierCount, const VkMemoryBarrier* pMemoryBarriers, uint32_t bufferMemoryBarrierCount, const VkBufferMemoryBarrier* pBufferMemoryBarriers, uint32_t imageMemoryBarrierCount, const VkImageMemoryBarrier* pImageMemoryBarriers)
{
  tracker_.TrackPostCmdPipelineBarrier(commandBuffer, srcStageMask, dstStageMask, dependencyFlags, memoryBarrierCount, pMemoryBarriers, bufferMemoryBarrierCount, pBufferMemoryBarriers, imageMemoryBarrierCount, pImageMemoryBarriers);
  WriteEndCommandExecutionMarker(tracker_.GetCommands().back().id);
}

void CommandBuffer::PreCmdBeginQuery(VkCommandBuffer commandBuffer, VkQueryPool queryPool, uint32_t query, VkQueryControlFlags flags)
{
  tracker_.TrackPreCmdBeginQuery(commandBuffer, queryPool, query, flags);
  if (instrument_all_commands_) {
    WriteBeginCommandExecutionMarker(tracker_.GetCommands().back().id);
  }
}

void CommandBuffer::PostCmdBeginQuery(VkCommandBuffer commandBuffer, VkQueryPool queryPool, uint32_t query, VkQueryControlFlags flags)
{
  tracker_.TrackPostCmdBeginQuery(commandBuffer, queryPool, query, flags);
  if (instrument_all_commands_) {
    WriteEndCommandExecutionMarker(tracker_.GetCommands().back().id);
  }
}

void CommandBuffer::PreCmdEndQuery(VkCommandBuffer commandBuffer, VkQueryPool queryPool, uint32_t query)
{
  tracker_.TrackPreCmdEndQuery(commandBuffer, queryPool, query);
  if (instrument_all_commands_) {
    WriteBeginCommandExecutionMarker(tracker_.GetCommands().back().id);
  }
}

void CommandBuffer::PostCmdEndQuery(VkCommandBuffer commandBuffer, VkQueryPool queryPool, uint32_t query)
{
  tracker_.TrackPostCmdEndQuery(commandBuffer, queryPool, query);
  if (instrument_all_commands_) {
    WriteEndCommandExecutionMarker(tracker_.GetCommands().back().id);
  }
}

void CommandBuffer::PreCmdResetQueryPool(VkCommandBuffer commandBuffer, VkQueryPool queryPool, uint32_t firstQuery, uint32_t queryCount)
{
  tracker_.TrackPreCmdResetQueryPool(commandBuffer, queryPool, firstQuery, queryCount);
  if (instrument_all_commands_) {
    WriteBeginCommandExecutionMarker(tracker_.GetCommands().back().id);
  }
}

void CommandBuffer::PostCmdResetQueryPool(VkCommandBuffer commandBuffer, VkQueryPool queryPool, uint32_t firstQuery, uint32_t queryCount)
{
  tracker_.TrackPostCmdResetQueryPool(commandBuffer, queryPool, firstQuery, queryCount);
  if (instrument_all_commands_) {
    WriteEndCommandExecutionMarker(tracker_.GetCommands().back().id);
  }
}

void CommandBuffer::PreCmdWriteTimestamp(VkCommandBuffer commandBuffer, VkPipelineStageFlagBits pipelineStage, VkQueryPool queryPool, uint32_t query)
{
  tracker_.TrackPreCmdWriteTimestamp(commandBuffer, pipelineStage, queryPool, query);
  if (instrument_all_commands_) {
    WriteBeginCommandExecutionMarker(tracker_.GetCommands().back().id);
  }
}

void CommandBuffer::PostCmdWriteTimestamp(VkCommandBuffer commandBuffer, VkPipelineStageFlagBits pipelineStage, VkQueryPool queryPool, uint32_t query)
{
  tracker_.TrackPostCmdWriteTimestamp(commandBuffer, pipelineStage, queryPool, query);
  if (instrument_all_commands_) {
    WriteEndCommandExecutionMarker(tracker_.GetCommands().back().id);
  }
}

void CommandBuffer::PreCmdCopyQueryPoolResults(VkCommandBuffer commandBuffer, VkQueryPool queryPool, uint32_t firstQuery, uint32_t queryCount, VkBuffer dstBuffer, VkDeviceSize dstOffset, VkDeviceSize stride, VkQueryResultFlags flags)
{
  tracker_.TrackPreCmdCopyQueryPoolResults(commandBuffer, queryPool, firstQuery, queryCount, dstBuffer, dstOffset, stride, flags);
  if (instrument_all_commands_) {
    WriteBeginCommandExecutionMarker(tracker_.GetCommands().back().id);
  }
}

void CommandBuffer::PostCmdCopyQueryPoolResults(VkCommandBuffer commandBuffer, VkQueryPool queryPool, uint32_t firstQuery, uint32_t queryCount, VkBuffer dstBuffer, VkDeviceSize dstOffset, VkDeviceSize stride, VkQueryResultFlags flags)
{
  tracker_.TrackPostCmdCopyQueryPoolResults(commandBuffer, queryPool, firstQuery, queryCount, dstBuffer, dstOffset, stride, flags);
  if (instrument_all_commands_) {
    WriteEndCommandExecutionMarker(tracker_.GetCommands().back().id);
  }
}

void CommandBuffer::PreCmdPushConstants(VkCommandBuffer commandBuffer, VkPipelineLayout layout, VkShaderStageFlags stageFlags, uint32_t offset, uint32_t size, const void* pValues)
{
  tracker_.TrackPreCmdPushConstants(commandBuffer, layout, stageFlags, offset, size, pValues);
  if (instrument_all_commands_) {
    WriteBeginCommandExecutionMarker(tracker_.GetCommands().back().id);
  }
}

void CommandBuffer::PostCmdPushConstants(VkCommandBuffer commandBuffer, VkPipelineLayout layout, VkShaderStageFlags stageFlags, uint32_t offset, uint32_t size, const void* pValues)
{
  tracker_.TrackPostCmdPushConstants(commandBuffer, layout, stageFlags, offset, size, pValues);
  if (instrument_all_commands_) {
    WriteEndCommandExecutionMarker(tracker_.GetCommands().back().id);
  }
}

void CommandBuffer::PreCmdBeginRenderPass(VkCommandBuffer commandBuffer, const VkRenderPassBeginInfo* pRenderPassBegin, VkSubpassContents contents)
{
  tracker_.TrackPreCmdBeginRenderPass(commandBuffer, pRenderPassBegin, contents);
  if (instrument_all_commands_) {
    WriteBeginCommandExecutionMarker(tracker_.GetCommands().back().id);
  }
}

void CommandBuffer::PostCmdBeginRenderPass(VkCommandBuffer commandBuffer, const VkRenderPassBeginInfo* pRenderPassBegin, VkSubpassContents contents)
{
  tracker_.TrackPostCmdBeginRenderPass(commandBuffer, pRenderPassBegin, contents);
  if (instrument_all_commands_) {
    WriteEndCommandExecutionMarker(tracker_.GetCommands().back().id);
  }
}

void CommandBuffer::PreCmdNextSubpass(VkCommandBuffer commandBuffer, VkSubpassContents contents)
{
  tracker_.TrackPreCmdNextSubpass(commandBuffer, contents);
  if (instrument_all_commands_) {
    WriteBeginCommandExecutionMarker(tracker_.GetCommands().back().id);
  }
}

void CommandBuffer::PostCmdNextSubpass(VkCommandBuffer commandBuffer, VkSubpassContents contents)
{
  tracker_.TrackPostCmdNextSubpass(commandBuffer, contents);
  if (instrument_all_commands_) {
    WriteEndCommandExecutionMarker(tracker_.GetCommands().back().id);
  }
}

void CommandBuffer::PreCmdEndRenderPass(VkCommandBuffer commandBuffer)
{
  tracker_.TrackPreCmdEndRenderPass(commandBuffer);
  if (instrument_all_commands_) {
    WriteBeginCommandExecutionMarker(tracker_.GetCommands().back().id);
  }
}

void CommandBuffer::PostCmdEndRenderPass(VkCommandBuffer commandBuffer)
{
  tracker_.TrackPostCmdEndRenderPass(commandBuffer);
  if (instrument_all_commands_) {
    WriteEndCommandExecutionMarker(tracker_.GetCommands().back().id);
  }
}

void CommandBuffer::PreCmdExecuteCommands(VkCommandBuffer commandBuffer, uint32_t commandBufferCount, const VkCommandBuffer* pCommandBuffers)
{
  tracker_.TrackPreCmdExecuteCommands(commandBuffer, commandBufferCount, pCommandBuffers);
  WriteBeginCommandExecutionMarker(tracker_.GetCommands().back().id);
}

void CommandBuffer::PostCmdExecuteCommands(VkCommandBuffer commandBuffer, uint32_t commandBufferCount, const VkCommandBuffer* pCommandBuffers)
{
  tracker_.TrackPostCmdExecuteCommands(commandBuffer, commandBufferCount, pCommandBuffers);
  WriteEndCommandExecutionMarker(tracker_.GetCommands().back().id);
}
#ifdef VK_USE_PLATFORM_GGP 
#endif // VK_USE_PLATFORM_GGP
// clang-format on
