/*
 * Copyright (C) 2021 Google Inc.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 *
 * THIS FILE IS GENERATED BY VkSpecGen. DO NOT EDIT.
 */

// clang-format off
#ifndef COMMAND_COMMON_HEADER
#define COMMAND_COMMON_HEADER

#include <cstring>
#include <iostream>
#include <vector>
#include <vulkan/vulkan.h>

// Enumerate commands that have one parameter of type VkCommandBuffer.
struct Command
{
  enum Type {
    kUnknown,
    kCmdDrawMultiEXT,
    kCmdDrawMultiIndexedEXT,
    kCmdDebugMarkerBeginEXT,
    kCmdDebugMarkerEndEXT,
    kCmdDebugMarkerInsertEXT,
    kCmdPushDescriptorSetKHR,
    kCmdSetDeviceMask,
    kCmdSetDeviceMaskKHR,
    kCmdDispatchBase,
    kCmdDispatchBaseKHR,
    kCmdPushDescriptorSetWithTemplateKHR,
    kCmdSetSampleLocationsEXT,
    kCmdBeginDebugUtilsLabelEXT,
    kCmdEndDebugUtilsLabelEXT,
    kCmdInsertDebugUtilsLabelEXT,
    kCmdWriteBufferMarkerAMD,
    kCmdBeginRenderPass2,
    kCmdBeginRenderPass2KHR,
    kCmdNextSubpass2,
    kCmdNextSubpass2KHR,
    kCmdEndRenderPass2,
    kCmdEndRenderPass2KHR,
    kCmdDrawIndirectCount,
    kCmdDrawIndirectCountKHR,
    kCmdDrawIndirectCountAMD,
    kCmdDrawIndexedIndirectCount,
    kCmdDrawIndexedIndirectCountKHR,
    kCmdDrawIndexedIndirectCountAMD,
    kCmdCopyAccelerationStructureKHR,
    kCmdCopyAccelerationStructureToMemoryKHR,
    kCmdCopyMemoryToAccelerationStructureKHR,
    kCmdWriteAccelerationStructuresPropertiesKHR,
    kCmdTraceRaysKHR,
    kCmdTraceRaysIndirectKHR,
    kCmdSetRayTracingPipelineStackSizeKHR,
    kCmdSetLineStippleEXT,
    kCmdBuildAccelerationStructuresKHR,
    kCmdBuildAccelerationStructuresIndirectKHR,
    kCmdSetCullModeEXT,
    kCmdSetFrontFaceEXT,
    kCmdSetPrimitiveTopologyEXT,
    kCmdSetViewportWithCountEXT,
    kCmdSetScissorWithCountEXT,
    kCmdBindVertexBuffers2EXT,
    kCmdSetDepthTestEnableEXT,
    kCmdSetDepthWriteEnableEXT,
    kCmdSetDepthCompareOpEXT,
    kCmdSetDepthBoundsTestEnableEXT,
    kCmdSetStencilTestEnableEXT,
    kCmdSetStencilOpEXT,
    kCmdSetPatchControlPointsEXT,
    kCmdSetRasterizerDiscardEnableEXT,
    kCmdSetDepthBiasEnableEXT,
    kCmdSetLogicOpEXT,
    kCmdSetPrimitiveRestartEnableEXT,
    kCmdCopyBuffer2KHR,
    kCmdCopyImage2KHR,
    kCmdBlitImage2KHR,
    kCmdCopyBufferToImage2KHR,
    kCmdCopyImageToBuffer2KHR,
    kCmdResolveImage2KHR,
    kCmdSetFragmentShadingRateKHR,
    kCmdSetVertexInputEXT,
    kCmdSetColorWriteEnableEXT,
    kCmdSetEvent2KHR,
    kCmdResetEvent2KHR,
    kCmdWaitEvents2KHR,
    kCmdPipelineBarrier2KHR,
    kCmdWriteTimestamp2KHR,
    kCmdWriteBufferMarker2AMD,
    kBeginCommandBuffer,
    kEndCommandBuffer,
    kResetCommandBuffer,
    kCmdBindPipeline,
    kCmdSetViewport,
    kCmdSetScissor,
    kCmdSetLineWidth,
    kCmdSetDepthBias,
    kCmdSetBlendConstants,
    kCmdSetDepthBounds,
    kCmdSetStencilCompareMask,
    kCmdSetStencilWriteMask,
    kCmdSetStencilReference,
    kCmdBindDescriptorSets,
    kCmdBindIndexBuffer,
    kCmdBindVertexBuffers,
    kCmdDraw,
    kCmdDrawIndexed,
    kCmdDrawIndirect,
    kCmdDrawIndexedIndirect,
    kCmdDispatch,
    kCmdDispatchIndirect,
    kCmdCopyBuffer,
    kCmdCopyImage,
    kCmdBlitImage,
    kCmdCopyBufferToImage,
    kCmdCopyImageToBuffer,
    kCmdUpdateBuffer,
    kCmdFillBuffer,
    kCmdClearColorImage,
    kCmdClearDepthStencilImage,
    kCmdClearAttachments,
    kCmdResolveImage,
    kCmdSetEvent,
    kCmdResetEvent,
    kCmdWaitEvents,
    kCmdPipelineBarrier,
    kCmdBeginQuery,
    kCmdEndQuery,
    kCmdResetQueryPool,
    kCmdWriteTimestamp,
    kCmdCopyQueryPoolResults,
    kCmdPushConstants,
    kCmdBeginRenderPass,
    kCmdNextSubpass,
    kCmdEndRenderPass,
    kCmdExecuteCommands,

    #ifdef VK_USE_PLATFORM_GGP 

    #endif // VK_USE_PLATFORM_GGP
  };

  public:
  static const char *GetCommandName(const Command &cmd);

  Type type;
  uint32_t id;
  void *parameters;
};

// Define structs for command parameters


struct CmdDrawMultiEXTArgs {
  VkCommandBuffer commandBuffer;
  uint32_t drawCount;
  const VkMultiDrawInfoEXT* pVertexInfo;
  uint32_t instanceCount;
  uint32_t firstInstance;
  uint32_t stride;
};

struct CmdDrawMultiIndexedEXTArgs {
  VkCommandBuffer commandBuffer;
  uint32_t drawCount;
  const VkMultiDrawIndexedInfoEXT* pIndexInfo;
  uint32_t instanceCount;
  uint32_t firstInstance;
  uint32_t stride;
  const int32_t* pVertexOffset;
};

struct CmdDebugMarkerBeginEXTArgs {
  VkCommandBuffer commandBuffer;
  const VkDebugMarkerMarkerInfoEXT* pMarkerInfo;
};

struct CmdDebugMarkerEndEXTArgs {
  VkCommandBuffer commandBuffer;
};

struct CmdDebugMarkerInsertEXTArgs {
  VkCommandBuffer commandBuffer;
  const VkDebugMarkerMarkerInfoEXT* pMarkerInfo;
};

struct CmdPushDescriptorSetKHRArgs {
  VkCommandBuffer commandBuffer;
  VkPipelineBindPoint pipelineBindPoint;
  VkPipelineLayout layout;
  uint32_t set;
  uint32_t descriptorWriteCount;
  const VkWriteDescriptorSet* pDescriptorWrites;
};

struct CmdSetDeviceMaskArgs {
  VkCommandBuffer commandBuffer;
  uint32_t deviceMask;
};

struct CmdSetDeviceMaskKHRArgs {
  VkCommandBuffer commandBuffer;
  uint32_t deviceMask;
};

struct CmdDispatchBaseArgs {
  VkCommandBuffer commandBuffer;
  uint32_t baseGroupX;
  uint32_t baseGroupY;
  uint32_t baseGroupZ;
  uint32_t groupCountX;
  uint32_t groupCountY;
  uint32_t groupCountZ;
};

struct CmdDispatchBaseKHRArgs {
  VkCommandBuffer commandBuffer;
  uint32_t baseGroupX;
  uint32_t baseGroupY;
  uint32_t baseGroupZ;
  uint32_t groupCountX;
  uint32_t groupCountY;
  uint32_t groupCountZ;
};

struct CmdPushDescriptorSetWithTemplateKHRArgs {
  VkCommandBuffer commandBuffer;
  VkDescriptorUpdateTemplate descriptorUpdateTemplate;
  VkPipelineLayout layout;
  uint32_t set;
  const void* pData;
};

struct CmdSetSampleLocationsEXTArgs {
  VkCommandBuffer commandBuffer;
  const VkSampleLocationsInfoEXT* pSampleLocationsInfo;
};

struct CmdBeginDebugUtilsLabelEXTArgs {
  VkCommandBuffer commandBuffer;
  const VkDebugUtilsLabelEXT* pLabelInfo;
};

struct CmdEndDebugUtilsLabelEXTArgs {
  VkCommandBuffer commandBuffer;
};

struct CmdInsertDebugUtilsLabelEXTArgs {
  VkCommandBuffer commandBuffer;
  const VkDebugUtilsLabelEXT* pLabelInfo;
};

struct CmdWriteBufferMarkerAMDArgs {
  VkCommandBuffer commandBuffer;
  VkPipelineStageFlagBits pipelineStage;
  VkBuffer dstBuffer;
  VkDeviceSize dstOffset;
  uint32_t marker;
};

struct CmdBeginRenderPass2Args {
  VkCommandBuffer commandBuffer;
  const VkRenderPassBeginInfo* pRenderPassBegin;
  const VkSubpassBeginInfo* pSubpassBeginInfo;
};

struct CmdBeginRenderPass2KHRArgs {
  VkCommandBuffer commandBuffer;
  const VkRenderPassBeginInfo* pRenderPassBegin;
  const VkSubpassBeginInfo* pSubpassBeginInfo;
};

struct CmdNextSubpass2Args {
  VkCommandBuffer commandBuffer;
  const VkSubpassBeginInfo* pSubpassBeginInfo;
  const VkSubpassEndInfo* pSubpassEndInfo;
};

struct CmdNextSubpass2KHRArgs {
  VkCommandBuffer commandBuffer;
  const VkSubpassBeginInfo* pSubpassBeginInfo;
  const VkSubpassEndInfo* pSubpassEndInfo;
};

struct CmdEndRenderPass2Args {
  VkCommandBuffer commandBuffer;
  const VkSubpassEndInfo* pSubpassEndInfo;
};

struct CmdEndRenderPass2KHRArgs {
  VkCommandBuffer commandBuffer;
  const VkSubpassEndInfo* pSubpassEndInfo;
};

struct CmdDrawIndirectCountArgs {
  VkCommandBuffer commandBuffer;
  VkBuffer buffer;
  VkDeviceSize offset;
  VkBuffer countBuffer;
  VkDeviceSize countBufferOffset;
  uint32_t maxDrawCount;
  uint32_t stride;
};

struct CmdDrawIndirectCountKHRArgs {
  VkCommandBuffer commandBuffer;
  VkBuffer buffer;
  VkDeviceSize offset;
  VkBuffer countBuffer;
  VkDeviceSize countBufferOffset;
  uint32_t maxDrawCount;
  uint32_t stride;
};

struct CmdDrawIndirectCountAMDArgs {
  VkCommandBuffer commandBuffer;
  VkBuffer buffer;
  VkDeviceSize offset;
  VkBuffer countBuffer;
  VkDeviceSize countBufferOffset;
  uint32_t maxDrawCount;
  uint32_t stride;
};

struct CmdDrawIndexedIndirectCountArgs {
  VkCommandBuffer commandBuffer;
  VkBuffer buffer;
  VkDeviceSize offset;
  VkBuffer countBuffer;
  VkDeviceSize countBufferOffset;
  uint32_t maxDrawCount;
  uint32_t stride;
};

struct CmdDrawIndexedIndirectCountKHRArgs {
  VkCommandBuffer commandBuffer;
  VkBuffer buffer;
  VkDeviceSize offset;
  VkBuffer countBuffer;
  VkDeviceSize countBufferOffset;
  uint32_t maxDrawCount;
  uint32_t stride;
};

struct CmdDrawIndexedIndirectCountAMDArgs {
  VkCommandBuffer commandBuffer;
  VkBuffer buffer;
  VkDeviceSize offset;
  VkBuffer countBuffer;
  VkDeviceSize countBufferOffset;
  uint32_t maxDrawCount;
  uint32_t stride;
};

struct CmdCopyAccelerationStructureKHRArgs {
  VkCommandBuffer commandBuffer;
  const VkCopyAccelerationStructureInfoKHR* pInfo;
};

struct CmdCopyAccelerationStructureToMemoryKHRArgs {
  VkCommandBuffer commandBuffer;
  const VkCopyAccelerationStructureToMemoryInfoKHR* pInfo;
};

struct CmdCopyMemoryToAccelerationStructureKHRArgs {
  VkCommandBuffer commandBuffer;
  const VkCopyMemoryToAccelerationStructureInfoKHR* pInfo;
};

struct CmdWriteAccelerationStructuresPropertiesKHRArgs {
  VkCommandBuffer commandBuffer;
  uint32_t accelerationStructureCount;
  const VkAccelerationStructureKHR* pAccelerationStructures;
  VkQueryType queryType;
  VkQueryPool queryPool;
  uint32_t firstQuery;
};

struct CmdTraceRaysKHRArgs {
  VkCommandBuffer commandBuffer;
  const VkStridedDeviceAddressRegionKHR* pRaygenShaderBindingTable;
  const VkStridedDeviceAddressRegionKHR* pMissShaderBindingTable;
  const VkStridedDeviceAddressRegionKHR* pHitShaderBindingTable;
  const VkStridedDeviceAddressRegionKHR* pCallableShaderBindingTable;
  uint32_t width;
  uint32_t height;
  uint32_t depth;
};

struct CmdTraceRaysIndirectKHRArgs {
  VkCommandBuffer commandBuffer;
  const VkStridedDeviceAddressRegionKHR* pRaygenShaderBindingTable;
  const VkStridedDeviceAddressRegionKHR* pMissShaderBindingTable;
  const VkStridedDeviceAddressRegionKHR* pHitShaderBindingTable;
  const VkStridedDeviceAddressRegionKHR* pCallableShaderBindingTable;
  VkDeviceAddress indirectDeviceAddress;
};

struct CmdSetRayTracingPipelineStackSizeKHRArgs {
  VkCommandBuffer commandBuffer;
  uint32_t pipelineStackSize;
};

struct CmdSetLineStippleEXTArgs {
  VkCommandBuffer commandBuffer;
  uint32_t lineStippleFactor;
  uint16_t lineStipplePattern;
};

struct CmdBuildAccelerationStructuresKHRArgs {
  VkCommandBuffer commandBuffer;
  uint32_t infoCount;
  const VkAccelerationStructureBuildGeometryInfoKHR* pInfos;
  const VkAccelerationStructureBuildRangeInfoKHR** ppBuildRangeInfos;
};

struct CmdBuildAccelerationStructuresIndirectKHRArgs {
  VkCommandBuffer commandBuffer;
  uint32_t infoCount;
  const VkAccelerationStructureBuildGeometryInfoKHR* pInfos;
  const VkDeviceAddress* pIndirectDeviceAddresses;
  const uint32_t* pIndirectStrides;
  const uint32_t** ppMaxPrimitiveCounts;
};

struct CmdSetCullModeEXTArgs {
  VkCommandBuffer commandBuffer;
  VkCullModeFlags cullMode;
};

struct CmdSetFrontFaceEXTArgs {
  VkCommandBuffer commandBuffer;
  VkFrontFace frontFace;
};

struct CmdSetPrimitiveTopologyEXTArgs {
  VkCommandBuffer commandBuffer;
  VkPrimitiveTopology primitiveTopology;
};

struct CmdSetViewportWithCountEXTArgs {
  VkCommandBuffer commandBuffer;
  uint32_t viewportCount;
  const VkViewport* pViewports;
};

struct CmdSetScissorWithCountEXTArgs {
  VkCommandBuffer commandBuffer;
  uint32_t scissorCount;
  const VkRect2D* pScissors;
};

struct CmdBindVertexBuffers2EXTArgs {
  VkCommandBuffer commandBuffer;
  uint32_t firstBinding;
  uint32_t bindingCount;
  const VkBuffer* pBuffers;
  const VkDeviceSize* pOffsets;
  const VkDeviceSize* pSizes;
  const VkDeviceSize* pStrides;
};

struct CmdSetDepthTestEnableEXTArgs {
  VkCommandBuffer commandBuffer;
  VkBool32 depthTestEnable;
};

struct CmdSetDepthWriteEnableEXTArgs {
  VkCommandBuffer commandBuffer;
  VkBool32 depthWriteEnable;
};

struct CmdSetDepthCompareOpEXTArgs {
  VkCommandBuffer commandBuffer;
  VkCompareOp depthCompareOp;
};

struct CmdSetDepthBoundsTestEnableEXTArgs {
  VkCommandBuffer commandBuffer;
  VkBool32 depthBoundsTestEnable;
};

struct CmdSetStencilTestEnableEXTArgs {
  VkCommandBuffer commandBuffer;
  VkBool32 stencilTestEnable;
};

struct CmdSetStencilOpEXTArgs {
  VkCommandBuffer commandBuffer;
  VkStencilFaceFlags faceMask;
  VkStencilOp failOp;
  VkStencilOp passOp;
  VkStencilOp depthFailOp;
  VkCompareOp compareOp;
};

struct CmdSetPatchControlPointsEXTArgs {
  VkCommandBuffer commandBuffer;
  uint32_t patchControlPoints;
};

struct CmdSetRasterizerDiscardEnableEXTArgs {
  VkCommandBuffer commandBuffer;
  VkBool32 rasterizerDiscardEnable;
};

struct CmdSetDepthBiasEnableEXTArgs {
  VkCommandBuffer commandBuffer;
  VkBool32 depthBiasEnable;
};

struct CmdSetLogicOpEXTArgs {
  VkCommandBuffer commandBuffer;
  VkLogicOp logicOp;
};

struct CmdSetPrimitiveRestartEnableEXTArgs {
  VkCommandBuffer commandBuffer;
  VkBool32 primitiveRestartEnable;
};

struct CmdCopyBuffer2KHRArgs {
  VkCommandBuffer commandBuffer;
  const VkCopyBufferInfo2KHR* pCopyBufferInfo;
};

struct CmdCopyImage2KHRArgs {
  VkCommandBuffer commandBuffer;
  const VkCopyImageInfo2KHR* pCopyImageInfo;
};

struct CmdBlitImage2KHRArgs {
  VkCommandBuffer commandBuffer;
  const VkBlitImageInfo2KHR* pBlitImageInfo;
};

struct CmdCopyBufferToImage2KHRArgs {
  VkCommandBuffer commandBuffer;
  const VkCopyBufferToImageInfo2KHR* pCopyBufferToImageInfo;
};

struct CmdCopyImageToBuffer2KHRArgs {
  VkCommandBuffer commandBuffer;
  const VkCopyImageToBufferInfo2KHR* pCopyImageToBufferInfo;
};

struct CmdResolveImage2KHRArgs {
  VkCommandBuffer commandBuffer;
  const VkResolveImageInfo2KHR* pResolveImageInfo;
};

struct CmdSetFragmentShadingRateKHRArgs {
  VkCommandBuffer commandBuffer;
  const VkExtent2D* pFragmentSize;
  VkFragmentShadingRateCombinerOpKHR combinerOps[2];
};

struct CmdSetVertexInputEXTArgs {
  VkCommandBuffer commandBuffer;
  uint32_t vertexBindingDescriptionCount;
  const VkVertexInputBindingDescription2EXT* pVertexBindingDescriptions;
  uint32_t vertexAttributeDescriptionCount;
  const VkVertexInputAttributeDescription2EXT* pVertexAttributeDescriptions;
};

struct CmdSetColorWriteEnableEXTArgs {
  VkCommandBuffer commandBuffer;
  uint32_t attachmentCount;
  const VkBool32* pColorWriteEnables;
};

struct CmdSetEvent2KHRArgs {
  VkCommandBuffer commandBuffer;
  VkEvent event;
  const VkDependencyInfoKHR* pDependencyInfo;
};

struct CmdResetEvent2KHRArgs {
  VkCommandBuffer commandBuffer;
  VkEvent event;
  VkPipelineStageFlags2KHR stageMask;
};

struct CmdWaitEvents2KHRArgs {
  VkCommandBuffer commandBuffer;
  uint32_t eventCount;
  const VkEvent* pEvents;
  const VkDependencyInfoKHR* pDependencyInfos;
};

struct CmdPipelineBarrier2KHRArgs {
  VkCommandBuffer commandBuffer;
  const VkDependencyInfoKHR* pDependencyInfo;
};

struct CmdWriteTimestamp2KHRArgs {
  VkCommandBuffer commandBuffer;
  VkPipelineStageFlags2KHR stage;
  VkQueryPool queryPool;
  uint32_t query;
};

struct CmdWriteBufferMarker2AMDArgs {
  VkCommandBuffer commandBuffer;
  VkPipelineStageFlags2KHR stage;
  VkBuffer dstBuffer;
  VkDeviceSize dstOffset;
  uint32_t marker;
};

struct BeginCommandBufferArgs {
  VkCommandBuffer commandBuffer;
  const VkCommandBufferBeginInfo* pBeginInfo;
};

struct EndCommandBufferArgs {
  VkCommandBuffer commandBuffer;
};

struct ResetCommandBufferArgs {
  VkCommandBuffer commandBuffer;
  VkCommandBufferResetFlags flags;
};

struct CmdBindPipelineArgs {
  VkCommandBuffer commandBuffer;
  VkPipelineBindPoint pipelineBindPoint;
  VkPipeline pipeline;
};

struct CmdSetViewportArgs {
  VkCommandBuffer commandBuffer;
  uint32_t firstViewport;
  uint32_t viewportCount;
  const VkViewport* pViewports;
};

struct CmdSetScissorArgs {
  VkCommandBuffer commandBuffer;
  uint32_t firstScissor;
  uint32_t scissorCount;
  const VkRect2D* pScissors;
};

struct CmdSetLineWidthArgs {
  VkCommandBuffer commandBuffer;
  float lineWidth;
};

struct CmdSetDepthBiasArgs {
  VkCommandBuffer commandBuffer;
  float depthBiasConstantFactor;
  float depthBiasClamp;
  float depthBiasSlopeFactor;
};

struct CmdSetBlendConstantsArgs {
  VkCommandBuffer commandBuffer;
  float blendConstants[4];
};

struct CmdSetDepthBoundsArgs {
  VkCommandBuffer commandBuffer;
  float minDepthBounds;
  float maxDepthBounds;
};

struct CmdSetStencilCompareMaskArgs {
  VkCommandBuffer commandBuffer;
  VkStencilFaceFlags faceMask;
  uint32_t compareMask;
};

struct CmdSetStencilWriteMaskArgs {
  VkCommandBuffer commandBuffer;
  VkStencilFaceFlags faceMask;
  uint32_t writeMask;
};

struct CmdSetStencilReferenceArgs {
  VkCommandBuffer commandBuffer;
  VkStencilFaceFlags faceMask;
  uint32_t reference;
};

struct CmdBindDescriptorSetsArgs {
  VkCommandBuffer commandBuffer;
  VkPipelineBindPoint pipelineBindPoint;
  VkPipelineLayout layout;
  uint32_t firstSet;
  uint32_t descriptorSetCount;
  const VkDescriptorSet* pDescriptorSets;
  uint32_t dynamicOffsetCount;
  const uint32_t* pDynamicOffsets;
};

struct CmdBindIndexBufferArgs {
  VkCommandBuffer commandBuffer;
  VkBuffer buffer;
  VkDeviceSize offset;
  VkIndexType indexType;
};

struct CmdBindVertexBuffersArgs {
  VkCommandBuffer commandBuffer;
  uint32_t firstBinding;
  uint32_t bindingCount;
  const VkBuffer* pBuffers;
  const VkDeviceSize* pOffsets;
};

struct CmdDrawArgs {
  VkCommandBuffer commandBuffer;
  uint32_t vertexCount;
  uint32_t instanceCount;
  uint32_t firstVertex;
  uint32_t firstInstance;
};

struct CmdDrawIndexedArgs {
  VkCommandBuffer commandBuffer;
  uint32_t indexCount;
  uint32_t instanceCount;
  uint32_t firstIndex;
  int32_t vertexOffset;
  uint32_t firstInstance;
};

struct CmdDrawIndirectArgs {
  VkCommandBuffer commandBuffer;
  VkBuffer buffer;
  VkDeviceSize offset;
  uint32_t drawCount;
  uint32_t stride;
};

struct CmdDrawIndexedIndirectArgs {
  VkCommandBuffer commandBuffer;
  VkBuffer buffer;
  VkDeviceSize offset;
  uint32_t drawCount;
  uint32_t stride;
};

struct CmdDispatchArgs {
  VkCommandBuffer commandBuffer;
  uint32_t groupCountX;
  uint32_t groupCountY;
  uint32_t groupCountZ;
};

struct CmdDispatchIndirectArgs {
  VkCommandBuffer commandBuffer;
  VkBuffer buffer;
  VkDeviceSize offset;
};

struct CmdCopyBufferArgs {
  VkCommandBuffer commandBuffer;
  VkBuffer srcBuffer;
  VkBuffer dstBuffer;
  uint32_t regionCount;
  const VkBufferCopy* pRegions;
};

struct CmdCopyImageArgs {
  VkCommandBuffer commandBuffer;
  VkImage srcImage;
  VkImageLayout srcImageLayout;
  VkImage dstImage;
  VkImageLayout dstImageLayout;
  uint32_t regionCount;
  const VkImageCopy* pRegions;
};

struct CmdBlitImageArgs {
  VkCommandBuffer commandBuffer;
  VkImage srcImage;
  VkImageLayout srcImageLayout;
  VkImage dstImage;
  VkImageLayout dstImageLayout;
  uint32_t regionCount;
  const VkImageBlit* pRegions;
  VkFilter filter;
};

struct CmdCopyBufferToImageArgs {
  VkCommandBuffer commandBuffer;
  VkBuffer srcBuffer;
  VkImage dstImage;
  VkImageLayout dstImageLayout;
  uint32_t regionCount;
  const VkBufferImageCopy* pRegions;
};

struct CmdCopyImageToBufferArgs {
  VkCommandBuffer commandBuffer;
  VkImage srcImage;
  VkImageLayout srcImageLayout;
  VkBuffer dstBuffer;
  uint32_t regionCount;
  const VkBufferImageCopy* pRegions;
};

struct CmdUpdateBufferArgs {
  VkCommandBuffer commandBuffer;
  VkBuffer dstBuffer;
  VkDeviceSize dstOffset;
  VkDeviceSize dataSize;
  const void* pData;
};

struct CmdFillBufferArgs {
  VkCommandBuffer commandBuffer;
  VkBuffer dstBuffer;
  VkDeviceSize dstOffset;
  VkDeviceSize size;
  uint32_t data;
};

struct CmdClearColorImageArgs {
  VkCommandBuffer commandBuffer;
  VkImage image;
  VkImageLayout imageLayout;
  const VkClearColorValue* pColor;
  uint32_t rangeCount;
  const VkImageSubresourceRange* pRanges;
};

struct CmdClearDepthStencilImageArgs {
  VkCommandBuffer commandBuffer;
  VkImage image;
  VkImageLayout imageLayout;
  const VkClearDepthStencilValue* pDepthStencil;
  uint32_t rangeCount;
  const VkImageSubresourceRange* pRanges;
};

struct CmdClearAttachmentsArgs {
  VkCommandBuffer commandBuffer;
  uint32_t attachmentCount;
  const VkClearAttachment* pAttachments;
  uint32_t rectCount;
  const VkClearRect* pRects;
};

struct CmdResolveImageArgs {
  VkCommandBuffer commandBuffer;
  VkImage srcImage;
  VkImageLayout srcImageLayout;
  VkImage dstImage;
  VkImageLayout dstImageLayout;
  uint32_t regionCount;
  const VkImageResolve* pRegions;
};

struct CmdSetEventArgs {
  VkCommandBuffer commandBuffer;
  VkEvent event;
  VkPipelineStageFlags stageMask;
};

struct CmdResetEventArgs {
  VkCommandBuffer commandBuffer;
  VkEvent event;
  VkPipelineStageFlags stageMask;
};

struct CmdWaitEventsArgs {
  VkCommandBuffer commandBuffer;
  uint32_t eventCount;
  const VkEvent* pEvents;
  VkPipelineStageFlags srcStageMask;
  VkPipelineStageFlags dstStageMask;
  uint32_t memoryBarrierCount;
  const VkMemoryBarrier* pMemoryBarriers;
  uint32_t bufferMemoryBarrierCount;
  const VkBufferMemoryBarrier* pBufferMemoryBarriers;
  uint32_t imageMemoryBarrierCount;
  const VkImageMemoryBarrier* pImageMemoryBarriers;
};

struct CmdPipelineBarrierArgs {
  VkCommandBuffer commandBuffer;
  VkPipelineStageFlags srcStageMask;
  VkPipelineStageFlags dstStageMask;
  VkDependencyFlags dependencyFlags;
  uint32_t memoryBarrierCount;
  const VkMemoryBarrier* pMemoryBarriers;
  uint32_t bufferMemoryBarrierCount;
  const VkBufferMemoryBarrier* pBufferMemoryBarriers;
  uint32_t imageMemoryBarrierCount;
  const VkImageMemoryBarrier* pImageMemoryBarriers;
};

struct CmdBeginQueryArgs {
  VkCommandBuffer commandBuffer;
  VkQueryPool queryPool;
  uint32_t query;
  VkQueryControlFlags flags;
};

struct CmdEndQueryArgs {
  VkCommandBuffer commandBuffer;
  VkQueryPool queryPool;
  uint32_t query;
};

struct CmdResetQueryPoolArgs {
  VkCommandBuffer commandBuffer;
  VkQueryPool queryPool;
  uint32_t firstQuery;
  uint32_t queryCount;
};

struct CmdWriteTimestampArgs {
  VkCommandBuffer commandBuffer;
  VkPipelineStageFlagBits pipelineStage;
  VkQueryPool queryPool;
  uint32_t query;
};

struct CmdCopyQueryPoolResultsArgs {
  VkCommandBuffer commandBuffer;
  VkQueryPool queryPool;
  uint32_t firstQuery;
  uint32_t queryCount;
  VkBuffer dstBuffer;
  VkDeviceSize dstOffset;
  VkDeviceSize stride;
  VkQueryResultFlags flags;
};

struct CmdPushConstantsArgs {
  VkCommandBuffer commandBuffer;
  VkPipelineLayout layout;
  VkShaderStageFlags stageFlags;
  uint32_t offset;
  uint32_t size;
  const void* pValues;
};

struct CmdBeginRenderPassArgs {
  VkCommandBuffer commandBuffer;
  const VkRenderPassBeginInfo* pRenderPassBegin;
  VkSubpassContents contents;
};

struct CmdNextSubpassArgs {
  VkCommandBuffer commandBuffer;
  VkSubpassContents contents;
};

struct CmdEndRenderPassArgs {
  VkCommandBuffer commandBuffer;
};

struct CmdExecuteCommandsArgs {
  VkCommandBuffer commandBuffer;
  uint32_t commandBufferCount;
  const VkCommandBuffer* pCommandBuffers;
};

#ifdef VK_USE_PLATFORM_GGP 

#endif // VK_USE_PLATFORM_GGP

#endif // COMMAND_COMMON_HEADER
