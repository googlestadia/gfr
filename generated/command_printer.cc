/*
 * Copyright (C) 2021 Google Inc.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 *
 * THIS FILE IS GENERATED BY VkSpecGen. DO NOT EDIT.
 */

#include "command_printer.h"

#include <streambuf>

#include "command_common.h"
#include "util.h"

std::ostream& PrintNextPtr(std::ostream& os, const void* pNext) {
  if (pNext == nullptr) {
    os << "nullptr";
    return os;
  }

  os << std::endl;
  ScopedOstream sonextptr(os);
  const VkStruct* pStruct = reinterpret_cast<const VkStruct*>(pNext);
  PrintVkStruct(os, pStruct);
  return PrintNextPtr(os, pStruct->pNext);
}

const ObjectInfoDB* global_name_resolver = nullptr;
void CommandPrinter::SetNameResolver(const ObjectInfoDB* name_resolver) {
  global_name_resolver = name_resolver;
}

std::ostream& operator<<(std::ostream& os, const VkInstance& a) {
  auto handle = (uint64_t)(a);
  os << GFR::Uint64ToStr(handle) << std::endl;
  auto debug_name = global_name_resolver->GetObjectDebugName(handle);
  if (debug_name.length() > 0) {
    os << "debugName: \"" << debug_name << "\"";
  }
  return os;
}
std::ostream& operator<<(std::ostream& os, const VkPhysicalDevice& a) {
  auto handle = (uint64_t)(a);
  os << GFR::Uint64ToStr(handle) << std::endl;
  auto debug_name = global_name_resolver->GetObjectDebugName(handle);
  if (debug_name.length() > 0) {
    os << "debugName: \"" << debug_name << "\"";
  }
  return os;
}
std::ostream& operator<<(std::ostream& os, const VkDevice& a) {
  auto handle = (uint64_t)(a);
  os << GFR::Uint64ToStr(handle) << std::endl;
  auto debug_name = global_name_resolver->GetObjectDebugName(handle);
  if (debug_name.length() > 0) {
    os << "debugName: \"" << debug_name << "\"";
  }
  return os;
}
std::ostream& operator<<(std::ostream& os, const VkQueue& a) {
  auto handle = (uint64_t)(a);
  os << GFR::Uint64ToStr(handle) << std::endl;
  auto debug_name = global_name_resolver->GetObjectDebugName(handle);
  if (debug_name.length() > 0) {
    os << "debugName: \"" << debug_name << "\"";
  }
  return os;
}
std::ostream& operator<<(std::ostream& os, const VkSemaphore& a) {
  auto handle = (uint64_t)(a);
  os << GFR::Uint64ToStr(handle) << std::endl;
  auto debug_name = global_name_resolver->GetObjectDebugName(handle);
  if (debug_name.length() > 0) {
    os << "debugName: \"" << debug_name << "\"";
  }
  return os;
}
std::ostream& operator<<(std::ostream& os, const VkCommandBuffer& a) {
  auto handle = (uint64_t)(a);
  os << GFR::Uint64ToStr(handle) << std::endl;
  auto debug_name = global_name_resolver->GetObjectDebugName(handle);
  if (debug_name.length() > 0) {
    os << "debugName: \"" << debug_name << "\"";
  }
  return os;
}
std::ostream& operator<<(std::ostream& os, const VkFence& a) {
  auto handle = (uint64_t)(a);
  os << GFR::Uint64ToStr(handle) << std::endl;
  auto debug_name = global_name_resolver->GetObjectDebugName(handle);
  if (debug_name.length() > 0) {
    os << "debugName: \"" << debug_name << "\"";
  }
  return os;
}
std::ostream& operator<<(std::ostream& os, const VkDeviceMemory& a) {
  auto handle = (uint64_t)(a);
  os << GFR::Uint64ToStr(handle) << std::endl;
  auto debug_name = global_name_resolver->GetObjectDebugName(handle);
  if (debug_name.length() > 0) {
    os << "debugName: \"" << debug_name << "\"";
  }
  return os;
}
std::ostream& operator<<(std::ostream& os, const VkBuffer& a) {
  auto handle = (uint64_t)(a);
  os << GFR::Uint64ToStr(handle) << std::endl;
  auto debug_name = global_name_resolver->GetObjectDebugName(handle);
  if (debug_name.length() > 0) {
    os << "debugName: \"" << debug_name << "\"";
  }
  return os;
}
std::ostream& operator<<(std::ostream& os, const VkImage& a) {
  auto handle = (uint64_t)(a);
  os << GFR::Uint64ToStr(handle) << std::endl;
  auto debug_name = global_name_resolver->GetObjectDebugName(handle);
  if (debug_name.length() > 0) {
    os << "debugName: \"" << debug_name << "\"";
  }
  return os;
}
std::ostream& operator<<(std::ostream& os, const VkEvent& a) {
  auto handle = (uint64_t)(a);
  os << GFR::Uint64ToStr(handle) << std::endl;
  auto debug_name = global_name_resolver->GetObjectDebugName(handle);
  if (debug_name.length() > 0) {
    os << "debugName: \"" << debug_name << "\"";
  }
  return os;
}
std::ostream& operator<<(std::ostream& os, const VkQueryPool& a) {
  auto handle = (uint64_t)(a);
  os << GFR::Uint64ToStr(handle) << std::endl;
  auto debug_name = global_name_resolver->GetObjectDebugName(handle);
  if (debug_name.length() > 0) {
    os << "debugName: \"" << debug_name << "\"";
  }
  return os;
}
std::ostream& operator<<(std::ostream& os, const VkBufferView& a) {
  auto handle = (uint64_t)(a);
  os << GFR::Uint64ToStr(handle) << std::endl;
  auto debug_name = global_name_resolver->GetObjectDebugName(handle);
  if (debug_name.length() > 0) {
    os << "debugName: \"" << debug_name << "\"";
  }
  return os;
}
std::ostream& operator<<(std::ostream& os, const VkImageView& a) {
  auto handle = (uint64_t)(a);
  os << GFR::Uint64ToStr(handle) << std::endl;
  auto debug_name = global_name_resolver->GetObjectDebugName(handle);
  if (debug_name.length() > 0) {
    os << "debugName: \"" << debug_name << "\"";
  }
  return os;
}
std::ostream& operator<<(std::ostream& os, const VkShaderModule& a) {
  auto handle = (uint64_t)(a);
  os << GFR::Uint64ToStr(handle) << std::endl;
  auto debug_name = global_name_resolver->GetObjectDebugName(handle);
  if (debug_name.length() > 0) {
    os << "debugName: \"" << debug_name << "\"";
  }
  return os;
}
std::ostream& operator<<(std::ostream& os, const VkPipelineCache& a) {
  auto handle = (uint64_t)(a);
  os << GFR::Uint64ToStr(handle) << std::endl;
  auto debug_name = global_name_resolver->GetObjectDebugName(handle);
  if (debug_name.length() > 0) {
    os << "debugName: \"" << debug_name << "\"";
  }
  return os;
}
std::ostream& operator<<(std::ostream& os, const VkPipelineLayout& a) {
  auto handle = (uint64_t)(a);
  os << GFR::Uint64ToStr(handle) << std::endl;
  auto debug_name = global_name_resolver->GetObjectDebugName(handle);
  if (debug_name.length() > 0) {
    os << "debugName: \"" << debug_name << "\"";
  }
  return os;
}
std::ostream& operator<<(std::ostream& os, const VkRenderPass& a) {
  auto handle = (uint64_t)(a);
  os << GFR::Uint64ToStr(handle) << std::endl;
  auto debug_name = global_name_resolver->GetObjectDebugName(handle);
  if (debug_name.length() > 0) {
    os << "debugName: \"" << debug_name << "\"";
  }
  return os;
}
std::ostream& operator<<(std::ostream& os, const VkPipeline& a) {
  auto handle = (uint64_t)(a);
  os << GFR::Uint64ToStr(handle) << std::endl;
  auto debug_name = global_name_resolver->GetObjectDebugName(handle);
  if (debug_name.length() > 0) {
    os << "debugName: \"" << debug_name << "\"";
  }
  return os;
}
std::ostream& operator<<(std::ostream& os, const VkDescriptorSetLayout& a) {
  auto handle = (uint64_t)(a);
  os << GFR::Uint64ToStr(handle) << std::endl;
  auto debug_name = global_name_resolver->GetObjectDebugName(handle);
  if (debug_name.length() > 0) {
    os << "debugName: \"" << debug_name << "\"";
  }
  return os;
}
std::ostream& operator<<(std::ostream& os, const VkSampler& a) {
  auto handle = (uint64_t)(a);
  os << GFR::Uint64ToStr(handle) << std::endl;
  auto debug_name = global_name_resolver->GetObjectDebugName(handle);
  if (debug_name.length() > 0) {
    os << "debugName: \"" << debug_name << "\"";
  }
  return os;
}
std::ostream& operator<<(std::ostream& os, const VkDescriptorPool& a) {
  auto handle = (uint64_t)(a);
  os << GFR::Uint64ToStr(handle) << std::endl;
  auto debug_name = global_name_resolver->GetObjectDebugName(handle);
  if (debug_name.length() > 0) {
    os << "debugName: \"" << debug_name << "\"";
  }
  return os;
}
std::ostream& operator<<(std::ostream& os, const VkDescriptorSet& a) {
  auto handle = (uint64_t)(a);
  os << GFR::Uint64ToStr(handle) << std::endl;
  auto debug_name = global_name_resolver->GetObjectDebugName(handle);
  if (debug_name.length() > 0) {
    os << "debugName: \"" << debug_name << "\"";
  }
  return os;
}
std::ostream& operator<<(std::ostream& os, const VkFramebuffer& a) {
  auto handle = (uint64_t)(a);
  os << GFR::Uint64ToStr(handle) << std::endl;
  auto debug_name = global_name_resolver->GetObjectDebugName(handle);
  if (debug_name.length() > 0) {
    os << "debugName: \"" << debug_name << "\"";
  }
  return os;
}
std::ostream& operator<<(std::ostream& os, const VkCommandPool& a) {
  auto handle = (uint64_t)(a);
  os << GFR::Uint64ToStr(handle) << std::endl;
  auto debug_name = global_name_resolver->GetObjectDebugName(handle);
  if (debug_name.length() > 0) {
    os << "debugName: \"" << debug_name << "\"";
  }
  return os;
}
std::ostream& operator<<(std::ostream& os, const VkSurfaceKHR& a) {
  auto handle = (uint64_t)(a);
  os << GFR::Uint64ToStr(handle) << std::endl;
  auto debug_name = global_name_resolver->GetObjectDebugName(handle);
  if (debug_name.length() > 0) {
    os << "debugName: \"" << debug_name << "\"";
  }
  return os;
}
std::ostream& operator<<(std::ostream& os, const VkSwapchainKHR& a) {
  auto handle = (uint64_t)(a);
  os << GFR::Uint64ToStr(handle) << std::endl;
  auto debug_name = global_name_resolver->GetObjectDebugName(handle);
  if (debug_name.length() > 0) {
    os << "debugName: \"" << debug_name << "\"";
  }
  return os;
}
std::ostream& operator<<(std::ostream& os, const VkDisplayKHR& a) {
  auto handle = (uint64_t)(a);
  os << GFR::Uint64ToStr(handle) << std::endl;
  auto debug_name = global_name_resolver->GetObjectDebugName(handle);
  if (debug_name.length() > 0) {
    os << "debugName: \"" << debug_name << "\"";
  }
  return os;
}
std::ostream& operator<<(std::ostream& os, const VkDisplayModeKHR& a) {
  auto handle = (uint64_t)(a);
  os << GFR::Uint64ToStr(handle) << std::endl;
  auto debug_name = global_name_resolver->GetObjectDebugName(handle);
  if (debug_name.length() > 0) {
    os << "debugName: \"" << debug_name << "\"";
  }
  return os;
}
std::ostream& operator<<(std::ostream& os,
                         const VkDescriptorUpdateTemplate& a) {
  auto handle = (uint64_t)(a);
  os << GFR::Uint64ToStr(handle) << std::endl;
  auto debug_name = global_name_resolver->GetObjectDebugName(handle);
  if (debug_name.length() > 0) {
    os << "debugName: \"" << debug_name << "\"";
  }
  return os;
}
std::ostream& operator<<(std::ostream& os, const VkSamplerYcbcrConversion& a) {
  auto handle = (uint64_t)(a);
  os << GFR::Uint64ToStr(handle) << std::endl;
  auto debug_name = global_name_resolver->GetObjectDebugName(handle);
  if (debug_name.length() > 0) {
    os << "debugName: \"" << debug_name << "\"";
  }
  return os;
}

// Define enum to string functions.
const char* VkStructureTypeToString(VkStructureType e) {
  switch (e) {
    case VK_STRUCTURE_TYPE_APPLICATION_INFO:
      return "VK_STRUCTURE_TYPE_APPLICATION_INFO";
    case VK_STRUCTURE_TYPE_INSTANCE_CREATE_INFO:
      return "VK_STRUCTURE_TYPE_INSTANCE_CREATE_INFO";
    case VK_STRUCTURE_TYPE_DEVICE_QUEUE_CREATE_INFO:
      return "VK_STRUCTURE_TYPE_DEVICE_QUEUE_CREATE_INFO";
    case VK_STRUCTURE_TYPE_DEVICE_CREATE_INFO:
      return "VK_STRUCTURE_TYPE_DEVICE_CREATE_INFO";
    case VK_STRUCTURE_TYPE_SUBMIT_INFO:
      return "VK_STRUCTURE_TYPE_SUBMIT_INFO";
    case VK_STRUCTURE_TYPE_MEMORY_ALLOCATE_INFO:
      return "VK_STRUCTURE_TYPE_MEMORY_ALLOCATE_INFO";
    case VK_STRUCTURE_TYPE_MAPPED_MEMORY_RANGE:
      return "VK_STRUCTURE_TYPE_MAPPED_MEMORY_RANGE";
    case VK_STRUCTURE_TYPE_BIND_SPARSE_INFO:
      return "VK_STRUCTURE_TYPE_BIND_SPARSE_INFO";
    case VK_STRUCTURE_TYPE_FENCE_CREATE_INFO:
      return "VK_STRUCTURE_TYPE_FENCE_CREATE_INFO";
    case VK_STRUCTURE_TYPE_SEMAPHORE_CREATE_INFO:
      return "VK_STRUCTURE_TYPE_SEMAPHORE_CREATE_INFO";
    case VK_STRUCTURE_TYPE_EVENT_CREATE_INFO:
      return "VK_STRUCTURE_TYPE_EVENT_CREATE_INFO";
    case VK_STRUCTURE_TYPE_QUERY_POOL_CREATE_INFO:
      return "VK_STRUCTURE_TYPE_QUERY_POOL_CREATE_INFO";
    case VK_STRUCTURE_TYPE_BUFFER_CREATE_INFO:
      return "VK_STRUCTURE_TYPE_BUFFER_CREATE_INFO";
    case VK_STRUCTURE_TYPE_BUFFER_VIEW_CREATE_INFO:
      return "VK_STRUCTURE_TYPE_BUFFER_VIEW_CREATE_INFO";
    case VK_STRUCTURE_TYPE_IMAGE_CREATE_INFO:
      return "VK_STRUCTURE_TYPE_IMAGE_CREATE_INFO";
    case VK_STRUCTURE_TYPE_IMAGE_VIEW_CREATE_INFO:
      return "VK_STRUCTURE_TYPE_IMAGE_VIEW_CREATE_INFO";
    case VK_STRUCTURE_TYPE_SHADER_MODULE_CREATE_INFO:
      return "VK_STRUCTURE_TYPE_SHADER_MODULE_CREATE_INFO";
    case VK_STRUCTURE_TYPE_PIPELINE_CACHE_CREATE_INFO:
      return "VK_STRUCTURE_TYPE_PIPELINE_CACHE_CREATE_INFO";
    case VK_STRUCTURE_TYPE_PIPELINE_SHADER_STAGE_CREATE_INFO:
      return "VK_STRUCTURE_TYPE_PIPELINE_SHADER_STAGE_CREATE_INFO";
    case VK_STRUCTURE_TYPE_PIPELINE_VERTEX_INPUT_STATE_CREATE_INFO:
      return "VK_STRUCTURE_TYPE_PIPELINE_VERTEX_INPUT_STATE_CREATE_INFO";
    case VK_STRUCTURE_TYPE_PIPELINE_INPUT_ASSEMBLY_STATE_CREATE_INFO:
      return "VK_STRUCTURE_TYPE_PIPELINE_INPUT_ASSEMBLY_STATE_CREATE_INFO";
    case VK_STRUCTURE_TYPE_PIPELINE_TESSELLATION_STATE_CREATE_INFO:
      return "VK_STRUCTURE_TYPE_PIPELINE_TESSELLATION_STATE_CREATE_INFO";
    case VK_STRUCTURE_TYPE_PIPELINE_VIEWPORT_STATE_CREATE_INFO:
      return "VK_STRUCTURE_TYPE_PIPELINE_VIEWPORT_STATE_CREATE_INFO";
    case VK_STRUCTURE_TYPE_PIPELINE_RASTERIZATION_STATE_CREATE_INFO:
      return "VK_STRUCTURE_TYPE_PIPELINE_RASTERIZATION_STATE_CREATE_INFO";
    case VK_STRUCTURE_TYPE_PIPELINE_MULTISAMPLE_STATE_CREATE_INFO:
      return "VK_STRUCTURE_TYPE_PIPELINE_MULTISAMPLE_STATE_CREATE_INFO";
    case VK_STRUCTURE_TYPE_PIPELINE_DEPTH_STENCIL_STATE_CREATE_INFO:
      return "VK_STRUCTURE_TYPE_PIPELINE_DEPTH_STENCIL_STATE_CREATE_INFO";
    case VK_STRUCTURE_TYPE_PIPELINE_COLOR_BLEND_STATE_CREATE_INFO:
      return "VK_STRUCTURE_TYPE_PIPELINE_COLOR_BLEND_STATE_CREATE_INFO";
    case VK_STRUCTURE_TYPE_PIPELINE_DYNAMIC_STATE_CREATE_INFO:
      return "VK_STRUCTURE_TYPE_PIPELINE_DYNAMIC_STATE_CREATE_INFO";
    case VK_STRUCTURE_TYPE_GRAPHICS_PIPELINE_CREATE_INFO:
      return "VK_STRUCTURE_TYPE_GRAPHICS_PIPELINE_CREATE_INFO";
    case VK_STRUCTURE_TYPE_COMPUTE_PIPELINE_CREATE_INFO:
      return "VK_STRUCTURE_TYPE_COMPUTE_PIPELINE_CREATE_INFO";
    case VK_STRUCTURE_TYPE_PIPELINE_LAYOUT_CREATE_INFO:
      return "VK_STRUCTURE_TYPE_PIPELINE_LAYOUT_CREATE_INFO";
    case VK_STRUCTURE_TYPE_SAMPLER_CREATE_INFO:
      return "VK_STRUCTURE_TYPE_SAMPLER_CREATE_INFO";
    case VK_STRUCTURE_TYPE_DESCRIPTOR_SET_LAYOUT_CREATE_INFO:
      return "VK_STRUCTURE_TYPE_DESCRIPTOR_SET_LAYOUT_CREATE_INFO";
    case VK_STRUCTURE_TYPE_DESCRIPTOR_POOL_CREATE_INFO:
      return "VK_STRUCTURE_TYPE_DESCRIPTOR_POOL_CREATE_INFO";
    case VK_STRUCTURE_TYPE_DESCRIPTOR_SET_ALLOCATE_INFO:
      return "VK_STRUCTURE_TYPE_DESCRIPTOR_SET_ALLOCATE_INFO";
    case VK_STRUCTURE_TYPE_WRITE_DESCRIPTOR_SET:
      return "VK_STRUCTURE_TYPE_WRITE_DESCRIPTOR_SET";
    case VK_STRUCTURE_TYPE_COPY_DESCRIPTOR_SET:
      return "VK_STRUCTURE_TYPE_COPY_DESCRIPTOR_SET";
    case VK_STRUCTURE_TYPE_FRAMEBUFFER_CREATE_INFO:
      return "VK_STRUCTURE_TYPE_FRAMEBUFFER_CREATE_INFO";
    case VK_STRUCTURE_TYPE_RENDER_PASS_CREATE_INFO:
      return "VK_STRUCTURE_TYPE_RENDER_PASS_CREATE_INFO";
    case VK_STRUCTURE_TYPE_COMMAND_POOL_CREATE_INFO:
      return "VK_STRUCTURE_TYPE_COMMAND_POOL_CREATE_INFO";
    case VK_STRUCTURE_TYPE_COMMAND_BUFFER_ALLOCATE_INFO:
      return "VK_STRUCTURE_TYPE_COMMAND_BUFFER_ALLOCATE_INFO";
    case VK_STRUCTURE_TYPE_COMMAND_BUFFER_INHERITANCE_INFO:
      return "VK_STRUCTURE_TYPE_COMMAND_BUFFER_INHERITANCE_INFO";
    case VK_STRUCTURE_TYPE_COMMAND_BUFFER_BEGIN_INFO:
      return "VK_STRUCTURE_TYPE_COMMAND_BUFFER_BEGIN_INFO";
    case VK_STRUCTURE_TYPE_RENDER_PASS_BEGIN_INFO:
      return "VK_STRUCTURE_TYPE_RENDER_PASS_BEGIN_INFO";
    case VK_STRUCTURE_TYPE_BUFFER_MEMORY_BARRIER:
      return "VK_STRUCTURE_TYPE_BUFFER_MEMORY_BARRIER";
    case VK_STRUCTURE_TYPE_IMAGE_MEMORY_BARRIER:
      return "VK_STRUCTURE_TYPE_IMAGE_MEMORY_BARRIER";
    case VK_STRUCTURE_TYPE_MEMORY_BARRIER:
      return "VK_STRUCTURE_TYPE_MEMORY_BARRIER";
    case VK_STRUCTURE_TYPE_LOADER_INSTANCE_CREATE_INFO:
      return "VK_STRUCTURE_TYPE_LOADER_INSTANCE_CREATE_INFO";
    case VK_STRUCTURE_TYPE_LOADER_DEVICE_CREATE_INFO:
      return "VK_STRUCTURE_TYPE_LOADER_DEVICE_CREATE_INFO";
    case VK_STRUCTURE_TYPE_SWAPCHAIN_CREATE_INFO_KHR:
      return "VK_STRUCTURE_TYPE_SWAPCHAIN_CREATE_INFO_KHR";
    case VK_STRUCTURE_TYPE_PRESENT_INFO_KHR:
      return "VK_STRUCTURE_TYPE_PRESENT_INFO_KHR";
    case VK_STRUCTURE_TYPE_DEVICE_GROUP_PRESENT_CAPABILITIES_KHR:
      return "VK_STRUCTURE_TYPE_DEVICE_GROUP_PRESENT_CAPABILITIES_KHR";
    case VK_STRUCTURE_TYPE_IMAGE_SWAPCHAIN_CREATE_INFO_KHR:
      return "VK_STRUCTURE_TYPE_IMAGE_SWAPCHAIN_CREATE_INFO_KHR";
    case VK_STRUCTURE_TYPE_BIND_IMAGE_MEMORY_SWAPCHAIN_INFO_KHR:
      return "VK_STRUCTURE_TYPE_BIND_IMAGE_MEMORY_SWAPCHAIN_INFO_KHR";
    case VK_STRUCTURE_TYPE_ACQUIRE_NEXT_IMAGE_INFO_KHR:
      return "VK_STRUCTURE_TYPE_ACQUIRE_NEXT_IMAGE_INFO_KHR";
    case VK_STRUCTURE_TYPE_DEVICE_GROUP_PRESENT_INFO_KHR:
      return "VK_STRUCTURE_TYPE_DEVICE_GROUP_PRESENT_INFO_KHR";
    case VK_STRUCTURE_TYPE_DEVICE_GROUP_SWAPCHAIN_CREATE_INFO_KHR:
      return "VK_STRUCTURE_TYPE_DEVICE_GROUP_SWAPCHAIN_CREATE_INFO_KHR";
    case VK_STRUCTURE_TYPE_DISPLAY_MODE_CREATE_INFO_KHR:
      return "VK_STRUCTURE_TYPE_DISPLAY_MODE_CREATE_INFO_KHR";
    case VK_STRUCTURE_TYPE_DISPLAY_SURFACE_CREATE_INFO_KHR:
      return "VK_STRUCTURE_TYPE_DISPLAY_SURFACE_CREATE_INFO_KHR";
    case VK_STRUCTURE_TYPE_DISPLAY_PRESENT_INFO_KHR:
      return "VK_STRUCTURE_TYPE_DISPLAY_PRESENT_INFO_KHR";
    case VK_STRUCTURE_TYPE_DEBUG_REPORT_CALLBACK_CREATE_INFO_EXT:
      return "VK_STRUCTURE_TYPE_DEBUG_REPORT_CALLBACK_CREATE_INFO_EXT";
    case VK_STRUCTURE_TYPE_PIPELINE_RASTERIZATION_STATE_RASTERIZATION_ORDER_AMD:
      return "VK_STRUCTURE_TYPE_PIPELINE_RASTERIZATION_STATE_RASTERIZATION_"
             "ORDER_AMD";
    case VK_STRUCTURE_TYPE_DEBUG_MARKER_OBJECT_NAME_INFO_EXT:
      return "VK_STRUCTURE_TYPE_DEBUG_MARKER_OBJECT_NAME_INFO_EXT";
    case VK_STRUCTURE_TYPE_DEBUG_MARKER_OBJECT_TAG_INFO_EXT:
      return "VK_STRUCTURE_TYPE_DEBUG_MARKER_OBJECT_TAG_INFO_EXT";
    case VK_STRUCTURE_TYPE_DEBUG_MARKER_MARKER_INFO_EXT:
      return "VK_STRUCTURE_TYPE_DEBUG_MARKER_MARKER_INFO_EXT";
    case VK_STRUCTURE_TYPE_TEXTURE_LOD_GATHER_FORMAT_PROPERTIES_AMD:
      return "VK_STRUCTURE_TYPE_TEXTURE_LOD_GATHER_FORMAT_PROPERTIES_AMD";
    case VK_STRUCTURE_TYPE_STREAM_DESCRIPTOR_SURFACE_CREATE_INFO_GGP:
      return "VK_STRUCTURE_TYPE_STREAM_DESCRIPTOR_SURFACE_CREATE_INFO_GGP";
    case VK_STRUCTURE_TYPE_IMPORT_MEMORY_FD_INFO_KHR:
      return "VK_STRUCTURE_TYPE_IMPORT_MEMORY_FD_INFO_KHR";
    case VK_STRUCTURE_TYPE_MEMORY_FD_PROPERTIES_KHR:
      return "VK_STRUCTURE_TYPE_MEMORY_FD_PROPERTIES_KHR";
    case VK_STRUCTURE_TYPE_MEMORY_GET_FD_INFO_KHR:
      return "VK_STRUCTURE_TYPE_MEMORY_GET_FD_INFO_KHR";
    case VK_STRUCTURE_TYPE_IMPORT_SEMAPHORE_FD_INFO_KHR:
      return "VK_STRUCTURE_TYPE_IMPORT_SEMAPHORE_FD_INFO_KHR";
    case VK_STRUCTURE_TYPE_SEMAPHORE_GET_FD_INFO_KHR:
      return "VK_STRUCTURE_TYPE_SEMAPHORE_GET_FD_INFO_KHR";
    case VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_PUSH_DESCRIPTOR_PROPERTIES_KHR:
      return "VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_PUSH_DESCRIPTOR_PROPERTIES_KHR";
    case VK_STRUCTURE_TYPE_PRESENT_REGIONS_KHR:
      return "VK_STRUCTURE_TYPE_PRESENT_REGIONS_KHR";
    case VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_DEPTH_CLIP_ENABLE_FEATURES_EXT:
      return "VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_DEPTH_CLIP_ENABLE_FEATURES_EXT";
    case VK_STRUCTURE_TYPE_PIPELINE_RASTERIZATION_DEPTH_CLIP_STATE_CREATE_INFO_EXT:
      return "VK_STRUCTURE_TYPE_PIPELINE_RASTERIZATION_DEPTH_CLIP_STATE_CREATE_"
             "INFO_EXT";
    case VK_STRUCTURE_TYPE_SHARED_PRESENT_SURFACE_CAPABILITIES_KHR:
      return "VK_STRUCTURE_TYPE_SHARED_PRESENT_SURFACE_CAPABILITIES_KHR";
    case VK_STRUCTURE_TYPE_IMPORT_FENCE_FD_INFO_KHR:
      return "VK_STRUCTURE_TYPE_IMPORT_FENCE_FD_INFO_KHR";
    case VK_STRUCTURE_TYPE_FENCE_GET_FD_INFO_KHR:
      return "VK_STRUCTURE_TYPE_FENCE_GET_FD_INFO_KHR";
    case VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_PERFORMANCE_QUERY_FEATURES_KHR:
      return "VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_PERFORMANCE_QUERY_FEATURES_KHR";
    case VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_PERFORMANCE_QUERY_PROPERTIES_KHR:
      return "VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_PERFORMANCE_QUERY_PROPERTIES_"
             "KHR";
    case VK_STRUCTURE_TYPE_QUERY_POOL_PERFORMANCE_CREATE_INFO_KHR:
      return "VK_STRUCTURE_TYPE_QUERY_POOL_PERFORMANCE_CREATE_INFO_KHR";
    case VK_STRUCTURE_TYPE_PERFORMANCE_QUERY_SUBMIT_INFO_KHR:
      return "VK_STRUCTURE_TYPE_PERFORMANCE_QUERY_SUBMIT_INFO_KHR";
    case VK_STRUCTURE_TYPE_ACQUIRE_PROFILING_LOCK_INFO_KHR:
      return "VK_STRUCTURE_TYPE_ACQUIRE_PROFILING_LOCK_INFO_KHR";
    case VK_STRUCTURE_TYPE_PERFORMANCE_COUNTER_KHR:
      return "VK_STRUCTURE_TYPE_PERFORMANCE_COUNTER_KHR";
    case VK_STRUCTURE_TYPE_PERFORMANCE_COUNTER_DESCRIPTION_KHR:
      return "VK_STRUCTURE_TYPE_PERFORMANCE_COUNTER_DESCRIPTION_KHR";
    case VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SURFACE_INFO_2_KHR:
      return "VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SURFACE_INFO_2_KHR";
    case VK_STRUCTURE_TYPE_SURFACE_CAPABILITIES_2_KHR:
      return "VK_STRUCTURE_TYPE_SURFACE_CAPABILITIES_2_KHR";
    case VK_STRUCTURE_TYPE_SURFACE_FORMAT_2_KHR:
      return "VK_STRUCTURE_TYPE_SURFACE_FORMAT_2_KHR";
    case VK_STRUCTURE_TYPE_DISPLAY_PROPERTIES_2_KHR:
      return "VK_STRUCTURE_TYPE_DISPLAY_PROPERTIES_2_KHR";
    case VK_STRUCTURE_TYPE_DISPLAY_PLANE_PROPERTIES_2_KHR:
      return "VK_STRUCTURE_TYPE_DISPLAY_PLANE_PROPERTIES_2_KHR";
    case VK_STRUCTURE_TYPE_DISPLAY_MODE_PROPERTIES_2_KHR:
      return "VK_STRUCTURE_TYPE_DISPLAY_MODE_PROPERTIES_2_KHR";
    case VK_STRUCTURE_TYPE_DISPLAY_PLANE_INFO_2_KHR:
      return "VK_STRUCTURE_TYPE_DISPLAY_PLANE_INFO_2_KHR";
    case VK_STRUCTURE_TYPE_DISPLAY_PLANE_CAPABILITIES_2_KHR:
      return "VK_STRUCTURE_TYPE_DISPLAY_PLANE_CAPABILITIES_2_KHR";
    case VK_STRUCTURE_TYPE_DEBUG_UTILS_OBJECT_NAME_INFO_EXT:
      return "VK_STRUCTURE_TYPE_DEBUG_UTILS_OBJECT_NAME_INFO_EXT";
    case VK_STRUCTURE_TYPE_DEBUG_UTILS_OBJECT_TAG_INFO_EXT:
      return "VK_STRUCTURE_TYPE_DEBUG_UTILS_OBJECT_TAG_INFO_EXT";
    case VK_STRUCTURE_TYPE_DEBUG_UTILS_LABEL_EXT:
      return "VK_STRUCTURE_TYPE_DEBUG_UTILS_LABEL_EXT";
    case VK_STRUCTURE_TYPE_DEBUG_UTILS_MESSENGER_CALLBACK_DATA_EXT:
      return "VK_STRUCTURE_TYPE_DEBUG_UTILS_MESSENGER_CALLBACK_DATA_EXT";
    case VK_STRUCTURE_TYPE_DEBUG_UTILS_MESSENGER_CREATE_INFO_EXT:
      return "VK_STRUCTURE_TYPE_DEBUG_UTILS_MESSENGER_CREATE_INFO_EXT";
    case VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_INLINE_UNIFORM_BLOCK_FEATURES_EXT:
      return "VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_INLINE_UNIFORM_BLOCK_FEATURES_"
             "EXT";
    case VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_INLINE_UNIFORM_BLOCK_PROPERTIES_EXT:
      return "VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_INLINE_UNIFORM_BLOCK_"
             "PROPERTIES_EXT";
    case VK_STRUCTURE_TYPE_WRITE_DESCRIPTOR_SET_INLINE_UNIFORM_BLOCK_EXT:
      return "VK_STRUCTURE_TYPE_WRITE_DESCRIPTOR_SET_INLINE_UNIFORM_BLOCK_EXT";
    case VK_STRUCTURE_TYPE_DESCRIPTOR_POOL_INLINE_UNIFORM_BLOCK_CREATE_INFO_EXT:
      return "VK_STRUCTURE_TYPE_DESCRIPTOR_POOL_INLINE_UNIFORM_BLOCK_CREATE_"
             "INFO_EXT";
    case VK_STRUCTURE_TYPE_SAMPLE_LOCATIONS_INFO_EXT:
      return "VK_STRUCTURE_TYPE_SAMPLE_LOCATIONS_INFO_EXT";
    case VK_STRUCTURE_TYPE_RENDER_PASS_SAMPLE_LOCATIONS_BEGIN_INFO_EXT:
      return "VK_STRUCTURE_TYPE_RENDER_PASS_SAMPLE_LOCATIONS_BEGIN_INFO_EXT";
    case VK_STRUCTURE_TYPE_PIPELINE_SAMPLE_LOCATIONS_STATE_CREATE_INFO_EXT:
      return "VK_STRUCTURE_TYPE_PIPELINE_SAMPLE_LOCATIONS_STATE_CREATE_INFO_"
             "EXT";
    case VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SAMPLE_LOCATIONS_PROPERTIES_EXT:
      return "VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SAMPLE_LOCATIONS_PROPERTIES_"
             "EXT";
    case VK_STRUCTURE_TYPE_MULTISAMPLE_PROPERTIES_EXT:
      return "VK_STRUCTURE_TYPE_MULTISAMPLE_PROPERTIES_EXT";
    case VK_STRUCTURE_TYPE_WRITE_DESCRIPTOR_SET_ACCELERATION_STRUCTURE_KHR:
      return "VK_STRUCTURE_TYPE_WRITE_DESCRIPTOR_SET_ACCELERATION_STRUCTURE_"
             "KHR";
    case VK_STRUCTURE_TYPE_ACCELERATION_STRUCTURE_BUILD_GEOMETRY_INFO_KHR:
      return "VK_STRUCTURE_TYPE_ACCELERATION_STRUCTURE_BUILD_GEOMETRY_INFO_KHR";
    case VK_STRUCTURE_TYPE_ACCELERATION_STRUCTURE_DEVICE_ADDRESS_INFO_KHR:
      return "VK_STRUCTURE_TYPE_ACCELERATION_STRUCTURE_DEVICE_ADDRESS_INFO_KHR";
    case VK_STRUCTURE_TYPE_ACCELERATION_STRUCTURE_GEOMETRY_AABBS_DATA_KHR:
      return "VK_STRUCTURE_TYPE_ACCELERATION_STRUCTURE_GEOMETRY_AABBS_DATA_KHR";
    case VK_STRUCTURE_TYPE_ACCELERATION_STRUCTURE_GEOMETRY_INSTANCES_DATA_KHR:
      return "VK_STRUCTURE_TYPE_ACCELERATION_STRUCTURE_GEOMETRY_INSTANCES_DATA_"
             "KHR";
    case VK_STRUCTURE_TYPE_ACCELERATION_STRUCTURE_GEOMETRY_TRIANGLES_DATA_KHR:
      return "VK_STRUCTURE_TYPE_ACCELERATION_STRUCTURE_GEOMETRY_TRIANGLES_DATA_"
             "KHR";
    case VK_STRUCTURE_TYPE_ACCELERATION_STRUCTURE_GEOMETRY_KHR:
      return "VK_STRUCTURE_TYPE_ACCELERATION_STRUCTURE_GEOMETRY_KHR";
    case VK_STRUCTURE_TYPE_ACCELERATION_STRUCTURE_VERSION_INFO_KHR:
      return "VK_STRUCTURE_TYPE_ACCELERATION_STRUCTURE_VERSION_INFO_KHR";
    case VK_STRUCTURE_TYPE_COPY_ACCELERATION_STRUCTURE_INFO_KHR:
      return "VK_STRUCTURE_TYPE_COPY_ACCELERATION_STRUCTURE_INFO_KHR";
    case VK_STRUCTURE_TYPE_COPY_ACCELERATION_STRUCTURE_TO_MEMORY_INFO_KHR:
      return "VK_STRUCTURE_TYPE_COPY_ACCELERATION_STRUCTURE_TO_MEMORY_INFO_KHR";
    case VK_STRUCTURE_TYPE_COPY_MEMORY_TO_ACCELERATION_STRUCTURE_INFO_KHR:
      return "VK_STRUCTURE_TYPE_COPY_MEMORY_TO_ACCELERATION_STRUCTURE_INFO_KHR";
    case VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_ACCELERATION_STRUCTURE_FEATURES_KHR:
      return "VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_ACCELERATION_STRUCTURE_"
             "FEATURES_KHR";
    case VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_ACCELERATION_STRUCTURE_PROPERTIES_KHR:
      return "VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_ACCELERATION_STRUCTURE_"
             "PROPERTIES_KHR";
    case VK_STRUCTURE_TYPE_ACCELERATION_STRUCTURE_CREATE_INFO_KHR:
      return "VK_STRUCTURE_TYPE_ACCELERATION_STRUCTURE_CREATE_INFO_KHR";
    case VK_STRUCTURE_TYPE_ACCELERATION_STRUCTURE_BUILD_SIZES_INFO_KHR:
      return "VK_STRUCTURE_TYPE_ACCELERATION_STRUCTURE_BUILD_SIZES_INFO_KHR";
    case VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_RAY_TRACING_PIPELINE_FEATURES_KHR:
      return "VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_RAY_TRACING_PIPELINE_FEATURES_"
             "KHR";
    case VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_RAY_TRACING_PIPELINE_PROPERTIES_KHR:
      return "VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_RAY_TRACING_PIPELINE_"
             "PROPERTIES_KHR";
    case VK_STRUCTURE_TYPE_RAY_TRACING_PIPELINE_CREATE_INFO_KHR:
      return "VK_STRUCTURE_TYPE_RAY_TRACING_PIPELINE_CREATE_INFO_KHR";
    case VK_STRUCTURE_TYPE_RAY_TRACING_SHADER_GROUP_CREATE_INFO_KHR:
      return "VK_STRUCTURE_TYPE_RAY_TRACING_SHADER_GROUP_CREATE_INFO_KHR";
    case VK_STRUCTURE_TYPE_RAY_TRACING_PIPELINE_INTERFACE_CREATE_INFO_KHR:
      return "VK_STRUCTURE_TYPE_RAY_TRACING_PIPELINE_INTERFACE_CREATE_INFO_KHR";
    case VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_RAY_QUERY_FEATURES_KHR:
      return "VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_RAY_QUERY_FEATURES_KHR";
    case VK_STRUCTURE_TYPE_DRM_FORMAT_MODIFIER_PROPERTIES_LIST_EXT:
      return "VK_STRUCTURE_TYPE_DRM_FORMAT_MODIFIER_PROPERTIES_LIST_EXT";
    case VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_IMAGE_DRM_FORMAT_MODIFIER_INFO_EXT:
      return "VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_IMAGE_DRM_FORMAT_MODIFIER_INFO_"
             "EXT";
    case VK_STRUCTURE_TYPE_IMAGE_DRM_FORMAT_MODIFIER_LIST_CREATE_INFO_EXT:
      return "VK_STRUCTURE_TYPE_IMAGE_DRM_FORMAT_MODIFIER_LIST_CREATE_INFO_EXT";
    case VK_STRUCTURE_TYPE_IMAGE_DRM_FORMAT_MODIFIER_EXPLICIT_CREATE_INFO_EXT:
      return "VK_STRUCTURE_TYPE_IMAGE_DRM_FORMAT_MODIFIER_EXPLICIT_CREATE_INFO_"
             "EXT";
    case VK_STRUCTURE_TYPE_IMAGE_DRM_FORMAT_MODIFIER_PROPERTIES_EXT:
      return "VK_STRUCTURE_TYPE_IMAGE_DRM_FORMAT_MODIFIER_PROPERTIES_EXT";
    case VK_STRUCTURE_TYPE_DEVICE_QUEUE_GLOBAL_PRIORITY_CREATE_INFO_EXT:
      return "VK_STRUCTURE_TYPE_DEVICE_QUEUE_GLOBAL_PRIORITY_CREATE_INFO_EXT";
    case VK_STRUCTURE_TYPE_IMPORT_MEMORY_HOST_POINTER_INFO_EXT:
      return "VK_STRUCTURE_TYPE_IMPORT_MEMORY_HOST_POINTER_INFO_EXT";
    case VK_STRUCTURE_TYPE_MEMORY_HOST_POINTER_PROPERTIES_EXT:
      return "VK_STRUCTURE_TYPE_MEMORY_HOST_POINTER_PROPERTIES_EXT";
    case VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_EXTERNAL_MEMORY_HOST_PROPERTIES_EXT:
      return "VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_EXTERNAL_MEMORY_HOST_"
             "PROPERTIES_EXT";
    case VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SHADER_CLOCK_FEATURES_KHR:
      return "VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SHADER_CLOCK_FEATURES_KHR";
    case VK_STRUCTURE_TYPE_PIPELINE_COMPILER_CONTROL_CREATE_INFO_AMD:
      return "VK_STRUCTURE_TYPE_PIPELINE_COMPILER_CONTROL_CREATE_INFO_AMD";
    case VK_STRUCTURE_TYPE_CALIBRATED_TIMESTAMP_INFO_EXT:
      return "VK_STRUCTURE_TYPE_CALIBRATED_TIMESTAMP_INFO_EXT";
    case VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SHADER_CORE_PROPERTIES_AMD:
      return "VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SHADER_CORE_PROPERTIES_AMD";
    case VK_STRUCTURE_TYPE_DEVICE_MEMORY_OVERALLOCATION_CREATE_INFO_AMD:
      return "VK_STRUCTURE_TYPE_DEVICE_MEMORY_OVERALLOCATION_CREATE_INFO_AMD";
    case VK_STRUCTURE_TYPE_PRESENT_FRAME_TOKEN_GGP:
      return "VK_STRUCTURE_TYPE_PRESENT_FRAME_TOKEN_GGP";
    case VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_PCI_BUS_INFO_PROPERTIES_EXT:
      return "VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_PCI_BUS_INFO_PROPERTIES_EXT";
    case VK_STRUCTURE_TYPE_DISPLAY_NATIVE_HDR_SURFACE_CAPABILITIES_AMD:
      return "VK_STRUCTURE_TYPE_DISPLAY_NATIVE_HDR_SURFACE_CAPABILITIES_AMD";
    case VK_STRUCTURE_TYPE_SWAPCHAIN_DISPLAY_NATIVE_HDR_CREATE_INFO_AMD:
      return "VK_STRUCTURE_TYPE_SWAPCHAIN_DISPLAY_NATIVE_HDR_CREATE_INFO_AMD";
    case VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SHADER_TERMINATE_INVOCATION_FEATURES_KHR:
      return "VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SHADER_TERMINATE_INVOCATION_"
             "FEATURES_KHR";
    case VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_FRAGMENT_DENSITY_MAP_FEATURES_EXT:
      return "VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_FRAGMENT_DENSITY_MAP_FEATURES_"
             "EXT";
    case VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_FRAGMENT_DENSITY_MAP_PROPERTIES_EXT:
      return "VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_FRAGMENT_DENSITY_MAP_"
             "PROPERTIES_EXT";
    case VK_STRUCTURE_TYPE_RENDER_PASS_FRAGMENT_DENSITY_MAP_CREATE_INFO_EXT:
      return "VK_STRUCTURE_TYPE_RENDER_PASS_FRAGMENT_DENSITY_MAP_CREATE_INFO_"
             "EXT";
    case VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SUBGROUP_SIZE_CONTROL_PROPERTIES_EXT:
      return "VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SUBGROUP_SIZE_CONTROL_"
             "PROPERTIES_EXT";
    case VK_STRUCTURE_TYPE_PIPELINE_SHADER_STAGE_REQUIRED_SUBGROUP_SIZE_CREATE_INFO_EXT:
      return "VK_STRUCTURE_TYPE_PIPELINE_SHADER_STAGE_REQUIRED_SUBGROUP_SIZE_"
             "CREATE_INFO_EXT";
    case VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SUBGROUP_SIZE_CONTROL_FEATURES_EXT:
      return "VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SUBGROUP_SIZE_CONTROL_FEATURES_"
             "EXT";
    case VK_STRUCTURE_TYPE_FRAGMENT_SHADING_RATE_ATTACHMENT_INFO_KHR:
      return "VK_STRUCTURE_TYPE_FRAGMENT_SHADING_RATE_ATTACHMENT_INFO_KHR";
    case VK_STRUCTURE_TYPE_PIPELINE_FRAGMENT_SHADING_RATE_STATE_CREATE_INFO_KHR:
      return "VK_STRUCTURE_TYPE_PIPELINE_FRAGMENT_SHADING_RATE_STATE_CREATE_"
             "INFO_KHR";
    case VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_FRAGMENT_SHADING_RATE_PROPERTIES_KHR:
      return "VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_FRAGMENT_SHADING_RATE_"
             "PROPERTIES_KHR";
    case VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_FRAGMENT_SHADING_RATE_FEATURES_KHR:
      return "VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_FRAGMENT_SHADING_RATE_FEATURES_"
             "KHR";
    case VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_FRAGMENT_SHADING_RATE_KHR:
      return "VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_FRAGMENT_SHADING_RATE_KHR";
    case VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SHADER_CORE_PROPERTIES_2_AMD:
      return "VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SHADER_CORE_PROPERTIES_2_AMD";
    case VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_COHERENT_MEMORY_FEATURES_AMD:
      return "VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_COHERENT_MEMORY_FEATURES_AMD";
    case VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SHADER_IMAGE_ATOMIC_INT64_FEATURES_EXT:
      return "VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SHADER_IMAGE_ATOMIC_INT64_"
             "FEATURES_EXT";
    case VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_MEMORY_BUDGET_PROPERTIES_EXT:
      return "VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_MEMORY_BUDGET_PROPERTIES_EXT";
    case VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_MEMORY_PRIORITY_FEATURES_EXT:
      return "VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_MEMORY_PRIORITY_FEATURES_EXT";
    case VK_STRUCTURE_TYPE_MEMORY_PRIORITY_ALLOCATE_INFO_EXT:
      return "VK_STRUCTURE_TYPE_MEMORY_PRIORITY_ALLOCATE_INFO_EXT";
    case VK_STRUCTURE_TYPE_SURFACE_PROTECTED_CAPABILITIES_KHR:
      return "VK_STRUCTURE_TYPE_SURFACE_PROTECTED_CAPABILITIES_KHR";
    case VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_TOOL_PROPERTIES_EXT:
      return "VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_TOOL_PROPERTIES_EXT";
    case VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_FRAGMENT_SHADER_INTERLOCK_FEATURES_EXT:
      return "VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_FRAGMENT_SHADER_INTERLOCK_"
             "FEATURES_EXT";
    case VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_YCBCR_IMAGE_ARRAYS_FEATURES_EXT:
      return "VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_YCBCR_IMAGE_ARRAYS_FEATURES_"
             "EXT";
    case VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_PROVOKING_VERTEX_FEATURES_EXT:
      return "VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_PROVOKING_VERTEX_FEATURES_EXT";
    case VK_STRUCTURE_TYPE_PIPELINE_RASTERIZATION_PROVOKING_VERTEX_STATE_CREATE_INFO_EXT:
      return "VK_STRUCTURE_TYPE_PIPELINE_RASTERIZATION_PROVOKING_VERTEX_STATE_"
             "CREATE_INFO_EXT";
    case VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_PROVOKING_VERTEX_PROPERTIES_EXT:
      return "VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_PROVOKING_VERTEX_PROPERTIES_"
             "EXT";
    case VK_STRUCTURE_TYPE_HEADLESS_SURFACE_CREATE_INFO_EXT:
      return "VK_STRUCTURE_TYPE_HEADLESS_SURFACE_CREATE_INFO_EXT";
    case VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_LINE_RASTERIZATION_FEATURES_EXT:
      return "VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_LINE_RASTERIZATION_FEATURES_"
             "EXT";
    case VK_STRUCTURE_TYPE_PIPELINE_RASTERIZATION_LINE_STATE_CREATE_INFO_EXT:
      return "VK_STRUCTURE_TYPE_PIPELINE_RASTERIZATION_LINE_STATE_CREATE_INFO_"
             "EXT";
    case VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_LINE_RASTERIZATION_PROPERTIES_EXT:
      return "VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_LINE_RASTERIZATION_PROPERTIES_"
             "EXT";
    case VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_INDEX_TYPE_UINT8_FEATURES_EXT:
      return "VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_INDEX_TYPE_UINT8_FEATURES_EXT";
    case VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_EXTENDED_DYNAMIC_STATE_FEATURES_EXT:
      return "VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_EXTENDED_DYNAMIC_STATE_"
             "FEATURES_EXT";
    case VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_PIPELINE_EXECUTABLE_PROPERTIES_FEATURES_KHR:
      return "VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_PIPELINE_EXECUTABLE_PROPERTIES_"
             "FEATURES_KHR";
    case VK_STRUCTURE_TYPE_PIPELINE_INFO_KHR:
      return "VK_STRUCTURE_TYPE_PIPELINE_INFO_KHR";
    case VK_STRUCTURE_TYPE_PIPELINE_EXECUTABLE_PROPERTIES_KHR:
      return "VK_STRUCTURE_TYPE_PIPELINE_EXECUTABLE_PROPERTIES_KHR";
    case VK_STRUCTURE_TYPE_PIPELINE_EXECUTABLE_INFO_KHR:
      return "VK_STRUCTURE_TYPE_PIPELINE_EXECUTABLE_INFO_KHR";
    case VK_STRUCTURE_TYPE_PIPELINE_EXECUTABLE_STATISTIC_KHR:
      return "VK_STRUCTURE_TYPE_PIPELINE_EXECUTABLE_STATISTIC_KHR";
    case VK_STRUCTURE_TYPE_PIPELINE_EXECUTABLE_INTERNAL_REPRESENTATION_KHR:
      return "VK_STRUCTURE_TYPE_PIPELINE_EXECUTABLE_INTERNAL_REPRESENTATION_"
             "KHR";
    case VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SHADER_DEMOTE_TO_HELPER_INVOCATION_FEATURES_EXT:
      return "VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SHADER_DEMOTE_TO_HELPER_"
             "INVOCATION_FEATURES_EXT";
    case VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_TEXEL_BUFFER_ALIGNMENT_FEATURES_EXT:
      return "VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_TEXEL_BUFFER_ALIGNMENT_"
             "FEATURES_EXT";
    case VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_TEXEL_BUFFER_ALIGNMENT_PROPERTIES_EXT:
      return "VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_TEXEL_BUFFER_ALIGNMENT_"
             "PROPERTIES_EXT";
    case VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_DEVICE_MEMORY_REPORT_FEATURES_EXT:
      return "VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_DEVICE_MEMORY_REPORT_FEATURES_"
             "EXT";
    case VK_STRUCTURE_TYPE_DEVICE_DEVICE_MEMORY_REPORT_CREATE_INFO_EXT:
      return "VK_STRUCTURE_TYPE_DEVICE_DEVICE_MEMORY_REPORT_CREATE_INFO_EXT";
    case VK_STRUCTURE_TYPE_DEVICE_MEMORY_REPORT_CALLBACK_DATA_EXT:
      return "VK_STRUCTURE_TYPE_DEVICE_MEMORY_REPORT_CALLBACK_DATA_EXT";
    case VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_ROBUSTNESS_2_FEATURES_EXT:
      return "VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_ROBUSTNESS_2_FEATURES_EXT";
    case VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_ROBUSTNESS_2_PROPERTIES_EXT:
      return "VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_ROBUSTNESS_2_PROPERTIES_EXT";
    case VK_STRUCTURE_TYPE_SAMPLER_CUSTOM_BORDER_COLOR_CREATE_INFO_EXT:
      return "VK_STRUCTURE_TYPE_SAMPLER_CUSTOM_BORDER_COLOR_CREATE_INFO_EXT";
    case VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_CUSTOM_BORDER_COLOR_PROPERTIES_EXT:
      return "VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_CUSTOM_BORDER_COLOR_PROPERTIES_"
             "EXT";
    case VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_CUSTOM_BORDER_COLOR_FEATURES_EXT:
      return "VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_CUSTOM_BORDER_COLOR_FEATURES_"
             "EXT";
    case VK_STRUCTURE_TYPE_PIPELINE_LIBRARY_CREATE_INFO_KHR:
      return "VK_STRUCTURE_TYPE_PIPELINE_LIBRARY_CREATE_INFO_KHR";
    case VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_PIPELINE_CREATION_CACHE_CONTROL_FEATURES_EXT:
      return "VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_PIPELINE_CREATION_CACHE_"
             "CONTROL_FEATURES_EXT";
    case VK_STRUCTURE_TYPE_MEMORY_BARRIER_2_KHR:
      return "VK_STRUCTURE_TYPE_MEMORY_BARRIER_2_KHR";
    case VK_STRUCTURE_TYPE_BUFFER_MEMORY_BARRIER_2_KHR:
      return "VK_STRUCTURE_TYPE_BUFFER_MEMORY_BARRIER_2_KHR";
    case VK_STRUCTURE_TYPE_IMAGE_MEMORY_BARRIER_2_KHR:
      return "VK_STRUCTURE_TYPE_IMAGE_MEMORY_BARRIER_2_KHR";
    case VK_STRUCTURE_TYPE_DEPENDENCY_INFO_KHR:
      return "VK_STRUCTURE_TYPE_DEPENDENCY_INFO_KHR";
    case VK_STRUCTURE_TYPE_SUBMIT_INFO_2_KHR:
      return "VK_STRUCTURE_TYPE_SUBMIT_INFO_2_KHR";
    case VK_STRUCTURE_TYPE_SEMAPHORE_SUBMIT_INFO_KHR:
      return "VK_STRUCTURE_TYPE_SEMAPHORE_SUBMIT_INFO_KHR";
    case VK_STRUCTURE_TYPE_COMMAND_BUFFER_SUBMIT_INFO_KHR:
      return "VK_STRUCTURE_TYPE_COMMAND_BUFFER_SUBMIT_INFO_KHR";
    case VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SYNCHRONIZATION_2_FEATURES_KHR:
      return "VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SYNCHRONIZATION_2_FEATURES_KHR";
    case VK_STRUCTURE_TYPE_QUEUE_FAMILY_CHECKPOINT_PROPERTIES_2_NV:
      return "VK_STRUCTURE_TYPE_QUEUE_FAMILY_CHECKPOINT_PROPERTIES_2_NV";
    case VK_STRUCTURE_TYPE_CHECKPOINT_DATA_2_NV:
      return "VK_STRUCTURE_TYPE_CHECKPOINT_DATA_2_NV";
    case VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SHADER_SUBGROUP_UNIFORM_CONTROL_FLOW_FEATURES_KHR:
      return "VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SHADER_SUBGROUP_UNIFORM_"
             "CONTROL_FLOW_FEATURES_KHR";
    case VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_ZERO_INITIALIZE_WORKGROUP_MEMORY_FEATURES_KHR:
      return "VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_ZERO_INITIALIZE_WORKGROUP_"
             "MEMORY_FEATURES_KHR";
    case VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_YCBCR_2_PLANE_444_FORMATS_FEATURES_EXT:
      return "VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_YCBCR_2_PLANE_444_FORMATS_"
             "FEATURES_EXT";
    case VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_FRAGMENT_DENSITY_MAP_2_FEATURES_EXT:
      return "VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_FRAGMENT_DENSITY_MAP_2_"
             "FEATURES_EXT";
    case VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_FRAGMENT_DENSITY_MAP_2_PROPERTIES_EXT:
      return "VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_FRAGMENT_DENSITY_MAP_2_"
             "PROPERTIES_EXT";
    case VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_IMAGE_ROBUSTNESS_FEATURES_EXT:
      return "VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_IMAGE_ROBUSTNESS_FEATURES_EXT";
    case VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_WORKGROUP_MEMORY_EXPLICIT_LAYOUT_FEATURES_KHR:
      return "VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_WORKGROUP_MEMORY_EXPLICIT_"
             "LAYOUT_FEATURES_KHR";
    case VK_STRUCTURE_TYPE_COPY_BUFFER_INFO_2_KHR:
      return "VK_STRUCTURE_TYPE_COPY_BUFFER_INFO_2_KHR";
    case VK_STRUCTURE_TYPE_COPY_IMAGE_INFO_2_KHR:
      return "VK_STRUCTURE_TYPE_COPY_IMAGE_INFO_2_KHR";
    case VK_STRUCTURE_TYPE_COPY_BUFFER_TO_IMAGE_INFO_2_KHR:
      return "VK_STRUCTURE_TYPE_COPY_BUFFER_TO_IMAGE_INFO_2_KHR";
    case VK_STRUCTURE_TYPE_COPY_IMAGE_TO_BUFFER_INFO_2_KHR:
      return "VK_STRUCTURE_TYPE_COPY_IMAGE_TO_BUFFER_INFO_2_KHR";
    case VK_STRUCTURE_TYPE_BLIT_IMAGE_INFO_2_KHR:
      return "VK_STRUCTURE_TYPE_BLIT_IMAGE_INFO_2_KHR";
    case VK_STRUCTURE_TYPE_RESOLVE_IMAGE_INFO_2_KHR:
      return "VK_STRUCTURE_TYPE_RESOLVE_IMAGE_INFO_2_KHR";
    case VK_STRUCTURE_TYPE_BUFFER_COPY_2_KHR:
      return "VK_STRUCTURE_TYPE_BUFFER_COPY_2_KHR";
    case VK_STRUCTURE_TYPE_IMAGE_COPY_2_KHR:
      return "VK_STRUCTURE_TYPE_IMAGE_COPY_2_KHR";
    case VK_STRUCTURE_TYPE_IMAGE_BLIT_2_KHR:
      return "VK_STRUCTURE_TYPE_IMAGE_BLIT_2_KHR";
    case VK_STRUCTURE_TYPE_BUFFER_IMAGE_COPY_2_KHR:
      return "VK_STRUCTURE_TYPE_BUFFER_IMAGE_COPY_2_KHR";
    case VK_STRUCTURE_TYPE_IMAGE_RESOLVE_2_KHR:
      return "VK_STRUCTURE_TYPE_IMAGE_RESOLVE_2_KHR";
    case VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_4444_FORMATS_FEATURES_EXT:
      return "VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_4444_FORMATS_FEATURES_EXT";
    case VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_VERTEX_INPUT_DYNAMIC_STATE_FEATURES_EXT:
      return "VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_VERTEX_INPUT_DYNAMIC_STATE_"
             "FEATURES_EXT";
    case VK_STRUCTURE_TYPE_VERTEX_INPUT_BINDING_DESCRIPTION_2_EXT:
      return "VK_STRUCTURE_TYPE_VERTEX_INPUT_BINDING_DESCRIPTION_2_EXT";
    case VK_STRUCTURE_TYPE_VERTEX_INPUT_ATTRIBUTE_DESCRIPTION_2_EXT:
      return "VK_STRUCTURE_TYPE_VERTEX_INPUT_ATTRIBUTE_DESCRIPTION_2_EXT";
    case VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_DRM_PROPERTIES_EXT:
      return "VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_DRM_PROPERTIES_EXT";
    case VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_EXTENDED_DYNAMIC_STATE_2_FEATURES_EXT:
      return "VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_EXTENDED_DYNAMIC_STATE_2_"
             "FEATURES_EXT";
    case VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_COLOR_WRITE_ENABLE_FEATURES_EXT:
      return "VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_COLOR_WRITE_ENABLE_FEATURES_"
             "EXT";
    case VK_STRUCTURE_TYPE_PIPELINE_COLOR_WRITE_CREATE_INFO_EXT:
      return "VK_STRUCTURE_TYPE_PIPELINE_COLOR_WRITE_CREATE_INFO_EXT";
    case VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_GLOBAL_PRIORITY_QUERY_FEATURES_EXT:
      return "VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_GLOBAL_PRIORITY_QUERY_FEATURES_"
             "EXT";
    case VK_STRUCTURE_TYPE_QUEUE_FAMILY_GLOBAL_PRIORITY_PROPERTIES_EXT:
      return "VK_STRUCTURE_TYPE_QUEUE_FAMILY_GLOBAL_PRIORITY_PROPERTIES_EXT";
    case VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_MULTI_DRAW_FEATURES_EXT:
      return "VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_MULTI_DRAW_FEATURES_EXT";
    case VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_MULTI_DRAW_PROPERTIES_EXT:
      return "VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_MULTI_DRAW_PROPERTIES_EXT";
    case VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SUBGROUP_PROPERTIES:
      return "VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SUBGROUP_PROPERTIES";
    case VK_STRUCTURE_TYPE_BIND_BUFFER_MEMORY_INFO:
      return "VK_STRUCTURE_TYPE_BIND_BUFFER_MEMORY_INFO";
    case VK_STRUCTURE_TYPE_BIND_IMAGE_MEMORY_INFO:
      return "VK_STRUCTURE_TYPE_BIND_IMAGE_MEMORY_INFO";
    case VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_16BIT_STORAGE_FEATURES:
      return "VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_16BIT_STORAGE_FEATURES";
    case VK_STRUCTURE_TYPE_MEMORY_DEDICATED_REQUIREMENTS:
      return "VK_STRUCTURE_TYPE_MEMORY_DEDICATED_REQUIREMENTS";
    case VK_STRUCTURE_TYPE_MEMORY_DEDICATED_ALLOCATE_INFO:
      return "VK_STRUCTURE_TYPE_MEMORY_DEDICATED_ALLOCATE_INFO";
    case VK_STRUCTURE_TYPE_MEMORY_ALLOCATE_FLAGS_INFO:
      return "VK_STRUCTURE_TYPE_MEMORY_ALLOCATE_FLAGS_INFO";
    case VK_STRUCTURE_TYPE_DEVICE_GROUP_RENDER_PASS_BEGIN_INFO:
      return "VK_STRUCTURE_TYPE_DEVICE_GROUP_RENDER_PASS_BEGIN_INFO";
    case VK_STRUCTURE_TYPE_DEVICE_GROUP_COMMAND_BUFFER_BEGIN_INFO:
      return "VK_STRUCTURE_TYPE_DEVICE_GROUP_COMMAND_BUFFER_BEGIN_INFO";
    case VK_STRUCTURE_TYPE_DEVICE_GROUP_SUBMIT_INFO:
      return "VK_STRUCTURE_TYPE_DEVICE_GROUP_SUBMIT_INFO";
    case VK_STRUCTURE_TYPE_DEVICE_GROUP_BIND_SPARSE_INFO:
      return "VK_STRUCTURE_TYPE_DEVICE_GROUP_BIND_SPARSE_INFO";
    case VK_STRUCTURE_TYPE_BIND_BUFFER_MEMORY_DEVICE_GROUP_INFO:
      return "VK_STRUCTURE_TYPE_BIND_BUFFER_MEMORY_DEVICE_GROUP_INFO";
    case VK_STRUCTURE_TYPE_BIND_IMAGE_MEMORY_DEVICE_GROUP_INFO:
      return "VK_STRUCTURE_TYPE_BIND_IMAGE_MEMORY_DEVICE_GROUP_INFO";
    case VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_GROUP_PROPERTIES:
      return "VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_GROUP_PROPERTIES";
    case VK_STRUCTURE_TYPE_DEVICE_GROUP_DEVICE_CREATE_INFO:
      return "VK_STRUCTURE_TYPE_DEVICE_GROUP_DEVICE_CREATE_INFO";
    case VK_STRUCTURE_TYPE_BUFFER_MEMORY_REQUIREMENTS_INFO_2:
      return "VK_STRUCTURE_TYPE_BUFFER_MEMORY_REQUIREMENTS_INFO_2";
    case VK_STRUCTURE_TYPE_IMAGE_MEMORY_REQUIREMENTS_INFO_2:
      return "VK_STRUCTURE_TYPE_IMAGE_MEMORY_REQUIREMENTS_INFO_2";
    case VK_STRUCTURE_TYPE_IMAGE_SPARSE_MEMORY_REQUIREMENTS_INFO_2:
      return "VK_STRUCTURE_TYPE_IMAGE_SPARSE_MEMORY_REQUIREMENTS_INFO_2";
    case VK_STRUCTURE_TYPE_MEMORY_REQUIREMENTS_2:
      return "VK_STRUCTURE_TYPE_MEMORY_REQUIREMENTS_2";
    case VK_STRUCTURE_TYPE_SPARSE_IMAGE_MEMORY_REQUIREMENTS_2:
      return "VK_STRUCTURE_TYPE_SPARSE_IMAGE_MEMORY_REQUIREMENTS_2";
    case VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_FEATURES_2:
      return "VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_FEATURES_2";
    case VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_PROPERTIES_2:
      return "VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_PROPERTIES_2";
    case VK_STRUCTURE_TYPE_FORMAT_PROPERTIES_2:
      return "VK_STRUCTURE_TYPE_FORMAT_PROPERTIES_2";
    case VK_STRUCTURE_TYPE_IMAGE_FORMAT_PROPERTIES_2:
      return "VK_STRUCTURE_TYPE_IMAGE_FORMAT_PROPERTIES_2";
    case VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_IMAGE_FORMAT_INFO_2:
      return "VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_IMAGE_FORMAT_INFO_2";
    case VK_STRUCTURE_TYPE_QUEUE_FAMILY_PROPERTIES_2:
      return "VK_STRUCTURE_TYPE_QUEUE_FAMILY_PROPERTIES_2";
    case VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_MEMORY_PROPERTIES_2:
      return "VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_MEMORY_PROPERTIES_2";
    case VK_STRUCTURE_TYPE_SPARSE_IMAGE_FORMAT_PROPERTIES_2:
      return "VK_STRUCTURE_TYPE_SPARSE_IMAGE_FORMAT_PROPERTIES_2";
    case VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SPARSE_IMAGE_FORMAT_INFO_2:
      return "VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SPARSE_IMAGE_FORMAT_INFO_2";
    case VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_POINT_CLIPPING_PROPERTIES:
      return "VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_POINT_CLIPPING_PROPERTIES";
    case VK_STRUCTURE_TYPE_RENDER_PASS_INPUT_ATTACHMENT_ASPECT_CREATE_INFO:
      return "VK_STRUCTURE_TYPE_RENDER_PASS_INPUT_ATTACHMENT_ASPECT_CREATE_"
             "INFO";
    case VK_STRUCTURE_TYPE_IMAGE_VIEW_USAGE_CREATE_INFO:
      return "VK_STRUCTURE_TYPE_IMAGE_VIEW_USAGE_CREATE_INFO";
    case VK_STRUCTURE_TYPE_PIPELINE_TESSELLATION_DOMAIN_ORIGIN_STATE_CREATE_INFO:
      return "VK_STRUCTURE_TYPE_PIPELINE_TESSELLATION_DOMAIN_ORIGIN_STATE_"
             "CREATE_INFO";
    case VK_STRUCTURE_TYPE_RENDER_PASS_MULTIVIEW_CREATE_INFO:
      return "VK_STRUCTURE_TYPE_RENDER_PASS_MULTIVIEW_CREATE_INFO";
    case VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_MULTIVIEW_FEATURES:
      return "VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_MULTIVIEW_FEATURES";
    case VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_MULTIVIEW_PROPERTIES:
      return "VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_MULTIVIEW_PROPERTIES";
    case VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_VARIABLE_POINTERS_FEATURES:
      return "VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_VARIABLE_POINTERS_FEATURES";
    case VK_STRUCTURE_TYPE_PROTECTED_SUBMIT_INFO:
      return "VK_STRUCTURE_TYPE_PROTECTED_SUBMIT_INFO";
    case VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_PROTECTED_MEMORY_FEATURES:
      return "VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_PROTECTED_MEMORY_FEATURES";
    case VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_PROTECTED_MEMORY_PROPERTIES:
      return "VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_PROTECTED_MEMORY_PROPERTIES";
    case VK_STRUCTURE_TYPE_DEVICE_QUEUE_INFO_2:
      return "VK_STRUCTURE_TYPE_DEVICE_QUEUE_INFO_2";
    case VK_STRUCTURE_TYPE_SAMPLER_YCBCR_CONVERSION_CREATE_INFO:
      return "VK_STRUCTURE_TYPE_SAMPLER_YCBCR_CONVERSION_CREATE_INFO";
    case VK_STRUCTURE_TYPE_SAMPLER_YCBCR_CONVERSION_INFO:
      return "VK_STRUCTURE_TYPE_SAMPLER_YCBCR_CONVERSION_INFO";
    case VK_STRUCTURE_TYPE_BIND_IMAGE_PLANE_MEMORY_INFO:
      return "VK_STRUCTURE_TYPE_BIND_IMAGE_PLANE_MEMORY_INFO";
    case VK_STRUCTURE_TYPE_IMAGE_PLANE_MEMORY_REQUIREMENTS_INFO:
      return "VK_STRUCTURE_TYPE_IMAGE_PLANE_MEMORY_REQUIREMENTS_INFO";
    case VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SAMPLER_YCBCR_CONVERSION_FEATURES:
      return "VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SAMPLER_YCBCR_CONVERSION_"
             "FEATURES";
    case VK_STRUCTURE_TYPE_SAMPLER_YCBCR_CONVERSION_IMAGE_FORMAT_PROPERTIES:
      return "VK_STRUCTURE_TYPE_SAMPLER_YCBCR_CONVERSION_IMAGE_FORMAT_"
             "PROPERTIES";
    case VK_STRUCTURE_TYPE_DESCRIPTOR_UPDATE_TEMPLATE_CREATE_INFO:
      return "VK_STRUCTURE_TYPE_DESCRIPTOR_UPDATE_TEMPLATE_CREATE_INFO";
    case VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_EXTERNAL_IMAGE_FORMAT_INFO:
      return "VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_EXTERNAL_IMAGE_FORMAT_INFO";
    case VK_STRUCTURE_TYPE_EXTERNAL_IMAGE_FORMAT_PROPERTIES:
      return "VK_STRUCTURE_TYPE_EXTERNAL_IMAGE_FORMAT_PROPERTIES";
    case VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_EXTERNAL_BUFFER_INFO:
      return "VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_EXTERNAL_BUFFER_INFO";
    case VK_STRUCTURE_TYPE_EXTERNAL_BUFFER_PROPERTIES:
      return "VK_STRUCTURE_TYPE_EXTERNAL_BUFFER_PROPERTIES";
    case VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_ID_PROPERTIES:
      return "VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_ID_PROPERTIES";
    case VK_STRUCTURE_TYPE_EXTERNAL_MEMORY_BUFFER_CREATE_INFO:
      return "VK_STRUCTURE_TYPE_EXTERNAL_MEMORY_BUFFER_CREATE_INFO";
    case VK_STRUCTURE_TYPE_EXTERNAL_MEMORY_IMAGE_CREATE_INFO:
      return "VK_STRUCTURE_TYPE_EXTERNAL_MEMORY_IMAGE_CREATE_INFO";
    case VK_STRUCTURE_TYPE_EXPORT_MEMORY_ALLOCATE_INFO:
      return "VK_STRUCTURE_TYPE_EXPORT_MEMORY_ALLOCATE_INFO";
    case VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_EXTERNAL_FENCE_INFO:
      return "VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_EXTERNAL_FENCE_INFO";
    case VK_STRUCTURE_TYPE_EXTERNAL_FENCE_PROPERTIES:
      return "VK_STRUCTURE_TYPE_EXTERNAL_FENCE_PROPERTIES";
    case VK_STRUCTURE_TYPE_EXPORT_FENCE_CREATE_INFO:
      return "VK_STRUCTURE_TYPE_EXPORT_FENCE_CREATE_INFO";
    case VK_STRUCTURE_TYPE_EXPORT_SEMAPHORE_CREATE_INFO:
      return "VK_STRUCTURE_TYPE_EXPORT_SEMAPHORE_CREATE_INFO";
    case VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_EXTERNAL_SEMAPHORE_INFO:
      return "VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_EXTERNAL_SEMAPHORE_INFO";
    case VK_STRUCTURE_TYPE_EXTERNAL_SEMAPHORE_PROPERTIES:
      return "VK_STRUCTURE_TYPE_EXTERNAL_SEMAPHORE_PROPERTIES";
    case VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_MAINTENANCE_3_PROPERTIES:
      return "VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_MAINTENANCE_3_PROPERTIES";
    case VK_STRUCTURE_TYPE_DESCRIPTOR_SET_LAYOUT_SUPPORT:
      return "VK_STRUCTURE_TYPE_DESCRIPTOR_SET_LAYOUT_SUPPORT";
    case VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SHADER_DRAW_PARAMETERS_FEATURES:
      return "VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SHADER_DRAW_PARAMETERS_"
             "FEATURES";
    case VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_VULKAN_1_1_FEATURES:
      return "VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_VULKAN_1_1_FEATURES";
    case VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_VULKAN_1_1_PROPERTIES:
      return "VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_VULKAN_1_1_PROPERTIES";
    case VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_VULKAN_1_2_FEATURES:
      return "VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_VULKAN_1_2_FEATURES";
    case VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_VULKAN_1_2_PROPERTIES:
      return "VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_VULKAN_1_2_PROPERTIES";
    case VK_STRUCTURE_TYPE_IMAGE_FORMAT_LIST_CREATE_INFO:
      return "VK_STRUCTURE_TYPE_IMAGE_FORMAT_LIST_CREATE_INFO";
    case VK_STRUCTURE_TYPE_ATTACHMENT_DESCRIPTION_2:
      return "VK_STRUCTURE_TYPE_ATTACHMENT_DESCRIPTION_2";
    case VK_STRUCTURE_TYPE_ATTACHMENT_REFERENCE_2:
      return "VK_STRUCTURE_TYPE_ATTACHMENT_REFERENCE_2";
    case VK_STRUCTURE_TYPE_SUBPASS_DESCRIPTION_2:
      return "VK_STRUCTURE_TYPE_SUBPASS_DESCRIPTION_2";
    case VK_STRUCTURE_TYPE_SUBPASS_DEPENDENCY_2:
      return "VK_STRUCTURE_TYPE_SUBPASS_DEPENDENCY_2";
    case VK_STRUCTURE_TYPE_RENDER_PASS_CREATE_INFO_2:
      return "VK_STRUCTURE_TYPE_RENDER_PASS_CREATE_INFO_2";
    case VK_STRUCTURE_TYPE_SUBPASS_BEGIN_INFO:
      return "VK_STRUCTURE_TYPE_SUBPASS_BEGIN_INFO";
    case VK_STRUCTURE_TYPE_SUBPASS_END_INFO:
      return "VK_STRUCTURE_TYPE_SUBPASS_END_INFO";
    case VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_8BIT_STORAGE_FEATURES:
      return "VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_8BIT_STORAGE_FEATURES";
    case VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_DRIVER_PROPERTIES:
      return "VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_DRIVER_PROPERTIES";
    case VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SHADER_ATOMIC_INT64_FEATURES:
      return "VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SHADER_ATOMIC_INT64_FEATURES";
    case VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SHADER_FLOAT16_INT8_FEATURES:
      return "VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SHADER_FLOAT16_INT8_FEATURES";
    case VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_FLOAT_CONTROLS_PROPERTIES:
      return "VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_FLOAT_CONTROLS_PROPERTIES";
    case VK_STRUCTURE_TYPE_DESCRIPTOR_SET_LAYOUT_BINDING_FLAGS_CREATE_INFO:
      return "VK_STRUCTURE_TYPE_DESCRIPTOR_SET_LAYOUT_BINDING_FLAGS_CREATE_"
             "INFO";
    case VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_DESCRIPTOR_INDEXING_FEATURES:
      return "VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_DESCRIPTOR_INDEXING_FEATURES";
    case VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_DESCRIPTOR_INDEXING_PROPERTIES:
      return "VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_DESCRIPTOR_INDEXING_PROPERTIES";
    case VK_STRUCTURE_TYPE_DESCRIPTOR_SET_VARIABLE_DESCRIPTOR_COUNT_ALLOCATE_INFO:
      return "VK_STRUCTURE_TYPE_DESCRIPTOR_SET_VARIABLE_DESCRIPTOR_COUNT_"
             "ALLOCATE_INFO";
    case VK_STRUCTURE_TYPE_DESCRIPTOR_SET_VARIABLE_DESCRIPTOR_COUNT_LAYOUT_SUPPORT:
      return "VK_STRUCTURE_TYPE_DESCRIPTOR_SET_VARIABLE_DESCRIPTOR_COUNT_"
             "LAYOUT_SUPPORT";
    case VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_DEPTH_STENCIL_RESOLVE_PROPERTIES:
      return "VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_DEPTH_STENCIL_RESOLVE_"
             "PROPERTIES";
    case VK_STRUCTURE_TYPE_SUBPASS_DESCRIPTION_DEPTH_STENCIL_RESOLVE:
      return "VK_STRUCTURE_TYPE_SUBPASS_DESCRIPTION_DEPTH_STENCIL_RESOLVE";
    case VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SCALAR_BLOCK_LAYOUT_FEATURES:
      return "VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SCALAR_BLOCK_LAYOUT_FEATURES";
    case VK_STRUCTURE_TYPE_IMAGE_STENCIL_USAGE_CREATE_INFO:
      return "VK_STRUCTURE_TYPE_IMAGE_STENCIL_USAGE_CREATE_INFO";
    case VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SAMPLER_FILTER_MINMAX_PROPERTIES:
      return "VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SAMPLER_FILTER_MINMAX_"
             "PROPERTIES";
    case VK_STRUCTURE_TYPE_SAMPLER_REDUCTION_MODE_CREATE_INFO:
      return "VK_STRUCTURE_TYPE_SAMPLER_REDUCTION_MODE_CREATE_INFO";
    case VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_VULKAN_MEMORY_MODEL_FEATURES:
      return "VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_VULKAN_MEMORY_MODEL_FEATURES";
    case VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_IMAGELESS_FRAMEBUFFER_FEATURES:
      return "VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_IMAGELESS_FRAMEBUFFER_FEATURES";
    case VK_STRUCTURE_TYPE_FRAMEBUFFER_ATTACHMENTS_CREATE_INFO:
      return "VK_STRUCTURE_TYPE_FRAMEBUFFER_ATTACHMENTS_CREATE_INFO";
    case VK_STRUCTURE_TYPE_FRAMEBUFFER_ATTACHMENT_IMAGE_INFO:
      return "VK_STRUCTURE_TYPE_FRAMEBUFFER_ATTACHMENT_IMAGE_INFO";
    case VK_STRUCTURE_TYPE_RENDER_PASS_ATTACHMENT_BEGIN_INFO:
      return "VK_STRUCTURE_TYPE_RENDER_PASS_ATTACHMENT_BEGIN_INFO";
    case VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_UNIFORM_BUFFER_STANDARD_LAYOUT_FEATURES:
      return "VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_UNIFORM_BUFFER_STANDARD_LAYOUT_"
             "FEATURES";
    case VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SHADER_SUBGROUP_EXTENDED_TYPES_FEATURES:
      return "VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SHADER_SUBGROUP_EXTENDED_TYPES_"
             "FEATURES";
    case VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SEPARATE_DEPTH_STENCIL_LAYOUTS_FEATURES:
      return "VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SEPARATE_DEPTH_STENCIL_LAYOUTS_"
             "FEATURES";
    case VK_STRUCTURE_TYPE_ATTACHMENT_REFERENCE_STENCIL_LAYOUT:
      return "VK_STRUCTURE_TYPE_ATTACHMENT_REFERENCE_STENCIL_LAYOUT";
    case VK_STRUCTURE_TYPE_ATTACHMENT_DESCRIPTION_STENCIL_LAYOUT:
      return "VK_STRUCTURE_TYPE_ATTACHMENT_DESCRIPTION_STENCIL_LAYOUT";
    case VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_HOST_QUERY_RESET_FEATURES:
      return "VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_HOST_QUERY_RESET_FEATURES";
    case VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_TIMELINE_SEMAPHORE_FEATURES:
      return "VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_TIMELINE_SEMAPHORE_FEATURES";
    case VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_TIMELINE_SEMAPHORE_PROPERTIES:
      return "VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_TIMELINE_SEMAPHORE_PROPERTIES";
    case VK_STRUCTURE_TYPE_SEMAPHORE_TYPE_CREATE_INFO:
      return "VK_STRUCTURE_TYPE_SEMAPHORE_TYPE_CREATE_INFO";
    case VK_STRUCTURE_TYPE_TIMELINE_SEMAPHORE_SUBMIT_INFO:
      return "VK_STRUCTURE_TYPE_TIMELINE_SEMAPHORE_SUBMIT_INFO";
    case VK_STRUCTURE_TYPE_SEMAPHORE_WAIT_INFO:
      return "VK_STRUCTURE_TYPE_SEMAPHORE_WAIT_INFO";
    case VK_STRUCTURE_TYPE_SEMAPHORE_SIGNAL_INFO:
      return "VK_STRUCTURE_TYPE_SEMAPHORE_SIGNAL_INFO";
    case VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_BUFFER_DEVICE_ADDRESS_FEATURES:
      return "VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_BUFFER_DEVICE_ADDRESS_FEATURES";
    case VK_STRUCTURE_TYPE_BUFFER_DEVICE_ADDRESS_INFO:
      return "VK_STRUCTURE_TYPE_BUFFER_DEVICE_ADDRESS_INFO";
    case VK_STRUCTURE_TYPE_BUFFER_OPAQUE_CAPTURE_ADDRESS_CREATE_INFO:
      return "VK_STRUCTURE_TYPE_BUFFER_OPAQUE_CAPTURE_ADDRESS_CREATE_INFO";
    case VK_STRUCTURE_TYPE_MEMORY_OPAQUE_CAPTURE_ADDRESS_ALLOCATE_INFO:
      return "VK_STRUCTURE_TYPE_MEMORY_OPAQUE_CAPTURE_ADDRESS_ALLOCATE_INFO";
    case VK_STRUCTURE_TYPE_DEVICE_MEMORY_OPAQUE_CAPTURE_ADDRESS_INFO:
      return "VK_STRUCTURE_TYPE_DEVICE_MEMORY_OPAQUE_CAPTURE_ADDRESS_INFO";
    default:
      return "Unknown VkStructureType";
  }
}
const char* VkPhysicalDeviceTypeToString(VkPhysicalDeviceType e) {
  switch (e) {
    case VK_PHYSICAL_DEVICE_TYPE_OTHER:
      return "VK_PHYSICAL_DEVICE_TYPE_OTHER";
    case VK_PHYSICAL_DEVICE_TYPE_INTEGRATED_GPU:
      return "VK_PHYSICAL_DEVICE_TYPE_INTEGRATED_GPU";
    case VK_PHYSICAL_DEVICE_TYPE_DISCRETE_GPU:
      return "VK_PHYSICAL_DEVICE_TYPE_DISCRETE_GPU";
    case VK_PHYSICAL_DEVICE_TYPE_VIRTUAL_GPU:
      return "VK_PHYSICAL_DEVICE_TYPE_VIRTUAL_GPU";
    case VK_PHYSICAL_DEVICE_TYPE_CPU:
      return "VK_PHYSICAL_DEVICE_TYPE_CPU";
    default:
      return "Unknown VkPhysicalDeviceType";
  }
}
const char* VkFormatToString(VkFormat e) {
  switch (e) {
    case VK_FORMAT_UNDEFINED:
      return "VK_FORMAT_UNDEFINED";
    case VK_FORMAT_R4G4_UNORM_PACK8:
      return "VK_FORMAT_R4G4_UNORM_PACK8";
    case VK_FORMAT_R4G4B4A4_UNORM_PACK16:
      return "VK_FORMAT_R4G4B4A4_UNORM_PACK16";
    case VK_FORMAT_B4G4R4A4_UNORM_PACK16:
      return "VK_FORMAT_B4G4R4A4_UNORM_PACK16";
    case VK_FORMAT_R5G6B5_UNORM_PACK16:
      return "VK_FORMAT_R5G6B5_UNORM_PACK16";
    case VK_FORMAT_B5G6R5_UNORM_PACK16:
      return "VK_FORMAT_B5G6R5_UNORM_PACK16";
    case VK_FORMAT_R5G5B5A1_UNORM_PACK16:
      return "VK_FORMAT_R5G5B5A1_UNORM_PACK16";
    case VK_FORMAT_B5G5R5A1_UNORM_PACK16:
      return "VK_FORMAT_B5G5R5A1_UNORM_PACK16";
    case VK_FORMAT_A1R5G5B5_UNORM_PACK16:
      return "VK_FORMAT_A1R5G5B5_UNORM_PACK16";
    case VK_FORMAT_R8_UNORM:
      return "VK_FORMAT_R8_UNORM";
    case VK_FORMAT_R8_SNORM:
      return "VK_FORMAT_R8_SNORM";
    case VK_FORMAT_R8_USCALED:
      return "VK_FORMAT_R8_USCALED";
    case VK_FORMAT_R8_SSCALED:
      return "VK_FORMAT_R8_SSCALED";
    case VK_FORMAT_R8_UINT:
      return "VK_FORMAT_R8_UINT";
    case VK_FORMAT_R8_SINT:
      return "VK_FORMAT_R8_SINT";
    case VK_FORMAT_R8_SRGB:
      return "VK_FORMAT_R8_SRGB";
    case VK_FORMAT_R8G8_UNORM:
      return "VK_FORMAT_R8G8_UNORM";
    case VK_FORMAT_R8G8_SNORM:
      return "VK_FORMAT_R8G8_SNORM";
    case VK_FORMAT_R8G8_USCALED:
      return "VK_FORMAT_R8G8_USCALED";
    case VK_FORMAT_R8G8_SSCALED:
      return "VK_FORMAT_R8G8_SSCALED";
    case VK_FORMAT_R8G8_UINT:
      return "VK_FORMAT_R8G8_UINT";
    case VK_FORMAT_R8G8_SINT:
      return "VK_FORMAT_R8G8_SINT";
    case VK_FORMAT_R8G8_SRGB:
      return "VK_FORMAT_R8G8_SRGB";
    case VK_FORMAT_R8G8B8_UNORM:
      return "VK_FORMAT_R8G8B8_UNORM";
    case VK_FORMAT_R8G8B8_SNORM:
      return "VK_FORMAT_R8G8B8_SNORM";
    case VK_FORMAT_R8G8B8_USCALED:
      return "VK_FORMAT_R8G8B8_USCALED";
    case VK_FORMAT_R8G8B8_SSCALED:
      return "VK_FORMAT_R8G8B8_SSCALED";
    case VK_FORMAT_R8G8B8_UINT:
      return "VK_FORMAT_R8G8B8_UINT";
    case VK_FORMAT_R8G8B8_SINT:
      return "VK_FORMAT_R8G8B8_SINT";
    case VK_FORMAT_R8G8B8_SRGB:
      return "VK_FORMAT_R8G8B8_SRGB";
    case VK_FORMAT_B8G8R8_UNORM:
      return "VK_FORMAT_B8G8R8_UNORM";
    case VK_FORMAT_B8G8R8_SNORM:
      return "VK_FORMAT_B8G8R8_SNORM";
    case VK_FORMAT_B8G8R8_USCALED:
      return "VK_FORMAT_B8G8R8_USCALED";
    case VK_FORMAT_B8G8R8_SSCALED:
      return "VK_FORMAT_B8G8R8_SSCALED";
    case VK_FORMAT_B8G8R8_UINT:
      return "VK_FORMAT_B8G8R8_UINT";
    case VK_FORMAT_B8G8R8_SINT:
      return "VK_FORMAT_B8G8R8_SINT";
    case VK_FORMAT_B8G8R8_SRGB:
      return "VK_FORMAT_B8G8R8_SRGB";
    case VK_FORMAT_R8G8B8A8_UNORM:
      return "VK_FORMAT_R8G8B8A8_UNORM";
    case VK_FORMAT_R8G8B8A8_SNORM:
      return "VK_FORMAT_R8G8B8A8_SNORM";
    case VK_FORMAT_R8G8B8A8_USCALED:
      return "VK_FORMAT_R8G8B8A8_USCALED";
    case VK_FORMAT_R8G8B8A8_SSCALED:
      return "VK_FORMAT_R8G8B8A8_SSCALED";
    case VK_FORMAT_R8G8B8A8_UINT:
      return "VK_FORMAT_R8G8B8A8_UINT";
    case VK_FORMAT_R8G8B8A8_SINT:
      return "VK_FORMAT_R8G8B8A8_SINT";
    case VK_FORMAT_R8G8B8A8_SRGB:
      return "VK_FORMAT_R8G8B8A8_SRGB";
    case VK_FORMAT_B8G8R8A8_UNORM:
      return "VK_FORMAT_B8G8R8A8_UNORM";
    case VK_FORMAT_B8G8R8A8_SNORM:
      return "VK_FORMAT_B8G8R8A8_SNORM";
    case VK_FORMAT_B8G8R8A8_USCALED:
      return "VK_FORMAT_B8G8R8A8_USCALED";
    case VK_FORMAT_B8G8R8A8_SSCALED:
      return "VK_FORMAT_B8G8R8A8_SSCALED";
    case VK_FORMAT_B8G8R8A8_UINT:
      return "VK_FORMAT_B8G8R8A8_UINT";
    case VK_FORMAT_B8G8R8A8_SINT:
      return "VK_FORMAT_B8G8R8A8_SINT";
    case VK_FORMAT_B8G8R8A8_SRGB:
      return "VK_FORMAT_B8G8R8A8_SRGB";
    case VK_FORMAT_A8B8G8R8_UNORM_PACK32:
      return "VK_FORMAT_A8B8G8R8_UNORM_PACK32";
    case VK_FORMAT_A8B8G8R8_SNORM_PACK32:
      return "VK_FORMAT_A8B8G8R8_SNORM_PACK32";
    case VK_FORMAT_A8B8G8R8_USCALED_PACK32:
      return "VK_FORMAT_A8B8G8R8_USCALED_PACK32";
    case VK_FORMAT_A8B8G8R8_SSCALED_PACK32:
      return "VK_FORMAT_A8B8G8R8_SSCALED_PACK32";
    case VK_FORMAT_A8B8G8R8_UINT_PACK32:
      return "VK_FORMAT_A8B8G8R8_UINT_PACK32";
    case VK_FORMAT_A8B8G8R8_SINT_PACK32:
      return "VK_FORMAT_A8B8G8R8_SINT_PACK32";
    case VK_FORMAT_A8B8G8R8_SRGB_PACK32:
      return "VK_FORMAT_A8B8G8R8_SRGB_PACK32";
    case VK_FORMAT_A2R10G10B10_UNORM_PACK32:
      return "VK_FORMAT_A2R10G10B10_UNORM_PACK32";
    case VK_FORMAT_A2R10G10B10_SNORM_PACK32:
      return "VK_FORMAT_A2R10G10B10_SNORM_PACK32";
    case VK_FORMAT_A2R10G10B10_USCALED_PACK32:
      return "VK_FORMAT_A2R10G10B10_USCALED_PACK32";
    case VK_FORMAT_A2R10G10B10_SSCALED_PACK32:
      return "VK_FORMAT_A2R10G10B10_SSCALED_PACK32";
    case VK_FORMAT_A2R10G10B10_UINT_PACK32:
      return "VK_FORMAT_A2R10G10B10_UINT_PACK32";
    case VK_FORMAT_A2R10G10B10_SINT_PACK32:
      return "VK_FORMAT_A2R10G10B10_SINT_PACK32";
    case VK_FORMAT_A2B10G10R10_UNORM_PACK32:
      return "VK_FORMAT_A2B10G10R10_UNORM_PACK32";
    case VK_FORMAT_A2B10G10R10_SNORM_PACK32:
      return "VK_FORMAT_A2B10G10R10_SNORM_PACK32";
    case VK_FORMAT_A2B10G10R10_USCALED_PACK32:
      return "VK_FORMAT_A2B10G10R10_USCALED_PACK32";
    case VK_FORMAT_A2B10G10R10_SSCALED_PACK32:
      return "VK_FORMAT_A2B10G10R10_SSCALED_PACK32";
    case VK_FORMAT_A2B10G10R10_UINT_PACK32:
      return "VK_FORMAT_A2B10G10R10_UINT_PACK32";
    case VK_FORMAT_A2B10G10R10_SINT_PACK32:
      return "VK_FORMAT_A2B10G10R10_SINT_PACK32";
    case VK_FORMAT_R16_UNORM:
      return "VK_FORMAT_R16_UNORM";
    case VK_FORMAT_R16_SNORM:
      return "VK_FORMAT_R16_SNORM";
    case VK_FORMAT_R16_USCALED:
      return "VK_FORMAT_R16_USCALED";
    case VK_FORMAT_R16_SSCALED:
      return "VK_FORMAT_R16_SSCALED";
    case VK_FORMAT_R16_UINT:
      return "VK_FORMAT_R16_UINT";
    case VK_FORMAT_R16_SINT:
      return "VK_FORMAT_R16_SINT";
    case VK_FORMAT_R16_SFLOAT:
      return "VK_FORMAT_R16_SFLOAT";
    case VK_FORMAT_R16G16_UNORM:
      return "VK_FORMAT_R16G16_UNORM";
    case VK_FORMAT_R16G16_SNORM:
      return "VK_FORMAT_R16G16_SNORM";
    case VK_FORMAT_R16G16_USCALED:
      return "VK_FORMAT_R16G16_USCALED";
    case VK_FORMAT_R16G16_SSCALED:
      return "VK_FORMAT_R16G16_SSCALED";
    case VK_FORMAT_R16G16_UINT:
      return "VK_FORMAT_R16G16_UINT";
    case VK_FORMAT_R16G16_SINT:
      return "VK_FORMAT_R16G16_SINT";
    case VK_FORMAT_R16G16_SFLOAT:
      return "VK_FORMAT_R16G16_SFLOAT";
    case VK_FORMAT_R16G16B16_UNORM:
      return "VK_FORMAT_R16G16B16_UNORM";
    case VK_FORMAT_R16G16B16_SNORM:
      return "VK_FORMAT_R16G16B16_SNORM";
    case VK_FORMAT_R16G16B16_USCALED:
      return "VK_FORMAT_R16G16B16_USCALED";
    case VK_FORMAT_R16G16B16_SSCALED:
      return "VK_FORMAT_R16G16B16_SSCALED";
    case VK_FORMAT_R16G16B16_UINT:
      return "VK_FORMAT_R16G16B16_UINT";
    case VK_FORMAT_R16G16B16_SINT:
      return "VK_FORMAT_R16G16B16_SINT";
    case VK_FORMAT_R16G16B16_SFLOAT:
      return "VK_FORMAT_R16G16B16_SFLOAT";
    case VK_FORMAT_R16G16B16A16_UNORM:
      return "VK_FORMAT_R16G16B16A16_UNORM";
    case VK_FORMAT_R16G16B16A16_SNORM:
      return "VK_FORMAT_R16G16B16A16_SNORM";
    case VK_FORMAT_R16G16B16A16_USCALED:
      return "VK_FORMAT_R16G16B16A16_USCALED";
    case VK_FORMAT_R16G16B16A16_SSCALED:
      return "VK_FORMAT_R16G16B16A16_SSCALED";
    case VK_FORMAT_R16G16B16A16_UINT:
      return "VK_FORMAT_R16G16B16A16_UINT";
    case VK_FORMAT_R16G16B16A16_SINT:
      return "VK_FORMAT_R16G16B16A16_SINT";
    case VK_FORMAT_R16G16B16A16_SFLOAT:
      return "VK_FORMAT_R16G16B16A16_SFLOAT";
    case VK_FORMAT_R32_UINT:
      return "VK_FORMAT_R32_UINT";
    case VK_FORMAT_R32_SINT:
      return "VK_FORMAT_R32_SINT";
    case VK_FORMAT_R32_SFLOAT:
      return "VK_FORMAT_R32_SFLOAT";
    case VK_FORMAT_R32G32_UINT:
      return "VK_FORMAT_R32G32_UINT";
    case VK_FORMAT_R32G32_SINT:
      return "VK_FORMAT_R32G32_SINT";
    case VK_FORMAT_R32G32_SFLOAT:
      return "VK_FORMAT_R32G32_SFLOAT";
    case VK_FORMAT_R32G32B32_UINT:
      return "VK_FORMAT_R32G32B32_UINT";
    case VK_FORMAT_R32G32B32_SINT:
      return "VK_FORMAT_R32G32B32_SINT";
    case VK_FORMAT_R32G32B32_SFLOAT:
      return "VK_FORMAT_R32G32B32_SFLOAT";
    case VK_FORMAT_R32G32B32A32_UINT:
      return "VK_FORMAT_R32G32B32A32_UINT";
    case VK_FORMAT_R32G32B32A32_SINT:
      return "VK_FORMAT_R32G32B32A32_SINT";
    case VK_FORMAT_R32G32B32A32_SFLOAT:
      return "VK_FORMAT_R32G32B32A32_SFLOAT";
    case VK_FORMAT_R64_UINT:
      return "VK_FORMAT_R64_UINT";
    case VK_FORMAT_R64_SINT:
      return "VK_FORMAT_R64_SINT";
    case VK_FORMAT_R64_SFLOAT:
      return "VK_FORMAT_R64_SFLOAT";
    case VK_FORMAT_R64G64_UINT:
      return "VK_FORMAT_R64G64_UINT";
    case VK_FORMAT_R64G64_SINT:
      return "VK_FORMAT_R64G64_SINT";
    case VK_FORMAT_R64G64_SFLOAT:
      return "VK_FORMAT_R64G64_SFLOAT";
    case VK_FORMAT_R64G64B64_UINT:
      return "VK_FORMAT_R64G64B64_UINT";
    case VK_FORMAT_R64G64B64_SINT:
      return "VK_FORMAT_R64G64B64_SINT";
    case VK_FORMAT_R64G64B64_SFLOAT:
      return "VK_FORMAT_R64G64B64_SFLOAT";
    case VK_FORMAT_R64G64B64A64_UINT:
      return "VK_FORMAT_R64G64B64A64_UINT";
    case VK_FORMAT_R64G64B64A64_SINT:
      return "VK_FORMAT_R64G64B64A64_SINT";
    case VK_FORMAT_R64G64B64A64_SFLOAT:
      return "VK_FORMAT_R64G64B64A64_SFLOAT";
    case VK_FORMAT_B10G11R11_UFLOAT_PACK32:
      return "VK_FORMAT_B10G11R11_UFLOAT_PACK32";
    case VK_FORMAT_E5B9G9R9_UFLOAT_PACK32:
      return "VK_FORMAT_E5B9G9R9_UFLOAT_PACK32";
    case VK_FORMAT_D16_UNORM:
      return "VK_FORMAT_D16_UNORM";
    case VK_FORMAT_X8_D24_UNORM_PACK32:
      return "VK_FORMAT_X8_D24_UNORM_PACK32";
    case VK_FORMAT_D32_SFLOAT:
      return "VK_FORMAT_D32_SFLOAT";
    case VK_FORMAT_S8_UINT:
      return "VK_FORMAT_S8_UINT";
    case VK_FORMAT_D16_UNORM_S8_UINT:
      return "VK_FORMAT_D16_UNORM_S8_UINT";
    case VK_FORMAT_D24_UNORM_S8_UINT:
      return "VK_FORMAT_D24_UNORM_S8_UINT";
    case VK_FORMAT_D32_SFLOAT_S8_UINT:
      return "VK_FORMAT_D32_SFLOAT_S8_UINT";
    case VK_FORMAT_BC1_RGB_UNORM_BLOCK:
      return "VK_FORMAT_BC1_RGB_UNORM_BLOCK";
    case VK_FORMAT_BC1_RGB_SRGB_BLOCK:
      return "VK_FORMAT_BC1_RGB_SRGB_BLOCK";
    case VK_FORMAT_BC1_RGBA_UNORM_BLOCK:
      return "VK_FORMAT_BC1_RGBA_UNORM_BLOCK";
    case VK_FORMAT_BC1_RGBA_SRGB_BLOCK:
      return "VK_FORMAT_BC1_RGBA_SRGB_BLOCK";
    case VK_FORMAT_BC2_UNORM_BLOCK:
      return "VK_FORMAT_BC2_UNORM_BLOCK";
    case VK_FORMAT_BC2_SRGB_BLOCK:
      return "VK_FORMAT_BC2_SRGB_BLOCK";
    case VK_FORMAT_BC3_UNORM_BLOCK:
      return "VK_FORMAT_BC3_UNORM_BLOCK";
    case VK_FORMAT_BC3_SRGB_BLOCK:
      return "VK_FORMAT_BC3_SRGB_BLOCK";
    case VK_FORMAT_BC4_UNORM_BLOCK:
      return "VK_FORMAT_BC4_UNORM_BLOCK";
    case VK_FORMAT_BC4_SNORM_BLOCK:
      return "VK_FORMAT_BC4_SNORM_BLOCK";
    case VK_FORMAT_BC5_UNORM_BLOCK:
      return "VK_FORMAT_BC5_UNORM_BLOCK";
    case VK_FORMAT_BC5_SNORM_BLOCK:
      return "VK_FORMAT_BC5_SNORM_BLOCK";
    case VK_FORMAT_BC6H_UFLOAT_BLOCK:
      return "VK_FORMAT_BC6H_UFLOAT_BLOCK";
    case VK_FORMAT_BC6H_SFLOAT_BLOCK:
      return "VK_FORMAT_BC6H_SFLOAT_BLOCK";
    case VK_FORMAT_BC7_UNORM_BLOCK:
      return "VK_FORMAT_BC7_UNORM_BLOCK";
    case VK_FORMAT_BC7_SRGB_BLOCK:
      return "VK_FORMAT_BC7_SRGB_BLOCK";
    case VK_FORMAT_ETC2_R8G8B8_UNORM_BLOCK:
      return "VK_FORMAT_ETC2_R8G8B8_UNORM_BLOCK";
    case VK_FORMAT_ETC2_R8G8B8_SRGB_BLOCK:
      return "VK_FORMAT_ETC2_R8G8B8_SRGB_BLOCK";
    case VK_FORMAT_ETC2_R8G8B8A1_UNORM_BLOCK:
      return "VK_FORMAT_ETC2_R8G8B8A1_UNORM_BLOCK";
    case VK_FORMAT_ETC2_R8G8B8A1_SRGB_BLOCK:
      return "VK_FORMAT_ETC2_R8G8B8A1_SRGB_BLOCK";
    case VK_FORMAT_ETC2_R8G8B8A8_UNORM_BLOCK:
      return "VK_FORMAT_ETC2_R8G8B8A8_UNORM_BLOCK";
    case VK_FORMAT_ETC2_R8G8B8A8_SRGB_BLOCK:
      return "VK_FORMAT_ETC2_R8G8B8A8_SRGB_BLOCK";
    case VK_FORMAT_EAC_R11_UNORM_BLOCK:
      return "VK_FORMAT_EAC_R11_UNORM_BLOCK";
    case VK_FORMAT_EAC_R11_SNORM_BLOCK:
      return "VK_FORMAT_EAC_R11_SNORM_BLOCK";
    case VK_FORMAT_EAC_R11G11_UNORM_BLOCK:
      return "VK_FORMAT_EAC_R11G11_UNORM_BLOCK";
    case VK_FORMAT_EAC_R11G11_SNORM_BLOCK:
      return "VK_FORMAT_EAC_R11G11_SNORM_BLOCK";
    case VK_FORMAT_ASTC_4x4_UNORM_BLOCK:
      return "VK_FORMAT_ASTC_4x4_UNORM_BLOCK";
    case VK_FORMAT_ASTC_4x4_SRGB_BLOCK:
      return "VK_FORMAT_ASTC_4x4_SRGB_BLOCK";
    case VK_FORMAT_ASTC_5x4_UNORM_BLOCK:
      return "VK_FORMAT_ASTC_5x4_UNORM_BLOCK";
    case VK_FORMAT_ASTC_5x4_SRGB_BLOCK:
      return "VK_FORMAT_ASTC_5x4_SRGB_BLOCK";
    case VK_FORMAT_ASTC_5x5_UNORM_BLOCK:
      return "VK_FORMAT_ASTC_5x5_UNORM_BLOCK";
    case VK_FORMAT_ASTC_5x5_SRGB_BLOCK:
      return "VK_FORMAT_ASTC_5x5_SRGB_BLOCK";
    case VK_FORMAT_ASTC_6x5_UNORM_BLOCK:
      return "VK_FORMAT_ASTC_6x5_UNORM_BLOCK";
    case VK_FORMAT_ASTC_6x5_SRGB_BLOCK:
      return "VK_FORMAT_ASTC_6x5_SRGB_BLOCK";
    case VK_FORMAT_ASTC_6x6_UNORM_BLOCK:
      return "VK_FORMAT_ASTC_6x6_UNORM_BLOCK";
    case VK_FORMAT_ASTC_6x6_SRGB_BLOCK:
      return "VK_FORMAT_ASTC_6x6_SRGB_BLOCK";
    case VK_FORMAT_ASTC_8x5_UNORM_BLOCK:
      return "VK_FORMAT_ASTC_8x5_UNORM_BLOCK";
    case VK_FORMAT_ASTC_8x5_SRGB_BLOCK:
      return "VK_FORMAT_ASTC_8x5_SRGB_BLOCK";
    case VK_FORMAT_ASTC_8x6_UNORM_BLOCK:
      return "VK_FORMAT_ASTC_8x6_UNORM_BLOCK";
    case VK_FORMAT_ASTC_8x6_SRGB_BLOCK:
      return "VK_FORMAT_ASTC_8x6_SRGB_BLOCK";
    case VK_FORMAT_ASTC_8x8_UNORM_BLOCK:
      return "VK_FORMAT_ASTC_8x8_UNORM_BLOCK";
    case VK_FORMAT_ASTC_8x8_SRGB_BLOCK:
      return "VK_FORMAT_ASTC_8x8_SRGB_BLOCK";
    case VK_FORMAT_ASTC_10x5_UNORM_BLOCK:
      return "VK_FORMAT_ASTC_10x5_UNORM_BLOCK";
    case VK_FORMAT_ASTC_10x5_SRGB_BLOCK:
      return "VK_FORMAT_ASTC_10x5_SRGB_BLOCK";
    case VK_FORMAT_ASTC_10x6_UNORM_BLOCK:
      return "VK_FORMAT_ASTC_10x6_UNORM_BLOCK";
    case VK_FORMAT_ASTC_10x6_SRGB_BLOCK:
      return "VK_FORMAT_ASTC_10x6_SRGB_BLOCK";
    case VK_FORMAT_ASTC_10x8_UNORM_BLOCK:
      return "VK_FORMAT_ASTC_10x8_UNORM_BLOCK";
    case VK_FORMAT_ASTC_10x8_SRGB_BLOCK:
      return "VK_FORMAT_ASTC_10x8_SRGB_BLOCK";
    case VK_FORMAT_ASTC_10x10_UNORM_BLOCK:
      return "VK_FORMAT_ASTC_10x10_UNORM_BLOCK";
    case VK_FORMAT_ASTC_10x10_SRGB_BLOCK:
      return "VK_FORMAT_ASTC_10x10_SRGB_BLOCK";
    case VK_FORMAT_ASTC_12x10_UNORM_BLOCK:
      return "VK_FORMAT_ASTC_12x10_UNORM_BLOCK";
    case VK_FORMAT_ASTC_12x10_SRGB_BLOCK:
      return "VK_FORMAT_ASTC_12x10_SRGB_BLOCK";
    case VK_FORMAT_ASTC_12x12_UNORM_BLOCK:
      return "VK_FORMAT_ASTC_12x12_UNORM_BLOCK";
    case VK_FORMAT_ASTC_12x12_SRGB_BLOCK:
      return "VK_FORMAT_ASTC_12x12_SRGB_BLOCK";
    case VK_FORMAT_G8_B8R8_2PLANE_444_UNORM_EXT:
      return "VK_FORMAT_G8_B8R8_2PLANE_444_UNORM_EXT";
    case VK_FORMAT_G10X6_B10X6R10X6_2PLANE_444_UNORM_3PACK16_EXT:
      return "VK_FORMAT_G10X6_B10X6R10X6_2PLANE_444_UNORM_3PACK16_EXT";
    case VK_FORMAT_G12X4_B12X4R12X4_2PLANE_444_UNORM_3PACK16_EXT:
      return "VK_FORMAT_G12X4_B12X4R12X4_2PLANE_444_UNORM_3PACK16_EXT";
    case VK_FORMAT_G16_B16R16_2PLANE_444_UNORM_EXT:
      return "VK_FORMAT_G16_B16R16_2PLANE_444_UNORM_EXT";
    case VK_FORMAT_A4R4G4B4_UNORM_PACK16_EXT:
      return "VK_FORMAT_A4R4G4B4_UNORM_PACK16_EXT";
    case VK_FORMAT_A4B4G4R4_UNORM_PACK16_EXT:
      return "VK_FORMAT_A4B4G4R4_UNORM_PACK16_EXT";
    case VK_FORMAT_G8B8G8R8_422_UNORM:
      return "VK_FORMAT_G8B8G8R8_422_UNORM";
    case VK_FORMAT_B8G8R8G8_422_UNORM:
      return "VK_FORMAT_B8G8R8G8_422_UNORM";
    case VK_FORMAT_G8_B8_R8_3PLANE_420_UNORM:
      return "VK_FORMAT_G8_B8_R8_3PLANE_420_UNORM";
    case VK_FORMAT_G8_B8R8_2PLANE_420_UNORM:
      return "VK_FORMAT_G8_B8R8_2PLANE_420_UNORM";
    case VK_FORMAT_G8_B8_R8_3PLANE_422_UNORM:
      return "VK_FORMAT_G8_B8_R8_3PLANE_422_UNORM";
    case VK_FORMAT_G8_B8R8_2PLANE_422_UNORM:
      return "VK_FORMAT_G8_B8R8_2PLANE_422_UNORM";
    case VK_FORMAT_G8_B8_R8_3PLANE_444_UNORM:
      return "VK_FORMAT_G8_B8_R8_3PLANE_444_UNORM";
    case VK_FORMAT_R10X6_UNORM_PACK16:
      return "VK_FORMAT_R10X6_UNORM_PACK16";
    case VK_FORMAT_R10X6G10X6_UNORM_2PACK16:
      return "VK_FORMAT_R10X6G10X6_UNORM_2PACK16";
    case VK_FORMAT_R10X6G10X6B10X6A10X6_UNORM_4PACK16:
      return "VK_FORMAT_R10X6G10X6B10X6A10X6_UNORM_4PACK16";
    case VK_FORMAT_G10X6B10X6G10X6R10X6_422_UNORM_4PACK16:
      return "VK_FORMAT_G10X6B10X6G10X6R10X6_422_UNORM_4PACK16";
    case VK_FORMAT_B10X6G10X6R10X6G10X6_422_UNORM_4PACK16:
      return "VK_FORMAT_B10X6G10X6R10X6G10X6_422_UNORM_4PACK16";
    case VK_FORMAT_G10X6_B10X6_R10X6_3PLANE_420_UNORM_3PACK16:
      return "VK_FORMAT_G10X6_B10X6_R10X6_3PLANE_420_UNORM_3PACK16";
    case VK_FORMAT_G10X6_B10X6R10X6_2PLANE_420_UNORM_3PACK16:
      return "VK_FORMAT_G10X6_B10X6R10X6_2PLANE_420_UNORM_3PACK16";
    case VK_FORMAT_G10X6_B10X6_R10X6_3PLANE_422_UNORM_3PACK16:
      return "VK_FORMAT_G10X6_B10X6_R10X6_3PLANE_422_UNORM_3PACK16";
    case VK_FORMAT_G10X6_B10X6R10X6_2PLANE_422_UNORM_3PACK16:
      return "VK_FORMAT_G10X6_B10X6R10X6_2PLANE_422_UNORM_3PACK16";
    case VK_FORMAT_G10X6_B10X6_R10X6_3PLANE_444_UNORM_3PACK16:
      return "VK_FORMAT_G10X6_B10X6_R10X6_3PLANE_444_UNORM_3PACK16";
    case VK_FORMAT_R12X4_UNORM_PACK16:
      return "VK_FORMAT_R12X4_UNORM_PACK16";
    case VK_FORMAT_R12X4G12X4_UNORM_2PACK16:
      return "VK_FORMAT_R12X4G12X4_UNORM_2PACK16";
    case VK_FORMAT_R12X4G12X4B12X4A12X4_UNORM_4PACK16:
      return "VK_FORMAT_R12X4G12X4B12X4A12X4_UNORM_4PACK16";
    case VK_FORMAT_G12X4B12X4G12X4R12X4_422_UNORM_4PACK16:
      return "VK_FORMAT_G12X4B12X4G12X4R12X4_422_UNORM_4PACK16";
    case VK_FORMAT_B12X4G12X4R12X4G12X4_422_UNORM_4PACK16:
      return "VK_FORMAT_B12X4G12X4R12X4G12X4_422_UNORM_4PACK16";
    case VK_FORMAT_G12X4_B12X4_R12X4_3PLANE_420_UNORM_3PACK16:
      return "VK_FORMAT_G12X4_B12X4_R12X4_3PLANE_420_UNORM_3PACK16";
    case VK_FORMAT_G12X4_B12X4R12X4_2PLANE_420_UNORM_3PACK16:
      return "VK_FORMAT_G12X4_B12X4R12X4_2PLANE_420_UNORM_3PACK16";
    case VK_FORMAT_G12X4_B12X4_R12X4_3PLANE_422_UNORM_3PACK16:
      return "VK_FORMAT_G12X4_B12X4_R12X4_3PLANE_422_UNORM_3PACK16";
    case VK_FORMAT_G12X4_B12X4R12X4_2PLANE_422_UNORM_3PACK16:
      return "VK_FORMAT_G12X4_B12X4R12X4_2PLANE_422_UNORM_3PACK16";
    case VK_FORMAT_G12X4_B12X4_R12X4_3PLANE_444_UNORM_3PACK16:
      return "VK_FORMAT_G12X4_B12X4_R12X4_3PLANE_444_UNORM_3PACK16";
    case VK_FORMAT_G16B16G16R16_422_UNORM:
      return "VK_FORMAT_G16B16G16R16_422_UNORM";
    case VK_FORMAT_B16G16R16G16_422_UNORM:
      return "VK_FORMAT_B16G16R16G16_422_UNORM";
    case VK_FORMAT_G16_B16_R16_3PLANE_420_UNORM:
      return "VK_FORMAT_G16_B16_R16_3PLANE_420_UNORM";
    case VK_FORMAT_G16_B16R16_2PLANE_420_UNORM:
      return "VK_FORMAT_G16_B16R16_2PLANE_420_UNORM";
    case VK_FORMAT_G16_B16_R16_3PLANE_422_UNORM:
      return "VK_FORMAT_G16_B16_R16_3PLANE_422_UNORM";
    case VK_FORMAT_G16_B16R16_2PLANE_422_UNORM:
      return "VK_FORMAT_G16_B16R16_2PLANE_422_UNORM";
    case VK_FORMAT_G16_B16_R16_3PLANE_444_UNORM:
      return "VK_FORMAT_G16_B16_R16_3PLANE_444_UNORM";
    default:
      return "Unknown VkFormat";
  }
}
const char* VkImageTypeToString(VkImageType e) {
  switch (e) {
    case VK_IMAGE_TYPE_1D:
      return "VK_IMAGE_TYPE_1D";
    case VK_IMAGE_TYPE_2D:
      return "VK_IMAGE_TYPE_2D";
    case VK_IMAGE_TYPE_3D:
      return "VK_IMAGE_TYPE_3D";
    default:
      return "Unknown VkImageType";
  }
}
const char* VkImageTilingToString(VkImageTiling e) {
  switch (e) {
    case VK_IMAGE_TILING_OPTIMAL:
      return "VK_IMAGE_TILING_OPTIMAL";
    case VK_IMAGE_TILING_LINEAR:
      return "VK_IMAGE_TILING_LINEAR";
    case VK_IMAGE_TILING_DRM_FORMAT_MODIFIER_EXT:
      return "VK_IMAGE_TILING_DRM_FORMAT_MODIFIER_EXT";
    default:
      return "Unknown VkImageTiling";
  }
}
const char* VkSampleCountFlagBitsToString(VkSampleCountFlagBits e) {
  switch (e) {
    case VK_SAMPLE_COUNT_1_BIT:
      return "VK_SAMPLE_COUNT_1_BIT";
    case VK_SAMPLE_COUNT_2_BIT:
      return "VK_SAMPLE_COUNT_2_BIT";
    case VK_SAMPLE_COUNT_4_BIT:
      return "VK_SAMPLE_COUNT_4_BIT";
    case VK_SAMPLE_COUNT_8_BIT:
      return "VK_SAMPLE_COUNT_8_BIT";
    case VK_SAMPLE_COUNT_16_BIT:
      return "VK_SAMPLE_COUNT_16_BIT";
    case VK_SAMPLE_COUNT_32_BIT:
      return "VK_SAMPLE_COUNT_32_BIT";
    case VK_SAMPLE_COUNT_64_BIT:
      return "VK_SAMPLE_COUNT_64_BIT";
    default:
      return "Unknown VkSampleCountFlagBits";
  }
}
const char* VkQueryTypeToString(VkQueryType e) {
  switch (e) {
    case VK_QUERY_TYPE_OCCLUSION:
      return "VK_QUERY_TYPE_OCCLUSION";
    case VK_QUERY_TYPE_PIPELINE_STATISTICS:
      return "VK_QUERY_TYPE_PIPELINE_STATISTICS";
    case VK_QUERY_TYPE_TIMESTAMP:
      return "VK_QUERY_TYPE_TIMESTAMP";
    case VK_QUERY_TYPE_PERFORMANCE_QUERY_KHR:
      return "VK_QUERY_TYPE_PERFORMANCE_QUERY_KHR";
    case VK_QUERY_TYPE_ACCELERATION_STRUCTURE_COMPACTED_SIZE_KHR:
      return "VK_QUERY_TYPE_ACCELERATION_STRUCTURE_COMPACTED_SIZE_KHR";
    case VK_QUERY_TYPE_ACCELERATION_STRUCTURE_SERIALIZATION_SIZE_KHR:
      return "VK_QUERY_TYPE_ACCELERATION_STRUCTURE_SERIALIZATION_SIZE_KHR";
    default:
      return "Unknown VkQueryType";
  }
}
const char* VkSharingModeToString(VkSharingMode e) {
  switch (e) {
    case VK_SHARING_MODE_EXCLUSIVE:
      return "VK_SHARING_MODE_EXCLUSIVE";
    case VK_SHARING_MODE_CONCURRENT:
      return "VK_SHARING_MODE_CONCURRENT";
    default:
      return "Unknown VkSharingMode";
  }
}
const char* VkImageLayoutToString(VkImageLayout e) {
  switch (e) {
    case VK_IMAGE_LAYOUT_UNDEFINED:
      return "VK_IMAGE_LAYOUT_UNDEFINED";
    case VK_IMAGE_LAYOUT_GENERAL:
      return "VK_IMAGE_LAYOUT_GENERAL";
    case VK_IMAGE_LAYOUT_COLOR_ATTACHMENT_OPTIMAL:
      return "VK_IMAGE_LAYOUT_COLOR_ATTACHMENT_OPTIMAL";
    case VK_IMAGE_LAYOUT_DEPTH_STENCIL_ATTACHMENT_OPTIMAL:
      return "VK_IMAGE_LAYOUT_DEPTH_STENCIL_ATTACHMENT_OPTIMAL";
    case VK_IMAGE_LAYOUT_DEPTH_STENCIL_READ_ONLY_OPTIMAL:
      return "VK_IMAGE_LAYOUT_DEPTH_STENCIL_READ_ONLY_OPTIMAL";
    case VK_IMAGE_LAYOUT_SHADER_READ_ONLY_OPTIMAL:
      return "VK_IMAGE_LAYOUT_SHADER_READ_ONLY_OPTIMAL";
    case VK_IMAGE_LAYOUT_TRANSFER_SRC_OPTIMAL:
      return "VK_IMAGE_LAYOUT_TRANSFER_SRC_OPTIMAL";
    case VK_IMAGE_LAYOUT_TRANSFER_DST_OPTIMAL:
      return "VK_IMAGE_LAYOUT_TRANSFER_DST_OPTIMAL";
    case VK_IMAGE_LAYOUT_PREINITIALIZED:
      return "VK_IMAGE_LAYOUT_PREINITIALIZED";
    case VK_IMAGE_LAYOUT_PRESENT_SRC_KHR:
      return "VK_IMAGE_LAYOUT_PRESENT_SRC_KHR";
    case VK_IMAGE_LAYOUT_SHARED_PRESENT_KHR:
      return "VK_IMAGE_LAYOUT_SHARED_PRESENT_KHR";
    case VK_IMAGE_LAYOUT_FRAGMENT_DENSITY_MAP_OPTIMAL_EXT:
      return "VK_IMAGE_LAYOUT_FRAGMENT_DENSITY_MAP_OPTIMAL_EXT";
    case VK_IMAGE_LAYOUT_FRAGMENT_SHADING_RATE_ATTACHMENT_OPTIMAL_KHR:
      return "VK_IMAGE_LAYOUT_FRAGMENT_SHADING_RATE_ATTACHMENT_OPTIMAL_KHR";
    case VK_IMAGE_LAYOUT_READ_ONLY_OPTIMAL_KHR:
      return "VK_IMAGE_LAYOUT_READ_ONLY_OPTIMAL_KHR";
    case VK_IMAGE_LAYOUT_ATTACHMENT_OPTIMAL_KHR:
      return "VK_IMAGE_LAYOUT_ATTACHMENT_OPTIMAL_KHR";
    case VK_IMAGE_LAYOUT_DEPTH_READ_ONLY_STENCIL_ATTACHMENT_OPTIMAL:
      return "VK_IMAGE_LAYOUT_DEPTH_READ_ONLY_STENCIL_ATTACHMENT_OPTIMAL";
    case VK_IMAGE_LAYOUT_DEPTH_ATTACHMENT_STENCIL_READ_ONLY_OPTIMAL:
      return "VK_IMAGE_LAYOUT_DEPTH_ATTACHMENT_STENCIL_READ_ONLY_OPTIMAL";
    case VK_IMAGE_LAYOUT_DEPTH_ATTACHMENT_OPTIMAL:
      return "VK_IMAGE_LAYOUT_DEPTH_ATTACHMENT_OPTIMAL";
    case VK_IMAGE_LAYOUT_DEPTH_READ_ONLY_OPTIMAL:
      return "VK_IMAGE_LAYOUT_DEPTH_READ_ONLY_OPTIMAL";
    case VK_IMAGE_LAYOUT_STENCIL_ATTACHMENT_OPTIMAL:
      return "VK_IMAGE_LAYOUT_STENCIL_ATTACHMENT_OPTIMAL";
    case VK_IMAGE_LAYOUT_STENCIL_READ_ONLY_OPTIMAL:
      return "VK_IMAGE_LAYOUT_STENCIL_READ_ONLY_OPTIMAL";
    default:
      return "Unknown VkImageLayout";
  }
}
const char* VkImageViewTypeToString(VkImageViewType e) {
  switch (e) {
    case VK_IMAGE_VIEW_TYPE_1D:
      return "VK_IMAGE_VIEW_TYPE_1D";
    case VK_IMAGE_VIEW_TYPE_2D:
      return "VK_IMAGE_VIEW_TYPE_2D";
    case VK_IMAGE_VIEW_TYPE_3D:
      return "VK_IMAGE_VIEW_TYPE_3D";
    case VK_IMAGE_VIEW_TYPE_CUBE:
      return "VK_IMAGE_VIEW_TYPE_CUBE";
    case VK_IMAGE_VIEW_TYPE_1D_ARRAY:
      return "VK_IMAGE_VIEW_TYPE_1D_ARRAY";
    case VK_IMAGE_VIEW_TYPE_2D_ARRAY:
      return "VK_IMAGE_VIEW_TYPE_2D_ARRAY";
    case VK_IMAGE_VIEW_TYPE_CUBE_ARRAY:
      return "VK_IMAGE_VIEW_TYPE_CUBE_ARRAY";
    default:
      return "Unknown VkImageViewType";
  }
}
const char* VkComponentSwizzleToString(VkComponentSwizzle e) {
  switch (e) {
    case VK_COMPONENT_SWIZZLE_IDENTITY:
      return "VK_COMPONENT_SWIZZLE_IDENTITY";
    case VK_COMPONENT_SWIZZLE_ZERO:
      return "VK_COMPONENT_SWIZZLE_ZERO";
    case VK_COMPONENT_SWIZZLE_ONE:
      return "VK_COMPONENT_SWIZZLE_ONE";
    case VK_COMPONENT_SWIZZLE_R:
      return "VK_COMPONENT_SWIZZLE_R";
    case VK_COMPONENT_SWIZZLE_G:
      return "VK_COMPONENT_SWIZZLE_G";
    case VK_COMPONENT_SWIZZLE_B:
      return "VK_COMPONENT_SWIZZLE_B";
    case VK_COMPONENT_SWIZZLE_A:
      return "VK_COMPONENT_SWIZZLE_A";
    default:
      return "Unknown VkComponentSwizzle";
  }
}
const char* VkShaderStageFlagBitsToString(VkShaderStageFlagBits e) {
  switch (e) {
    case VK_SHADER_STAGE_VERTEX_BIT:
      return "VK_SHADER_STAGE_VERTEX_BIT";
    case VK_SHADER_STAGE_TESSELLATION_CONTROL_BIT:
      return "VK_SHADER_STAGE_TESSELLATION_CONTROL_BIT";
    case VK_SHADER_STAGE_TESSELLATION_EVALUATION_BIT:
      return "VK_SHADER_STAGE_TESSELLATION_EVALUATION_BIT";
    case VK_SHADER_STAGE_GEOMETRY_BIT:
      return "VK_SHADER_STAGE_GEOMETRY_BIT";
    case VK_SHADER_STAGE_FRAGMENT_BIT:
      return "VK_SHADER_STAGE_FRAGMENT_BIT";
    case VK_SHADER_STAGE_COMPUTE_BIT:
      return "VK_SHADER_STAGE_COMPUTE_BIT";
    case VK_SHADER_STAGE_ALL_GRAPHICS:
      return "VK_SHADER_STAGE_ALL_GRAPHICS";
    case VK_SHADER_STAGE_ALL:
      return "VK_SHADER_STAGE_ALL";
    case VK_SHADER_STAGE_RAYGEN_BIT_KHR:
      return "VK_SHADER_STAGE_RAYGEN_BIT_KHR";
    case VK_SHADER_STAGE_ANY_HIT_BIT_KHR:
      return "VK_SHADER_STAGE_ANY_HIT_BIT_KHR";
    case VK_SHADER_STAGE_CLOSEST_HIT_BIT_KHR:
      return "VK_SHADER_STAGE_CLOSEST_HIT_BIT_KHR";
    case VK_SHADER_STAGE_MISS_BIT_KHR:
      return "VK_SHADER_STAGE_MISS_BIT_KHR";
    case VK_SHADER_STAGE_INTERSECTION_BIT_KHR:
      return "VK_SHADER_STAGE_INTERSECTION_BIT_KHR";
    case VK_SHADER_STAGE_CALLABLE_BIT_KHR:
      return "VK_SHADER_STAGE_CALLABLE_BIT_KHR";
    default:
      return "Unknown VkShaderStageFlagBits";
  }
}
const char* VkVertexInputRateToString(VkVertexInputRate e) {
  switch (e) {
    case VK_VERTEX_INPUT_RATE_VERTEX:
      return "VK_VERTEX_INPUT_RATE_VERTEX";
    case VK_VERTEX_INPUT_RATE_INSTANCE:
      return "VK_VERTEX_INPUT_RATE_INSTANCE";
    default:
      return "Unknown VkVertexInputRate";
  }
}
const char* VkPrimitiveTopologyToString(VkPrimitiveTopology e) {
  switch (e) {
    case VK_PRIMITIVE_TOPOLOGY_POINT_LIST:
      return "VK_PRIMITIVE_TOPOLOGY_POINT_LIST";
    case VK_PRIMITIVE_TOPOLOGY_LINE_LIST:
      return "VK_PRIMITIVE_TOPOLOGY_LINE_LIST";
    case VK_PRIMITIVE_TOPOLOGY_LINE_STRIP:
      return "VK_PRIMITIVE_TOPOLOGY_LINE_STRIP";
    case VK_PRIMITIVE_TOPOLOGY_TRIANGLE_LIST:
      return "VK_PRIMITIVE_TOPOLOGY_TRIANGLE_LIST";
    case VK_PRIMITIVE_TOPOLOGY_TRIANGLE_STRIP:
      return "VK_PRIMITIVE_TOPOLOGY_TRIANGLE_STRIP";
    case VK_PRIMITIVE_TOPOLOGY_TRIANGLE_FAN:
      return "VK_PRIMITIVE_TOPOLOGY_TRIANGLE_FAN";
    case VK_PRIMITIVE_TOPOLOGY_LINE_LIST_WITH_ADJACENCY:
      return "VK_PRIMITIVE_TOPOLOGY_LINE_LIST_WITH_ADJACENCY";
    case VK_PRIMITIVE_TOPOLOGY_LINE_STRIP_WITH_ADJACENCY:
      return "VK_PRIMITIVE_TOPOLOGY_LINE_STRIP_WITH_ADJACENCY";
    case VK_PRIMITIVE_TOPOLOGY_TRIANGLE_LIST_WITH_ADJACENCY:
      return "VK_PRIMITIVE_TOPOLOGY_TRIANGLE_LIST_WITH_ADJACENCY";
    case VK_PRIMITIVE_TOPOLOGY_TRIANGLE_STRIP_WITH_ADJACENCY:
      return "VK_PRIMITIVE_TOPOLOGY_TRIANGLE_STRIP_WITH_ADJACENCY";
    case VK_PRIMITIVE_TOPOLOGY_PATCH_LIST:
      return "VK_PRIMITIVE_TOPOLOGY_PATCH_LIST";
    default:
      return "Unknown VkPrimitiveTopology";
  }
}
const char* VkPolygonModeToString(VkPolygonMode e) {
  switch (e) {
    case VK_POLYGON_MODE_FILL:
      return "VK_POLYGON_MODE_FILL";
    case VK_POLYGON_MODE_LINE:
      return "VK_POLYGON_MODE_LINE";
    case VK_POLYGON_MODE_POINT:
      return "VK_POLYGON_MODE_POINT";
    default:
      return "Unknown VkPolygonMode";
  }
}
const char* VkFrontFaceToString(VkFrontFace e) {
  switch (e) {
    case VK_FRONT_FACE_COUNTER_CLOCKWISE:
      return "VK_FRONT_FACE_COUNTER_CLOCKWISE";
    case VK_FRONT_FACE_CLOCKWISE:
      return "VK_FRONT_FACE_CLOCKWISE";
    default:
      return "Unknown VkFrontFace";
  }
}
const char* VkCompareOpToString(VkCompareOp e) {
  switch (e) {
    case VK_COMPARE_OP_NEVER:
      return "VK_COMPARE_OP_NEVER";
    case VK_COMPARE_OP_LESS:
      return "VK_COMPARE_OP_LESS";
    case VK_COMPARE_OP_EQUAL:
      return "VK_COMPARE_OP_EQUAL";
    case VK_COMPARE_OP_LESS_OR_EQUAL:
      return "VK_COMPARE_OP_LESS_OR_EQUAL";
    case VK_COMPARE_OP_GREATER:
      return "VK_COMPARE_OP_GREATER";
    case VK_COMPARE_OP_NOT_EQUAL:
      return "VK_COMPARE_OP_NOT_EQUAL";
    case VK_COMPARE_OP_GREATER_OR_EQUAL:
      return "VK_COMPARE_OP_GREATER_OR_EQUAL";
    case VK_COMPARE_OP_ALWAYS:
      return "VK_COMPARE_OP_ALWAYS";
    default:
      return "Unknown VkCompareOp";
  }
}
const char* VkStencilOpToString(VkStencilOp e) {
  switch (e) {
    case VK_STENCIL_OP_KEEP:
      return "VK_STENCIL_OP_KEEP";
    case VK_STENCIL_OP_ZERO:
      return "VK_STENCIL_OP_ZERO";
    case VK_STENCIL_OP_REPLACE:
      return "VK_STENCIL_OP_REPLACE";
    case VK_STENCIL_OP_INCREMENT_AND_CLAMP:
      return "VK_STENCIL_OP_INCREMENT_AND_CLAMP";
    case VK_STENCIL_OP_DECREMENT_AND_CLAMP:
      return "VK_STENCIL_OP_DECREMENT_AND_CLAMP";
    case VK_STENCIL_OP_INVERT:
      return "VK_STENCIL_OP_INVERT";
    case VK_STENCIL_OP_INCREMENT_AND_WRAP:
      return "VK_STENCIL_OP_INCREMENT_AND_WRAP";
    case VK_STENCIL_OP_DECREMENT_AND_WRAP:
      return "VK_STENCIL_OP_DECREMENT_AND_WRAP";
    default:
      return "Unknown VkStencilOp";
  }
}
const char* VkLogicOpToString(VkLogicOp e) {
  switch (e) {
    case VK_LOGIC_OP_CLEAR:
      return "VK_LOGIC_OP_CLEAR";
    case VK_LOGIC_OP_AND:
      return "VK_LOGIC_OP_AND";
    case VK_LOGIC_OP_AND_REVERSE:
      return "VK_LOGIC_OP_AND_REVERSE";
    case VK_LOGIC_OP_COPY:
      return "VK_LOGIC_OP_COPY";
    case VK_LOGIC_OP_AND_INVERTED:
      return "VK_LOGIC_OP_AND_INVERTED";
    case VK_LOGIC_OP_NO_OP:
      return "VK_LOGIC_OP_NO_OP";
    case VK_LOGIC_OP_XOR:
      return "VK_LOGIC_OP_XOR";
    case VK_LOGIC_OP_OR:
      return "VK_LOGIC_OP_OR";
    case VK_LOGIC_OP_NOR:
      return "VK_LOGIC_OP_NOR";
    case VK_LOGIC_OP_EQUIVALENT:
      return "VK_LOGIC_OP_EQUIVALENT";
    case VK_LOGIC_OP_INVERT:
      return "VK_LOGIC_OP_INVERT";
    case VK_LOGIC_OP_OR_REVERSE:
      return "VK_LOGIC_OP_OR_REVERSE";
    case VK_LOGIC_OP_COPY_INVERTED:
      return "VK_LOGIC_OP_COPY_INVERTED";
    case VK_LOGIC_OP_OR_INVERTED:
      return "VK_LOGIC_OP_OR_INVERTED";
    case VK_LOGIC_OP_NAND:
      return "VK_LOGIC_OP_NAND";
    case VK_LOGIC_OP_SET:
      return "VK_LOGIC_OP_SET";
    default:
      return "Unknown VkLogicOp";
  }
}
const char* VkBlendFactorToString(VkBlendFactor e) {
  switch (e) {
    case VK_BLEND_FACTOR_ZERO:
      return "VK_BLEND_FACTOR_ZERO";
    case VK_BLEND_FACTOR_ONE:
      return "VK_BLEND_FACTOR_ONE";
    case VK_BLEND_FACTOR_SRC_COLOR:
      return "VK_BLEND_FACTOR_SRC_COLOR";
    case VK_BLEND_FACTOR_ONE_MINUS_SRC_COLOR:
      return "VK_BLEND_FACTOR_ONE_MINUS_SRC_COLOR";
    case VK_BLEND_FACTOR_DST_COLOR:
      return "VK_BLEND_FACTOR_DST_COLOR";
    case VK_BLEND_FACTOR_ONE_MINUS_DST_COLOR:
      return "VK_BLEND_FACTOR_ONE_MINUS_DST_COLOR";
    case VK_BLEND_FACTOR_SRC_ALPHA:
      return "VK_BLEND_FACTOR_SRC_ALPHA";
    case VK_BLEND_FACTOR_ONE_MINUS_SRC_ALPHA:
      return "VK_BLEND_FACTOR_ONE_MINUS_SRC_ALPHA";
    case VK_BLEND_FACTOR_DST_ALPHA:
      return "VK_BLEND_FACTOR_DST_ALPHA";
    case VK_BLEND_FACTOR_ONE_MINUS_DST_ALPHA:
      return "VK_BLEND_FACTOR_ONE_MINUS_DST_ALPHA";
    case VK_BLEND_FACTOR_CONSTANT_COLOR:
      return "VK_BLEND_FACTOR_CONSTANT_COLOR";
    case VK_BLEND_FACTOR_ONE_MINUS_CONSTANT_COLOR:
      return "VK_BLEND_FACTOR_ONE_MINUS_CONSTANT_COLOR";
    case VK_BLEND_FACTOR_CONSTANT_ALPHA:
      return "VK_BLEND_FACTOR_CONSTANT_ALPHA";
    case VK_BLEND_FACTOR_ONE_MINUS_CONSTANT_ALPHA:
      return "VK_BLEND_FACTOR_ONE_MINUS_CONSTANT_ALPHA";
    case VK_BLEND_FACTOR_SRC_ALPHA_SATURATE:
      return "VK_BLEND_FACTOR_SRC_ALPHA_SATURATE";
    case VK_BLEND_FACTOR_SRC1_COLOR:
      return "VK_BLEND_FACTOR_SRC1_COLOR";
    case VK_BLEND_FACTOR_ONE_MINUS_SRC1_COLOR:
      return "VK_BLEND_FACTOR_ONE_MINUS_SRC1_COLOR";
    case VK_BLEND_FACTOR_SRC1_ALPHA:
      return "VK_BLEND_FACTOR_SRC1_ALPHA";
    case VK_BLEND_FACTOR_ONE_MINUS_SRC1_ALPHA:
      return "VK_BLEND_FACTOR_ONE_MINUS_SRC1_ALPHA";
    default:
      return "Unknown VkBlendFactor";
  }
}
const char* VkBlendOpToString(VkBlendOp e) {
  switch (e) {
    case VK_BLEND_OP_ADD:
      return "VK_BLEND_OP_ADD";
    case VK_BLEND_OP_SUBTRACT:
      return "VK_BLEND_OP_SUBTRACT";
    case VK_BLEND_OP_REVERSE_SUBTRACT:
      return "VK_BLEND_OP_REVERSE_SUBTRACT";
    case VK_BLEND_OP_MIN:
      return "VK_BLEND_OP_MIN";
    case VK_BLEND_OP_MAX:
      return "VK_BLEND_OP_MAX";
    default:
      return "Unknown VkBlendOp";
  }
}
const char* VkDynamicStateToString(VkDynamicState e) {
  switch (e) {
    case VK_DYNAMIC_STATE_VIEWPORT:
      return "VK_DYNAMIC_STATE_VIEWPORT";
    case VK_DYNAMIC_STATE_SCISSOR:
      return "VK_DYNAMIC_STATE_SCISSOR";
    case VK_DYNAMIC_STATE_LINE_WIDTH:
      return "VK_DYNAMIC_STATE_LINE_WIDTH";
    case VK_DYNAMIC_STATE_DEPTH_BIAS:
      return "VK_DYNAMIC_STATE_DEPTH_BIAS";
    case VK_DYNAMIC_STATE_BLEND_CONSTANTS:
      return "VK_DYNAMIC_STATE_BLEND_CONSTANTS";
    case VK_DYNAMIC_STATE_DEPTH_BOUNDS:
      return "VK_DYNAMIC_STATE_DEPTH_BOUNDS";
    case VK_DYNAMIC_STATE_STENCIL_COMPARE_MASK:
      return "VK_DYNAMIC_STATE_STENCIL_COMPARE_MASK";
    case VK_DYNAMIC_STATE_STENCIL_WRITE_MASK:
      return "VK_DYNAMIC_STATE_STENCIL_WRITE_MASK";
    case VK_DYNAMIC_STATE_STENCIL_REFERENCE:
      return "VK_DYNAMIC_STATE_STENCIL_REFERENCE";
    case VK_DYNAMIC_STATE_SAMPLE_LOCATIONS_EXT:
      return "VK_DYNAMIC_STATE_SAMPLE_LOCATIONS_EXT";
    case VK_DYNAMIC_STATE_RAY_TRACING_PIPELINE_STACK_SIZE_KHR:
      return "VK_DYNAMIC_STATE_RAY_TRACING_PIPELINE_STACK_SIZE_KHR";
    case VK_DYNAMIC_STATE_FRAGMENT_SHADING_RATE_KHR:
      return "VK_DYNAMIC_STATE_FRAGMENT_SHADING_RATE_KHR";
    case VK_DYNAMIC_STATE_LINE_STIPPLE_EXT:
      return "VK_DYNAMIC_STATE_LINE_STIPPLE_EXT";
    case VK_DYNAMIC_STATE_CULL_MODE_EXT:
      return "VK_DYNAMIC_STATE_CULL_MODE_EXT";
    case VK_DYNAMIC_STATE_FRONT_FACE_EXT:
      return "VK_DYNAMIC_STATE_FRONT_FACE_EXT";
    case VK_DYNAMIC_STATE_PRIMITIVE_TOPOLOGY_EXT:
      return "VK_DYNAMIC_STATE_PRIMITIVE_TOPOLOGY_EXT";
    case VK_DYNAMIC_STATE_VIEWPORT_WITH_COUNT_EXT:
      return "VK_DYNAMIC_STATE_VIEWPORT_WITH_COUNT_EXT";
    case VK_DYNAMIC_STATE_SCISSOR_WITH_COUNT_EXT:
      return "VK_DYNAMIC_STATE_SCISSOR_WITH_COUNT_EXT";
    case VK_DYNAMIC_STATE_VERTEX_INPUT_BINDING_STRIDE_EXT:
      return "VK_DYNAMIC_STATE_VERTEX_INPUT_BINDING_STRIDE_EXT";
    case VK_DYNAMIC_STATE_DEPTH_TEST_ENABLE_EXT:
      return "VK_DYNAMIC_STATE_DEPTH_TEST_ENABLE_EXT";
    case VK_DYNAMIC_STATE_DEPTH_WRITE_ENABLE_EXT:
      return "VK_DYNAMIC_STATE_DEPTH_WRITE_ENABLE_EXT";
    case VK_DYNAMIC_STATE_DEPTH_COMPARE_OP_EXT:
      return "VK_DYNAMIC_STATE_DEPTH_COMPARE_OP_EXT";
    case VK_DYNAMIC_STATE_DEPTH_BOUNDS_TEST_ENABLE_EXT:
      return "VK_DYNAMIC_STATE_DEPTH_BOUNDS_TEST_ENABLE_EXT";
    case VK_DYNAMIC_STATE_STENCIL_TEST_ENABLE_EXT:
      return "VK_DYNAMIC_STATE_STENCIL_TEST_ENABLE_EXT";
    case VK_DYNAMIC_STATE_STENCIL_OP_EXT:
      return "VK_DYNAMIC_STATE_STENCIL_OP_EXT";
    case VK_DYNAMIC_STATE_VERTEX_INPUT_EXT:
      return "VK_DYNAMIC_STATE_VERTEX_INPUT_EXT";
    case VK_DYNAMIC_STATE_PATCH_CONTROL_POINTS_EXT:
      return "VK_DYNAMIC_STATE_PATCH_CONTROL_POINTS_EXT";
    case VK_DYNAMIC_STATE_RASTERIZER_DISCARD_ENABLE_EXT:
      return "VK_DYNAMIC_STATE_RASTERIZER_DISCARD_ENABLE_EXT";
    case VK_DYNAMIC_STATE_DEPTH_BIAS_ENABLE_EXT:
      return "VK_DYNAMIC_STATE_DEPTH_BIAS_ENABLE_EXT";
    case VK_DYNAMIC_STATE_LOGIC_OP_EXT:
      return "VK_DYNAMIC_STATE_LOGIC_OP_EXT";
    case VK_DYNAMIC_STATE_PRIMITIVE_RESTART_ENABLE_EXT:
      return "VK_DYNAMIC_STATE_PRIMITIVE_RESTART_ENABLE_EXT";
    case VK_DYNAMIC_STATE_COLOR_WRITE_ENABLE_EXT:
      return "VK_DYNAMIC_STATE_COLOR_WRITE_ENABLE_EXT";
    default:
      return "Unknown VkDynamicState";
  }
}
const char* VkFilterToString(VkFilter e) {
  switch (e) {
    case VK_FILTER_NEAREST:
      return "VK_FILTER_NEAREST";
    case VK_FILTER_LINEAR:
      return "VK_FILTER_LINEAR";
    default:
      return "Unknown VkFilter";
  }
}
const char* VkSamplerMipmapModeToString(VkSamplerMipmapMode e) {
  switch (e) {
    case VK_SAMPLER_MIPMAP_MODE_NEAREST:
      return "VK_SAMPLER_MIPMAP_MODE_NEAREST";
    case VK_SAMPLER_MIPMAP_MODE_LINEAR:
      return "VK_SAMPLER_MIPMAP_MODE_LINEAR";
    default:
      return "Unknown VkSamplerMipmapMode";
  }
}
const char* VkSamplerAddressModeToString(VkSamplerAddressMode e) {
  switch (e) {
    case VK_SAMPLER_ADDRESS_MODE_REPEAT:
      return "VK_SAMPLER_ADDRESS_MODE_REPEAT";
    case VK_SAMPLER_ADDRESS_MODE_MIRRORED_REPEAT:
      return "VK_SAMPLER_ADDRESS_MODE_MIRRORED_REPEAT";
    case VK_SAMPLER_ADDRESS_MODE_CLAMP_TO_EDGE:
      return "VK_SAMPLER_ADDRESS_MODE_CLAMP_TO_EDGE";
    case VK_SAMPLER_ADDRESS_MODE_CLAMP_TO_BORDER:
      return "VK_SAMPLER_ADDRESS_MODE_CLAMP_TO_BORDER";
    case VK_SAMPLER_ADDRESS_MODE_MIRROR_CLAMP_TO_EDGE:
      return "VK_SAMPLER_ADDRESS_MODE_MIRROR_CLAMP_TO_EDGE";
    default:
      return "Unknown VkSamplerAddressMode";
  }
}
const char* VkBorderColorToString(VkBorderColor e) {
  switch (e) {
    case VK_BORDER_COLOR_FLOAT_TRANSPARENT_BLACK:
      return "VK_BORDER_COLOR_FLOAT_TRANSPARENT_BLACK";
    case VK_BORDER_COLOR_INT_TRANSPARENT_BLACK:
      return "VK_BORDER_COLOR_INT_TRANSPARENT_BLACK";
    case VK_BORDER_COLOR_FLOAT_OPAQUE_BLACK:
      return "VK_BORDER_COLOR_FLOAT_OPAQUE_BLACK";
    case VK_BORDER_COLOR_INT_OPAQUE_BLACK:
      return "VK_BORDER_COLOR_INT_OPAQUE_BLACK";
    case VK_BORDER_COLOR_FLOAT_OPAQUE_WHITE:
      return "VK_BORDER_COLOR_FLOAT_OPAQUE_WHITE";
    case VK_BORDER_COLOR_INT_OPAQUE_WHITE:
      return "VK_BORDER_COLOR_INT_OPAQUE_WHITE";
    case VK_BORDER_COLOR_FLOAT_CUSTOM_EXT:
      return "VK_BORDER_COLOR_FLOAT_CUSTOM_EXT";
    case VK_BORDER_COLOR_INT_CUSTOM_EXT:
      return "VK_BORDER_COLOR_INT_CUSTOM_EXT";
    default:
      return "Unknown VkBorderColor";
  }
}
const char* VkDescriptorTypeToString(VkDescriptorType e) {
  switch (e) {
    case VK_DESCRIPTOR_TYPE_SAMPLER:
      return "VK_DESCRIPTOR_TYPE_SAMPLER";
    case VK_DESCRIPTOR_TYPE_COMBINED_IMAGE_SAMPLER:
      return "VK_DESCRIPTOR_TYPE_COMBINED_IMAGE_SAMPLER";
    case VK_DESCRIPTOR_TYPE_SAMPLED_IMAGE:
      return "VK_DESCRIPTOR_TYPE_SAMPLED_IMAGE";
    case VK_DESCRIPTOR_TYPE_STORAGE_IMAGE:
      return "VK_DESCRIPTOR_TYPE_STORAGE_IMAGE";
    case VK_DESCRIPTOR_TYPE_UNIFORM_TEXEL_BUFFER:
      return "VK_DESCRIPTOR_TYPE_UNIFORM_TEXEL_BUFFER";
    case VK_DESCRIPTOR_TYPE_STORAGE_TEXEL_BUFFER:
      return "VK_DESCRIPTOR_TYPE_STORAGE_TEXEL_BUFFER";
    case VK_DESCRIPTOR_TYPE_UNIFORM_BUFFER:
      return "VK_DESCRIPTOR_TYPE_UNIFORM_BUFFER";
    case VK_DESCRIPTOR_TYPE_STORAGE_BUFFER:
      return "VK_DESCRIPTOR_TYPE_STORAGE_BUFFER";
    case VK_DESCRIPTOR_TYPE_UNIFORM_BUFFER_DYNAMIC:
      return "VK_DESCRIPTOR_TYPE_UNIFORM_BUFFER_DYNAMIC";
    case VK_DESCRIPTOR_TYPE_STORAGE_BUFFER_DYNAMIC:
      return "VK_DESCRIPTOR_TYPE_STORAGE_BUFFER_DYNAMIC";
    case VK_DESCRIPTOR_TYPE_INPUT_ATTACHMENT:
      return "VK_DESCRIPTOR_TYPE_INPUT_ATTACHMENT";
    case VK_DESCRIPTOR_TYPE_INLINE_UNIFORM_BLOCK_EXT:
      return "VK_DESCRIPTOR_TYPE_INLINE_UNIFORM_BLOCK_EXT";
    case VK_DESCRIPTOR_TYPE_ACCELERATION_STRUCTURE_KHR:
      return "VK_DESCRIPTOR_TYPE_ACCELERATION_STRUCTURE_KHR";
    default:
      return "Unknown VkDescriptorType";
  }
}
const char* VkAttachmentLoadOpToString(VkAttachmentLoadOp e) {
  switch (e) {
    case VK_ATTACHMENT_LOAD_OP_LOAD:
      return "VK_ATTACHMENT_LOAD_OP_LOAD";
    case VK_ATTACHMENT_LOAD_OP_CLEAR:
      return "VK_ATTACHMENT_LOAD_OP_CLEAR";
    case VK_ATTACHMENT_LOAD_OP_DONT_CARE:
      return "VK_ATTACHMENT_LOAD_OP_DONT_CARE";
    default:
      return "Unknown VkAttachmentLoadOp";
  }
}
const char* VkAttachmentStoreOpToString(VkAttachmentStoreOp e) {
  switch (e) {
    case VK_ATTACHMENT_STORE_OP_STORE:
      return "VK_ATTACHMENT_STORE_OP_STORE";
    case VK_ATTACHMENT_STORE_OP_DONT_CARE:
      return "VK_ATTACHMENT_STORE_OP_DONT_CARE";
    default:
      return "Unknown VkAttachmentStoreOp";
  }
}
const char* VkPipelineBindPointToString(VkPipelineBindPoint e) {
  switch (e) {
    case VK_PIPELINE_BIND_POINT_GRAPHICS:
      return "VK_PIPELINE_BIND_POINT_GRAPHICS";
    case VK_PIPELINE_BIND_POINT_COMPUTE:
      return "VK_PIPELINE_BIND_POINT_COMPUTE";
    case VK_PIPELINE_BIND_POINT_RAY_TRACING_KHR:
      return "VK_PIPELINE_BIND_POINT_RAY_TRACING_KHR";
    default:
      return "Unknown VkPipelineBindPoint";
  }
}
const char* VkCommandBufferLevelToString(VkCommandBufferLevel e) {
  switch (e) {
    case VK_COMMAND_BUFFER_LEVEL_PRIMARY:
      return "VK_COMMAND_BUFFER_LEVEL_PRIMARY";
    case VK_COMMAND_BUFFER_LEVEL_SECONDARY:
      return "VK_COMMAND_BUFFER_LEVEL_SECONDARY";
    default:
      return "Unknown VkCommandBufferLevel";
  }
}
const char* VkIndexTypeToString(VkIndexType e) {
  switch (e) {
    case VK_INDEX_TYPE_UINT16:
      return "VK_INDEX_TYPE_UINT16";
    case VK_INDEX_TYPE_UINT32:
      return "VK_INDEX_TYPE_UINT32";
    case VK_INDEX_TYPE_NONE_KHR:
      return "VK_INDEX_TYPE_NONE_KHR";
    case VK_INDEX_TYPE_UINT8_EXT:
      return "VK_INDEX_TYPE_UINT8_EXT";
    default:
      return "Unknown VkIndexType";
  }
}
const char* VkPipelineStageFlagBitsToString(VkPipelineStageFlagBits e) {
  switch (e) {
    case VK_PIPELINE_STAGE_TOP_OF_PIPE_BIT:
      return "VK_PIPELINE_STAGE_TOP_OF_PIPE_BIT";
    case VK_PIPELINE_STAGE_DRAW_INDIRECT_BIT:
      return "VK_PIPELINE_STAGE_DRAW_INDIRECT_BIT";
    case VK_PIPELINE_STAGE_VERTEX_INPUT_BIT:
      return "VK_PIPELINE_STAGE_VERTEX_INPUT_BIT";
    case VK_PIPELINE_STAGE_VERTEX_SHADER_BIT:
      return "VK_PIPELINE_STAGE_VERTEX_SHADER_BIT";
    case VK_PIPELINE_STAGE_TESSELLATION_CONTROL_SHADER_BIT:
      return "VK_PIPELINE_STAGE_TESSELLATION_CONTROL_SHADER_BIT";
    case VK_PIPELINE_STAGE_TESSELLATION_EVALUATION_SHADER_BIT:
      return "VK_PIPELINE_STAGE_TESSELLATION_EVALUATION_SHADER_BIT";
    case VK_PIPELINE_STAGE_GEOMETRY_SHADER_BIT:
      return "VK_PIPELINE_STAGE_GEOMETRY_SHADER_BIT";
    case VK_PIPELINE_STAGE_FRAGMENT_SHADER_BIT:
      return "VK_PIPELINE_STAGE_FRAGMENT_SHADER_BIT";
    case VK_PIPELINE_STAGE_EARLY_FRAGMENT_TESTS_BIT:
      return "VK_PIPELINE_STAGE_EARLY_FRAGMENT_TESTS_BIT";
    case VK_PIPELINE_STAGE_LATE_FRAGMENT_TESTS_BIT:
      return "VK_PIPELINE_STAGE_LATE_FRAGMENT_TESTS_BIT";
    case VK_PIPELINE_STAGE_COLOR_ATTACHMENT_OUTPUT_BIT:
      return "VK_PIPELINE_STAGE_COLOR_ATTACHMENT_OUTPUT_BIT";
    case VK_PIPELINE_STAGE_COMPUTE_SHADER_BIT:
      return "VK_PIPELINE_STAGE_COMPUTE_SHADER_BIT";
    case VK_PIPELINE_STAGE_TRANSFER_BIT:
      return "VK_PIPELINE_STAGE_TRANSFER_BIT";
    case VK_PIPELINE_STAGE_BOTTOM_OF_PIPE_BIT:
      return "VK_PIPELINE_STAGE_BOTTOM_OF_PIPE_BIT";
    case VK_PIPELINE_STAGE_HOST_BIT:
      return "VK_PIPELINE_STAGE_HOST_BIT";
    case VK_PIPELINE_STAGE_ALL_GRAPHICS_BIT:
      return "VK_PIPELINE_STAGE_ALL_GRAPHICS_BIT";
    case VK_PIPELINE_STAGE_ALL_COMMANDS_BIT:
      return "VK_PIPELINE_STAGE_ALL_COMMANDS_BIT";
    case VK_PIPELINE_STAGE_ACCELERATION_STRUCTURE_BUILD_BIT_KHR:
      return "VK_PIPELINE_STAGE_ACCELERATION_STRUCTURE_BUILD_BIT_KHR";
    case VK_PIPELINE_STAGE_RAY_TRACING_SHADER_BIT_KHR:
      return "VK_PIPELINE_STAGE_RAY_TRACING_SHADER_BIT_KHR";
    case VK_PIPELINE_STAGE_FRAGMENT_DENSITY_PROCESS_BIT_EXT:
      return "VK_PIPELINE_STAGE_FRAGMENT_DENSITY_PROCESS_BIT_EXT";
    case VK_PIPELINE_STAGE_FRAGMENT_SHADING_RATE_ATTACHMENT_BIT_KHR:
      return "VK_PIPELINE_STAGE_FRAGMENT_SHADING_RATE_ATTACHMENT_BIT_KHR";
    case VK_PIPELINE_STAGE_NONE_KHR:
      return "VK_PIPELINE_STAGE_NONE_KHR";
    default:
      return "Unknown VkPipelineStageFlagBits";
  }
}
const char* VkSubpassContentsToString(VkSubpassContents e) {
  switch (e) {
    case VK_SUBPASS_CONTENTS_INLINE:
      return "VK_SUBPASS_CONTENTS_INLINE";
    case VK_SUBPASS_CONTENTS_SECONDARY_COMMAND_BUFFERS:
      return "VK_SUBPASS_CONTENTS_SECONDARY_COMMAND_BUFFERS";
    default:
      return "Unknown VkSubpassContents";
  }
}
const char* VkSurfaceTransformFlagBitsKHRToString(
    VkSurfaceTransformFlagBitsKHR e) {
  switch (e) {
    case VK_SURFACE_TRANSFORM_IDENTITY_BIT_KHR:
      return "VK_SURFACE_TRANSFORM_IDENTITY_BIT_KHR";
    case VK_SURFACE_TRANSFORM_ROTATE_90_BIT_KHR:
      return "VK_SURFACE_TRANSFORM_ROTATE_90_BIT_KHR";
    case VK_SURFACE_TRANSFORM_ROTATE_180_BIT_KHR:
      return "VK_SURFACE_TRANSFORM_ROTATE_180_BIT_KHR";
    case VK_SURFACE_TRANSFORM_ROTATE_270_BIT_KHR:
      return "VK_SURFACE_TRANSFORM_ROTATE_270_BIT_KHR";
    case VK_SURFACE_TRANSFORM_HORIZONTAL_MIRROR_BIT_KHR:
      return "VK_SURFACE_TRANSFORM_HORIZONTAL_MIRROR_BIT_KHR";
    case VK_SURFACE_TRANSFORM_HORIZONTAL_MIRROR_ROTATE_90_BIT_KHR:
      return "VK_SURFACE_TRANSFORM_HORIZONTAL_MIRROR_ROTATE_90_BIT_KHR";
    case VK_SURFACE_TRANSFORM_HORIZONTAL_MIRROR_ROTATE_180_BIT_KHR:
      return "VK_SURFACE_TRANSFORM_HORIZONTAL_MIRROR_ROTATE_180_BIT_KHR";
    case VK_SURFACE_TRANSFORM_HORIZONTAL_MIRROR_ROTATE_270_BIT_KHR:
      return "VK_SURFACE_TRANSFORM_HORIZONTAL_MIRROR_ROTATE_270_BIT_KHR";
    case VK_SURFACE_TRANSFORM_INHERIT_BIT_KHR:
      return "VK_SURFACE_TRANSFORM_INHERIT_BIT_KHR";
    default:
      return "Unknown VkSurfaceTransformFlagBitsKHR";
  }
}
const char* VkDisplayPlaneAlphaFlagBitsKHRToString(
    VkDisplayPlaneAlphaFlagBitsKHR e) {
  switch (e) {
    case VK_DISPLAY_PLANE_ALPHA_OPAQUE_BIT_KHR:
      return "VK_DISPLAY_PLANE_ALPHA_OPAQUE_BIT_KHR";
    case VK_DISPLAY_PLANE_ALPHA_GLOBAL_BIT_KHR:
      return "VK_DISPLAY_PLANE_ALPHA_GLOBAL_BIT_KHR";
    case VK_DISPLAY_PLANE_ALPHA_PER_PIXEL_BIT_KHR:
      return "VK_DISPLAY_PLANE_ALPHA_PER_PIXEL_BIT_KHR";
    case VK_DISPLAY_PLANE_ALPHA_PER_PIXEL_PREMULTIPLIED_BIT_KHR:
      return "VK_DISPLAY_PLANE_ALPHA_PER_PIXEL_PREMULTIPLIED_BIT_KHR";
    default:
      return "Unknown VkDisplayPlaneAlphaFlagBitsKHR";
  }
}
const char* VkColorSpaceKHRToString(VkColorSpaceKHR e) {
  switch (e) {
    case VK_COLOR_SPACE_SRGB_NONLINEAR_KHR:
      return "VK_COLOR_SPACE_SRGB_NONLINEAR_KHR";
    case VK_COLOR_SPACE_DISPLAY_NATIVE_AMD:
      return "VK_COLOR_SPACE_DISPLAY_NATIVE_AMD";
    default:
      return "Unknown VkColorSpaceKHR";
  }
}
const char* VkCompositeAlphaFlagBitsKHRToString(VkCompositeAlphaFlagBitsKHR e) {
  switch (e) {
    case VK_COMPOSITE_ALPHA_OPAQUE_BIT_KHR:
      return "VK_COMPOSITE_ALPHA_OPAQUE_BIT_KHR";
    case VK_COMPOSITE_ALPHA_PRE_MULTIPLIED_BIT_KHR:
      return "VK_COMPOSITE_ALPHA_PRE_MULTIPLIED_BIT_KHR";
    case VK_COMPOSITE_ALPHA_POST_MULTIPLIED_BIT_KHR:
      return "VK_COMPOSITE_ALPHA_POST_MULTIPLIED_BIT_KHR";
    case VK_COMPOSITE_ALPHA_INHERIT_BIT_KHR:
      return "VK_COMPOSITE_ALPHA_INHERIT_BIT_KHR";
    default:
      return "Unknown VkCompositeAlphaFlagBitsKHR";
  }
}
const char* VkPresentModeKHRToString(VkPresentModeKHR e) {
  switch (e) {
    case VK_PRESENT_MODE_IMMEDIATE_KHR:
      return "VK_PRESENT_MODE_IMMEDIATE_KHR";
    case VK_PRESENT_MODE_MAILBOX_KHR:
      return "VK_PRESENT_MODE_MAILBOX_KHR";
    case VK_PRESENT_MODE_FIFO_KHR:
      return "VK_PRESENT_MODE_FIFO_KHR";
    case VK_PRESENT_MODE_FIFO_RELAXED_KHR:
      return "VK_PRESENT_MODE_FIFO_RELAXED_KHR";
    case VK_PRESENT_MODE_SHARED_DEMAND_REFRESH_KHR:
      return "VK_PRESENT_MODE_SHARED_DEMAND_REFRESH_KHR";
    case VK_PRESENT_MODE_SHARED_CONTINUOUS_REFRESH_KHR:
      return "VK_PRESENT_MODE_SHARED_CONTINUOUS_REFRESH_KHR";
    default:
      return "Unknown VkPresentModeKHR";
  }
}
const char* VkResultToString(VkResult e) {
  switch (e) {
    case VK_SUCCESS:
      return "VK_SUCCESS";
    case VK_NOT_READY:
      return "VK_NOT_READY";
    case VK_TIMEOUT:
      return "VK_TIMEOUT";
    case VK_EVENT_SET:
      return "VK_EVENT_SET";
    case VK_EVENT_RESET:
      return "VK_EVENT_RESET";
    case VK_INCOMPLETE:
      return "VK_INCOMPLETE";
    case VK_ERROR_OUT_OF_HOST_MEMORY:
      return "VK_ERROR_OUT_OF_HOST_MEMORY";
    case VK_ERROR_OUT_OF_DEVICE_MEMORY:
      return "VK_ERROR_OUT_OF_DEVICE_MEMORY";
    case VK_ERROR_INITIALIZATION_FAILED:
      return "VK_ERROR_INITIALIZATION_FAILED";
    case VK_ERROR_DEVICE_LOST:
      return "VK_ERROR_DEVICE_LOST";
    case VK_ERROR_MEMORY_MAP_FAILED:
      return "VK_ERROR_MEMORY_MAP_FAILED";
    case VK_ERROR_LAYER_NOT_PRESENT:
      return "VK_ERROR_LAYER_NOT_PRESENT";
    case VK_ERROR_EXTENSION_NOT_PRESENT:
      return "VK_ERROR_EXTENSION_NOT_PRESENT";
    case VK_ERROR_FEATURE_NOT_PRESENT:
      return "VK_ERROR_FEATURE_NOT_PRESENT";
    case VK_ERROR_INCOMPATIBLE_DRIVER:
      return "VK_ERROR_INCOMPATIBLE_DRIVER";
    case VK_ERROR_TOO_MANY_OBJECTS:
      return "VK_ERROR_TOO_MANY_OBJECTS";
    case VK_ERROR_FORMAT_NOT_SUPPORTED:
      return "VK_ERROR_FORMAT_NOT_SUPPORTED";
    case VK_ERROR_FRAGMENTED_POOL:
      return "VK_ERROR_FRAGMENTED_POOL";
    case VK_ERROR_UNKNOWN:
      return "VK_ERROR_UNKNOWN";
    case VK_ERROR_SURFACE_LOST_KHR:
      return "VK_ERROR_SURFACE_LOST_KHR";
    case VK_ERROR_NATIVE_WINDOW_IN_USE_KHR:
      return "VK_ERROR_NATIVE_WINDOW_IN_USE_KHR";
    case VK_SUBOPTIMAL_KHR:
      return "VK_SUBOPTIMAL_KHR";
    case VK_ERROR_OUT_OF_DATE_KHR:
      return "VK_ERROR_OUT_OF_DATE_KHR";
    case VK_ERROR_INCOMPATIBLE_DISPLAY_KHR:
      return "VK_ERROR_INCOMPATIBLE_DISPLAY_KHR";
    case VK_ERROR_VALIDATION_FAILED_EXT:
      return "VK_ERROR_VALIDATION_FAILED_EXT";
    case VK_ERROR_INVALID_DRM_FORMAT_MODIFIER_PLANE_LAYOUT_EXT:
      return "VK_ERROR_INVALID_DRM_FORMAT_MODIFIER_PLANE_LAYOUT_EXT";
    case VK_ERROR_NOT_PERMITTED_EXT:
      return "VK_ERROR_NOT_PERMITTED_EXT";
    case VK_THREAD_IDLE_KHR:
      return "VK_THREAD_IDLE_KHR";
    case VK_THREAD_DONE_KHR:
      return "VK_THREAD_DONE_KHR";
    case VK_OPERATION_DEFERRED_KHR:
      return "VK_OPERATION_DEFERRED_KHR";
    case VK_OPERATION_NOT_DEFERRED_KHR:
      return "VK_OPERATION_NOT_DEFERRED_KHR";
    case VK_PIPELINE_COMPILE_REQUIRED_EXT:
      return "VK_PIPELINE_COMPILE_REQUIRED_EXT";
    case VK_ERROR_OUT_OF_POOL_MEMORY:
      return "VK_ERROR_OUT_OF_POOL_MEMORY";
    case VK_ERROR_INVALID_EXTERNAL_HANDLE:
      return "VK_ERROR_INVALID_EXTERNAL_HANDLE";
    case VK_ERROR_FRAGMENTATION:
      return "VK_ERROR_FRAGMENTATION";
    case VK_ERROR_INVALID_OPAQUE_CAPTURE_ADDRESS:
      return "VK_ERROR_INVALID_OPAQUE_CAPTURE_ADDRESS";
    default:
      return "Unknown VkResult";
  }
}
const char* VkDebugReportObjectTypeEXTToString(VkDebugReportObjectTypeEXT e) {
  switch (e) {
    case VK_DEBUG_REPORT_OBJECT_TYPE_UNKNOWN_EXT:
      return "VK_DEBUG_REPORT_OBJECT_TYPE_UNKNOWN_EXT";
    case VK_DEBUG_REPORT_OBJECT_TYPE_INSTANCE_EXT:
      return "VK_DEBUG_REPORT_OBJECT_TYPE_INSTANCE_EXT";
    case VK_DEBUG_REPORT_OBJECT_TYPE_PHYSICAL_DEVICE_EXT:
      return "VK_DEBUG_REPORT_OBJECT_TYPE_PHYSICAL_DEVICE_EXT";
    case VK_DEBUG_REPORT_OBJECT_TYPE_DEVICE_EXT:
      return "VK_DEBUG_REPORT_OBJECT_TYPE_DEVICE_EXT";
    case VK_DEBUG_REPORT_OBJECT_TYPE_QUEUE_EXT:
      return "VK_DEBUG_REPORT_OBJECT_TYPE_QUEUE_EXT";
    case VK_DEBUG_REPORT_OBJECT_TYPE_SEMAPHORE_EXT:
      return "VK_DEBUG_REPORT_OBJECT_TYPE_SEMAPHORE_EXT";
    case VK_DEBUG_REPORT_OBJECT_TYPE_COMMAND_BUFFER_EXT:
      return "VK_DEBUG_REPORT_OBJECT_TYPE_COMMAND_BUFFER_EXT";
    case VK_DEBUG_REPORT_OBJECT_TYPE_FENCE_EXT:
      return "VK_DEBUG_REPORT_OBJECT_TYPE_FENCE_EXT";
    case VK_DEBUG_REPORT_OBJECT_TYPE_DEVICE_MEMORY_EXT:
      return "VK_DEBUG_REPORT_OBJECT_TYPE_DEVICE_MEMORY_EXT";
    case VK_DEBUG_REPORT_OBJECT_TYPE_BUFFER_EXT:
      return "VK_DEBUG_REPORT_OBJECT_TYPE_BUFFER_EXT";
    case VK_DEBUG_REPORT_OBJECT_TYPE_IMAGE_EXT:
      return "VK_DEBUG_REPORT_OBJECT_TYPE_IMAGE_EXT";
    case VK_DEBUG_REPORT_OBJECT_TYPE_EVENT_EXT:
      return "VK_DEBUG_REPORT_OBJECT_TYPE_EVENT_EXT";
    case VK_DEBUG_REPORT_OBJECT_TYPE_QUERY_POOL_EXT:
      return "VK_DEBUG_REPORT_OBJECT_TYPE_QUERY_POOL_EXT";
    case VK_DEBUG_REPORT_OBJECT_TYPE_BUFFER_VIEW_EXT:
      return "VK_DEBUG_REPORT_OBJECT_TYPE_BUFFER_VIEW_EXT";
    case VK_DEBUG_REPORT_OBJECT_TYPE_IMAGE_VIEW_EXT:
      return "VK_DEBUG_REPORT_OBJECT_TYPE_IMAGE_VIEW_EXT";
    case VK_DEBUG_REPORT_OBJECT_TYPE_SHADER_MODULE_EXT:
      return "VK_DEBUG_REPORT_OBJECT_TYPE_SHADER_MODULE_EXT";
    case VK_DEBUG_REPORT_OBJECT_TYPE_PIPELINE_CACHE_EXT:
      return "VK_DEBUG_REPORT_OBJECT_TYPE_PIPELINE_CACHE_EXT";
    case VK_DEBUG_REPORT_OBJECT_TYPE_PIPELINE_LAYOUT_EXT:
      return "VK_DEBUG_REPORT_OBJECT_TYPE_PIPELINE_LAYOUT_EXT";
    case VK_DEBUG_REPORT_OBJECT_TYPE_RENDER_PASS_EXT:
      return "VK_DEBUG_REPORT_OBJECT_TYPE_RENDER_PASS_EXT";
    case VK_DEBUG_REPORT_OBJECT_TYPE_PIPELINE_EXT:
      return "VK_DEBUG_REPORT_OBJECT_TYPE_PIPELINE_EXT";
    case VK_DEBUG_REPORT_OBJECT_TYPE_DESCRIPTOR_SET_LAYOUT_EXT:
      return "VK_DEBUG_REPORT_OBJECT_TYPE_DESCRIPTOR_SET_LAYOUT_EXT";
    case VK_DEBUG_REPORT_OBJECT_TYPE_SAMPLER_EXT:
      return "VK_DEBUG_REPORT_OBJECT_TYPE_SAMPLER_EXT";
    case VK_DEBUG_REPORT_OBJECT_TYPE_DESCRIPTOR_POOL_EXT:
      return "VK_DEBUG_REPORT_OBJECT_TYPE_DESCRIPTOR_POOL_EXT";
    case VK_DEBUG_REPORT_OBJECT_TYPE_DESCRIPTOR_SET_EXT:
      return "VK_DEBUG_REPORT_OBJECT_TYPE_DESCRIPTOR_SET_EXT";
    case VK_DEBUG_REPORT_OBJECT_TYPE_FRAMEBUFFER_EXT:
      return "VK_DEBUG_REPORT_OBJECT_TYPE_FRAMEBUFFER_EXT";
    case VK_DEBUG_REPORT_OBJECT_TYPE_COMMAND_POOL_EXT:
      return "VK_DEBUG_REPORT_OBJECT_TYPE_COMMAND_POOL_EXT";
    case VK_DEBUG_REPORT_OBJECT_TYPE_SURFACE_KHR_EXT:
      return "VK_DEBUG_REPORT_OBJECT_TYPE_SURFACE_KHR_EXT";
    case VK_DEBUG_REPORT_OBJECT_TYPE_SWAPCHAIN_KHR_EXT:
      return "VK_DEBUG_REPORT_OBJECT_TYPE_SWAPCHAIN_KHR_EXT";
    case VK_DEBUG_REPORT_OBJECT_TYPE_DEBUG_REPORT_CALLBACK_EXT_EXT:
      return "VK_DEBUG_REPORT_OBJECT_TYPE_DEBUG_REPORT_CALLBACK_EXT_EXT";
    case VK_DEBUG_REPORT_OBJECT_TYPE_DISPLAY_KHR_EXT:
      return "VK_DEBUG_REPORT_OBJECT_TYPE_DISPLAY_KHR_EXT";
    case VK_DEBUG_REPORT_OBJECT_TYPE_DISPLAY_MODE_KHR_EXT:
      return "VK_DEBUG_REPORT_OBJECT_TYPE_DISPLAY_MODE_KHR_EXT";
    case VK_DEBUG_REPORT_OBJECT_TYPE_VALIDATION_CACHE_EXT_EXT:
      return "VK_DEBUG_REPORT_OBJECT_TYPE_VALIDATION_CACHE_EXT_EXT";
    case VK_DEBUG_REPORT_OBJECT_TYPE_SAMPLER_YCBCR_CONVERSION_EXT:
      return "VK_DEBUG_REPORT_OBJECT_TYPE_SAMPLER_YCBCR_CONVERSION_EXT";
    case VK_DEBUG_REPORT_OBJECT_TYPE_DESCRIPTOR_UPDATE_TEMPLATE_EXT:
      return "VK_DEBUG_REPORT_OBJECT_TYPE_DESCRIPTOR_UPDATE_TEMPLATE_EXT";
    case VK_DEBUG_REPORT_OBJECT_TYPE_ACCELERATION_STRUCTURE_KHR_EXT:
      return "VK_DEBUG_REPORT_OBJECT_TYPE_ACCELERATION_STRUCTURE_KHR_EXT";
    default:
      return "Unknown VkDebugReportObjectTypeEXT";
  }
}
const char* VkExternalMemoryHandleTypeFlagBitsToString(
    VkExternalMemoryHandleTypeFlagBits e) {
  switch (e) {
    case VK_EXTERNAL_MEMORY_HANDLE_TYPE_OPAQUE_FD_BIT:
      return "VK_EXTERNAL_MEMORY_HANDLE_TYPE_OPAQUE_FD_BIT";
    case VK_EXTERNAL_MEMORY_HANDLE_TYPE_OPAQUE_WIN32_BIT:
      return "VK_EXTERNAL_MEMORY_HANDLE_TYPE_OPAQUE_WIN32_BIT";
    case VK_EXTERNAL_MEMORY_HANDLE_TYPE_OPAQUE_WIN32_KMT_BIT:
      return "VK_EXTERNAL_MEMORY_HANDLE_TYPE_OPAQUE_WIN32_KMT_BIT";
    case VK_EXTERNAL_MEMORY_HANDLE_TYPE_D3D11_TEXTURE_BIT:
      return "VK_EXTERNAL_MEMORY_HANDLE_TYPE_D3D11_TEXTURE_BIT";
    case VK_EXTERNAL_MEMORY_HANDLE_TYPE_D3D11_TEXTURE_KMT_BIT:
      return "VK_EXTERNAL_MEMORY_HANDLE_TYPE_D3D11_TEXTURE_KMT_BIT";
    case VK_EXTERNAL_MEMORY_HANDLE_TYPE_D3D12_HEAP_BIT:
      return "VK_EXTERNAL_MEMORY_HANDLE_TYPE_D3D12_HEAP_BIT";
    case VK_EXTERNAL_MEMORY_HANDLE_TYPE_D3D12_RESOURCE_BIT:
      return "VK_EXTERNAL_MEMORY_HANDLE_TYPE_D3D12_RESOURCE_BIT";
    case VK_EXTERNAL_MEMORY_HANDLE_TYPE_DMA_BUF_BIT_EXT:
      return "VK_EXTERNAL_MEMORY_HANDLE_TYPE_DMA_BUF_BIT_EXT";
    case VK_EXTERNAL_MEMORY_HANDLE_TYPE_HOST_ALLOCATION_BIT_EXT:
      return "VK_EXTERNAL_MEMORY_HANDLE_TYPE_HOST_ALLOCATION_BIT_EXT";
    case VK_EXTERNAL_MEMORY_HANDLE_TYPE_HOST_MAPPED_FOREIGN_MEMORY_BIT_EXT:
      return "VK_EXTERNAL_MEMORY_HANDLE_TYPE_HOST_MAPPED_FOREIGN_MEMORY_BIT_"
             "EXT";
    default:
      return "Unknown VkExternalMemoryHandleTypeFlagBits";
  }
}
const char* VkExternalSemaphoreHandleTypeFlagBitsToString(
    VkExternalSemaphoreHandleTypeFlagBits e) {
  switch (e) {
    case VK_EXTERNAL_SEMAPHORE_HANDLE_TYPE_OPAQUE_FD_BIT:
      return "VK_EXTERNAL_SEMAPHORE_HANDLE_TYPE_OPAQUE_FD_BIT";
    case VK_EXTERNAL_SEMAPHORE_HANDLE_TYPE_OPAQUE_WIN32_BIT:
      return "VK_EXTERNAL_SEMAPHORE_HANDLE_TYPE_OPAQUE_WIN32_BIT";
    case VK_EXTERNAL_SEMAPHORE_HANDLE_TYPE_OPAQUE_WIN32_KMT_BIT:
      return "VK_EXTERNAL_SEMAPHORE_HANDLE_TYPE_OPAQUE_WIN32_KMT_BIT";
    case VK_EXTERNAL_SEMAPHORE_HANDLE_TYPE_D3D12_FENCE_BIT:
      return "VK_EXTERNAL_SEMAPHORE_HANDLE_TYPE_D3D12_FENCE_BIT";
    case VK_EXTERNAL_SEMAPHORE_HANDLE_TYPE_SYNC_FD_BIT:
      return "VK_EXTERNAL_SEMAPHORE_HANDLE_TYPE_SYNC_FD_BIT";
    default:
      return "Unknown VkExternalSemaphoreHandleTypeFlagBits";
  }
}
const char* VkExternalFenceHandleTypeFlagBitsToString(
    VkExternalFenceHandleTypeFlagBits e) {
  switch (e) {
    case VK_EXTERNAL_FENCE_HANDLE_TYPE_OPAQUE_FD_BIT:
      return "VK_EXTERNAL_FENCE_HANDLE_TYPE_OPAQUE_FD_BIT";
    case VK_EXTERNAL_FENCE_HANDLE_TYPE_OPAQUE_WIN32_BIT:
      return "VK_EXTERNAL_FENCE_HANDLE_TYPE_OPAQUE_WIN32_BIT";
    case VK_EXTERNAL_FENCE_HANDLE_TYPE_OPAQUE_WIN32_KMT_BIT:
      return "VK_EXTERNAL_FENCE_HANDLE_TYPE_OPAQUE_WIN32_KMT_BIT";
    case VK_EXTERNAL_FENCE_HANDLE_TYPE_SYNC_FD_BIT:
      return "VK_EXTERNAL_FENCE_HANDLE_TYPE_SYNC_FD_BIT";
    default:
      return "Unknown VkExternalFenceHandleTypeFlagBits";
  }
}
const char* VkDescriptorUpdateTemplateTypeToString(
    VkDescriptorUpdateTemplateType e) {
  switch (e) {
    case VK_DESCRIPTOR_UPDATE_TEMPLATE_TYPE_DESCRIPTOR_SET:
      return "VK_DESCRIPTOR_UPDATE_TEMPLATE_TYPE_DESCRIPTOR_SET";
    case VK_DESCRIPTOR_UPDATE_TEMPLATE_TYPE_PUSH_DESCRIPTORS_KHR:
      return "VK_DESCRIPTOR_UPDATE_TEMPLATE_TYPE_PUSH_DESCRIPTORS_KHR";
    default:
      return "Unknown VkDescriptorUpdateTemplateType";
  }
}
const char* VkSamplerYcbcrModelConversionToString(
    VkSamplerYcbcrModelConversion e) {
  switch (e) {
    case VK_SAMPLER_YCBCR_MODEL_CONVERSION_RGB_IDENTITY:
      return "VK_SAMPLER_YCBCR_MODEL_CONVERSION_RGB_IDENTITY";
    case VK_SAMPLER_YCBCR_MODEL_CONVERSION_YCBCR_IDENTITY:
      return "VK_SAMPLER_YCBCR_MODEL_CONVERSION_YCBCR_IDENTITY";
    case VK_SAMPLER_YCBCR_MODEL_CONVERSION_YCBCR_709:
      return "VK_SAMPLER_YCBCR_MODEL_CONVERSION_YCBCR_709";
    case VK_SAMPLER_YCBCR_MODEL_CONVERSION_YCBCR_601:
      return "VK_SAMPLER_YCBCR_MODEL_CONVERSION_YCBCR_601";
    case VK_SAMPLER_YCBCR_MODEL_CONVERSION_YCBCR_2020:
      return "VK_SAMPLER_YCBCR_MODEL_CONVERSION_YCBCR_2020";
    default:
      return "Unknown VkSamplerYcbcrModelConversion";
  }
}
const char* VkSamplerYcbcrRangeToString(VkSamplerYcbcrRange e) {
  switch (e) {
    case VK_SAMPLER_YCBCR_RANGE_ITU_FULL:
      return "VK_SAMPLER_YCBCR_RANGE_ITU_FULL";
    case VK_SAMPLER_YCBCR_RANGE_ITU_NARROW:
      return "VK_SAMPLER_YCBCR_RANGE_ITU_NARROW";
    default:
      return "Unknown VkSamplerYcbcrRange";
  }
}
const char* VkChromaLocationToString(VkChromaLocation e) {
  switch (e) {
    case VK_CHROMA_LOCATION_COSITED_EVEN:
      return "VK_CHROMA_LOCATION_COSITED_EVEN";
    case VK_CHROMA_LOCATION_MIDPOINT:
      return "VK_CHROMA_LOCATION_MIDPOINT";
    default:
      return "Unknown VkChromaLocation";
  }
}
const char* VkShaderInfoTypeAMDToString(VkShaderInfoTypeAMD e) {
  switch (e) {
    case VK_SHADER_INFO_TYPE_STATISTICS_AMD:
      return "VK_SHADER_INFO_TYPE_STATISTICS_AMD";
    case VK_SHADER_INFO_TYPE_BINARY_AMD:
      return "VK_SHADER_INFO_TYPE_BINARY_AMD";
    case VK_SHADER_INFO_TYPE_DISASSEMBLY_AMD:
      return "VK_SHADER_INFO_TYPE_DISASSEMBLY_AMD";
    default:
      return "Unknown VkShaderInfoTypeAMD";
  }
}
const char* VkTimeDomainEXTToString(VkTimeDomainEXT e) {
  switch (e) {
    case VK_TIME_DOMAIN_DEVICE_EXT:
      return "VK_TIME_DOMAIN_DEVICE_EXT";
    case VK_TIME_DOMAIN_CLOCK_MONOTONIC_EXT:
      return "VK_TIME_DOMAIN_CLOCK_MONOTONIC_EXT";
    case VK_TIME_DOMAIN_CLOCK_MONOTONIC_RAW_EXT:
      return "VK_TIME_DOMAIN_CLOCK_MONOTONIC_RAW_EXT";
    case VK_TIME_DOMAIN_QUERY_PERFORMANCE_COUNTER_EXT:
      return "VK_TIME_DOMAIN_QUERY_PERFORMANCE_COUNTER_EXT";
    default:
      return "Unknown VkTimeDomainEXT";
  }
}
const char* VkObjectTypeToString(VkObjectType e) {
  switch (e) {
    case VK_OBJECT_TYPE_UNKNOWN:
      return "VK_OBJECT_TYPE_UNKNOWN";
    case VK_OBJECT_TYPE_INSTANCE:
      return "VK_OBJECT_TYPE_INSTANCE";
    case VK_OBJECT_TYPE_PHYSICAL_DEVICE:
      return "VK_OBJECT_TYPE_PHYSICAL_DEVICE";
    case VK_OBJECT_TYPE_DEVICE:
      return "VK_OBJECT_TYPE_DEVICE";
    case VK_OBJECT_TYPE_QUEUE:
      return "VK_OBJECT_TYPE_QUEUE";
    case VK_OBJECT_TYPE_SEMAPHORE:
      return "VK_OBJECT_TYPE_SEMAPHORE";
    case VK_OBJECT_TYPE_COMMAND_BUFFER:
      return "VK_OBJECT_TYPE_COMMAND_BUFFER";
    case VK_OBJECT_TYPE_FENCE:
      return "VK_OBJECT_TYPE_FENCE";
    case VK_OBJECT_TYPE_DEVICE_MEMORY:
      return "VK_OBJECT_TYPE_DEVICE_MEMORY";
    case VK_OBJECT_TYPE_BUFFER:
      return "VK_OBJECT_TYPE_BUFFER";
    case VK_OBJECT_TYPE_IMAGE:
      return "VK_OBJECT_TYPE_IMAGE";
    case VK_OBJECT_TYPE_EVENT:
      return "VK_OBJECT_TYPE_EVENT";
    case VK_OBJECT_TYPE_QUERY_POOL:
      return "VK_OBJECT_TYPE_QUERY_POOL";
    case VK_OBJECT_TYPE_BUFFER_VIEW:
      return "VK_OBJECT_TYPE_BUFFER_VIEW";
    case VK_OBJECT_TYPE_IMAGE_VIEW:
      return "VK_OBJECT_TYPE_IMAGE_VIEW";
    case VK_OBJECT_TYPE_SHADER_MODULE:
      return "VK_OBJECT_TYPE_SHADER_MODULE";
    case VK_OBJECT_TYPE_PIPELINE_CACHE:
      return "VK_OBJECT_TYPE_PIPELINE_CACHE";
    case VK_OBJECT_TYPE_PIPELINE_LAYOUT:
      return "VK_OBJECT_TYPE_PIPELINE_LAYOUT";
    case VK_OBJECT_TYPE_RENDER_PASS:
      return "VK_OBJECT_TYPE_RENDER_PASS";
    case VK_OBJECT_TYPE_PIPELINE:
      return "VK_OBJECT_TYPE_PIPELINE";
    case VK_OBJECT_TYPE_DESCRIPTOR_SET_LAYOUT:
      return "VK_OBJECT_TYPE_DESCRIPTOR_SET_LAYOUT";
    case VK_OBJECT_TYPE_SAMPLER:
      return "VK_OBJECT_TYPE_SAMPLER";
    case VK_OBJECT_TYPE_DESCRIPTOR_POOL:
      return "VK_OBJECT_TYPE_DESCRIPTOR_POOL";
    case VK_OBJECT_TYPE_DESCRIPTOR_SET:
      return "VK_OBJECT_TYPE_DESCRIPTOR_SET";
    case VK_OBJECT_TYPE_FRAMEBUFFER:
      return "VK_OBJECT_TYPE_FRAMEBUFFER";
    case VK_OBJECT_TYPE_COMMAND_POOL:
      return "VK_OBJECT_TYPE_COMMAND_POOL";
    case VK_OBJECT_TYPE_SURFACE_KHR:
      return "VK_OBJECT_TYPE_SURFACE_KHR";
    case VK_OBJECT_TYPE_SWAPCHAIN_KHR:
      return "VK_OBJECT_TYPE_SWAPCHAIN_KHR";
    case VK_OBJECT_TYPE_DISPLAY_KHR:
      return "VK_OBJECT_TYPE_DISPLAY_KHR";
    case VK_OBJECT_TYPE_DISPLAY_MODE_KHR:
      return "VK_OBJECT_TYPE_DISPLAY_MODE_KHR";
    case VK_OBJECT_TYPE_DEBUG_REPORT_CALLBACK_EXT:
      return "VK_OBJECT_TYPE_DEBUG_REPORT_CALLBACK_EXT";
    case VK_OBJECT_TYPE_DEBUG_UTILS_MESSENGER_EXT:
      return "VK_OBJECT_TYPE_DEBUG_UTILS_MESSENGER_EXT";
    case VK_OBJECT_TYPE_ACCELERATION_STRUCTURE_KHR:
      return "VK_OBJECT_TYPE_ACCELERATION_STRUCTURE_KHR";
    case VK_OBJECT_TYPE_DEFERRED_OPERATION_KHR:
      return "VK_OBJECT_TYPE_DEFERRED_OPERATION_KHR";
    case VK_OBJECT_TYPE_SAMPLER_YCBCR_CONVERSION:
      return "VK_OBJECT_TYPE_SAMPLER_YCBCR_CONVERSION";
    case VK_OBJECT_TYPE_DESCRIPTOR_UPDATE_TEMPLATE:
      return "VK_OBJECT_TYPE_DESCRIPTOR_UPDATE_TEMPLATE";
    default:
      return "Unknown VkObjectType";
  }
}
const char* VkDebugUtilsMessageSeverityFlagBitsEXTToString(
    VkDebugUtilsMessageSeverityFlagBitsEXT e) {
  switch (e) {
    case VK_DEBUG_UTILS_MESSAGE_SEVERITY_VERBOSE_BIT_EXT:
      return "VK_DEBUG_UTILS_MESSAGE_SEVERITY_VERBOSE_BIT_EXT";
    case VK_DEBUG_UTILS_MESSAGE_SEVERITY_INFO_BIT_EXT:
      return "VK_DEBUG_UTILS_MESSAGE_SEVERITY_INFO_BIT_EXT";
    case VK_DEBUG_UTILS_MESSAGE_SEVERITY_WARNING_BIT_EXT:
      return "VK_DEBUG_UTILS_MESSAGE_SEVERITY_WARNING_BIT_EXT";
    case VK_DEBUG_UTILS_MESSAGE_SEVERITY_ERROR_BIT_EXT:
      return "VK_DEBUG_UTILS_MESSAGE_SEVERITY_ERROR_BIT_EXT";
    default:
      return "Unknown VkDebugUtilsMessageSeverityFlagBitsEXT";
  }
}
const char* VkCopyAccelerationStructureModeKHRToString(
    VkCopyAccelerationStructureModeKHR e) {
  switch (e) {
    case VK_COPY_ACCELERATION_STRUCTURE_MODE_CLONE_KHR:
      return "VK_COPY_ACCELERATION_STRUCTURE_MODE_CLONE_KHR";
    case VK_COPY_ACCELERATION_STRUCTURE_MODE_COMPACT_KHR:
      return "VK_COPY_ACCELERATION_STRUCTURE_MODE_COMPACT_KHR";
    case VK_COPY_ACCELERATION_STRUCTURE_MODE_SERIALIZE_KHR:
      return "VK_COPY_ACCELERATION_STRUCTURE_MODE_SERIALIZE_KHR";
    case VK_COPY_ACCELERATION_STRUCTURE_MODE_DESERIALIZE_KHR:
      return "VK_COPY_ACCELERATION_STRUCTURE_MODE_DESERIALIZE_KHR";
    default:
      return "Unknown VkCopyAccelerationStructureModeKHR";
  }
}
const char* VkRayTracingShaderGroupTypeKHRToString(
    VkRayTracingShaderGroupTypeKHR e) {
  switch (e) {
    case VK_RAY_TRACING_SHADER_GROUP_TYPE_GENERAL_KHR:
      return "VK_RAY_TRACING_SHADER_GROUP_TYPE_GENERAL_KHR";
    case VK_RAY_TRACING_SHADER_GROUP_TYPE_TRIANGLES_HIT_GROUP_KHR:
      return "VK_RAY_TRACING_SHADER_GROUP_TYPE_TRIANGLES_HIT_GROUP_KHR";
    case VK_RAY_TRACING_SHADER_GROUP_TYPE_PROCEDURAL_HIT_GROUP_KHR:
      return "VK_RAY_TRACING_SHADER_GROUP_TYPE_PROCEDURAL_HIT_GROUP_KHR";
    default:
      return "Unknown VkRayTracingShaderGroupTypeKHR";
  }
}
const char* VkAccelerationStructureCompatibilityKHRToString(
    VkAccelerationStructureCompatibilityKHR e) {
  switch (e) {
    case VK_ACCELERATION_STRUCTURE_COMPATIBILITY_COMPATIBLE_KHR:
      return "VK_ACCELERATION_STRUCTURE_COMPATIBILITY_COMPATIBLE_KHR";
    case VK_ACCELERATION_STRUCTURE_COMPATIBILITY_INCOMPATIBLE_KHR:
      return "VK_ACCELERATION_STRUCTURE_COMPATIBILITY_INCOMPATIBLE_KHR";
    default:
      return "Unknown VkAccelerationStructureCompatibilityKHR";
  }
}
const char* VkShaderGroupShaderKHRToString(VkShaderGroupShaderKHR e) {
  switch (e) {
    case VK_SHADER_GROUP_SHADER_GENERAL_KHR:
      return "VK_SHADER_GROUP_SHADER_GENERAL_KHR";
    case VK_SHADER_GROUP_SHADER_CLOSEST_HIT_KHR:
      return "VK_SHADER_GROUP_SHADER_CLOSEST_HIT_KHR";
    case VK_SHADER_GROUP_SHADER_ANY_HIT_KHR:
      return "VK_SHADER_GROUP_SHADER_ANY_HIT_KHR";
    case VK_SHADER_GROUP_SHADER_INTERSECTION_KHR:
      return "VK_SHADER_GROUP_SHADER_INTERSECTION_KHR";
    default:
      return "Unknown VkShaderGroupShaderKHR";
  }
}
const char* VkPerformanceCounterUnitKHRToString(VkPerformanceCounterUnitKHR e) {
  switch (e) {
    case VK_PERFORMANCE_COUNTER_UNIT_GENERIC_KHR:
      return "VK_PERFORMANCE_COUNTER_UNIT_GENERIC_KHR";
    case VK_PERFORMANCE_COUNTER_UNIT_PERCENTAGE_KHR:
      return "VK_PERFORMANCE_COUNTER_UNIT_PERCENTAGE_KHR";
    case VK_PERFORMANCE_COUNTER_UNIT_NANOSECONDS_KHR:
      return "VK_PERFORMANCE_COUNTER_UNIT_NANOSECONDS_KHR";
    case VK_PERFORMANCE_COUNTER_UNIT_BYTES_KHR:
      return "VK_PERFORMANCE_COUNTER_UNIT_BYTES_KHR";
    case VK_PERFORMANCE_COUNTER_UNIT_BYTES_PER_SECOND_KHR:
      return "VK_PERFORMANCE_COUNTER_UNIT_BYTES_PER_SECOND_KHR";
    case VK_PERFORMANCE_COUNTER_UNIT_KELVIN_KHR:
      return "VK_PERFORMANCE_COUNTER_UNIT_KELVIN_KHR";
    case VK_PERFORMANCE_COUNTER_UNIT_WATTS_KHR:
      return "VK_PERFORMANCE_COUNTER_UNIT_WATTS_KHR";
    case VK_PERFORMANCE_COUNTER_UNIT_VOLTS_KHR:
      return "VK_PERFORMANCE_COUNTER_UNIT_VOLTS_KHR";
    case VK_PERFORMANCE_COUNTER_UNIT_AMPS_KHR:
      return "VK_PERFORMANCE_COUNTER_UNIT_AMPS_KHR";
    case VK_PERFORMANCE_COUNTER_UNIT_HERTZ_KHR:
      return "VK_PERFORMANCE_COUNTER_UNIT_HERTZ_KHR";
    case VK_PERFORMANCE_COUNTER_UNIT_CYCLES_KHR:
      return "VK_PERFORMANCE_COUNTER_UNIT_CYCLES_KHR";
    default:
      return "Unknown VkPerformanceCounterUnitKHR";
  }
}
const char* VkPerformanceCounterScopeKHRToString(
    VkPerformanceCounterScopeKHR e) {
  switch (e) {
    case VK_PERFORMANCE_COUNTER_SCOPE_COMMAND_BUFFER_KHR:
      return "VK_PERFORMANCE_COUNTER_SCOPE_COMMAND_BUFFER_KHR";
    case VK_PERFORMANCE_COUNTER_SCOPE_RENDER_PASS_KHR:
      return "VK_PERFORMANCE_COUNTER_SCOPE_RENDER_PASS_KHR";
    case VK_PERFORMANCE_COUNTER_SCOPE_COMMAND_KHR:
      return "VK_PERFORMANCE_COUNTER_SCOPE_COMMAND_KHR";
    default:
      return "Unknown VkPerformanceCounterScopeKHR";
  }
}
const char* VkPerformanceCounterStorageKHRToString(
    VkPerformanceCounterStorageKHR e) {
  switch (e) {
    case VK_PERFORMANCE_COUNTER_STORAGE_INT32_KHR:
      return "VK_PERFORMANCE_COUNTER_STORAGE_INT32_KHR";
    case VK_PERFORMANCE_COUNTER_STORAGE_INT64_KHR:
      return "VK_PERFORMANCE_COUNTER_STORAGE_INT64_KHR";
    case VK_PERFORMANCE_COUNTER_STORAGE_UINT32_KHR:
      return "VK_PERFORMANCE_COUNTER_STORAGE_UINT32_KHR";
    case VK_PERFORMANCE_COUNTER_STORAGE_UINT64_KHR:
      return "VK_PERFORMANCE_COUNTER_STORAGE_UINT64_KHR";
    case VK_PERFORMANCE_COUNTER_STORAGE_FLOAT32_KHR:
      return "VK_PERFORMANCE_COUNTER_STORAGE_FLOAT32_KHR";
    case VK_PERFORMANCE_COUNTER_STORAGE_FLOAT64_KHR:
      return "VK_PERFORMANCE_COUNTER_STORAGE_FLOAT64_KHR";
    default:
      return "Unknown VkPerformanceCounterStorageKHR";
  }
}
const char* VkPipelineExecutableStatisticFormatKHRToString(
    VkPipelineExecutableStatisticFormatKHR e) {
  switch (e) {
    case VK_PIPELINE_EXECUTABLE_STATISTIC_FORMAT_BOOL32_KHR:
      return "VK_PIPELINE_EXECUTABLE_STATISTIC_FORMAT_BOOL32_KHR";
    case VK_PIPELINE_EXECUTABLE_STATISTIC_FORMAT_INT64_KHR:
      return "VK_PIPELINE_EXECUTABLE_STATISTIC_FORMAT_INT64_KHR";
    case VK_PIPELINE_EXECUTABLE_STATISTIC_FORMAT_UINT64_KHR:
      return "VK_PIPELINE_EXECUTABLE_STATISTIC_FORMAT_UINT64_KHR";
    case VK_PIPELINE_EXECUTABLE_STATISTIC_FORMAT_FLOAT64_KHR:
      return "VK_PIPELINE_EXECUTABLE_STATISTIC_FORMAT_FLOAT64_KHR";
    default:
      return "Unknown VkPipelineExecutableStatisticFormatKHR";
  }
}
const char* VkAccelerationStructureTypeKHRToString(
    VkAccelerationStructureTypeKHR e) {
  switch (e) {
    case VK_ACCELERATION_STRUCTURE_TYPE_TOP_LEVEL_KHR:
      return "VK_ACCELERATION_STRUCTURE_TYPE_TOP_LEVEL_KHR";
    case VK_ACCELERATION_STRUCTURE_TYPE_BOTTOM_LEVEL_KHR:
      return "VK_ACCELERATION_STRUCTURE_TYPE_BOTTOM_LEVEL_KHR";
    case VK_ACCELERATION_STRUCTURE_TYPE_GENERIC_KHR:
      return "VK_ACCELERATION_STRUCTURE_TYPE_GENERIC_KHR";
    default:
      return "Unknown VkAccelerationStructureTypeKHR";
  }
}
const char* VkBuildAccelerationStructureModeKHRToString(
    VkBuildAccelerationStructureModeKHR e) {
  switch (e) {
    case VK_BUILD_ACCELERATION_STRUCTURE_MODE_BUILD_KHR:
      return "VK_BUILD_ACCELERATION_STRUCTURE_MODE_BUILD_KHR";
    case VK_BUILD_ACCELERATION_STRUCTURE_MODE_UPDATE_KHR:
      return "VK_BUILD_ACCELERATION_STRUCTURE_MODE_UPDATE_KHR";
    default:
      return "Unknown VkBuildAccelerationStructureModeKHR";
  }
}
const char* VkGeometryTypeKHRToString(VkGeometryTypeKHR e) {
  switch (e) {
    case VK_GEOMETRY_TYPE_TRIANGLES_KHR:
      return "VK_GEOMETRY_TYPE_TRIANGLES_KHR";
    case VK_GEOMETRY_TYPE_AABBS_KHR:
      return "VK_GEOMETRY_TYPE_AABBS_KHR";
    case VK_GEOMETRY_TYPE_INSTANCES_KHR:
      return "VK_GEOMETRY_TYPE_INSTANCES_KHR";
    default:
      return "Unknown VkGeometryTypeKHR";
  }
}
const char* VkFragmentShadingRateCombinerOpKHRToString(
    VkFragmentShadingRateCombinerOpKHR e) {
  switch (e) {
    case VK_FRAGMENT_SHADING_RATE_COMBINER_OP_KEEP_KHR:
      return "VK_FRAGMENT_SHADING_RATE_COMBINER_OP_KEEP_KHR";
    case VK_FRAGMENT_SHADING_RATE_COMBINER_OP_REPLACE_KHR:
      return "VK_FRAGMENT_SHADING_RATE_COMBINER_OP_REPLACE_KHR";
    case VK_FRAGMENT_SHADING_RATE_COMBINER_OP_MIN_KHR:
      return "VK_FRAGMENT_SHADING_RATE_COMBINER_OP_MIN_KHR";
    case VK_FRAGMENT_SHADING_RATE_COMBINER_OP_MAX_KHR:
      return "VK_FRAGMENT_SHADING_RATE_COMBINER_OP_MAX_KHR";
    case VK_FRAGMENT_SHADING_RATE_COMBINER_OP_MUL_KHR:
      return "VK_FRAGMENT_SHADING_RATE_COMBINER_OP_MUL_KHR";
    default:
      return "Unknown VkFragmentShadingRateCombinerOpKHR";
  }
}
const char* VkAccelerationStructureBuildTypeKHRToString(
    VkAccelerationStructureBuildTypeKHR e) {
  switch (e) {
    case VK_ACCELERATION_STRUCTURE_BUILD_TYPE_HOST_KHR:
      return "VK_ACCELERATION_STRUCTURE_BUILD_TYPE_HOST_KHR";
    case VK_ACCELERATION_STRUCTURE_BUILD_TYPE_DEVICE_KHR:
      return "VK_ACCELERATION_STRUCTURE_BUILD_TYPE_DEVICE_KHR";
    case VK_ACCELERATION_STRUCTURE_BUILD_TYPE_HOST_OR_DEVICE_KHR:
      return "VK_ACCELERATION_STRUCTURE_BUILD_TYPE_HOST_OR_DEVICE_KHR";
    default:
      return "Unknown VkAccelerationStructureBuildTypeKHR";
  }
}

// Define ostream operators for enums.
std::ostream& operator<<(std::ostream& os, const VkStructureType& t) {
  os << VkStructureTypeToString(t);
  return os;
}
std::ostream& operator<<(std::ostream& os, const VkPhysicalDeviceType& t) {
  os << VkPhysicalDeviceTypeToString(t);
  return os;
}
std::ostream& operator<<(std::ostream& os, const VkFormat& t) {
  os << VkFormatToString(t);
  return os;
}
std::ostream& operator<<(std::ostream& os, const VkImageType& t) {
  os << VkImageTypeToString(t);
  return os;
}
std::ostream& operator<<(std::ostream& os, const VkImageTiling& t) {
  os << VkImageTilingToString(t);
  return os;
}
std::ostream& operator<<(std::ostream& os, const VkSampleCountFlagBits& t) {
  os << VkSampleCountFlagBitsToString(t);
  return os;
}
std::ostream& operator<<(std::ostream& os, const VkQueryType& t) {
  os << VkQueryTypeToString(t);
  return os;
}
std::ostream& operator<<(std::ostream& os, const VkSharingMode& t) {
  os << VkSharingModeToString(t);
  return os;
}
std::ostream& operator<<(std::ostream& os, const VkImageLayout& t) {
  os << VkImageLayoutToString(t);
  return os;
}
std::ostream& operator<<(std::ostream& os, const VkImageViewType& t) {
  os << VkImageViewTypeToString(t);
  return os;
}
std::ostream& operator<<(std::ostream& os, const VkComponentSwizzle& t) {
  os << VkComponentSwizzleToString(t);
  return os;
}
std::ostream& operator<<(std::ostream& os, const VkShaderStageFlagBits& t) {
  os << VkShaderStageFlagBitsToString(t);
  return os;
}
std::ostream& operator<<(std::ostream& os, const VkVertexInputRate& t) {
  os << VkVertexInputRateToString(t);
  return os;
}
std::ostream& operator<<(std::ostream& os, const VkPrimitiveTopology& t) {
  os << VkPrimitiveTopologyToString(t);
  return os;
}
std::ostream& operator<<(std::ostream& os, const VkPolygonMode& t) {
  os << VkPolygonModeToString(t);
  return os;
}
std::ostream& operator<<(std::ostream& os, const VkFrontFace& t) {
  os << VkFrontFaceToString(t);
  return os;
}
std::ostream& operator<<(std::ostream& os, const VkCompareOp& t) {
  os << VkCompareOpToString(t);
  return os;
}
std::ostream& operator<<(std::ostream& os, const VkStencilOp& t) {
  os << VkStencilOpToString(t);
  return os;
}
std::ostream& operator<<(std::ostream& os, const VkLogicOp& t) {
  os << VkLogicOpToString(t);
  return os;
}
std::ostream& operator<<(std::ostream& os, const VkBlendFactor& t) {
  os << VkBlendFactorToString(t);
  return os;
}
std::ostream& operator<<(std::ostream& os, const VkBlendOp& t) {
  os << VkBlendOpToString(t);
  return os;
}
std::ostream& operator<<(std::ostream& os, const VkDynamicState& t) {
  os << VkDynamicStateToString(t);
  return os;
}
std::ostream& operator<<(std::ostream& os, const VkFilter& t) {
  os << VkFilterToString(t);
  return os;
}
std::ostream& operator<<(std::ostream& os, const VkSamplerMipmapMode& t) {
  os << VkSamplerMipmapModeToString(t);
  return os;
}
std::ostream& operator<<(std::ostream& os, const VkSamplerAddressMode& t) {
  os << VkSamplerAddressModeToString(t);
  return os;
}
std::ostream& operator<<(std::ostream& os, const VkBorderColor& t) {
  os << VkBorderColorToString(t);
  return os;
}
std::ostream& operator<<(std::ostream& os, const VkDescriptorType& t) {
  os << VkDescriptorTypeToString(t);
  return os;
}
std::ostream& operator<<(std::ostream& os, const VkAttachmentLoadOp& t) {
  os << VkAttachmentLoadOpToString(t);
  return os;
}
std::ostream& operator<<(std::ostream& os, const VkAttachmentStoreOp& t) {
  os << VkAttachmentStoreOpToString(t);
  return os;
}
std::ostream& operator<<(std::ostream& os, const VkPipelineBindPoint& t) {
  os << VkPipelineBindPointToString(t);
  return os;
}
std::ostream& operator<<(std::ostream& os, const VkCommandBufferLevel& t) {
  os << VkCommandBufferLevelToString(t);
  return os;
}
std::ostream& operator<<(std::ostream& os, const VkIndexType& t) {
  os << VkIndexTypeToString(t);
  return os;
}
std::ostream& operator<<(std::ostream& os, const VkPipelineStageFlagBits& t) {
  os << VkPipelineStageFlagBitsToString(t);
  return os;
}
std::ostream& operator<<(std::ostream& os, const VkSubpassContents& t) {
  os << VkSubpassContentsToString(t);
  return os;
}
std::ostream& operator<<(std::ostream& os,
                         const VkSurfaceTransformFlagBitsKHR& t) {
  os << VkSurfaceTransformFlagBitsKHRToString(t);
  return os;
}
std::ostream& operator<<(std::ostream& os,
                         const VkDisplayPlaneAlphaFlagBitsKHR& t) {
  os << VkDisplayPlaneAlphaFlagBitsKHRToString(t);
  return os;
}
std::ostream& operator<<(std::ostream& os, const VkColorSpaceKHR& t) {
  os << VkColorSpaceKHRToString(t);
  return os;
}
std::ostream& operator<<(std::ostream& os,
                         const VkCompositeAlphaFlagBitsKHR& t) {
  os << VkCompositeAlphaFlagBitsKHRToString(t);
  return os;
}
std::ostream& operator<<(std::ostream& os, const VkPresentModeKHR& t) {
  os << VkPresentModeKHRToString(t);
  return os;
}
std::ostream& operator<<(std::ostream& os, const VkResult& t) {
  os << VkResultToString(t);
  return os;
}
std::ostream& operator<<(std::ostream& os,
                         const VkDebugReportObjectTypeEXT& t) {
  os << VkDebugReportObjectTypeEXTToString(t);
  return os;
}
std::ostream& operator<<(std::ostream& os,
                         const VkExternalMemoryHandleTypeFlagBits& t) {
  os << VkExternalMemoryHandleTypeFlagBitsToString(t);
  return os;
}
std::ostream& operator<<(std::ostream& os,
                         const VkExternalSemaphoreHandleTypeFlagBits& t) {
  os << VkExternalSemaphoreHandleTypeFlagBitsToString(t);
  return os;
}
std::ostream& operator<<(std::ostream& os,
                         const VkExternalFenceHandleTypeFlagBits& t) {
  os << VkExternalFenceHandleTypeFlagBitsToString(t);
  return os;
}
std::ostream& operator<<(std::ostream& os,
                         const VkDescriptorUpdateTemplateType& t) {
  os << VkDescriptorUpdateTemplateTypeToString(t);
  return os;
}
std::ostream& operator<<(std::ostream& os,
                         const VkSamplerYcbcrModelConversion& t) {
  os << VkSamplerYcbcrModelConversionToString(t);
  return os;
}
std::ostream& operator<<(std::ostream& os, const VkSamplerYcbcrRange& t) {
  os << VkSamplerYcbcrRangeToString(t);
  return os;
}
std::ostream& operator<<(std::ostream& os, const VkChromaLocation& t) {
  os << VkChromaLocationToString(t);
  return os;
}
std::ostream& operator<<(std::ostream& os, const VkShaderInfoTypeAMD& t) {
  os << VkShaderInfoTypeAMDToString(t);
  return os;
}
std::ostream& operator<<(std::ostream& os, const VkTimeDomainEXT& t) {
  os << VkTimeDomainEXTToString(t);
  return os;
}
std::ostream& operator<<(std::ostream& os, const VkObjectType& t) {
  os << VkObjectTypeToString(t);
  return os;
}
std::ostream& operator<<(std::ostream& os,
                         const VkDebugUtilsMessageSeverityFlagBitsEXT& t) {
  os << VkDebugUtilsMessageSeverityFlagBitsEXTToString(t);
  return os;
}
std::ostream& operator<<(std::ostream& os,
                         const VkCopyAccelerationStructureModeKHR& t) {
  os << VkCopyAccelerationStructureModeKHRToString(t);
  return os;
}
std::ostream& operator<<(std::ostream& os,
                         const VkRayTracingShaderGroupTypeKHR& t) {
  os << VkRayTracingShaderGroupTypeKHRToString(t);
  return os;
}
std::ostream& operator<<(std::ostream& os,
                         const VkAccelerationStructureCompatibilityKHR& t) {
  os << VkAccelerationStructureCompatibilityKHRToString(t);
  return os;
}
std::ostream& operator<<(std::ostream& os, const VkShaderGroupShaderKHR& t) {
  os << VkShaderGroupShaderKHRToString(t);
  return os;
}
std::ostream& operator<<(std::ostream& os,
                         const VkPerformanceCounterUnitKHR& t) {
  os << VkPerformanceCounterUnitKHRToString(t);
  return os;
}
std::ostream& operator<<(std::ostream& os,
                         const VkPerformanceCounterScopeKHR& t) {
  os << VkPerformanceCounterScopeKHRToString(t);
  return os;
}
std::ostream& operator<<(std::ostream& os,
                         const VkPerformanceCounterStorageKHR& t) {
  os << VkPerformanceCounterStorageKHRToString(t);
  return os;
}
std::ostream& operator<<(std::ostream& os,
                         const VkPipelineExecutableStatisticFormatKHR& t) {
  os << VkPipelineExecutableStatisticFormatKHRToString(t);
  return os;
}
std::ostream& operator<<(std::ostream& os,
                         const VkAccelerationStructureTypeKHR& t) {
  os << VkAccelerationStructureTypeKHRToString(t);
  return os;
}
std::ostream& operator<<(std::ostream& os,
                         const VkBuildAccelerationStructureModeKHR& t) {
  os << VkBuildAccelerationStructureModeKHRToString(t);
  return os;
}
std::ostream& operator<<(std::ostream& os, const VkGeometryTypeKHR& t) {
  os << VkGeometryTypeKHRToString(t);
  return os;
}
std::ostream& operator<<(std::ostream& os,
                         const VkFragmentShadingRateCombinerOpKHR& t) {
  os << VkFragmentShadingRateCombinerOpKHRToString(t);
  return os;
}
std::ostream& operator<<(std::ostream& os,
                         const VkAccelerationStructureBuildTypeKHR& t) {
  os << VkAccelerationStructureBuildTypeKHRToString(t);
  return os;
}

// Define all ostream operators.

std::ostream& operator<<(std::ostream& os, const VkMultiDrawInfoEXT& t) {
  ScopedOstream sos(os);
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  firstVertex" << std::endl;
    // firstVertex -> Field -> uint32_t
    os << "value: " << t.firstVertex << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  vertexCount" << std::endl;
    // vertexCount -> Field -> uint32_t
    os << "value: " << t.vertexCount << std::endl;
  }

  return os;
}

std::ostream& operator<<(std::ostream& os, const VkMultiDrawIndexedInfoEXT& t) {
  ScopedOstream sos(os);
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  firstIndex" << std::endl;
    // firstIndex -> Field -> uint32_t
    os << "value: " << t.firstIndex << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  indexCount" << std::endl;
    // indexCount -> Field -> uint32_t
    os << "value: " << t.indexCount << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  vertexOffset" << std::endl;
    // vertexOffset -> Field -> int32_t
    os << "value: " << t.vertexOffset << std::endl;
  }

  return os;
}

std::ostream& operator<<(std::ostream& os, const VkDisplayPropertiesKHR& t) {
  ScopedOstream sos(os);
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  display" << std::endl;
    // display -> Field -> VkDisplayKHR
    os << "value: " << t.display << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  displayName" << std::endl;
    // displayName -> Field -> string
    os << "value: " << t.displayName << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  physicalDimensions" << std::endl;
    // physicalDimensions -> Field -> VkExtent2D
    os << "members:" << std::endl << t.physicalDimensions << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  physicalResolution" << std::endl;
    // physicalResolution -> Field -> VkExtent2D
    os << "members:" << std::endl << t.physicalResolution << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  supportedTransforms" << std::endl;
    // supportedTransforms -> Field -> VkSurfaceTransformFlagsKHR
    os << "value: " << t.supportedTransforms << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  planeReorderPossible" << std::endl;
    // planeReorderPossible -> Field -> VkBool32
    os << "value: " << t.planeReorderPossible << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  persistentContent" << std::endl;
    // persistentContent -> Field -> VkBool32
    os << "value: " << t.persistentContent << std::endl;
  }

  return os;
}

std::ostream& operator<<(std::ostream& os,
                         const VkDisplayPlanePropertiesKHR& t) {
  ScopedOstream sos(os);
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  currentDisplay" << std::endl;
    // currentDisplay -> Field -> VkDisplayKHR
    os << "value: " << t.currentDisplay << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  currentStackIndex" << std::endl;
    // currentStackIndex -> Field -> uint32_t
    os << "value: " << t.currentStackIndex << std::endl;
  }

  return os;
}

std::ostream& operator<<(std::ostream& os,
                         const VkDisplayModeParametersKHR& t) {
  ScopedOstream sos(os);
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  visibleRegion" << std::endl;
    // visibleRegion -> Field -> VkExtent2D
    os << "members:" << std::endl << t.visibleRegion << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  refreshRate" << std::endl;
    // refreshRate -> Field -> uint32_t
    os << "value: " << t.refreshRate << std::endl;
  }

  return os;
}

std::ostream& operator<<(std::ostream& os,
                         const VkDisplayModePropertiesKHR& t) {
  ScopedOstream sos(os);
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  displayMode" << std::endl;
    // displayMode -> Field -> VkDisplayModeKHR
    os << "value: " << t.displayMode << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  parameters" << std::endl;
    // parameters -> Field -> VkDisplayModeParametersKHR
    os << "members:" << std::endl << t.parameters << std::endl;
  }

  return os;
}

std::ostream& operator<<(std::ostream& os,
                         const VkDisplayModeCreateInfoKHR& t) {
  ScopedOstream sos(os);
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  sType" << std::endl;
    // sType -> Field -> VkStructureType
    os << "value: " << t.sType << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  pNext" << std::endl;
    // pNext -> Field -> ConstNextPtr(void)

    // pNext
    os << "value: ";
    PrintNextPtr(os, t.pNext);
    os << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  flags" << std::endl;
    // flags -> Field -> VkDisplayModeCreateFlagsKHR
    os << "value: " << t.flags << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  parameters" << std::endl;
    // parameters -> Field -> VkDisplayModeParametersKHR
    os << "members:" << std::endl << t.parameters << std::endl;
  }

  return os;
}

std::ostream& operator<<(std::ostream& os,
                         const VkDisplayPlaneCapabilitiesKHR& t) {
  ScopedOstream sos(os);
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  supportedAlpha" << std::endl;
    // supportedAlpha -> Field -> VkDisplayPlaneAlphaFlagsKHR
    os << "value: " << t.supportedAlpha << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  minSrcPosition" << std::endl;
    // minSrcPosition -> Field -> VkOffset2D
    os << "members:" << std::endl << t.minSrcPosition << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  maxSrcPosition" << std::endl;
    // maxSrcPosition -> Field -> VkOffset2D
    os << "members:" << std::endl << t.maxSrcPosition << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  minSrcExtent" << std::endl;
    // minSrcExtent -> Field -> VkExtent2D
    os << "members:" << std::endl << t.minSrcExtent << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  maxSrcExtent" << std::endl;
    // maxSrcExtent -> Field -> VkExtent2D
    os << "members:" << std::endl << t.maxSrcExtent << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  minDstPosition" << std::endl;
    // minDstPosition -> Field -> VkOffset2D
    os << "members:" << std::endl << t.minDstPosition << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  maxDstPosition" << std::endl;
    // maxDstPosition -> Field -> VkOffset2D
    os << "members:" << std::endl << t.maxDstPosition << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  minDstExtent" << std::endl;
    // minDstExtent -> Field -> VkExtent2D
    os << "members:" << std::endl << t.minDstExtent << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  maxDstExtent" << std::endl;
    // maxDstExtent -> Field -> VkExtent2D
    os << "members:" << std::endl << t.maxDstExtent << std::endl;
  }

  return os;
}

std::ostream& operator<<(std::ostream& os,
                         const VkDisplaySurfaceCreateInfoKHR& t) {
  ScopedOstream sos(os);
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  sType" << std::endl;
    // sType -> Field -> VkStructureType
    os << "value: " << t.sType << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  pNext" << std::endl;
    // pNext -> Field -> ConstNextPtr(void)

    // pNext
    os << "value: ";
    PrintNextPtr(os, t.pNext);
    os << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  flags" << std::endl;
    // flags -> Field -> VkDisplaySurfaceCreateFlagsKHR
    os << "value: " << t.flags << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  displayMode" << std::endl;
    // displayMode -> Field -> VkDisplayModeKHR
    os << "value: " << t.displayMode << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  planeIndex" << std::endl;
    // planeIndex -> Field -> uint32_t
    os << "value: " << t.planeIndex << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  planeStackIndex" << std::endl;
    // planeStackIndex -> Field -> uint32_t
    os << "value: " << t.planeStackIndex << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  transform" << std::endl;
    // transform -> Field -> VkSurfaceTransformFlagBitsKHR
    os << "value: " << t.transform << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  globalAlpha" << std::endl;
    // globalAlpha -> Field -> float
    os << "value: " << t.globalAlpha << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  alphaMode" << std::endl;
    // alphaMode -> Field -> VkDisplayPlaneAlphaFlagBitsKHR
    os << "value: " << t.alphaMode << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  imageExtent" << std::endl;
    // imageExtent -> Field -> VkExtent2D
    os << "members:" << std::endl << t.imageExtent << std::endl;
  }

  return os;
}

std::ostream& operator<<(std::ostream& os, const VkDisplayPresentInfoKHR& t) {
  ScopedOstream sos(os);
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  sType" << std::endl;
    // sType -> Field -> VkStructureType
    os << "value: " << t.sType << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  pNext" << std::endl;
    // pNext -> Field -> ConstNextPtr(void)

    // pNext
    os << "value: ";
    PrintNextPtr(os, t.pNext);
    os << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  srcRect" << std::endl;
    // srcRect -> Field -> VkRect2D
    os << "members:" << std::endl << t.srcRect << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  dstRect" << std::endl;
    // dstRect -> Field -> VkRect2D
    os << "members:" << std::endl << t.dstRect << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  persistent" << std::endl;
    // persistent -> Field -> VkBool32
    os << "value: " << t.persistent << std::endl;
  }

  return os;
}

std::ostream& operator<<(std::ostream& os, const VkSurfaceCapabilitiesKHR& t) {
  ScopedOstream sos(os);
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  minImageCount" << std::endl;
    // minImageCount -> Field -> uint32_t
    os << "value: " << t.minImageCount << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  maxImageCount" << std::endl;
    // maxImageCount -> Field -> uint32_t
    os << "value: " << t.maxImageCount << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  currentExtent" << std::endl;
    // currentExtent -> Field -> VkExtent2D
    os << "members:" << std::endl << t.currentExtent << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  minImageExtent" << std::endl;
    // minImageExtent -> Field -> VkExtent2D
    os << "members:" << std::endl << t.minImageExtent << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  maxImageExtent" << std::endl;
    // maxImageExtent -> Field -> VkExtent2D
    os << "members:" << std::endl << t.maxImageExtent << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  maxImageArrayLayers" << std::endl;
    // maxImageArrayLayers -> Field -> uint32_t
    os << "value: " << t.maxImageArrayLayers << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  supportedTransforms" << std::endl;
    // supportedTransforms -> Field -> VkSurfaceTransformFlagsKHR
    os << "value: " << t.supportedTransforms << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  currentTransform" << std::endl;
    // currentTransform -> Field -> VkSurfaceTransformFlagBitsKHR
    os << "value: " << t.currentTransform << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  supportedCompositeAlpha" << std::endl;
    // supportedCompositeAlpha -> Field -> VkCompositeAlphaFlagsKHR
    os << "value: " << t.supportedCompositeAlpha << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  supportedUsageFlags" << std::endl;
    // supportedUsageFlags -> Field -> VkImageUsageFlags
    os << "value: " << t.supportedUsageFlags << std::endl;
  }

  return os;
}

std::ostream& operator<<(std::ostream& os, const VkSurfaceFormatKHR& t) {
  ScopedOstream sos(os);
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  format" << std::endl;
    // format -> Field -> VkFormat
    os << "value: " << t.format << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  colorSpace" << std::endl;
    // colorSpace -> Field -> VkColorSpaceKHR
    os << "value: " << t.colorSpace << std::endl;
  }

  return os;
}

std::ostream& operator<<(std::ostream& os, const VkSwapchainCreateInfoKHR& t) {
  ScopedOstream sos(os);
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  sType" << std::endl;
    // sType -> Field -> VkStructureType
    os << "value: " << t.sType << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  pNext" << std::endl;
    // pNext -> Field -> ConstNextPtr(void)

    // pNext
    os << "value: ";
    PrintNextPtr(os, t.pNext);
    os << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  flags" << std::endl;
    // flags -> Field -> VkSwapchainCreateFlagsKHR
    os << "value: " << t.flags << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  surface" << std::endl;
    // surface -> Field -> VkSurfaceKHR
    os << "value: " << t.surface << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  minImageCount" << std::endl;
    // minImageCount -> Field -> uint32_t
    os << "value: " << t.minImageCount << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  imageFormat" << std::endl;
    // imageFormat -> Field -> VkFormat
    os << "value: " << t.imageFormat << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  imageColorSpace" << std::endl;
    // imageColorSpace -> Field -> VkColorSpaceKHR
    os << "value: " << t.imageColorSpace << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  imageExtent" << std::endl;
    // imageExtent -> Field -> VkExtent2D
    os << "members:" << std::endl << t.imageExtent << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  imageArrayLayers" << std::endl;
    // imageArrayLayers -> Field -> uint32_t
    os << "value: " << t.imageArrayLayers << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  imageUsage" << std::endl;
    // imageUsage -> Field -> VkImageUsageFlags
    os << "value: " << t.imageUsage << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  imageSharingMode" << std::endl;
    // imageSharingMode -> Field -> VkSharingMode
    os << "value: " << t.imageSharingMode << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  queueFamilyIndexCount" << std::endl;
    // queueFamilyIndexCount -> Field -> uint32_t
    os << "value: " << t.queueFamilyIndexCount << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  pQueueFamilyIndices" << std::endl;
    // pQueueFamilyIndices -> Field -> ConstDynamicArray(uint32_t)
    {
      if (t.queueFamilyIndexCount == 0) {
        os << "value: nullptr" << std::endl;
      } else {
        os << "members:" << std::endl;
        {
          ScopedOstream soarray(os);
          os << "- # uint32_t" << std::endl;
          for (uint32_t i = 0; i < t.queueFamilyIndexCount; ++i) {
            ScopedOstream somember(os);
            os << "value: " << t.pQueueFamilyIndices[i] << std::endl;
          }
        }
      }
    }
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  preTransform" << std::endl;
    // preTransform -> Field -> VkSurfaceTransformFlagBitsKHR
    os << "value: " << t.preTransform << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  compositeAlpha" << std::endl;
    // compositeAlpha -> Field -> VkCompositeAlphaFlagBitsKHR
    os << "value: " << t.compositeAlpha << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  presentMode" << std::endl;
    // presentMode -> Field -> VkPresentModeKHR
    os << "value: " << t.presentMode << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  clipped" << std::endl;
    // clipped -> Field -> VkBool32
    os << "value: " << t.clipped << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  oldSwapchain" << std::endl;
    // oldSwapchain -> Field -> VkSwapchainKHR
    os << "value: " << t.oldSwapchain << std::endl;
  }

  return os;
}

std::ostream& operator<<(std::ostream& os, const VkPresentInfoKHR& t) {
  ScopedOstream sos(os);
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  sType" << std::endl;
    // sType -> Field -> VkStructureType
    os << "value: " << t.sType << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  pNext" << std::endl;
    // pNext -> Field -> ConstNextPtr(void)

    // pNext
    os << "value: ";
    PrintNextPtr(os, t.pNext);
    os << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  waitSemaphoreCount" << std::endl;
    // waitSemaphoreCount -> Field -> uint32_t
    os << "value: " << t.waitSemaphoreCount << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  pWaitSemaphores" << std::endl;
    // pWaitSemaphores -> Field -> ConstDynamicArray(VkSemaphore)
    {
      if (t.waitSemaphoreCount == 0) {
        os << "value: nullptr" << std::endl;
      } else {
        os << "members:" << std::endl;
        {
          ScopedOstream soarray(os);
          os << "- # VkSemaphore" << std::endl;
          for (uint32_t i = 0; i < t.waitSemaphoreCount; ++i) {
            ScopedOstream somember(os);
            os << "value: " << t.pWaitSemaphores[i] << std::endl;
          }
        }
      }
    }
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  swapchainCount" << std::endl;
    // swapchainCount -> Field -> uint32_t
    os << "value: " << t.swapchainCount << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  pSwapchains" << std::endl;
    // pSwapchains -> Field -> ConstDynamicArray(VkSwapchainKHR)
    {
      if (t.swapchainCount == 0) {
        os << "value: nullptr" << std::endl;
      } else {
        os << "members:" << std::endl;
        {
          ScopedOstream soarray(os);
          os << "- # VkSwapchainKHR" << std::endl;
          for (uint32_t i = 0; i < t.swapchainCount; ++i) {
            ScopedOstream somember(os);
            os << "value: " << t.pSwapchains[i] << std::endl;
          }
        }
      }
    }
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  pImageIndices" << std::endl;
    // pImageIndices -> Field -> ConstDynamicArray(uint32_t)
    {
      if (t.swapchainCount == 0) {
        os << "value: nullptr" << std::endl;
      } else {
        os << "members:" << std::endl;
        {
          ScopedOstream soarray(os);
          os << "- # uint32_t" << std::endl;
          for (uint32_t i = 0; i < t.swapchainCount; ++i) {
            ScopedOstream somember(os);
            os << "value: " << t.pImageIndices[i] << std::endl;
          }
        }
      }
    }
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  pResults" << std::endl;
    // pResults -> Field -> DynamicArray(VkResult)
    {
      if (t.swapchainCount == 0) {
        os << "value: nullptr" << std::endl;
      } else {
        os << "members:" << std::endl;
        {
          ScopedOstream soarray(os);
          os << "- # VkResult" << std::endl;
          for (uint32_t i = 0; i < t.swapchainCount; ++i) {
            ScopedOstream somember(os);
            os << "value: " << t.pResults[i] << std::endl;
          }
        }
      }
    }
  }

  return os;
}

std::ostream& operator<<(std::ostream& os,
                         const VkDebugReportCallbackCreateInfoEXT& t) {
  ScopedOstream sos(os);
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  sType" << std::endl;
    // sType -> Field -> VkStructureType
    os << "value: " << t.sType << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  pNext" << std::endl;
    // pNext -> Field -> ConstNextPtr(void)

    // pNext
    os << "value: ";
    PrintNextPtr(os, t.pNext);
    os << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  flags" << std::endl;
    // flags -> Field -> VkDebugReportFlagsEXT
    os << "value: " << t.flags << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  pfnCallback" << std::endl;
    // pfnCallback -> Field -> PFN_vkDebugReportCallbackEXT
    os << "value: " << t.pfnCallback << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  pUserData" << std::endl;
    // pUserData -> Field -> Pointer(void)

    // void
    os << "value: NOT_AVAILABLE" << std::endl;
  }

  return os;
}

std::ostream& operator<<(
    std::ostream& os,
    const VkPipelineRasterizationStateRasterizationOrderAMD& t) {
  ScopedOstream sos(os);
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  sType" << std::endl;
    // sType -> Field -> VkStructureType
    os << "value: " << t.sType << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  pNext" << std::endl;
    // pNext -> Field -> ConstNextPtr(void)

    // pNext
    os << "value: ";
    PrintNextPtr(os, t.pNext);
    os << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  rasterizationOrder" << std::endl;
    // rasterizationOrder -> Field -> VkRasterizationOrderAMD
    os << "value: " << t.rasterizationOrder << std::endl;
  }

  return os;
}

std::ostream& operator<<(std::ostream& os,
                         const VkDebugMarkerObjectNameInfoEXT& t) {
  ScopedOstream sos(os);
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  sType" << std::endl;
    // sType -> Field -> VkStructureType
    os << "value: " << t.sType << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  pNext" << std::endl;
    // pNext -> Field -> ConstNextPtr(void)

    // pNext
    os << "value: ";
    PrintNextPtr(os, t.pNext);
    os << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  objectType" << std::endl;
    // objectType -> Field -> VkDebugReportObjectTypeEXT
    os << "value: " << t.objectType << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  object" << std::endl;
    // object -> Field -> uint64_t
    os << "value: " << t.object << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  pObjectName" << std::endl;
    // pObjectName -> Field -> string
    os << "value: " << t.pObjectName << std::endl;
  }

  return os;
}

std::ostream& operator<<(std::ostream& os,
                         const VkDebugMarkerObjectTagInfoEXT& t) {
  ScopedOstream sos(os);
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  sType" << std::endl;
    // sType -> Field -> VkStructureType
    os << "value: " << t.sType << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  pNext" << std::endl;
    // pNext -> Field -> ConstNextPtr(void)

    // pNext
    os << "value: ";
    PrintNextPtr(os, t.pNext);
    os << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  objectType" << std::endl;
    // objectType -> Field -> VkDebugReportObjectTypeEXT
    os << "value: " << t.objectType << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  object" << std::endl;
    // object -> Field -> uint64_t
    os << "value: " << t.object << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  tagName" << std::endl;
    // tagName -> Field -> uint64_t
    os << "value: " << t.tagName << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  tagSize" << std::endl;
    // tagSize -> Field -> size_t
    os << "value: " << t.tagSize << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  pTag" << std::endl;
    // pTag -> Field -> ConstDynamicArray(void)
    {
      if (t.tagSize == 0) {
        os << "value: nullptr" << std::endl;
      } else {
        os << std::hex;
        os << "members:" << std::endl;
        {
          ScopedOstream soarray(os);
          const uint8_t* p = (const uint8_t*)t.pTag;
          for (uint32_t i = 0; i < t.tagSize; ++i) {
            os << "- 0x" << p[i] << std::endl;
          }
        }
        os << std::dec;
      }
    }
  }

  return os;
}

std::ostream& operator<<(std::ostream& os,
                         const VkDebugMarkerMarkerInfoEXT& t) {
  ScopedOstream sos(os);
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  sType" << std::endl;
    // sType -> Field -> VkStructureType
    os << "value: " << t.sType << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  pNext" << std::endl;
    // pNext -> Field -> ConstNextPtr(void)

    // pNext
    os << "value: ";
    PrintNextPtr(os, t.pNext);
    os << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  pMarkerName" << std::endl;
    // pMarkerName -> Field -> string
    os << "value: " << t.pMarkerName << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  color" << std::endl;
    // color -> Field -> FixedArray(float)
    {
      if (4 == 0) {
        os << "value: nullptr" << std::endl;
      } else {
        os << "members:" << std::endl;
        {
          ScopedOstream soarray(os);
          os << "- # float" << std::endl;
          for (uint32_t i = 0; i < 4; ++i) {
            ScopedOstream somember(os);
            os << "value: " << t.color[i] << std::endl;
          }
        }
      }
    }
  }

  return os;
}

std::ostream& operator<<(std::ostream& os,
                         const VkPhysicalDeviceMultiDrawPropertiesEXT& t) {
  ScopedOstream sos(os);
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  sType" << std::endl;
    // sType -> Field -> VkStructureType
    os << "value: " << t.sType << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  pNext" << std::endl;
    // pNext -> Field -> NextPtr(void)

    // pNext
    os << "value: ";
    PrintNextPtr(os, t.pNext);
    os << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  maxMultiDrawCount" << std::endl;
    // maxMultiDrawCount -> Field -> uint32_t
    os << "value: " << t.maxMultiDrawCount << std::endl;
  }

  return os;
}

std::ostream& operator<<(std::ostream& os,
                         const VkPhysicalDevicePushDescriptorPropertiesKHR& t) {
  ScopedOstream sos(os);
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  sType" << std::endl;
    // sType -> Field -> VkStructureType
    os << "value: " << t.sType << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  pNext" << std::endl;
    // pNext -> Field -> NextPtr(void)

    // pNext
    os << "value: ";
    PrintNextPtr(os, t.pNext);
    os << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  maxPushDescriptors" << std::endl;
    // maxPushDescriptors -> Field -> uint32_t
    os << "value: " << t.maxPushDescriptors << std::endl;
  }

  return os;
}

std::ostream& operator<<(std::ostream& os, const VkPresentRegionsKHR& t) {
  ScopedOstream sos(os);
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  sType" << std::endl;
    // sType -> Field -> VkStructureType
    os << "value: " << t.sType << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  pNext" << std::endl;
    // pNext -> Field -> ConstNextPtr(void)

    // pNext
    os << "value: ";
    PrintNextPtr(os, t.pNext);
    os << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  swapchainCount" << std::endl;
    // swapchainCount -> Field -> uint32_t
    os << "value: " << t.swapchainCount << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  pRegions" << std::endl;
    // pRegions -> Field -> ConstDynamicArray(VkPresentRegionKHR)
    {
      if (t.swapchainCount == 0) {
        os << "value: nullptr" << std::endl;
      } else {
        os << "members:" << std::endl;
        {
          ScopedOstream soarray(os);
          os << "- # VkPresentRegionKHR" << std::endl;
          for (uint32_t i = 0; i < t.swapchainCount; ++i) {
            ScopedOstream somember(os);
            os << "members:" << std::endl << t.pRegions[i] << std::endl;
          }
        }
      }
    }
  }

  return os;
}

std::ostream& operator<<(std::ostream& os, const VkPresentRegionKHR& t) {
  ScopedOstream sos(os);
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  rectangleCount" << std::endl;
    // rectangleCount -> Field -> uint32_t
    os << "value: " << t.rectangleCount << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  pRectangles" << std::endl;
    // pRectangles -> Field -> ConstDynamicArray(VkRectLayerKHR)
    {
      if (t.rectangleCount == 0) {
        os << "value: nullptr" << std::endl;
      } else {
        os << "members:" << std::endl;
        {
          ScopedOstream soarray(os);
          os << "- # VkRectLayerKHR" << std::endl;
          for (uint32_t i = 0; i < t.rectangleCount; ++i) {
            ScopedOstream somember(os);
            os << "members:" << std::endl << t.pRectangles[i] << std::endl;
          }
        }
      }
    }
  }

  return os;
}

std::ostream& operator<<(std::ostream& os, const VkRectLayerKHR& t) {
  ScopedOstream sos(os);
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  offset" << std::endl;
    // offset -> Field -> VkOffset2D
    os << "members:" << std::endl << t.offset << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  extent" << std::endl;
    // extent -> Field -> VkExtent2D
    os << "members:" << std::endl << t.extent << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  layer" << std::endl;
    // layer -> Field -> uint32_t
    os << "value: " << t.layer << std::endl;
  }

  return os;
}

std::ostream& operator<<(std::ostream& os, const VkImportMemoryFdInfoKHR& t) {
  ScopedOstream sos(os);
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  sType" << std::endl;
    // sType -> Field -> VkStructureType
    os << "value: " << t.sType << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  pNext" << std::endl;
    // pNext -> Field -> ConstNextPtr(void)

    // pNext
    os << "value: ";
    PrintNextPtr(os, t.pNext);
    os << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  handleType" << std::endl;
    // handleType -> Field -> VkExternalMemoryHandleTypeFlagBits
    os << "value: " << t.handleType << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  fd" << std::endl;
    // fd -> Field -> int
    os << "value: " << t.fd << std::endl;
  }

  return os;
}

std::ostream& operator<<(std::ostream& os, const VkMemoryFdPropertiesKHR& t) {
  ScopedOstream sos(os);
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  sType" << std::endl;
    // sType -> Field -> VkStructureType
    os << "value: " << t.sType << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  pNext" << std::endl;
    // pNext -> Field -> NextPtr(void)

    // pNext
    os << "value: ";
    PrintNextPtr(os, t.pNext);
    os << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  memoryTypeBits" << std::endl;
    // memoryTypeBits -> Field -> uint32_t
    os << "value: " << t.memoryTypeBits << std::endl;
  }

  return os;
}

std::ostream& operator<<(std::ostream& os, const VkMemoryGetFdInfoKHR& t) {
  ScopedOstream sos(os);
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  sType" << std::endl;
    // sType -> Field -> VkStructureType
    os << "value: " << t.sType << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  pNext" << std::endl;
    // pNext -> Field -> ConstNextPtr(void)

    // pNext
    os << "value: ";
    PrintNextPtr(os, t.pNext);
    os << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  memory" << std::endl;
    // memory -> Field -> VkDeviceMemory
    os << "value: " << t.memory << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  handleType" << std::endl;
    // handleType -> Field -> VkExternalMemoryHandleTypeFlagBits
    os << "value: " << t.handleType << std::endl;
  }

  return os;
}

std::ostream& operator<<(std::ostream& os,
                         const VkImportSemaphoreFdInfoKHR& t) {
  ScopedOstream sos(os);
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  sType" << std::endl;
    // sType -> Field -> VkStructureType
    os << "value: " << t.sType << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  pNext" << std::endl;
    // pNext -> Field -> ConstNextPtr(void)

    // pNext
    os << "value: ";
    PrintNextPtr(os, t.pNext);
    os << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  semaphore" << std::endl;
    // semaphore -> Field -> VkSemaphore
    os << "value: " << t.semaphore << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  flags" << std::endl;
    // flags -> Field -> VkSemaphoreImportFlags
    os << "value: " << t.flags << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  handleType" << std::endl;
    // handleType -> Field -> VkExternalSemaphoreHandleTypeFlagBits
    os << "value: " << t.handleType << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  fd" << std::endl;
    // fd -> Field -> int
    os << "value: " << t.fd << std::endl;
  }

  return os;
}

std::ostream& operator<<(std::ostream& os, const VkSemaphoreGetFdInfoKHR& t) {
  ScopedOstream sos(os);
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  sType" << std::endl;
    // sType -> Field -> VkStructureType
    os << "value: " << t.sType << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  pNext" << std::endl;
    // pNext -> Field -> ConstNextPtr(void)

    // pNext
    os << "value: ";
    PrintNextPtr(os, t.pNext);
    os << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  semaphore" << std::endl;
    // semaphore -> Field -> VkSemaphore
    os << "value: " << t.semaphore << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  handleType" << std::endl;
    // handleType -> Field -> VkExternalSemaphoreHandleTypeFlagBits
    os << "value: " << t.handleType << std::endl;
  }

  return os;
}

std::ostream& operator<<(std::ostream& os, const VkImportFenceFdInfoKHR& t) {
  ScopedOstream sos(os);
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  sType" << std::endl;
    // sType -> Field -> VkStructureType
    os << "value: " << t.sType << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  pNext" << std::endl;
    // pNext -> Field -> ConstNextPtr(void)

    // pNext
    os << "value: ";
    PrintNextPtr(os, t.pNext);
    os << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  fence" << std::endl;
    // fence -> Field -> VkFence
    os << "value: " << t.fence << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  flags" << std::endl;
    // flags -> Field -> VkFenceImportFlags
    os << "value: " << t.flags << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  handleType" << std::endl;
    // handleType -> Field -> VkExternalFenceHandleTypeFlagBits
    os << "value: " << t.handleType << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  fd" << std::endl;
    // fd -> Field -> int
    os << "value: " << t.fd << std::endl;
  }

  return os;
}

std::ostream& operator<<(std::ostream& os, const VkFenceGetFdInfoKHR& t) {
  ScopedOstream sos(os);
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  sType" << std::endl;
    // sType -> Field -> VkStructureType
    os << "value: " << t.sType << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  pNext" << std::endl;
    // pNext -> Field -> ConstNextPtr(void)

    // pNext
    os << "value: ";
    PrintNextPtr(os, t.pNext);
    os << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  fence" << std::endl;
    // fence -> Field -> VkFence
    os << "value: " << t.fence << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  handleType" << std::endl;
    // handleType -> Field -> VkExternalFenceHandleTypeFlagBits
    os << "value: " << t.handleType << std::endl;
  }

  return os;
}

std::ostream& operator<<(std::ostream& os,
                         const VkDeviceGroupPresentCapabilitiesKHR& t) {
  ScopedOstream sos(os);
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  sType" << std::endl;
    // sType -> Field -> VkStructureType
    os << "value: " << t.sType << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  pNext" << std::endl;
    // pNext -> Field -> ConstNextPtr(void)

    // pNext
    os << "value: ";
    PrintNextPtr(os, t.pNext);
    os << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  presentMask" << std::endl;
    // presentMask -> Field -> FixedArray(uint32_t)
    {
      if (VK_MAX_DEVICE_GROUP_SIZE == 0) {
        os << "value: nullptr" << std::endl;
      } else {
        os << "members:" << std::endl;
        {
          ScopedOstream soarray(os);
          os << "- # uint32_t" << std::endl;
          for (uint32_t i = 0; i < VK_MAX_DEVICE_GROUP_SIZE; ++i) {
            ScopedOstream somember(os);
            os << "value: " << t.presentMask[i] << std::endl;
          }
        }
      }
    }
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  modes" << std::endl;
    // modes -> Field -> VkDeviceGroupPresentModeFlagsKHR
    os << "value: " << t.modes << std::endl;
  }

  return os;
}

std::ostream& operator<<(std::ostream& os,
                         const VkImageSwapchainCreateInfoKHR& t) {
  ScopedOstream sos(os);
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  sType" << std::endl;
    // sType -> Field -> VkStructureType
    os << "value: " << t.sType << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  pNext" << std::endl;
    // pNext -> Field -> ConstNextPtr(void)

    // pNext
    os << "value: ";
    PrintNextPtr(os, t.pNext);
    os << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  swapchain" << std::endl;
    // swapchain -> Field -> VkSwapchainKHR
    os << "value: " << t.swapchain << std::endl;
  }

  return os;
}

std::ostream& operator<<(std::ostream& os,
                         const VkBindImageMemorySwapchainInfoKHR& t) {
  ScopedOstream sos(os);
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  sType" << std::endl;
    // sType -> Field -> VkStructureType
    os << "value: " << t.sType << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  pNext" << std::endl;
    // pNext -> Field -> ConstNextPtr(void)

    // pNext
    os << "value: ";
    PrintNextPtr(os, t.pNext);
    os << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  swapchain" << std::endl;
    // swapchain -> Field -> VkSwapchainKHR
    os << "value: " << t.swapchain << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  imageIndex" << std::endl;
    // imageIndex -> Field -> uint32_t
    os << "value: " << t.imageIndex << std::endl;
  }

  return os;
}

std::ostream& operator<<(std::ostream& os, const VkAcquireNextImageInfoKHR& t) {
  ScopedOstream sos(os);
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  sType" << std::endl;
    // sType -> Field -> VkStructureType
    os << "value: " << t.sType << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  pNext" << std::endl;
    // pNext -> Field -> ConstNextPtr(void)

    // pNext
    os << "value: ";
    PrintNextPtr(os, t.pNext);
    os << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  swapchain" << std::endl;
    // swapchain -> Field -> VkSwapchainKHR
    os << "value: " << t.swapchain << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  timeout" << std::endl;
    // timeout -> Field -> uint64_t
    os << "value: " << t.timeout << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  semaphore" << std::endl;
    // semaphore -> Field -> VkSemaphore
    os << "value: " << t.semaphore << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  fence" << std::endl;
    // fence -> Field -> VkFence
    os << "value: " << t.fence << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  deviceMask" << std::endl;
    // deviceMask -> Field -> uint32_t
    os << "value: " << t.deviceMask << std::endl;
  }

  return os;
}

std::ostream& operator<<(std::ostream& os,
                         const VkDeviceGroupPresentInfoKHR& t) {
  ScopedOstream sos(os);
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  sType" << std::endl;
    // sType -> Field -> VkStructureType
    os << "value: " << t.sType << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  pNext" << std::endl;
    // pNext -> Field -> ConstNextPtr(void)

    // pNext
    os << "value: ";
    PrintNextPtr(os, t.pNext);
    os << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  swapchainCount" << std::endl;
    // swapchainCount -> Field -> uint32_t
    os << "value: " << t.swapchainCount << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  pDeviceMasks" << std::endl;
    // pDeviceMasks -> Field -> ConstDynamicArray(uint32_t)
    {
      if (t.swapchainCount == 0) {
        os << "value: nullptr" << std::endl;
      } else {
        os << "members:" << std::endl;
        {
          ScopedOstream soarray(os);
          os << "- # uint32_t" << std::endl;
          for (uint32_t i = 0; i < t.swapchainCount; ++i) {
            ScopedOstream somember(os);
            os << "value: " << t.pDeviceMasks[i] << std::endl;
          }
        }
      }
    }
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  mode" << std::endl;
    // mode -> Field -> VkDeviceGroupPresentModeFlagBitsKHR
    os << "value: " << t.mode << std::endl;
  }

  return os;
}

std::ostream& operator<<(std::ostream& os,
                         const VkDeviceGroupSwapchainCreateInfoKHR& t) {
  ScopedOstream sos(os);
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  sType" << std::endl;
    // sType -> Field -> VkStructureType
    os << "value: " << t.sType << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  pNext" << std::endl;
    // pNext -> Field -> ConstNextPtr(void)

    // pNext
    os << "value: ";
    PrintNextPtr(os, t.pNext);
    os << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  modes" << std::endl;
    // modes -> Field -> VkDeviceGroupPresentModeFlagsKHR
    os << "value: " << t.modes << std::endl;
  }

  return os;
}

std::ostream& operator<<(std::ostream& os,
                         const VkDisplayNativeHdrSurfaceCapabilitiesAMD& t) {
  ScopedOstream sos(os);
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  sType" << std::endl;
    // sType -> Field -> VkStructureType
    os << "value: " << t.sType << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  pNext" << std::endl;
    // pNext -> Field -> NextPtr(void)

    // pNext
    os << "value: ";
    PrintNextPtr(os, t.pNext);
    os << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  localDimmingSupport" << std::endl;
    // localDimmingSupport -> Field -> VkBool32
    os << "value: " << t.localDimmingSupport << std::endl;
  }

  return os;
}

std::ostream& operator<<(std::ostream& os,
                         const VkSwapchainDisplayNativeHdrCreateInfoAMD& t) {
  ScopedOstream sos(os);
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  sType" << std::endl;
    // sType -> Field -> VkStructureType
    os << "value: " << t.sType << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  pNext" << std::endl;
    // pNext -> Field -> ConstNextPtr(void)

    // pNext
    os << "value: ";
    PrintNextPtr(os, t.pNext);
    os << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  localDimmingEnable" << std::endl;
    // localDimmingEnable -> Field -> VkBool32
    os << "value: " << t.localDimmingEnable << std::endl;
  }

  return os;
}

std::ostream& operator<<(std::ostream& os,
                         const VkPhysicalDeviceSurfaceInfo2KHR& t) {
  ScopedOstream sos(os);
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  sType" << std::endl;
    // sType -> Field -> VkStructureType
    os << "value: " << t.sType << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  pNext" << std::endl;
    // pNext -> Field -> ConstNextPtr(void)

    // pNext
    os << "value: ";
    PrintNextPtr(os, t.pNext);
    os << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  surface" << std::endl;
    // surface -> Field -> VkSurfaceKHR
    os << "value: " << t.surface << std::endl;
  }

  return os;
}

std::ostream& operator<<(std::ostream& os, const VkSurfaceCapabilities2KHR& t) {
  ScopedOstream sos(os);
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  sType" << std::endl;
    // sType -> Field -> VkStructureType
    os << "value: " << t.sType << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  pNext" << std::endl;
    // pNext -> Field -> NextPtr(void)

    // pNext
    os << "value: ";
    PrintNextPtr(os, t.pNext);
    os << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  surfaceCapabilities" << std::endl;
    // surfaceCapabilities -> Field -> VkSurfaceCapabilitiesKHR
    os << "members:" << std::endl << t.surfaceCapabilities << std::endl;
  }

  return os;
}

std::ostream& operator<<(std::ostream& os, const VkSurfaceFormat2KHR& t) {
  ScopedOstream sos(os);
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  sType" << std::endl;
    // sType -> Field -> VkStructureType
    os << "value: " << t.sType << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  pNext" << std::endl;
    // pNext -> Field -> NextPtr(void)

    // pNext
    os << "value: ";
    PrintNextPtr(os, t.pNext);
    os << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  surfaceFormat" << std::endl;
    // surfaceFormat -> Field -> VkSurfaceFormatKHR
    os << "members:" << std::endl << t.surfaceFormat << std::endl;
  }

  return os;
}

std::ostream& operator<<(std::ostream& os, const VkDisplayProperties2KHR& t) {
  ScopedOstream sos(os);
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  sType" << std::endl;
    // sType -> Field -> VkStructureType
    os << "value: " << t.sType << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  pNext" << std::endl;
    // pNext -> Field -> NextPtr(void)

    // pNext
    os << "value: ";
    PrintNextPtr(os, t.pNext);
    os << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  displayProperties" << std::endl;
    // displayProperties -> Field -> VkDisplayPropertiesKHR
    os << "members:" << std::endl << t.displayProperties << std::endl;
  }

  return os;
}

std::ostream& operator<<(std::ostream& os,
                         const VkDisplayPlaneProperties2KHR& t) {
  ScopedOstream sos(os);
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  sType" << std::endl;
    // sType -> Field -> VkStructureType
    os << "value: " << t.sType << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  pNext" << std::endl;
    // pNext -> Field -> NextPtr(void)

    // pNext
    os << "value: ";
    PrintNextPtr(os, t.pNext);
    os << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  displayPlaneProperties" << std::endl;
    // displayPlaneProperties -> Field -> VkDisplayPlanePropertiesKHR
    os << "members:" << std::endl << t.displayPlaneProperties << std::endl;
  }

  return os;
}

std::ostream& operator<<(std::ostream& os,
                         const VkDisplayModeProperties2KHR& t) {
  ScopedOstream sos(os);
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  sType" << std::endl;
    // sType -> Field -> VkStructureType
    os << "value: " << t.sType << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  pNext" << std::endl;
    // pNext -> Field -> NextPtr(void)

    // pNext
    os << "value: ";
    PrintNextPtr(os, t.pNext);
    os << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  displayModeProperties" << std::endl;
    // displayModeProperties -> Field -> VkDisplayModePropertiesKHR
    os << "members:" << std::endl << t.displayModeProperties << std::endl;
  }

  return os;
}

std::ostream& operator<<(std::ostream& os, const VkDisplayPlaneInfo2KHR& t) {
  ScopedOstream sos(os);
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  sType" << std::endl;
    // sType -> Field -> VkStructureType
    os << "value: " << t.sType << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  pNext" << std::endl;
    // pNext -> Field -> ConstNextPtr(void)

    // pNext
    os << "value: ";
    PrintNextPtr(os, t.pNext);
    os << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  mode" << std::endl;
    // mode -> Field -> VkDisplayModeKHR
    os << "value: " << t.mode << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  planeIndex" << std::endl;
    // planeIndex -> Field -> uint32_t
    os << "value: " << t.planeIndex << std::endl;
  }

  return os;
}

std::ostream& operator<<(std::ostream& os,
                         const VkDisplayPlaneCapabilities2KHR& t) {
  ScopedOstream sos(os);
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  sType" << std::endl;
    // sType -> Field -> VkStructureType
    os << "value: " << t.sType << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  pNext" << std::endl;
    // pNext -> Field -> NextPtr(void)

    // pNext
    os << "value: ";
    PrintNextPtr(os, t.pNext);
    os << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  capabilities" << std::endl;
    // capabilities -> Field -> VkDisplayPlaneCapabilitiesKHR
    os << "members:" << std::endl << t.capabilities << std::endl;
  }

  return os;
}

std::ostream& operator<<(std::ostream& os,
                         const VkSharedPresentSurfaceCapabilitiesKHR& t) {
  ScopedOstream sos(os);
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  sType" << std::endl;
    // sType -> Field -> VkStructureType
    os << "value: " << t.sType << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  pNext" << std::endl;
    // pNext -> Field -> NextPtr(void)

    // pNext
    os << "value: ";
    PrintNextPtr(os, t.pNext);
    os << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  sharedPresentSupportedUsageFlags" << std::endl;
    // sharedPresentSupportedUsageFlags -> Field -> VkImageUsageFlags
    os << "value: " << t.sharedPresentSupportedUsageFlags << std::endl;
  }

  return os;
}

std::ostream& operator<<(std::ostream& os,
                         const VkTextureLODGatherFormatPropertiesAMD& t) {
  ScopedOstream sos(os);
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  sType" << std::endl;
    // sType -> Field -> VkStructureType
    os << "value: " << t.sType << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  pNext" << std::endl;
    // pNext -> Field -> NextPtr(void)

    // pNext
    os << "value: ";
    PrintNextPtr(os, t.pNext);
    os << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  supportsTextureGatherLODBiasAMD" << std::endl;
    // supportsTextureGatherLODBiasAMD -> Field -> VkBool32
    os << "value: " << t.supportsTextureGatherLODBiasAMD << std::endl;
  }

  return os;
}

std::ostream& operator<<(std::ostream& os, const VkSampleLocationEXT& t) {
  ScopedOstream sos(os);
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  x" << std::endl;
    // x -> Field -> float
    os << "value: " << t.x << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  y" << std::endl;
    // y -> Field -> float
    os << "value: " << t.y << std::endl;
  }

  return os;
}

std::ostream& operator<<(std::ostream& os, const VkSampleLocationsInfoEXT& t) {
  ScopedOstream sos(os);
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  sType" << std::endl;
    // sType -> Field -> VkStructureType
    os << "value: " << t.sType << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  pNext" << std::endl;
    // pNext -> Field -> ConstNextPtr(void)

    // pNext
    os << "value: ";
    PrintNextPtr(os, t.pNext);
    os << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  sampleLocationsPerPixel" << std::endl;
    // sampleLocationsPerPixel -> Field -> VkSampleCountFlagBits
    os << "value: " << t.sampleLocationsPerPixel << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  sampleLocationGridSize" << std::endl;
    // sampleLocationGridSize -> Field -> VkExtent2D
    os << "members:" << std::endl << t.sampleLocationGridSize << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  sampleLocationsCount" << std::endl;
    // sampleLocationsCount -> Field -> uint32_t
    os << "value: " << t.sampleLocationsCount << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  pSampleLocations" << std::endl;
    // pSampleLocations -> Field -> ConstDynamicArray(VkSampleLocationEXT)
    {
      if (t.sampleLocationsCount == 0) {
        os << "value: nullptr" << std::endl;
      } else {
        os << "members:" << std::endl;
        {
          ScopedOstream soarray(os);
          os << "- # VkSampleLocationEXT" << std::endl;
          for (uint32_t i = 0; i < t.sampleLocationsCount; ++i) {
            ScopedOstream somember(os);
            os << "members:" << std::endl << t.pSampleLocations[i] << std::endl;
          }
        }
      }
    }
  }

  return os;
}

std::ostream& operator<<(std::ostream& os,
                         const VkAttachmentSampleLocationsEXT& t) {
  ScopedOstream sos(os);
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  attachmentIndex" << std::endl;
    // attachmentIndex -> Field -> uint32_t
    os << "value: " << t.attachmentIndex << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  sampleLocationsInfo" << std::endl;
    // sampleLocationsInfo -> Field -> VkSampleLocationsInfoEXT
    os << "members:" << std::endl << t.sampleLocationsInfo << std::endl;
  }

  return os;
}

std::ostream& operator<<(std::ostream& os,
                         const VkSubpassSampleLocationsEXT& t) {
  ScopedOstream sos(os);
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  subpassIndex" << std::endl;
    // subpassIndex -> Field -> uint32_t
    os << "value: " << t.subpassIndex << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  sampleLocationsInfo" << std::endl;
    // sampleLocationsInfo -> Field -> VkSampleLocationsInfoEXT
    os << "members:" << std::endl << t.sampleLocationsInfo << std::endl;
  }

  return os;
}

std::ostream& operator<<(std::ostream& os,
                         const VkRenderPassSampleLocationsBeginInfoEXT& t) {
  ScopedOstream sos(os);
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  sType" << std::endl;
    // sType -> Field -> VkStructureType
    os << "value: " << t.sType << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  pNext" << std::endl;
    // pNext -> Field -> ConstNextPtr(void)

    // pNext
    os << "value: ";
    PrintNextPtr(os, t.pNext);
    os << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  attachmentInitialSampleLocationsCount" << std::endl;
    // attachmentInitialSampleLocationsCount -> Field -> uint32_t
    os << "value: " << t.attachmentInitialSampleLocationsCount << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  pAttachmentInitialSampleLocations" << std::endl;
    // pAttachmentInitialSampleLocations -> Field ->
    // ConstDynamicArray(VkAttachmentSampleLocationsEXT)
    {
      if (t.attachmentInitialSampleLocationsCount == 0) {
        os << "value: nullptr" << std::endl;
      } else {
        os << "members:" << std::endl;
        {
          ScopedOstream soarray(os);
          os << "- # VkAttachmentSampleLocationsEXT" << std::endl;
          for (uint32_t i = 0; i < t.attachmentInitialSampleLocationsCount;
               ++i) {
            ScopedOstream somember(os);
            os << "members:" << std::endl
               << t.pAttachmentInitialSampleLocations[i] << std::endl;
          }
        }
      }
    }
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  postSubpassSampleLocationsCount" << std::endl;
    // postSubpassSampleLocationsCount -> Field -> uint32_t
    os << "value: " << t.postSubpassSampleLocationsCount << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  pPostSubpassSampleLocations" << std::endl;
    // pPostSubpassSampleLocations -> Field ->
    // ConstDynamicArray(VkSubpassSampleLocationsEXT)
    {
      if (t.postSubpassSampleLocationsCount == 0) {
        os << "value: nullptr" << std::endl;
      } else {
        os << "members:" << std::endl;
        {
          ScopedOstream soarray(os);
          os << "- # VkSubpassSampleLocationsEXT" << std::endl;
          for (uint32_t i = 0; i < t.postSubpassSampleLocationsCount; ++i) {
            ScopedOstream somember(os);
            os << "members:" << std::endl
               << t.pPostSubpassSampleLocations[i] << std::endl;
          }
        }
      }
    }
  }

  return os;
}

std::ostream& operator<<(std::ostream& os,
                         const VkPipelineSampleLocationsStateCreateInfoEXT& t) {
  ScopedOstream sos(os);
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  sType" << std::endl;
    // sType -> Field -> VkStructureType
    os << "value: " << t.sType << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  pNext" << std::endl;
    // pNext -> Field -> ConstNextPtr(void)

    // pNext
    os << "value: ";
    PrintNextPtr(os, t.pNext);
    os << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  sampleLocationsEnable" << std::endl;
    // sampleLocationsEnable -> Field -> VkBool32
    os << "value: " << t.sampleLocationsEnable << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  sampleLocationsInfo" << std::endl;
    // sampleLocationsInfo -> Field -> VkSampleLocationsInfoEXT
    os << "members:" << std::endl << t.sampleLocationsInfo << std::endl;
  }

  return os;
}

std::ostream& operator<<(
    std::ostream& os, const VkPhysicalDeviceSampleLocationsPropertiesEXT& t) {
  ScopedOstream sos(os);
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  sType" << std::endl;
    // sType -> Field -> VkStructureType
    os << "value: " << t.sType << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  pNext" << std::endl;
    // pNext -> Field -> NextPtr(void)

    // pNext
    os << "value: ";
    PrintNextPtr(os, t.pNext);
    os << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  sampleLocationSampleCounts" << std::endl;
    // sampleLocationSampleCounts -> Field -> VkSampleCountFlags
    os << "value: " << t.sampleLocationSampleCounts << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  maxSampleLocationGridSize" << std::endl;
    // maxSampleLocationGridSize -> Field -> VkExtent2D
    os << "members:" << std::endl << t.maxSampleLocationGridSize << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  sampleLocationCoordinateRange" << std::endl;
    // sampleLocationCoordinateRange -> Field -> FixedArray(float)
    {
      if (2 == 0) {
        os << "value: nullptr" << std::endl;
      } else {
        os << "members:" << std::endl;
        {
          ScopedOstream soarray(os);
          os << "- # float" << std::endl;
          for (uint32_t i = 0; i < 2; ++i) {
            ScopedOstream somember(os);
            os << "value: " << t.sampleLocationCoordinateRange[i] << std::endl;
          }
        }
      }
    }
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  sampleLocationSubPixelBits" << std::endl;
    // sampleLocationSubPixelBits -> Field -> uint32_t
    os << "value: " << t.sampleLocationSubPixelBits << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  variableSampleLocations" << std::endl;
    // variableSampleLocations -> Field -> VkBool32
    os << "value: " << t.variableSampleLocations << std::endl;
  }

  return os;
}

std::ostream& operator<<(std::ostream& os,
                         const VkMultisamplePropertiesEXT& t) {
  ScopedOstream sos(os);
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  sType" << std::endl;
    // sType -> Field -> VkStructureType
    os << "value: " << t.sType << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  pNext" << std::endl;
    // pNext -> Field -> NextPtr(void)

    // pNext
    os << "value: ";
    PrintNextPtr(os, t.pNext);
    os << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  maxSampleLocationGridSize" << std::endl;
    // maxSampleLocationGridSize -> Field -> VkExtent2D
    os << "members:" << std::endl << t.maxSampleLocationGridSize << std::endl;
  }

  return os;
}

std::ostream& operator<<(std::ostream& os,
                         const VkPhysicalDeviceMultiDrawFeaturesEXT& t) {
  ScopedOstream sos(os);
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  sType" << std::endl;
    // sType -> Field -> VkStructureType
    os << "value: " << t.sType << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  pNext" << std::endl;
    // pNext -> Field -> NextPtr(void)

    // pNext
    os << "value: ";
    PrintNextPtr(os, t.pNext);
    os << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  multiDraw" << std::endl;
    // multiDraw -> Field -> VkBool32
    os << "value: " << t.multiDraw << std::endl;
  }

  return os;
}

std::ostream& operator<<(
    std::ostream& os, const VkPhysicalDeviceInlineUniformBlockFeaturesEXT& t) {
  ScopedOstream sos(os);
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  sType" << std::endl;
    // sType -> Field -> VkStructureType
    os << "value: " << t.sType << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  pNext" << std::endl;
    // pNext -> Field -> NextPtr(void)

    // pNext
    os << "value: ";
    PrintNextPtr(os, t.pNext);
    os << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  inlineUniformBlock" << std::endl;
    // inlineUniformBlock -> Field -> VkBool32
    os << "value: " << t.inlineUniformBlock << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  descriptorBindingInlineUniformBlockUpdateAfterBind"
       << std::endl;
    // descriptorBindingInlineUniformBlockUpdateAfterBind -> Field -> VkBool32
    os << "value: " << t.descriptorBindingInlineUniformBlockUpdateAfterBind
       << std::endl;
  }

  return os;
}

std::ostream& operator<<(
    std::ostream& os,
    const VkPhysicalDeviceInlineUniformBlockPropertiesEXT& t) {
  ScopedOstream sos(os);
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  sType" << std::endl;
    // sType -> Field -> VkStructureType
    os << "value: " << t.sType << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  pNext" << std::endl;
    // pNext -> Field -> NextPtr(void)

    // pNext
    os << "value: ";
    PrintNextPtr(os, t.pNext);
    os << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  maxInlineUniformBlockSize" << std::endl;
    // maxInlineUniformBlockSize -> Field -> uint32_t
    os << "value: " << t.maxInlineUniformBlockSize << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  maxPerStageDescriptorInlineUniformBlocks" << std::endl;
    // maxPerStageDescriptorInlineUniformBlocks -> Field -> uint32_t
    os << "value: " << t.maxPerStageDescriptorInlineUniformBlocks << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  maxPerStageDescriptorUpdateAfterBindInlineUniformBlocks"
       << std::endl;
    // maxPerStageDescriptorUpdateAfterBindInlineUniformBlocks -> Field ->
    // uint32_t
    os << "value: " << t.maxPerStageDescriptorUpdateAfterBindInlineUniformBlocks
       << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  maxDescriptorSetInlineUniformBlocks" << std::endl;
    // maxDescriptorSetInlineUniformBlocks -> Field -> uint32_t
    os << "value: " << t.maxDescriptorSetInlineUniformBlocks << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  maxDescriptorSetUpdateAfterBindInlineUniformBlocks"
       << std::endl;
    // maxDescriptorSetUpdateAfterBindInlineUniformBlocks -> Field -> uint32_t
    os << "value: " << t.maxDescriptorSetUpdateAfterBindInlineUniformBlocks
       << std::endl;
  }

  return os;
}

std::ostream& operator<<(std::ostream& os,
                         const VkWriteDescriptorSetInlineUniformBlockEXT& t) {
  ScopedOstream sos(os);
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  sType" << std::endl;
    // sType -> Field -> VkStructureType
    os << "value: " << t.sType << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  pNext" << std::endl;
    // pNext -> Field -> ConstNextPtr(void)

    // pNext
    os << "value: ";
    PrintNextPtr(os, t.pNext);
    os << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  dataSize" << std::endl;
    // dataSize -> Field -> uint32_t
    os << "value: " << t.dataSize << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  pData" << std::endl;
    // pData -> Field -> ConstDynamicArray(void)
    {
      if (t.dataSize == 0) {
        os << "value: nullptr" << std::endl;
      } else {
        os << std::hex;
        os << "members:" << std::endl;
        {
          ScopedOstream soarray(os);
          const uint8_t* p = (const uint8_t*)t.pData;
          for (uint32_t i = 0; i < t.dataSize; ++i) {
            os << "- 0x" << p[i] << std::endl;
          }
        }
        os << std::dec;
      }
    }
  }

  return os;
}

std::ostream& operator<<(
    std::ostream& os,
    const VkDescriptorPoolInlineUniformBlockCreateInfoEXT& t) {
  ScopedOstream sos(os);
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  sType" << std::endl;
    // sType -> Field -> VkStructureType
    os << "value: " << t.sType << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  pNext" << std::endl;
    // pNext -> Field -> ConstNextPtr(void)

    // pNext
    os << "value: ";
    PrintNextPtr(os, t.pNext);
    os << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  maxInlineUniformBlockBindings" << std::endl;
    // maxInlineUniformBlockBindings -> Field -> uint32_t
    os << "value: " << t.maxInlineUniformBlockBindings << std::endl;
  }

  return os;
}

std::ostream& operator<<(std::ostream& os, const VkShaderResourceUsageAMD& t) {
  ScopedOstream sos(os);
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  numUsedVgprs" << std::endl;
    // numUsedVgprs -> Field -> uint32_t
    os << "value: " << t.numUsedVgprs << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  numUsedSgprs" << std::endl;
    // numUsedSgprs -> Field -> uint32_t
    os << "value: " << t.numUsedSgprs << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  ldsSizePerLocalWorkGroup" << std::endl;
    // ldsSizePerLocalWorkGroup -> Field -> uint32_t
    os << "value: " << t.ldsSizePerLocalWorkGroup << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  ldsUsageSizeInBytes" << std::endl;
    // ldsUsageSizeInBytes -> Field -> size_t
    os << "value: " << t.ldsUsageSizeInBytes << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  scratchMemUsageInBytes" << std::endl;
    // scratchMemUsageInBytes -> Field -> size_t
    os << "value: " << t.scratchMemUsageInBytes << std::endl;
  }

  return os;
}

std::ostream& operator<<(std::ostream& os, const VkShaderStatisticsInfoAMD& t) {
  ScopedOstream sos(os);
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  shaderStageMask" << std::endl;
    // shaderStageMask -> Field -> VkShaderStageFlags
    os << "value: " << t.shaderStageMask << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  resourceUsage" << std::endl;
    // resourceUsage -> Field -> VkShaderResourceUsageAMD
    os << "members:" << std::endl << t.resourceUsage << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  numPhysicalVgprs" << std::endl;
    // numPhysicalVgprs -> Field -> uint32_t
    os << "value: " << t.numPhysicalVgprs << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  numPhysicalSgprs" << std::endl;
    // numPhysicalSgprs -> Field -> uint32_t
    os << "value: " << t.numPhysicalSgprs << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  numAvailableVgprs" << std::endl;
    // numAvailableVgprs -> Field -> uint32_t
    os << "value: " << t.numAvailableVgprs << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  numAvailableSgprs" << std::endl;
    // numAvailableSgprs -> Field -> uint32_t
    os << "value: " << t.numAvailableSgprs << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  computeWorkGroupSize" << std::endl;
    // computeWorkGroupSize -> Field -> FixedArray(uint32_t)
    {
      if (3 == 0) {
        os << "value: nullptr" << std::endl;
      } else {
        os << "members:" << std::endl;
        {
          ScopedOstream soarray(os);
          os << "- # uint32_t" << std::endl;
          for (uint32_t i = 0; i < 3; ++i) {
            ScopedOstream somember(os);
            os << "value: " << t.computeWorkGroupSize[i] << std::endl;
          }
        }
      }
    }
  }

  return os;
}

std::ostream& operator<<(std::ostream& os,
                         const VkDeviceQueueGlobalPriorityCreateInfoEXT& t) {
  ScopedOstream sos(os);
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  sType" << std::endl;
    // sType -> Field -> VkStructureType
    os << "value: " << t.sType << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  pNext" << std::endl;
    // pNext -> Field -> ConstNextPtr(void)

    // pNext
    os << "value: ";
    PrintNextPtr(os, t.pNext);
    os << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  globalPriority" << std::endl;
    // globalPriority -> Field -> VkQueueGlobalPriorityEXT
    os << "value: " << t.globalPriority << std::endl;
  }

  return os;
}

std::ostream& operator<<(
    std::ostream& os, const VkPhysicalDeviceGlobalPriorityQueryFeaturesEXT& t) {
  ScopedOstream sos(os);
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  sType" << std::endl;
    // sType -> Field -> VkStructureType
    os << "value: " << t.sType << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  pNext" << std::endl;
    // pNext -> Field -> NextPtr(void)

    // pNext
    os << "value: ";
    PrintNextPtr(os, t.pNext);
    os << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  globalPriorityQuery" << std::endl;
    // globalPriorityQuery -> Field -> VkBool32
    os << "value: " << t.globalPriorityQuery << std::endl;
  }

  return os;
}

std::ostream& operator<<(std::ostream& os,
                         const VkQueueFamilyGlobalPriorityPropertiesEXT& t) {
  ScopedOstream sos(os);
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  sType" << std::endl;
    // sType -> Field -> VkStructureType
    os << "value: " << t.sType << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  pNext" << std::endl;
    // pNext -> Field -> NextPtr(void)

    // pNext
    os << "value: ";
    PrintNextPtr(os, t.pNext);
    os << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  priorityCount" << std::endl;
    // priorityCount -> Field -> uint32_t
    os << "value: " << t.priorityCount << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  priorities" << std::endl;
    // priorities -> Field -> FixedArray(VkQueueGlobalPriorityEXT)
    {
      if (VK_MAX_GLOBAL_PRIORITY_SIZE_EXT == 0) {
        os << "value: nullptr" << std::endl;
      } else {
        os << "members:" << std::endl;
        {
          ScopedOstream soarray(os);
          os << "- # VkQueueGlobalPriorityEXT" << std::endl;
          for (uint32_t i = 0; i < VK_MAX_GLOBAL_PRIORITY_SIZE_EXT; ++i) {
            ScopedOstream somember(os);
            os << "value: " << t.priorities[i] << std::endl;
          }
        }
      }
    }
  }

  return os;
}

std::ostream& operator<<(std::ostream& os,
                         const VkDebugUtilsObjectNameInfoEXT& t) {
  ScopedOstream sos(os);
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  sType" << std::endl;
    // sType -> Field -> VkStructureType
    os << "value: " << t.sType << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  pNext" << std::endl;
    // pNext -> Field -> ConstNextPtr(void)

    // pNext
    os << "value: ";
    PrintNextPtr(os, t.pNext);
    os << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  objectType" << std::endl;
    // objectType -> Field -> VkObjectType
    os << "value: " << t.objectType << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  objectHandle" << std::endl;
    // objectHandle -> Field -> uint64_t
    os << "value: " << t.objectHandle << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  pObjectName" << std::endl;
    // pObjectName -> Field -> string
    os << "value: " << t.pObjectName << std::endl;
  }

  return os;
}

std::ostream& operator<<(std::ostream& os,
                         const VkDebugUtilsObjectTagInfoEXT& t) {
  ScopedOstream sos(os);
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  sType" << std::endl;
    // sType -> Field -> VkStructureType
    os << "value: " << t.sType << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  pNext" << std::endl;
    // pNext -> Field -> ConstNextPtr(void)

    // pNext
    os << "value: ";
    PrintNextPtr(os, t.pNext);
    os << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  objectType" << std::endl;
    // objectType -> Field -> VkObjectType
    os << "value: " << t.objectType << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  objectHandle" << std::endl;
    // objectHandle -> Field -> uint64_t
    os << "value: " << t.objectHandle << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  tagName" << std::endl;
    // tagName -> Field -> uint64_t
    os << "value: " << t.tagName << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  tagSize" << std::endl;
    // tagSize -> Field -> size_t
    os << "value: " << t.tagSize << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  pTag" << std::endl;
    // pTag -> Field -> ConstDynamicArray(void)
    {
      if (t.tagSize == 0) {
        os << "value: nullptr" << std::endl;
      } else {
        os << std::hex;
        os << "members:" << std::endl;
        {
          ScopedOstream soarray(os);
          const uint8_t* p = (const uint8_t*)t.pTag;
          for (uint32_t i = 0; i < t.tagSize; ++i) {
            os << "- 0x" << p[i] << std::endl;
          }
        }
        os << std::dec;
      }
    }
  }

  return os;
}

std::ostream& operator<<(std::ostream& os, const VkDebugUtilsLabelEXT& t) {
  ScopedOstream sos(os);
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  sType" << std::endl;
    // sType -> Field -> VkStructureType
    os << "value: " << t.sType << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  pNext" << std::endl;
    // pNext -> Field -> ConstNextPtr(void)

    // pNext
    os << "value: ";
    PrintNextPtr(os, t.pNext);
    os << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  pLabelName" << std::endl;
    // pLabelName -> Field -> string
    os << "value: " << t.pLabelName << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  color" << std::endl;
    // color -> Field -> FixedArray(float)
    {
      if (4 == 0) {
        os << "value: nullptr" << std::endl;
      } else {
        os << "members:" << std::endl;
        {
          ScopedOstream soarray(os);
          os << "- # float" << std::endl;
          for (uint32_t i = 0; i < 4; ++i) {
            ScopedOstream somember(os);
            os << "value: " << t.color[i] << std::endl;
          }
        }
      }
    }
  }

  return os;
}

std::ostream& operator<<(std::ostream& os,
                         const VkDebugUtilsMessengerCreateInfoEXT& t) {
  ScopedOstream sos(os);
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  sType" << std::endl;
    // sType -> Field -> VkStructureType
    os << "value: " << t.sType << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  pNext" << std::endl;
    // pNext -> Field -> ConstNextPtr(void)

    // pNext
    os << "value: ";
    PrintNextPtr(os, t.pNext);
    os << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  flags" << std::endl;
    // flags -> Field -> VkDebugUtilsMessengerCreateFlagsEXT
    os << "value: " << t.flags << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  messageSeverity" << std::endl;
    // messageSeverity -> Field -> VkDebugUtilsMessageSeverityFlagsEXT
    os << "value: " << t.messageSeverity << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  messageType" << std::endl;
    // messageType -> Field -> VkDebugUtilsMessageTypeFlagsEXT
    os << "value: " << t.messageType << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  pfnUserCallback" << std::endl;
    // pfnUserCallback -> Field -> PFN_vkDebugUtilsMessengerCallbackEXT
    os << "value: " << t.pfnUserCallback << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  pUserData" << std::endl;
    // pUserData -> Field -> Pointer(void)

    // void
    os << "value: NOT_AVAILABLE" << std::endl;
  }

  return os;
}

std::ostream& operator<<(std::ostream& os,
                         const VkDebugUtilsMessengerCallbackDataEXT& t) {
  ScopedOstream sos(os);
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  sType" << std::endl;
    // sType -> Field -> VkStructureType
    os << "value: " << t.sType << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  pNext" << std::endl;
    // pNext -> Field -> ConstNextPtr(void)

    // pNext
    os << "value: ";
    PrintNextPtr(os, t.pNext);
    os << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  flags" << std::endl;
    // flags -> Field -> VkDebugUtilsMessengerCallbackDataFlagsEXT
    os << "value: " << t.flags << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  pMessageIdName" << std::endl;
    // pMessageIdName -> Field -> string
    os << "value: " << t.pMessageIdName << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  messageIdNumber" << std::endl;
    // messageIdNumber -> Field -> int32_t
    os << "value: " << t.messageIdNumber << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  pMessage" << std::endl;
    // pMessage -> Field -> string
    os << "value: " << t.pMessage << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  queueLabelCount" << std::endl;
    // queueLabelCount -> Field -> uint32_t
    os << "value: " << t.queueLabelCount << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  pQueueLabels" << std::endl;
    // pQueueLabels -> Field -> ConstDynamicArray(VkDebugUtilsLabelEXT)
    {
      if (t.queueLabelCount == 0) {
        os << "value: nullptr" << std::endl;
      } else {
        os << "members:" << std::endl;
        {
          ScopedOstream soarray(os);
          os << "- # VkDebugUtilsLabelEXT" << std::endl;
          for (uint32_t i = 0; i < t.queueLabelCount; ++i) {
            ScopedOstream somember(os);
            os << "members:" << std::endl << t.pQueueLabels[i] << std::endl;
          }
        }
      }
    }
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  cmdBufLabelCount" << std::endl;
    // cmdBufLabelCount -> Field -> uint32_t
    os << "value: " << t.cmdBufLabelCount << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  pCmdBufLabels" << std::endl;
    // pCmdBufLabels -> Field -> ConstDynamicArray(VkDebugUtilsLabelEXT)
    {
      if (t.cmdBufLabelCount == 0) {
        os << "value: nullptr" << std::endl;
      } else {
        os << "members:" << std::endl;
        {
          ScopedOstream soarray(os);
          os << "- # VkDebugUtilsLabelEXT" << std::endl;
          for (uint32_t i = 0; i < t.cmdBufLabelCount; ++i) {
            ScopedOstream somember(os);
            os << "members:" << std::endl << t.pCmdBufLabels[i] << std::endl;
          }
        }
      }
    }
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  objectCount" << std::endl;
    // objectCount -> Field -> uint32_t
    os << "value: " << t.objectCount << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  pObjects" << std::endl;
    // pObjects -> Field -> ConstDynamicArray(VkDebugUtilsObjectNameInfoEXT)
    {
      if (t.objectCount == 0) {
        os << "value: nullptr" << std::endl;
      } else {
        os << "members:" << std::endl;
        {
          ScopedOstream soarray(os);
          os << "- # VkDebugUtilsObjectNameInfoEXT" << std::endl;
          for (uint32_t i = 0; i < t.objectCount; ++i) {
            ScopedOstream somember(os);
            os << "members:" << std::endl << t.pObjects[i] << std::endl;
          }
        }
      }
    }
  }

  return os;
}

std::ostream& operator<<(
    std::ostream& os, const VkPhysicalDeviceDeviceMemoryReportFeaturesEXT& t) {
  ScopedOstream sos(os);
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  sType" << std::endl;
    // sType -> Field -> VkStructureType
    os << "value: " << t.sType << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  pNext" << std::endl;
    // pNext -> Field -> NextPtr(void)

    // pNext
    os << "value: ";
    PrintNextPtr(os, t.pNext);
    os << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  deviceMemoryReport" << std::endl;
    // deviceMemoryReport -> Field -> VkBool32
    os << "value: " << t.deviceMemoryReport << std::endl;
  }

  return os;
}

std::ostream& operator<<(std::ostream& os,
                         const VkDeviceDeviceMemoryReportCreateInfoEXT& t) {
  ScopedOstream sos(os);
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  sType" << std::endl;
    // sType -> Field -> VkStructureType
    os << "value: " << t.sType << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  pNext" << std::endl;
    // pNext -> Field -> ConstNextPtr(void)

    // pNext
    os << "value: ";
    PrintNextPtr(os, t.pNext);
    os << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  flags" << std::endl;
    // flags -> Field -> VkDeviceMemoryReportFlagsEXT
    os << "value: " << t.flags << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  pfnUserCallback" << std::endl;
    // pfnUserCallback -> Field -> PFN_vkDeviceMemoryReportCallbackEXT
    os << "value: " << t.pfnUserCallback << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  pUserData" << std::endl;
    // pUserData -> Field -> Pointer(void)

    // void
    os << "value: NOT_AVAILABLE" << std::endl;
  }

  return os;
}

std::ostream& operator<<(std::ostream& os,
                         const VkDeviceMemoryReportCallbackDataEXT& t) {
  ScopedOstream sos(os);
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  sType" << std::endl;
    // sType -> Field -> VkStructureType
    os << "value: " << t.sType << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  pNext" << std::endl;
    // pNext -> Field -> ConstNextPtr(void)

    // pNext
    os << "value: ";
    PrintNextPtr(os, t.pNext);
    os << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  flags" << std::endl;
    // flags -> Field -> VkDeviceMemoryReportFlagsEXT
    os << "value: " << t.flags << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  type" << std::endl;
    // type -> Field -> VkDeviceMemoryReportEventTypeEXT
    os << "value: " << t.type << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  memoryObjectId" << std::endl;
    // memoryObjectId -> Field -> uint64_t
    os << "value: " << t.memoryObjectId << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  size" << std::endl;
    // size -> Field -> VkDeviceSize
    os << "value: " << t.size << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  objectType" << std::endl;
    // objectType -> Field -> VkObjectType
    os << "value: " << t.objectType << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  objectHandle" << std::endl;
    // objectHandle -> Field -> uint64_t
    os << "value: " << t.objectHandle << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  heapIndex" << std::endl;
    // heapIndex -> Field -> uint32_t
    os << "value: " << t.heapIndex << std::endl;
  }

  return os;
}

std::ostream& operator<<(std::ostream& os,
                         const VkImportMemoryHostPointerInfoEXT& t) {
  ScopedOstream sos(os);
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  sType" << std::endl;
    // sType -> Field -> VkStructureType
    os << "value: " << t.sType << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  pNext" << std::endl;
    // pNext -> Field -> ConstNextPtr(void)

    // pNext
    os << "value: ";
    PrintNextPtr(os, t.pNext);
    os << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  handleType" << std::endl;
    // handleType -> Field -> VkExternalMemoryHandleTypeFlagBits
    os << "value: " << t.handleType << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  pHostPointer" << std::endl;
    // pHostPointer -> Field -> Pointer(void)

    // void
    os << "value: NOT_AVAILABLE" << std::endl;
  }

  return os;
}

std::ostream& operator<<(std::ostream& os,
                         const VkMemoryHostPointerPropertiesEXT& t) {
  ScopedOstream sos(os);
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  sType" << std::endl;
    // sType -> Field -> VkStructureType
    os << "value: " << t.sType << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  pNext" << std::endl;
    // pNext -> Field -> NextPtr(void)

    // pNext
    os << "value: ";
    PrintNextPtr(os, t.pNext);
    os << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  memoryTypeBits" << std::endl;
    // memoryTypeBits -> Field -> uint32_t
    os << "value: " << t.memoryTypeBits << std::endl;
  }

  return os;
}

std::ostream& operator<<(
    std::ostream& os,
    const VkPhysicalDeviceExternalMemoryHostPropertiesEXT& t) {
  ScopedOstream sos(os);
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  sType" << std::endl;
    // sType -> Field -> VkStructureType
    os << "value: " << t.sType << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  pNext" << std::endl;
    // pNext -> Field -> NextPtr(void)

    // pNext
    os << "value: ";
    PrintNextPtr(os, t.pNext);
    os << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  minImportedHostPointerAlignment" << std::endl;
    // minImportedHostPointerAlignment -> Field -> VkDeviceSize
    os << "value: " << t.minImportedHostPointerAlignment << std::endl;
  }

  return os;
}

std::ostream& operator<<(std::ostream& os,
                         const VkCalibratedTimestampInfoEXT& t) {
  ScopedOstream sos(os);
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  sType" << std::endl;
    // sType -> Field -> VkStructureType
    os << "value: " << t.sType << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  pNext" << std::endl;
    // pNext -> Field -> ConstNextPtr(void)

    // pNext
    os << "value: ";
    PrintNextPtr(os, t.pNext);
    os << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  timeDomain" << std::endl;
    // timeDomain -> Field -> VkTimeDomainEXT
    os << "value: " << t.timeDomain << std::endl;
  }

  return os;
}

std::ostream& operator<<(std::ostream& os,
                         const VkPhysicalDeviceShaderCorePropertiesAMD& t) {
  ScopedOstream sos(os);
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  sType" << std::endl;
    // sType -> Field -> VkStructureType
    os << "value: " << t.sType << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  pNext" << std::endl;
    // pNext -> Field -> NextPtr(void)

    // pNext
    os << "value: ";
    PrintNextPtr(os, t.pNext);
    os << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  shaderEngineCount" << std::endl;
    // shaderEngineCount -> Field -> uint32_t
    os << "value: " << t.shaderEngineCount << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  shaderArraysPerEngineCount" << std::endl;
    // shaderArraysPerEngineCount -> Field -> uint32_t
    os << "value: " << t.shaderArraysPerEngineCount << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  computeUnitsPerShaderArray" << std::endl;
    // computeUnitsPerShaderArray -> Field -> uint32_t
    os << "value: " << t.computeUnitsPerShaderArray << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  simdPerComputeUnit" << std::endl;
    // simdPerComputeUnit -> Field -> uint32_t
    os << "value: " << t.simdPerComputeUnit << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  wavefrontsPerSimd" << std::endl;
    // wavefrontsPerSimd -> Field -> uint32_t
    os << "value: " << t.wavefrontsPerSimd << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  wavefrontSize" << std::endl;
    // wavefrontSize -> Field -> uint32_t
    os << "value: " << t.wavefrontSize << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  sgprsPerSimd" << std::endl;
    // sgprsPerSimd -> Field -> uint32_t
    os << "value: " << t.sgprsPerSimd << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  minSgprAllocation" << std::endl;
    // minSgprAllocation -> Field -> uint32_t
    os << "value: " << t.minSgprAllocation << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  maxSgprAllocation" << std::endl;
    // maxSgprAllocation -> Field -> uint32_t
    os << "value: " << t.maxSgprAllocation << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  sgprAllocationGranularity" << std::endl;
    // sgprAllocationGranularity -> Field -> uint32_t
    os << "value: " << t.sgprAllocationGranularity << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  vgprsPerSimd" << std::endl;
    // vgprsPerSimd -> Field -> uint32_t
    os << "value: " << t.vgprsPerSimd << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  minVgprAllocation" << std::endl;
    // minVgprAllocation -> Field -> uint32_t
    os << "value: " << t.minVgprAllocation << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  maxVgprAllocation" << std::endl;
    // maxVgprAllocation -> Field -> uint32_t
    os << "value: " << t.maxVgprAllocation << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  vgprAllocationGranularity" << std::endl;
    // vgprAllocationGranularity -> Field -> uint32_t
    os << "value: " << t.vgprAllocationGranularity << std::endl;
  }

  return os;
}

std::ostream& operator<<(std::ostream& os,
                         const VkPhysicalDeviceShaderCoreProperties2AMD& t) {
  ScopedOstream sos(os);
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  sType" << std::endl;
    // sType -> Field -> VkStructureType
    os << "value: " << t.sType << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  pNext" << std::endl;
    // pNext -> Field -> NextPtr(void)

    // pNext
    os << "value: ";
    PrintNextPtr(os, t.pNext);
    os << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  shaderCoreFeatures" << std::endl;
    // shaderCoreFeatures -> Field -> VkShaderCorePropertiesFlagsAMD
    os << "value: " << t.shaderCoreFeatures << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  activeComputeUnitCount" << std::endl;
    // activeComputeUnitCount -> Field -> uint32_t
    os << "value: " << t.activeComputeUnitCount << std::endl;
  }

  return os;
}

std::ostream& operator<<(std::ostream& os,
                         const VkPhysicalDevicePCIBusInfoPropertiesEXT& t) {
  ScopedOstream sos(os);
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  sType" << std::endl;
    // sType -> Field -> VkStructureType
    os << "value: " << t.sType << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  pNext" << std::endl;
    // pNext -> Field -> NextPtr(void)

    // pNext
    os << "value: ";
    PrintNextPtr(os, t.pNext);
    os << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  pciDomain" << std::endl;
    // pciDomain -> Field -> uint32_t
    os << "value: " << t.pciDomain << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  pciBus" << std::endl;
    // pciBus -> Field -> uint32_t
    os << "value: " << t.pciBus << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  pciDevice" << std::endl;
    // pciDevice -> Field -> uint32_t
    os << "value: " << t.pciDevice << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  pciFunction" << std::endl;
    // pciFunction -> Field -> uint32_t
    os << "value: " << t.pciFunction << std::endl;
  }

  return os;
}

std::ostream& operator<<(std::ostream& os,
                         const VkRayTracingShaderGroupCreateInfoKHR& t) {
  ScopedOstream sos(os);
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  sType" << std::endl;
    // sType -> Field -> VkStructureType
    os << "value: " << t.sType << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  pNext" << std::endl;
    // pNext -> Field -> ConstNextPtr(void)

    // pNext
    os << "value: ";
    PrintNextPtr(os, t.pNext);
    os << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  type" << std::endl;
    // type -> Field -> VkRayTracingShaderGroupTypeKHR
    os << "value: " << t.type << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  generalShader" << std::endl;
    // generalShader -> Field -> uint32_t
    os << "value: " << t.generalShader << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  closestHitShader" << std::endl;
    // closestHitShader -> Field -> uint32_t
    os << "value: " << t.closestHitShader << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  anyHitShader" << std::endl;
    // anyHitShader -> Field -> uint32_t
    os << "value: " << t.anyHitShader << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  intersectionShader" << std::endl;
    // intersectionShader -> Field -> uint32_t
    os << "value: " << t.intersectionShader << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  pShaderGroupCaptureReplayHandle" << std::endl;
    // pShaderGroupCaptureReplayHandle -> Field -> ConstPointer(void)

    // void
    os << "value: NOT_AVAILABLE" << std::endl;
  }

  return os;
}

std::ostream& operator<<(std::ostream& os,
                         const VkRayTracingPipelineCreateInfoKHR& t) {
  ScopedOstream sos(os);
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  sType" << std::endl;
    // sType -> Field -> VkStructureType
    os << "value: " << t.sType << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  pNext" << std::endl;
    // pNext -> Field -> ConstNextPtr(void)

    // pNext
    os << "value: ";
    PrintNextPtr(os, t.pNext);
    os << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  flags" << std::endl;
    // flags -> Field -> VkPipelineCreateFlags
    os << "value: " << t.flags << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  stageCount" << std::endl;
    // stageCount -> Field -> uint32_t
    os << "value: " << t.stageCount << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  pStages" << std::endl;
    // pStages -> Field -> ConstDynamicArray(VkPipelineShaderStageCreateInfo)
    {
      if (t.stageCount == 0) {
        os << "value: nullptr" << std::endl;
      } else {
        os << "members:" << std::endl;
        {
          ScopedOstream soarray(os);
          os << "- # VkPipelineShaderStageCreateInfo" << std::endl;
          for (uint32_t i = 0; i < t.stageCount; ++i) {
            ScopedOstream somember(os);
            os << "members:" << std::endl << t.pStages[i] << std::endl;
          }
        }
      }
    }
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  groupCount" << std::endl;
    // groupCount -> Field -> uint32_t
    os << "value: " << t.groupCount << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  pGroups" << std::endl;
    // pGroups -> Field ->
    // ConstDynamicArray(VkRayTracingShaderGroupCreateInfoKHR)
    {
      if (t.groupCount == 0) {
        os << "value: nullptr" << std::endl;
      } else {
        os << "members:" << std::endl;
        {
          ScopedOstream soarray(os);
          os << "- # VkRayTracingShaderGroupCreateInfoKHR" << std::endl;
          for (uint32_t i = 0; i < t.groupCount; ++i) {
            ScopedOstream somember(os);
            os << "members:" << std::endl << t.pGroups[i] << std::endl;
          }
        }
      }
    }
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  maxPipelineRayRecursionDepth" << std::endl;
    // maxPipelineRayRecursionDepth -> Field -> uint32_t
    os << "value: " << t.maxPipelineRayRecursionDepth << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  pLibraryInfo" << std::endl;
    // pLibraryInfo -> Field -> ConstPointer(VkPipelineLibraryCreateInfoKHR)
    // pointer
    if (t.pLibraryInfo) {
      os << "members:" << std::endl << *t.pLibraryInfo << std::endl;
    } else {
      os << "value: nullptr" << std::endl;
    }
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  pLibraryInterface" << std::endl;
    // pLibraryInterface -> Field ->
    // ConstPointer(VkRayTracingPipelineInterfaceCreateInfoKHR) pointer
    if (t.pLibraryInterface) {
      os << "members:" << std::endl << *t.pLibraryInterface << std::endl;
    } else {
      os << "value: nullptr" << std::endl;
    }
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  pDynamicState" << std::endl;
    // pDynamicState -> Field -> ConstPointer(VkPipelineDynamicStateCreateInfo)
    // pointer
    if (t.pDynamicState) {
      os << "members:" << std::endl << *t.pDynamicState << std::endl;
    } else {
      os << "value: nullptr" << std::endl;
    }
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  layout" << std::endl;
    // layout -> Field -> VkPipelineLayout
    os << "value: " << t.layout << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  basePipelineHandle" << std::endl;
    // basePipelineHandle -> Field -> VkPipeline
    os << "value: " << t.basePipelineHandle << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  basePipelineIndex" << std::endl;
    // basePipelineIndex -> Field -> int32_t
    os << "value: " << t.basePipelineIndex << std::endl;
  }

  return os;
}

std::ostream& operator<<(
    std::ostream& os, const VkWriteDescriptorSetAccelerationStructureKHR& t) {
  ScopedOstream sos(os);
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  sType" << std::endl;
    // sType -> Field -> VkStructureType
    os << "value: " << t.sType << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  pNext" << std::endl;
    // pNext -> Field -> ConstNextPtr(void)

    // pNext
    os << "value: ";
    PrintNextPtr(os, t.pNext);
    os << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  accelerationStructureCount" << std::endl;
    // accelerationStructureCount -> Field -> uint32_t
    os << "value: " << t.accelerationStructureCount << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  pAccelerationStructures" << std::endl;
    // pAccelerationStructures -> Field ->
    // ConstDynamicArray(VkAccelerationStructureKHR)
    {
      if (t.accelerationStructureCount == 0) {
        os << "value: nullptr" << std::endl;
      } else {
        os << "members:" << std::endl;
        {
          ScopedOstream soarray(os);
          os << "- # VkAccelerationStructureKHR" << std::endl;
          for (uint32_t i = 0; i < t.accelerationStructureCount; ++i) {
            ScopedOstream somember(os);
            os << "value: " << t.pAccelerationStructures[i] << std::endl;
          }
        }
      }
    }
  }

  return os;
}

std::ostream& operator<<(
    std::ostream& os,
    const VkPhysicalDeviceAccelerationStructureFeaturesKHR& t) {
  ScopedOstream sos(os);
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  sType" << std::endl;
    // sType -> Field -> VkStructureType
    os << "value: " << t.sType << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  pNext" << std::endl;
    // pNext -> Field -> NextPtr(void)

    // pNext
    os << "value: ";
    PrintNextPtr(os, t.pNext);
    os << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  accelerationStructure" << std::endl;
    // accelerationStructure -> Field -> VkBool32
    os << "value: " << t.accelerationStructure << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  accelerationStructureCaptureReplay" << std::endl;
    // accelerationStructureCaptureReplay -> Field -> VkBool32
    os << "value: " << t.accelerationStructureCaptureReplay << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  accelerationStructureIndirectBuild" << std::endl;
    // accelerationStructureIndirectBuild -> Field -> VkBool32
    os << "value: " << t.accelerationStructureIndirectBuild << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  accelerationStructureHostCommands" << std::endl;
    // accelerationStructureHostCommands -> Field -> VkBool32
    os << "value: " << t.accelerationStructureHostCommands << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  descriptorBindingAccelerationStructureUpdateAfterBind"
       << std::endl;
    // descriptorBindingAccelerationStructureUpdateAfterBind -> Field ->
    // VkBool32
    os << "value: " << t.descriptorBindingAccelerationStructureUpdateAfterBind
       << std::endl;
  }

  return os;
}

std::ostream& operator<<(
    std::ostream& os, const VkPhysicalDeviceRayTracingPipelineFeaturesKHR& t) {
  ScopedOstream sos(os);
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  sType" << std::endl;
    // sType -> Field -> VkStructureType
    os << "value: " << t.sType << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  pNext" << std::endl;
    // pNext -> Field -> NextPtr(void)

    // pNext
    os << "value: ";
    PrintNextPtr(os, t.pNext);
    os << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  rayTracingPipeline" << std::endl;
    // rayTracingPipeline -> Field -> VkBool32
    os << "value: " << t.rayTracingPipeline << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  rayTracingPipelineShaderGroupHandleCaptureReplay"
       << std::endl;
    // rayTracingPipelineShaderGroupHandleCaptureReplay -> Field -> VkBool32
    os << "value: " << t.rayTracingPipelineShaderGroupHandleCaptureReplay
       << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  rayTracingPipelineShaderGroupHandleCaptureReplayMixed"
       << std::endl;
    // rayTracingPipelineShaderGroupHandleCaptureReplayMixed -> Field ->
    // VkBool32
    os << "value: " << t.rayTracingPipelineShaderGroupHandleCaptureReplayMixed
       << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  rayTracingPipelineTraceRaysIndirect" << std::endl;
    // rayTracingPipelineTraceRaysIndirect -> Field -> VkBool32
    os << "value: " << t.rayTracingPipelineTraceRaysIndirect << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  rayTraversalPrimitiveCulling" << std::endl;
    // rayTraversalPrimitiveCulling -> Field -> VkBool32
    os << "value: " << t.rayTraversalPrimitiveCulling << std::endl;
  }

  return os;
}

std::ostream& operator<<(std::ostream& os,
                         const VkPhysicalDeviceRayQueryFeaturesKHR& t) {
  ScopedOstream sos(os);
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  sType" << std::endl;
    // sType -> Field -> VkStructureType
    os << "value: " << t.sType << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  pNext" << std::endl;
    // pNext -> Field -> NextPtr(void)

    // pNext
    os << "value: ";
    PrintNextPtr(os, t.pNext);
    os << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  rayQuery" << std::endl;
    // rayQuery -> Field -> VkBool32
    os << "value: " << t.rayQuery << std::endl;
  }

  return os;
}

std::ostream& operator<<(
    std::ostream& os,
    const VkPhysicalDeviceAccelerationStructurePropertiesKHR& t) {
  ScopedOstream sos(os);
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  sType" << std::endl;
    // sType -> Field -> VkStructureType
    os << "value: " << t.sType << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  pNext" << std::endl;
    // pNext -> Field -> NextPtr(void)

    // pNext
    os << "value: ";
    PrintNextPtr(os, t.pNext);
    os << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  maxGeometryCount" << std::endl;
    // maxGeometryCount -> Field -> uint64_t
    os << "value: " << t.maxGeometryCount << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  maxInstanceCount" << std::endl;
    // maxInstanceCount -> Field -> uint64_t
    os << "value: " << t.maxInstanceCount << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  maxPrimitiveCount" << std::endl;
    // maxPrimitiveCount -> Field -> uint64_t
    os << "value: " << t.maxPrimitiveCount << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  maxPerStageDescriptorAccelerationStructures" << std::endl;
    // maxPerStageDescriptorAccelerationStructures -> Field -> uint32_t
    os << "value: " << t.maxPerStageDescriptorAccelerationStructures
       << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  maxPerStageDescriptorUpdateAfterBindAccelerationStructures"
       << std::endl;
    // maxPerStageDescriptorUpdateAfterBindAccelerationStructures -> Field ->
    // uint32_t
    os << "value: "
       << t.maxPerStageDescriptorUpdateAfterBindAccelerationStructures
       << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  maxDescriptorSetAccelerationStructures" << std::endl;
    // maxDescriptorSetAccelerationStructures -> Field -> uint32_t
    os << "value: " << t.maxDescriptorSetAccelerationStructures << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  maxDescriptorSetUpdateAfterBindAccelerationStructures"
       << std::endl;
    // maxDescriptorSetUpdateAfterBindAccelerationStructures -> Field ->
    // uint32_t
    os << "value: " << t.maxDescriptorSetUpdateAfterBindAccelerationStructures
       << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  minAccelerationStructureScratchOffsetAlignment" << std::endl;
    // minAccelerationStructureScratchOffsetAlignment -> Field -> uint32_t
    os << "value: " << t.minAccelerationStructureScratchOffsetAlignment
       << std::endl;
  }

  return os;
}

std::ostream& operator<<(
    std::ostream& os,
    const VkPhysicalDeviceRayTracingPipelinePropertiesKHR& t) {
  ScopedOstream sos(os);
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  sType" << std::endl;
    // sType -> Field -> VkStructureType
    os << "value: " << t.sType << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  pNext" << std::endl;
    // pNext -> Field -> NextPtr(void)

    // pNext
    os << "value: ";
    PrintNextPtr(os, t.pNext);
    os << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  shaderGroupHandleSize" << std::endl;
    // shaderGroupHandleSize -> Field -> uint32_t
    os << "value: " << t.shaderGroupHandleSize << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  maxRayRecursionDepth" << std::endl;
    // maxRayRecursionDepth -> Field -> uint32_t
    os << "value: " << t.maxRayRecursionDepth << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  maxShaderGroupStride" << std::endl;
    // maxShaderGroupStride -> Field -> uint32_t
    os << "value: " << t.maxShaderGroupStride << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  shaderGroupBaseAlignment" << std::endl;
    // shaderGroupBaseAlignment -> Field -> uint32_t
    os << "value: " << t.shaderGroupBaseAlignment << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  shaderGroupHandleCaptureReplaySize" << std::endl;
    // shaderGroupHandleCaptureReplaySize -> Field -> uint32_t
    os << "value: " << t.shaderGroupHandleCaptureReplaySize << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  maxRayDispatchInvocationCount" << std::endl;
    // maxRayDispatchInvocationCount -> Field -> uint32_t
    os << "value: " << t.maxRayDispatchInvocationCount << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  shaderGroupHandleAlignment" << std::endl;
    // shaderGroupHandleAlignment -> Field -> uint32_t
    os << "value: " << t.shaderGroupHandleAlignment << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  maxRayHitAttributeSize" << std::endl;
    // maxRayHitAttributeSize -> Field -> uint32_t
    os << "value: " << t.maxRayHitAttributeSize << std::endl;
  }

  return os;
}

std::ostream& operator<<(std::ostream& os,
                         const VkStridedDeviceAddressRegionKHR& t) {
  ScopedOstream sos(os);
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  deviceAddress" << std::endl;
    // deviceAddress -> Field -> VkDeviceAddress
    os << "value: " << t.deviceAddress << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  stride" << std::endl;
    // stride -> Field -> VkDeviceSize
    os << "value: " << t.stride << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  size" << std::endl;
    // size -> Field -> VkDeviceSize
    os << "value: " << t.size << std::endl;
  }

  return os;
}

std::ostream& operator<<(std::ostream& os,
                         const VkTraceRaysIndirectCommandKHR& t) {
  ScopedOstream sos(os);
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  width" << std::endl;
    // width -> Field -> uint32_t
    os << "value: " << t.width << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  height" << std::endl;
    // height -> Field -> uint32_t
    os << "value: " << t.height << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  depth" << std::endl;
    // depth -> Field -> uint32_t
    os << "value: " << t.depth << std::endl;
  }

  return os;
}

std::ostream& operator<<(std::ostream& os,
                         const VkDrmFormatModifierPropertiesListEXT& t) {
  ScopedOstream sos(os);
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  sType" << std::endl;
    // sType -> Field -> VkStructureType
    os << "value: " << t.sType << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  pNext" << std::endl;
    // pNext -> Field -> NextPtr(void)

    // pNext
    os << "value: ";
    PrintNextPtr(os, t.pNext);
    os << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  drmFormatModifierCount" << std::endl;
    // drmFormatModifierCount -> Field -> uint32_t
    os << "value: " << t.drmFormatModifierCount << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  pDrmFormatModifierProperties" << std::endl;
    // pDrmFormatModifierProperties -> Field ->
    // DynamicArray(VkDrmFormatModifierPropertiesEXT)
    {
      if (t.drmFormatModifierCount == 0) {
        os << "value: nullptr" << std::endl;
      } else {
        os << "members:" << std::endl;
        {
          ScopedOstream soarray(os);
          os << "- # VkDrmFormatModifierPropertiesEXT" << std::endl;
          for (uint32_t i = 0; i < t.drmFormatModifierCount; ++i) {
            ScopedOstream somember(os);
            os << "members:" << std::endl
               << t.pDrmFormatModifierProperties[i] << std::endl;
          }
        }
      }
    }
  }

  return os;
}

std::ostream& operator<<(std::ostream& os,
                         const VkDrmFormatModifierPropertiesEXT& t) {
  ScopedOstream sos(os);
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  drmFormatModifier" << std::endl;
    // drmFormatModifier -> Field -> uint64_t
    os << "value: " << t.drmFormatModifier << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  drmFormatModifierPlaneCount" << std::endl;
    // drmFormatModifierPlaneCount -> Field -> uint32_t
    os << "value: " << t.drmFormatModifierPlaneCount << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  drmFormatModifierTilingFeatures" << std::endl;
    // drmFormatModifierTilingFeatures -> Field -> VkFormatFeatureFlags
    os << "value: " << t.drmFormatModifierTilingFeatures << std::endl;
  }

  return os;
}

std::ostream& operator<<(
    std::ostream& os, const VkPhysicalDeviceImageDrmFormatModifierInfoEXT& t) {
  ScopedOstream sos(os);
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  sType" << std::endl;
    // sType -> Field -> VkStructureType
    os << "value: " << t.sType << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  pNext" << std::endl;
    // pNext -> Field -> ConstNextPtr(void)

    // pNext
    os << "value: ";
    PrintNextPtr(os, t.pNext);
    os << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  drmFormatModifier" << std::endl;
    // drmFormatModifier -> Field -> uint64_t
    os << "value: " << t.drmFormatModifier << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  sharingMode" << std::endl;
    // sharingMode -> Field -> VkSharingMode
    os << "value: " << t.sharingMode << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  queueFamilyIndexCount" << std::endl;
    // queueFamilyIndexCount -> Field -> uint32_t
    os << "value: " << t.queueFamilyIndexCount << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  pQueueFamilyIndices" << std::endl;
    // pQueueFamilyIndices -> Field -> ConstDynamicArray(uint32_t)
    {
      if (t.queueFamilyIndexCount == 0) {
        os << "value: nullptr" << std::endl;
      } else {
        os << "members:" << std::endl;
        {
          ScopedOstream soarray(os);
          os << "- # uint32_t" << std::endl;
          for (uint32_t i = 0; i < t.queueFamilyIndexCount; ++i) {
            ScopedOstream somember(os);
            os << "value: " << t.pQueueFamilyIndices[i] << std::endl;
          }
        }
      }
    }
  }

  return os;
}

std::ostream& operator<<(std::ostream& os,
                         const VkImageDrmFormatModifierListCreateInfoEXT& t) {
  ScopedOstream sos(os);
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  sType" << std::endl;
    // sType -> Field -> VkStructureType
    os << "value: " << t.sType << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  pNext" << std::endl;
    // pNext -> Field -> ConstNextPtr(void)

    // pNext
    os << "value: ";
    PrintNextPtr(os, t.pNext);
    os << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  drmFormatModifierCount" << std::endl;
    // drmFormatModifierCount -> Field -> uint32_t
    os << "value: " << t.drmFormatModifierCount << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  pDrmFormatModifiers" << std::endl;
    // pDrmFormatModifiers -> Field -> ConstDynamicArray(uint64_t)
    {
      if (t.drmFormatModifierCount == 0) {
        os << "value: nullptr" << std::endl;
      } else {
        os << "members:" << std::endl;
        {
          ScopedOstream soarray(os);
          os << "- # uint64_t" << std::endl;
          for (uint32_t i = 0; i < t.drmFormatModifierCount; ++i) {
            ScopedOstream somember(os);
            os << "value: " << t.pDrmFormatModifiers[i] << std::endl;
          }
        }
      }
    }
  }

  return os;
}

std::ostream& operator<<(
    std::ostream& os, const VkImageDrmFormatModifierExplicitCreateInfoEXT& t) {
  ScopedOstream sos(os);
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  sType" << std::endl;
    // sType -> Field -> VkStructureType
    os << "value: " << t.sType << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  pNext" << std::endl;
    // pNext -> Field -> ConstNextPtr(void)

    // pNext
    os << "value: ";
    PrintNextPtr(os, t.pNext);
    os << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  drmFormatModifier" << std::endl;
    // drmFormatModifier -> Field -> uint64_t
    os << "value: " << t.drmFormatModifier << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  drmFormatModifierPlaneCount" << std::endl;
    // drmFormatModifierPlaneCount -> Field -> uint32_t
    os << "value: " << t.drmFormatModifierPlaneCount << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  pPlaneLayouts" << std::endl;
    // pPlaneLayouts -> Field -> ConstDynamicArray(VkSubresourceLayout)
    {
      if (t.drmFormatModifierPlaneCount == 0) {
        os << "value: nullptr" << std::endl;
      } else {
        os << "members:" << std::endl;
        {
          ScopedOstream soarray(os);
          os << "- # VkSubresourceLayout" << std::endl;
          for (uint32_t i = 0; i < t.drmFormatModifierPlaneCount; ++i) {
            ScopedOstream somember(os);
            os << "members:" << std::endl << t.pPlaneLayouts[i] << std::endl;
          }
        }
      }
    }
  }

  return os;
}

std::ostream& operator<<(std::ostream& os,
                         const VkImageDrmFormatModifierPropertiesEXT& t) {
  ScopedOstream sos(os);
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  sType" << std::endl;
    // sType -> Field -> VkStructureType
    os << "value: " << t.sType << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  pNext" << std::endl;
    // pNext -> Field -> NextPtr(void)

    // pNext
    os << "value: ";
    PrintNextPtr(os, t.pNext);
    os << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  drmFormatModifier" << std::endl;
    // drmFormatModifier -> Field -> uint64_t
    os << "value: " << t.drmFormatModifier << std::endl;
  }

  return os;
}

std::ostream& operator<<(std::ostream& os,
                         const VkDeviceMemoryOverallocationCreateInfoAMD& t) {
  ScopedOstream sos(os);
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  sType" << std::endl;
    // sType -> Field -> VkStructureType
    os << "value: " << t.sType << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  pNext" << std::endl;
    // pNext -> Field -> ConstNextPtr(void)

    // pNext
    os << "value: ";
    PrintNextPtr(os, t.pNext);
    os << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  overallocationBehavior" << std::endl;
    // overallocationBehavior -> Field -> VkMemoryOverallocationBehaviorAMD
    os << "value: " << t.overallocationBehavior << std::endl;
  }

  return os;
}

std::ostream& operator<<(
    std::ostream& os, const VkPhysicalDeviceFragmentDensityMapFeaturesEXT& t) {
  ScopedOstream sos(os);
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  sType" << std::endl;
    // sType -> Field -> VkStructureType
    os << "value: " << t.sType << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  pNext" << std::endl;
    // pNext -> Field -> NextPtr(void)

    // pNext
    os << "value: ";
    PrintNextPtr(os, t.pNext);
    os << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  fragmentDensityMap" << std::endl;
    // fragmentDensityMap -> Field -> VkBool32
    os << "value: " << t.fragmentDensityMap << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  fragmentDensityMapDynamic" << std::endl;
    // fragmentDensityMapDynamic -> Field -> VkBool32
    os << "value: " << t.fragmentDensityMapDynamic << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  fragmentDensityMapNonSubsampledImages" << std::endl;
    // fragmentDensityMapNonSubsampledImages -> Field -> VkBool32
    os << "value: " << t.fragmentDensityMapNonSubsampledImages << std::endl;
  }

  return os;
}

std::ostream& operator<<(
    std::ostream& os, const VkPhysicalDeviceFragmentDensityMap2FeaturesEXT& t) {
  ScopedOstream sos(os);
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  sType" << std::endl;
    // sType -> Field -> VkStructureType
    os << "value: " << t.sType << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  pNext" << std::endl;
    // pNext -> Field -> NextPtr(void)

    // pNext
    os << "value: ";
    PrintNextPtr(os, t.pNext);
    os << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  fragmentDensityMapDeferred" << std::endl;
    // fragmentDensityMapDeferred -> Field -> VkBool32
    os << "value: " << t.fragmentDensityMapDeferred << std::endl;
  }

  return os;
}

std::ostream& operator<<(
    std::ostream& os,
    const VkPhysicalDeviceFragmentDensityMapPropertiesEXT& t) {
  ScopedOstream sos(os);
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  sType" << std::endl;
    // sType -> Field -> VkStructureType
    os << "value: " << t.sType << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  pNext" << std::endl;
    // pNext -> Field -> NextPtr(void)

    // pNext
    os << "value: ";
    PrintNextPtr(os, t.pNext);
    os << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  minFragmentDensityTexelSize" << std::endl;
    // minFragmentDensityTexelSize -> Field -> VkExtent2D
    os << "members:" << std::endl << t.minFragmentDensityTexelSize << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  maxFragmentDensityTexelSize" << std::endl;
    // maxFragmentDensityTexelSize -> Field -> VkExtent2D
    os << "members:" << std::endl << t.maxFragmentDensityTexelSize << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  fragmentDensityInvocations" << std::endl;
    // fragmentDensityInvocations -> Field -> VkBool32
    os << "value: " << t.fragmentDensityInvocations << std::endl;
  }

  return os;
}

std::ostream& operator<<(
    std::ostream& os,
    const VkPhysicalDeviceFragmentDensityMap2PropertiesEXT& t) {
  ScopedOstream sos(os);
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  sType" << std::endl;
    // sType -> Field -> VkStructureType
    os << "value: " << t.sType << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  pNext" << std::endl;
    // pNext -> Field -> NextPtr(void)

    // pNext
    os << "value: ";
    PrintNextPtr(os, t.pNext);
    os << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  subsampledLoads" << std::endl;
    // subsampledLoads -> Field -> VkBool32
    os << "value: " << t.subsampledLoads << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  subsampledCoarseReconstructionEarlyAccess" << std::endl;
    // subsampledCoarseReconstructionEarlyAccess -> Field -> VkBool32
    os << "value: " << t.subsampledCoarseReconstructionEarlyAccess << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  maxSubsampledArrayLayers" << std::endl;
    // maxSubsampledArrayLayers -> Field -> uint32_t
    os << "value: " << t.maxSubsampledArrayLayers << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  maxDescriptorSetSubsampledSamplers" << std::endl;
    // maxDescriptorSetSubsampledSamplers -> Field -> uint32_t
    os << "value: " << t.maxDescriptorSetSubsampledSamplers << std::endl;
  }

  return os;
}

std::ostream& operator<<(std::ostream& os,
                         const VkRenderPassFragmentDensityMapCreateInfoEXT& t) {
  ScopedOstream sos(os);
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  sType" << std::endl;
    // sType -> Field -> VkStructureType
    os << "value: " << t.sType << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  pNext" << std::endl;
    // pNext -> Field -> ConstNextPtr(void)

    // pNext
    os << "value: ";
    PrintNextPtr(os, t.pNext);
    os << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  fragmentDensityMapAttachment" << std::endl;
    // fragmentDensityMapAttachment -> Field -> VkAttachmentReference
    os << "members:" << std::endl
       << t.fragmentDensityMapAttachment << std::endl;
  }

  return os;
}

std::ostream& operator<<(std::ostream& os,
                         const VkSurfaceProtectedCapabilitiesKHR& t) {
  ScopedOstream sos(os);
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  sType" << std::endl;
    // sType -> Field -> VkStructureType
    os << "value: " << t.sType << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  pNext" << std::endl;
    // pNext -> Field -> ConstNextPtr(void)

    // pNext
    os << "value: ";
    PrintNextPtr(os, t.pNext);
    os << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  supportsProtected" << std::endl;
    // supportsProtected -> Field -> VkBool32
    os << "value: " << t.supportsProtected << std::endl;
  }

  return os;
}

std::ostream& operator<<(std::ostream& os,
                         const VkPhysicalDeviceDepthClipEnableFeaturesEXT& t) {
  ScopedOstream sos(os);
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  sType" << std::endl;
    // sType -> Field -> VkStructureType
    os << "value: " << t.sType << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  pNext" << std::endl;
    // pNext -> Field -> NextPtr(void)

    // pNext
    os << "value: ";
    PrintNextPtr(os, t.pNext);
    os << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  depthClipEnable" << std::endl;
    // depthClipEnable -> Field -> VkBool32
    os << "value: " << t.depthClipEnable << std::endl;
  }

  return os;
}

std::ostream& operator<<(
    std::ostream& os,
    const VkPipelineRasterizationDepthClipStateCreateInfoEXT& t) {
  ScopedOstream sos(os);
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  sType" << std::endl;
    // sType -> Field -> VkStructureType
    os << "value: " << t.sType << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  pNext" << std::endl;
    // pNext -> Field -> ConstNextPtr(void)

    // pNext
    os << "value: ";
    PrintNextPtr(os, t.pNext);
    os << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  flags" << std::endl;
    // flags -> Field -> VkPipelineRasterizationDepthClipStateCreateFlagsEXT
    os << "value: " << t.flags << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  depthClipEnable" << std::endl;
    // depthClipEnable -> Field -> VkBool32
    os << "value: " << t.depthClipEnable << std::endl;
  }

  return os;
}

std::ostream& operator<<(std::ostream& os,
                         const VkPhysicalDeviceMemoryBudgetPropertiesEXT& t) {
  ScopedOstream sos(os);
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  sType" << std::endl;
    // sType -> Field -> VkStructureType
    os << "value: " << t.sType << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  pNext" << std::endl;
    // pNext -> Field -> NextPtr(void)

    // pNext
    os << "value: ";
    PrintNextPtr(os, t.pNext);
    os << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  heapBudget" << std::endl;
    // heapBudget -> Field -> FixedArray(VkDeviceSize)
    {
      if (VK_MAX_MEMORY_HEAPS == 0) {
        os << "value: nullptr" << std::endl;
      } else {
        os << "members:" << std::endl;
        {
          ScopedOstream soarray(os);
          os << "- # VkDeviceSize" << std::endl;
          for (uint32_t i = 0; i < VK_MAX_MEMORY_HEAPS; ++i) {
            ScopedOstream somember(os);
            os << "value: " << t.heapBudget[i] << std::endl;
          }
        }
      }
    }
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  heapUsage" << std::endl;
    // heapUsage -> Field -> FixedArray(VkDeviceSize)
    {
      if (VK_MAX_MEMORY_HEAPS == 0) {
        os << "value: nullptr" << std::endl;
      } else {
        os << "members:" << std::endl;
        {
          ScopedOstream soarray(os);
          os << "- # VkDeviceSize" << std::endl;
          for (uint32_t i = 0; i < VK_MAX_MEMORY_HEAPS; ++i) {
            ScopedOstream somember(os);
            os << "value: " << t.heapUsage[i] << std::endl;
          }
        }
      }
    }
  }

  return os;
}

std::ostream& operator<<(std::ostream& os,
                         const VkPhysicalDeviceMemoryPriorityFeaturesEXT& t) {
  ScopedOstream sos(os);
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  sType" << std::endl;
    // sType -> Field -> VkStructureType
    os << "value: " << t.sType << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  pNext" << std::endl;
    // pNext -> Field -> NextPtr(void)

    // pNext
    os << "value: ";
    PrintNextPtr(os, t.pNext);
    os << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  memoryPriority" << std::endl;
    // memoryPriority -> Field -> VkBool32
    os << "value: " << t.memoryPriority << std::endl;
  }

  return os;
}

std::ostream& operator<<(std::ostream& os,
                         const VkMemoryPriorityAllocateInfoEXT& t) {
  ScopedOstream sos(os);
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  sType" << std::endl;
    // sType -> Field -> VkStructureType
    os << "value: " << t.sType << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  pNext" << std::endl;
    // pNext -> Field -> ConstNextPtr(void)

    // pNext
    os << "value: ";
    PrintNextPtr(os, t.pNext);
    os << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  priority" << std::endl;
    // priority -> Field -> float
    os << "value: " << t.priority << std::endl;
  }

  return os;
}

std::ostream& operator<<(std::ostream& os,
                         const VkPhysicalDeviceYcbcrImageArraysFeaturesEXT& t) {
  ScopedOstream sos(os);
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  sType" << std::endl;
    // sType -> Field -> VkStructureType
    os << "value: " << t.sType << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  pNext" << std::endl;
    // pNext -> Field -> NextPtr(void)

    // pNext
    os << "value: ";
    PrintNextPtr(os, t.pNext);
    os << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  ycbcrImageArrays" << std::endl;
    // ycbcrImageArrays -> Field -> VkBool32
    os << "value: " << t.ycbcrImageArrays << std::endl;
  }

  return os;
}

std::ostream& operator<<(std::ostream& os,
                         const VkPhysicalDevicePerformanceQueryFeaturesKHR& t) {
  ScopedOstream sos(os);
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  sType" << std::endl;
    // sType -> Field -> VkStructureType
    os << "value: " << t.sType << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  pNext" << std::endl;
    // pNext -> Field -> NextPtr(void)

    // pNext
    os << "value: ";
    PrintNextPtr(os, t.pNext);
    os << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  performanceCounterQueryPools" << std::endl;
    // performanceCounterQueryPools -> Field -> VkBool32
    os << "value: " << t.performanceCounterQueryPools << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  performanceCounterMultipleQueryPools" << std::endl;
    // performanceCounterMultipleQueryPools -> Field -> VkBool32
    os << "value: " << t.performanceCounterMultipleQueryPools << std::endl;
  }

  return os;
}

std::ostream& operator<<(
    std::ostream& os, const VkPhysicalDevicePerformanceQueryPropertiesKHR& t) {
  ScopedOstream sos(os);
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  sType" << std::endl;
    // sType -> Field -> VkStructureType
    os << "value: " << t.sType << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  pNext" << std::endl;
    // pNext -> Field -> NextPtr(void)

    // pNext
    os << "value: ";
    PrintNextPtr(os, t.pNext);
    os << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  allowCommandBufferQueryCopies" << std::endl;
    // allowCommandBufferQueryCopies -> Field -> VkBool32
    os << "value: " << t.allowCommandBufferQueryCopies << std::endl;
  }

  return os;
}

std::ostream& operator<<(std::ostream& os, const VkPerformanceCounterKHR& t) {
  ScopedOstream sos(os);
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  sType" << std::endl;
    // sType -> Field -> VkStructureType
    os << "value: " << t.sType << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  pNext" << std::endl;
    // pNext -> Field -> ConstNextPtr(void)

    // pNext
    os << "value: ";
    PrintNextPtr(os, t.pNext);
    os << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  unit" << std::endl;
    // unit -> Field -> VkPerformanceCounterUnitKHR
    os << "value: " << t.unit << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  scope" << std::endl;
    // scope -> Field -> VkPerformanceCounterScopeKHR
    os << "value: " << t.scope << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  storage" << std::endl;
    // storage -> Field -> VkPerformanceCounterStorageKHR
    os << "value: " << t.storage << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  uuid" << std::endl;
    // uuid -> Field -> FixedArray(uint8_t)
    {
      if (VK_UUID_SIZE == 0) {
        os << "value: nullptr" << std::endl;
      } else {
        os << "members:" << std::endl;
        {
          ScopedOstream soarray(os);
          os << "- # uint8_t" << std::endl;
          for (uint32_t i = 0; i < VK_UUID_SIZE; ++i) {
            ScopedOstream somember(os);
            os << "value: " << t.uuid[i] << std::endl;
          }
        }
      }
    }
  }

  return os;
}

std::ostream& operator<<(std::ostream& os,
                         const VkPerformanceCounterDescriptionKHR& t) {
  ScopedOstream sos(os);
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  sType" << std::endl;
    // sType -> Field -> VkStructureType
    os << "value: " << t.sType << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  pNext" << std::endl;
    // pNext -> Field -> ConstNextPtr(void)

    // pNext
    os << "value: ";
    PrintNextPtr(os, t.pNext);
    os << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  flags" << std::endl;
    // flags -> Field -> VkPerformanceCounterDescriptionFlagsKHR
    os << "value: " << t.flags << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  name" << std::endl;
    // name -> Field -> FixedArray(char)
    os << "value: " << t.name << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  category" << std::endl;
    // category -> Field -> FixedArray(char)
    os << "value: " << t.category << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  description" << std::endl;
    // description -> Field -> FixedArray(char)
    os << "value: " << t.description << std::endl;
  }

  return os;
}

std::ostream& operator<<(std::ostream& os,
                         const VkQueryPoolPerformanceCreateInfoKHR& t) {
  ScopedOstream sos(os);
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  sType" << std::endl;
    // sType -> Field -> VkStructureType
    os << "value: " << t.sType << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  pNext" << std::endl;
    // pNext -> Field -> ConstNextPtr(void)

    // pNext
    os << "value: ";
    PrintNextPtr(os, t.pNext);
    os << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  queueFamilyIndex" << std::endl;
    // queueFamilyIndex -> Field -> uint32_t
    os << "value: " << t.queueFamilyIndex << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  counterIndexCount" << std::endl;
    // counterIndexCount -> Field -> uint32_t
    os << "value: " << t.counterIndexCount << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  pCounterIndices" << std::endl;
    // pCounterIndices -> Field -> ConstDynamicArray(uint32_t)
    {
      if (t.counterIndexCount == 0) {
        os << "value: nullptr" << std::endl;
      } else {
        os << "members:" << std::endl;
        {
          ScopedOstream soarray(os);
          os << "- # uint32_t" << std::endl;
          for (uint32_t i = 0; i < t.counterIndexCount; ++i) {
            ScopedOstream somember(os);
            os << "value: " << t.pCounterIndices[i] << std::endl;
          }
        }
      }
    }
  }

  return os;
}

std::ostream& operator<<(std::ostream& os,
                         const VkPerformanceCounterResultKHR& t) {
  ScopedOstream sos(os);
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  int32" << std::endl;
    // int32 -> Field -> int32_t
    os << "value: " << t.int32 << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  int64" << std::endl;
    // int64 -> Field -> int64_t
    os << "value: " << t.int64 << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  uint32" << std::endl;
    // uint32 -> Field -> uint32_t
    os << "value: " << t.uint32 << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  uint64" << std::endl;
    // uint64 -> Field -> uint64_t
    os << "value: " << t.uint64 << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  float32" << std::endl;
    // float32 -> Field -> float
    os << "value: " << t.float32 << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  float64" << std::endl;
    // float64 -> Field -> double
    os << "value: " << t.float64 << std::endl;
  }

  return os;
}

std::ostream& operator<<(std::ostream& os,
                         const VkAcquireProfilingLockInfoKHR& t) {
  ScopedOstream sos(os);
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  sType" << std::endl;
    // sType -> Field -> VkStructureType
    os << "value: " << t.sType << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  pNext" << std::endl;
    // pNext -> Field -> ConstNextPtr(void)

    // pNext
    os << "value: ";
    PrintNextPtr(os, t.pNext);
    os << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  flags" << std::endl;
    // flags -> Field -> VkAcquireProfilingLockFlagsKHR
    os << "value: " << t.flags << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  timeout" << std::endl;
    // timeout -> Field -> uint64_t
    os << "value: " << t.timeout << std::endl;
  }

  return os;
}

std::ostream& operator<<(std::ostream& os,
                         const VkPerformanceQuerySubmitInfoKHR& t) {
  ScopedOstream sos(os);
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  sType" << std::endl;
    // sType -> Field -> VkStructureType
    os << "value: " << t.sType << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  pNext" << std::endl;
    // pNext -> Field -> ConstNextPtr(void)

    // pNext
    os << "value: ";
    PrintNextPtr(os, t.pNext);
    os << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  counterPassIndex" << std::endl;
    // counterPassIndex -> Field -> uint32_t
    os << "value: " << t.counterPassIndex << std::endl;
  }

  return os;
}

std::ostream& operator<<(std::ostream& os,
                         const VkHeadlessSurfaceCreateInfoEXT& t) {
  ScopedOstream sos(os);
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  sType" << std::endl;
    // sType -> Field -> VkStructureType
    os << "value: " << t.sType << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  pNext" << std::endl;
    // pNext -> Field -> ConstNextPtr(void)

    // pNext
    os << "value: ";
    PrintNextPtr(os, t.pNext);
    os << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  flags" << std::endl;
    // flags -> Field -> VkHeadlessSurfaceCreateFlagsEXT
    os << "value: " << t.flags << std::endl;
  }

  return os;
}

std::ostream& operator<<(std::ostream& os,
                         const VkPhysicalDeviceShaderClockFeaturesKHR& t) {
  ScopedOstream sos(os);
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  sType" << std::endl;
    // sType -> Field -> VkStructureType
    os << "value: " << t.sType << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  pNext" << std::endl;
    // pNext -> Field -> NextPtr(void)

    // pNext
    os << "value: ";
    PrintNextPtr(os, t.pNext);
    os << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  shaderSubgroupClock" << std::endl;
    // shaderSubgroupClock -> Field -> VkBool32
    os << "value: " << t.shaderSubgroupClock << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  shaderDeviceClock" << std::endl;
    // shaderDeviceClock -> Field -> VkBool32
    os << "value: " << t.shaderDeviceClock << std::endl;
  }

  return os;
}

std::ostream& operator<<(std::ostream& os,
                         const VkPhysicalDeviceIndexTypeUint8FeaturesEXT& t) {
  ScopedOstream sos(os);
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  sType" << std::endl;
    // sType -> Field -> VkStructureType
    os << "value: " << t.sType << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  pNext" << std::endl;
    // pNext -> Field -> NextPtr(void)

    // pNext
    os << "value: ";
    PrintNextPtr(os, t.pNext);
    os << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  indexTypeUint8" << std::endl;
    // indexTypeUint8 -> Field -> VkBool32
    os << "value: " << t.indexTypeUint8 << std::endl;
  }

  return os;
}

std::ostream& operator<<(
    std::ostream& os,
    const VkPhysicalDeviceFragmentShaderInterlockFeaturesEXT& t) {
  ScopedOstream sos(os);
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  sType" << std::endl;
    // sType -> Field -> VkStructureType
    os << "value: " << t.sType << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  pNext" << std::endl;
    // pNext -> Field -> NextPtr(void)

    // pNext
    os << "value: ";
    PrintNextPtr(os, t.pNext);
    os << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  fragmentShaderSampleInterlock" << std::endl;
    // fragmentShaderSampleInterlock -> Field -> VkBool32
    os << "value: " << t.fragmentShaderSampleInterlock << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  fragmentShaderPixelInterlock" << std::endl;
    // fragmentShaderPixelInterlock -> Field -> VkBool32
    os << "value: " << t.fragmentShaderPixelInterlock << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  fragmentShaderShadingRateInterlock" << std::endl;
    // fragmentShaderShadingRateInterlock -> Field -> VkBool32
    os << "value: " << t.fragmentShaderShadingRateInterlock << std::endl;
  }

  return os;
}

std::ostream& operator<<(
    std::ostream& os,
    const VkPhysicalDevicePipelineExecutablePropertiesFeaturesKHR& t) {
  ScopedOstream sos(os);
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  sType" << std::endl;
    // sType -> Field -> VkStructureType
    os << "value: " << t.sType << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  pNext" << std::endl;
    // pNext -> Field -> NextPtr(void)

    // pNext
    os << "value: ";
    PrintNextPtr(os, t.pNext);
    os << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  pipelineExecutableInfo" << std::endl;
    // pipelineExecutableInfo -> Field -> VkBool32
    os << "value: " << t.pipelineExecutableInfo << std::endl;
  }

  return os;
}

std::ostream& operator<<(std::ostream& os, const VkPipelineInfoKHR& t) {
  ScopedOstream sos(os);
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  sType" << std::endl;
    // sType -> Field -> VkStructureType
    os << "value: " << t.sType << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  pNext" << std::endl;
    // pNext -> Field -> ConstNextPtr(void)

    // pNext
    os << "value: ";
    PrintNextPtr(os, t.pNext);
    os << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  pipeline" << std::endl;
    // pipeline -> Field -> VkPipeline
    os << "value: " << t.pipeline << std::endl;
  }

  return os;
}

std::ostream& operator<<(std::ostream& os,
                         const VkPipelineExecutablePropertiesKHR& t) {
  ScopedOstream sos(os);
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  sType" << std::endl;
    // sType -> Field -> VkStructureType
    os << "value: " << t.sType << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  pNext" << std::endl;
    // pNext -> Field -> NextPtr(void)

    // pNext
    os << "value: ";
    PrintNextPtr(os, t.pNext);
    os << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  stages" << std::endl;
    // stages -> Field -> VkShaderStageFlags
    os << "value: " << t.stages << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  name" << std::endl;
    // name -> Field -> FixedArray(char)
    os << "value: " << t.name << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  description" << std::endl;
    // description -> Field -> FixedArray(char)
    os << "value: " << t.description << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  subgroupSize" << std::endl;
    // subgroupSize -> Field -> uint32_t
    os << "value: " << t.subgroupSize << std::endl;
  }

  return os;
}

std::ostream& operator<<(std::ostream& os,
                         const VkPipelineExecutableInfoKHR& t) {
  ScopedOstream sos(os);
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  sType" << std::endl;
    // sType -> Field -> VkStructureType
    os << "value: " << t.sType << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  pNext" << std::endl;
    // pNext -> Field -> ConstNextPtr(void)

    // pNext
    os << "value: ";
    PrintNextPtr(os, t.pNext);
    os << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  pipeline" << std::endl;
    // pipeline -> Field -> VkPipeline
    os << "value: " << t.pipeline << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  executableIndex" << std::endl;
    // executableIndex -> Field -> uint32_t
    os << "value: " << t.executableIndex << std::endl;
  }

  return os;
}

std::ostream& operator<<(std::ostream& os,
                         const VkPipelineExecutableStatisticValueKHR& t) {
  ScopedOstream sos(os);
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  b32" << std::endl;
    // b32 -> Field -> VkBool32
    os << "value: " << t.b32 << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  i64" << std::endl;
    // i64 -> Field -> int64_t
    os << "value: " << t.i64 << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  u64" << std::endl;
    // u64 -> Field -> uint64_t
    os << "value: " << t.u64 << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  f64" << std::endl;
    // f64 -> Field -> double
    os << "value: " << t.f64 << std::endl;
  }

  return os;
}

std::ostream& operator<<(std::ostream& os,
                         const VkPipelineExecutableStatisticKHR& t) {
  ScopedOstream sos(os);
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  sType" << std::endl;
    // sType -> Field -> VkStructureType
    os << "value: " << t.sType << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  pNext" << std::endl;
    // pNext -> Field -> NextPtr(void)

    // pNext
    os << "value: ";
    PrintNextPtr(os, t.pNext);
    os << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  name" << std::endl;
    // name -> Field -> FixedArray(char)
    os << "value: " << t.name << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  description" << std::endl;
    // description -> Field -> FixedArray(char)
    os << "value: " << t.description << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  format" << std::endl;
    // format -> Field -> VkPipelineExecutableStatisticFormatKHR
    os << "value: " << t.format << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  value" << std::endl;
    // value -> Field -> VkPipelineExecutableStatisticValueKHR
    os << "members:" << std::endl << t.value << std::endl;
  }

  return os;
}

std::ostream& operator<<(
    std::ostream& os, const VkPipelineExecutableInternalRepresentationKHR& t) {
  ScopedOstream sos(os);
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  sType" << std::endl;
    // sType -> Field -> VkStructureType
    os << "value: " << t.sType << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  pNext" << std::endl;
    // pNext -> Field -> NextPtr(void)

    // pNext
    os << "value: ";
    PrintNextPtr(os, t.pNext);
    os << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  name" << std::endl;
    // name -> Field -> FixedArray(char)
    os << "value: " << t.name << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  description" << std::endl;
    // description -> Field -> FixedArray(char)
    os << "value: " << t.description << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  isText" << std::endl;
    // isText -> Field -> VkBool32
    os << "value: " << t.isText << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  dataSize" << std::endl;
    // dataSize -> Field -> size_t
    os << "value: " << t.dataSize << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  pData" << std::endl;
    // pData -> Field -> DynamicArray(void)
    {
      if (t.dataSize == 0) {
        os << "value: nullptr" << std::endl;
      } else {
        os << std::hex;
        os << "members:" << std::endl;
        {
          ScopedOstream soarray(os);
          const uint8_t* p = (const uint8_t*)t.pData;
          for (uint32_t i = 0; i < t.dataSize; ++i) {
            os << "- 0x" << p[i] << std::endl;
          }
        }
        os << std::dec;
      }
    }
  }

  return os;
}

std::ostream& operator<<(
    std::ostream& os,
    const VkPhysicalDeviceShaderDemoteToHelperInvocationFeaturesEXT& t) {
  ScopedOstream sos(os);
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  sType" << std::endl;
    // sType -> Field -> VkStructureType
    os << "value: " << t.sType << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  pNext" << std::endl;
    // pNext -> Field -> NextPtr(void)

    // pNext
    os << "value: ";
    PrintNextPtr(os, t.pNext);
    os << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  shaderDemoteToHelperInvocation" << std::endl;
    // shaderDemoteToHelperInvocation -> Field -> VkBool32
    os << "value: " << t.shaderDemoteToHelperInvocation << std::endl;
  }

  return os;
}

std::ostream& operator<<(
    std::ostream& os,
    const VkPhysicalDeviceTexelBufferAlignmentFeaturesEXT& t) {
  ScopedOstream sos(os);
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  sType" << std::endl;
    // sType -> Field -> VkStructureType
    os << "value: " << t.sType << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  pNext" << std::endl;
    // pNext -> Field -> NextPtr(void)

    // pNext
    os << "value: ";
    PrintNextPtr(os, t.pNext);
    os << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  texelBufferAlignment" << std::endl;
    // texelBufferAlignment -> Field -> VkBool32
    os << "value: " << t.texelBufferAlignment << std::endl;
  }

  return os;
}

std::ostream& operator<<(
    std::ostream& os,
    const VkPhysicalDeviceTexelBufferAlignmentPropertiesEXT& t) {
  ScopedOstream sos(os);
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  sType" << std::endl;
    // sType -> Field -> VkStructureType
    os << "value: " << t.sType << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  pNext" << std::endl;
    // pNext -> Field -> NextPtr(void)

    // pNext
    os << "value: ";
    PrintNextPtr(os, t.pNext);
    os << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  storageTexelBufferOffsetAlignmentBytes" << std::endl;
    // storageTexelBufferOffsetAlignmentBytes -> Field -> VkDeviceSize
    os << "value: " << t.storageTexelBufferOffsetAlignmentBytes << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  storageTexelBufferOffsetSingleTexelAlignment" << std::endl;
    // storageTexelBufferOffsetSingleTexelAlignment -> Field -> VkBool32
    os << "value: " << t.storageTexelBufferOffsetSingleTexelAlignment
       << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  uniformTexelBufferOffsetAlignmentBytes" << std::endl;
    // uniformTexelBufferOffsetAlignmentBytes -> Field -> VkDeviceSize
    os << "value: " << t.uniformTexelBufferOffsetAlignmentBytes << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  uniformTexelBufferOffsetSingleTexelAlignment" << std::endl;
    // uniformTexelBufferOffsetSingleTexelAlignment -> Field -> VkBool32
    os << "value: " << t.uniformTexelBufferOffsetSingleTexelAlignment
       << std::endl;
  }

  return os;
}

std::ostream& operator<<(
    std::ostream& os, const VkPhysicalDeviceSubgroupSizeControlFeaturesEXT& t) {
  ScopedOstream sos(os);
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  sType" << std::endl;
    // sType -> Field -> VkStructureType
    os << "value: " << t.sType << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  pNext" << std::endl;
    // pNext -> Field -> NextPtr(void)

    // pNext
    os << "value: ";
    PrintNextPtr(os, t.pNext);
    os << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  subgroupSizeControl" << std::endl;
    // subgroupSizeControl -> Field -> VkBool32
    os << "value: " << t.subgroupSizeControl << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  computeFullSubgroups" << std::endl;
    // computeFullSubgroups -> Field -> VkBool32
    os << "value: " << t.computeFullSubgroups << std::endl;
  }

  return os;
}

std::ostream& operator<<(
    std::ostream& os,
    const VkPhysicalDeviceSubgroupSizeControlPropertiesEXT& t) {
  ScopedOstream sos(os);
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  sType" << std::endl;
    // sType -> Field -> VkStructureType
    os << "value: " << t.sType << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  pNext" << std::endl;
    // pNext -> Field -> NextPtr(void)

    // pNext
    os << "value: ";
    PrintNextPtr(os, t.pNext);
    os << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  minSubgroupSize" << std::endl;
    // minSubgroupSize -> Field -> uint32_t
    os << "value: " << t.minSubgroupSize << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  maxSubgroupSize" << std::endl;
    // maxSubgroupSize -> Field -> uint32_t
    os << "value: " << t.maxSubgroupSize << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  maxComputeWorkgroupSubgroups" << std::endl;
    // maxComputeWorkgroupSubgroups -> Field -> uint32_t
    os << "value: " << t.maxComputeWorkgroupSubgroups << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  requiredSubgroupSizeStages" << std::endl;
    // requiredSubgroupSizeStages -> Field -> VkShaderStageFlags
    os << "value: " << t.requiredSubgroupSizeStages << std::endl;
  }

  return os;
}

std::ostream& operator<<(
    std::ostream& os,
    const VkPipelineShaderStageRequiredSubgroupSizeCreateInfoEXT& t) {
  ScopedOstream sos(os);
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  sType" << std::endl;
    // sType -> Field -> VkStructureType
    os << "value: " << t.sType << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  pNext" << std::endl;
    // pNext -> Field -> NextPtr(void)

    // pNext
    os << "value: ";
    PrintNextPtr(os, t.pNext);
    os << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  requiredSubgroupSize" << std::endl;
    // requiredSubgroupSize -> Field -> uint32_t
    os << "value: " << t.requiredSubgroupSize << std::endl;
  }

  return os;
}

std::ostream& operator<<(
    std::ostream& os, const VkPhysicalDeviceLineRasterizationFeaturesEXT& t) {
  ScopedOstream sos(os);
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  sType" << std::endl;
    // sType -> Field -> VkStructureType
    os << "value: " << t.sType << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  pNext" << std::endl;
    // pNext -> Field -> NextPtr(void)

    // pNext
    os << "value: ";
    PrintNextPtr(os, t.pNext);
    os << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  rectangularLines" << std::endl;
    // rectangularLines -> Field -> VkBool32
    os << "value: " << t.rectangularLines << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  bresenhamLines" << std::endl;
    // bresenhamLines -> Field -> VkBool32
    os << "value: " << t.bresenhamLines << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  smoothLines" << std::endl;
    // smoothLines -> Field -> VkBool32
    os << "value: " << t.smoothLines << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  stippledRectangularLines" << std::endl;
    // stippledRectangularLines -> Field -> VkBool32
    os << "value: " << t.stippledRectangularLines << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  stippledBresenhamLines" << std::endl;
    // stippledBresenhamLines -> Field -> VkBool32
    os << "value: " << t.stippledBresenhamLines << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  stippledSmoothLines" << std::endl;
    // stippledSmoothLines -> Field -> VkBool32
    os << "value: " << t.stippledSmoothLines << std::endl;
  }

  return os;
}

std::ostream& operator<<(
    std::ostream& os, const VkPhysicalDeviceLineRasterizationPropertiesEXT& t) {
  ScopedOstream sos(os);
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  sType" << std::endl;
    // sType -> Field -> VkStructureType
    os << "value: " << t.sType << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  pNext" << std::endl;
    // pNext -> Field -> NextPtr(void)

    // pNext
    os << "value: ";
    PrintNextPtr(os, t.pNext);
    os << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  lineSubPixelPrecisionBits" << std::endl;
    // lineSubPixelPrecisionBits -> Field -> uint32_t
    os << "value: " << t.lineSubPixelPrecisionBits << std::endl;
  }

  return os;
}

std::ostream& operator<<(
    std::ostream& os, const VkPipelineRasterizationLineStateCreateInfoEXT& t) {
  ScopedOstream sos(os);
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  sType" << std::endl;
    // sType -> Field -> VkStructureType
    os << "value: " << t.sType << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  pNext" << std::endl;
    // pNext -> Field -> ConstNextPtr(void)

    // pNext
    os << "value: ";
    PrintNextPtr(os, t.pNext);
    os << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  lineRasterizationMode" << std::endl;
    // lineRasterizationMode -> Field -> VkLineRasterizationModeEXT
    os << "value: " << t.lineRasterizationMode << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  stippledLineEnable" << std::endl;
    // stippledLineEnable -> Field -> VkBool32
    os << "value: " << t.stippledLineEnable << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  lineStippleFactor" << std::endl;
    // lineStippleFactor -> Field -> uint32_t
    os << "value: " << t.lineStippleFactor << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  lineStipplePattern" << std::endl;
    // lineStipplePattern -> Field -> uint16_t
    os << "value: " << t.lineStipplePattern << std::endl;
  }

  return os;
}

std::ostream& operator<<(
    std::ostream& os,
    const VkPhysicalDevicePipelineCreationCacheControlFeaturesEXT& t) {
  ScopedOstream sos(os);
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  sType" << std::endl;
    // sType -> Field -> VkStructureType
    os << "value: " << t.sType << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  pNext" << std::endl;
    // pNext -> Field -> NextPtr(void)

    // pNext
    os << "value: ";
    PrintNextPtr(os, t.pNext);
    os << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  pipelineCreationCacheControl" << std::endl;
    // pipelineCreationCacheControl -> Field -> VkBool32
    os << "value: " << t.pipelineCreationCacheControl << std::endl;
  }

  return os;
}

std::ostream& operator<<(std::ostream& os,
                         const VkPipelineCompilerControlCreateInfoAMD& t) {
  ScopedOstream sos(os);
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  sType" << std::endl;
    // sType -> Field -> VkStructureType
    os << "value: " << t.sType << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  pNext" << std::endl;
    // pNext -> Field -> ConstNextPtr(void)

    // pNext
    os << "value: ";
    PrintNextPtr(os, t.pNext);
    os << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  compilerControlFlags" << std::endl;
    // compilerControlFlags -> Field -> VkPipelineCompilerControlFlagsAMD
    os << "value: " << t.compilerControlFlags << std::endl;
  }

  return os;
}

std::ostream& operator<<(std::ostream& os,
                         const VkPhysicalDeviceCoherentMemoryFeaturesAMD& t) {
  ScopedOstream sos(os);
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  sType" << std::endl;
    // sType -> Field -> VkStructureType
    os << "value: " << t.sType << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  pNext" << std::endl;
    // pNext -> Field -> NextPtr(void)

    // pNext
    os << "value: ";
    PrintNextPtr(os, t.pNext);
    os << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  deviceCoherentMemory" << std::endl;
    // deviceCoherentMemory -> Field -> VkBool32
    os << "value: " << t.deviceCoherentMemory << std::endl;
  }

  return os;
}

std::ostream& operator<<(std::ostream& os,
                         const VkPhysicalDeviceToolPropertiesEXT& t) {
  ScopedOstream sos(os);
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  sType" << std::endl;
    // sType -> Field -> VkStructureType
    os << "value: " << t.sType << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  pNext" << std::endl;
    // pNext -> Field -> NextPtr(void)

    // pNext
    os << "value: ";
    PrintNextPtr(os, t.pNext);
    os << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  name" << std::endl;
    // name -> Field -> FixedArray(char)
    os << "value: " << t.name << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  version" << std::endl;
    // version -> Field -> FixedArray(char)
    os << "value: " << t.version << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  purposes" << std::endl;
    // purposes -> Field -> VkToolPurposeFlagsEXT
    os << "value: " << t.purposes << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  description" << std::endl;
    // description -> Field -> FixedArray(char)
    os << "value: " << t.description << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  layer" << std::endl;
    // layer -> Field -> FixedArray(char)
    os << "value: " << t.layer << std::endl;
  }

  return os;
}

std::ostream& operator<<(std::ostream& os,
                         const VkSamplerCustomBorderColorCreateInfoEXT& t) {
  ScopedOstream sos(os);
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  sType" << std::endl;
    // sType -> Field -> VkStructureType
    os << "value: " << t.sType << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  pNext" << std::endl;
    // pNext -> Field -> ConstNextPtr(void)

    // pNext
    os << "value: ";
    PrintNextPtr(os, t.pNext);
    os << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  customBorderColor" << std::endl;
    // customBorderColor -> Field -> VkClearColorValue
    os << "members:" << std::endl << t.customBorderColor << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  format" << std::endl;
    // format -> Field -> VkFormat
    os << "value: " << t.format << std::endl;
  }

  return os;
}

std::ostream& operator<<(
    std::ostream& os, const VkPhysicalDeviceCustomBorderColorPropertiesEXT& t) {
  ScopedOstream sos(os);
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  sType" << std::endl;
    // sType -> Field -> VkStructureType
    os << "value: " << t.sType << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  pNext" << std::endl;
    // pNext -> Field -> NextPtr(void)

    // pNext
    os << "value: ";
    PrintNextPtr(os, t.pNext);
    os << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  maxCustomBorderColorSamplers" << std::endl;
    // maxCustomBorderColorSamplers -> Field -> uint32_t
    os << "value: " << t.maxCustomBorderColorSamplers << std::endl;
  }

  return os;
}

std::ostream& operator<<(
    std::ostream& os, const VkPhysicalDeviceCustomBorderColorFeaturesEXT& t) {
  ScopedOstream sos(os);
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  sType" << std::endl;
    // sType -> Field -> VkStructureType
    os << "value: " << t.sType << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  pNext" << std::endl;
    // pNext -> Field -> NextPtr(void)

    // pNext
    os << "value: ";
    PrintNextPtr(os, t.pNext);
    os << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  customBorderColors" << std::endl;
    // customBorderColors -> Field -> VkBool32
    os << "value: " << t.customBorderColors << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  customBorderColorWithoutFormat" << std::endl;
    // customBorderColorWithoutFormat -> Field -> VkBool32
    os << "value: " << t.customBorderColorWithoutFormat << std::endl;
  }

  return os;
}

std::ostream& operator<<(std::ostream& os, const VkDeviceOrHostAddressKHR& t) {
  ScopedOstream sos(os);
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  deviceAddress" << std::endl;
    // deviceAddress -> Field -> VkDeviceAddress
    os << "value: " << t.deviceAddress << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  hostAddress" << std::endl;
    // hostAddress -> Field -> Pointer(void)

    // void
    os << "value: NOT_AVAILABLE" << std::endl;
  }

  return os;
}

std::ostream& operator<<(std::ostream& os,
                         const VkDeviceOrHostAddressConstKHR& t) {
  ScopedOstream sos(os);
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  deviceAddress" << std::endl;
    // deviceAddress -> Field -> VkDeviceAddress
    os << "value: " << t.deviceAddress << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  hostAddress" << std::endl;
    // hostAddress -> Field -> ConstPointer(void)

    // void
    os << "value: NOT_AVAILABLE" << std::endl;
  }

  return os;
}

std::ostream& operator<<(
    std::ostream& os,
    const VkAccelerationStructureGeometryTrianglesDataKHR& t) {
  ScopedOstream sos(os);
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  sType" << std::endl;
    // sType -> Field -> VkStructureType
    os << "value: " << t.sType << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  pNext" << std::endl;
    // pNext -> Field -> ConstNextPtr(void)

    // pNext
    os << "value: ";
    PrintNextPtr(os, t.pNext);
    os << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  vertexFormat" << std::endl;
    // vertexFormat -> Field -> VkFormat
    os << "value: " << t.vertexFormat << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  vertexData" << std::endl;
    // vertexData -> Field -> VkDeviceOrHostAddressConstKHR
    os << "members:" << std::endl << t.vertexData << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  vertexStride" << std::endl;
    // vertexStride -> Field -> VkDeviceSize
    os << "value: " << t.vertexStride << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  maxVertex" << std::endl;
    // maxVertex -> Field -> uint32_t
    os << "value: " << t.maxVertex << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  indexType" << std::endl;
    // indexType -> Field -> VkIndexType
    os << "value: " << t.indexType << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  indexData" << std::endl;
    // indexData -> Field -> VkDeviceOrHostAddressConstKHR
    os << "members:" << std::endl << t.indexData << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  transformData" << std::endl;
    // transformData -> Field -> VkDeviceOrHostAddressConstKHR
    os << "members:" << std::endl << t.transformData << std::endl;
  }

  return os;
}

std::ostream& operator<<(std::ostream& os,
                         const VkAccelerationStructureGeometryAabbsDataKHR& t) {
  ScopedOstream sos(os);
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  sType" << std::endl;
    // sType -> Field -> VkStructureType
    os << "value: " << t.sType << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  pNext" << std::endl;
    // pNext -> Field -> ConstNextPtr(void)

    // pNext
    os << "value: ";
    PrintNextPtr(os, t.pNext);
    os << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  data" << std::endl;
    // data -> Field -> VkDeviceOrHostAddressConstKHR
    os << "members:" << std::endl << t.data << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  stride" << std::endl;
    // stride -> Field -> VkDeviceSize
    os << "value: " << t.stride << std::endl;
  }

  return os;
}

std::ostream& operator<<(
    std::ostream& os,
    const VkAccelerationStructureGeometryInstancesDataKHR& t) {
  ScopedOstream sos(os);
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  sType" << std::endl;
    // sType -> Field -> VkStructureType
    os << "value: " << t.sType << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  pNext" << std::endl;
    // pNext -> Field -> ConstNextPtr(void)

    // pNext
    os << "value: ";
    PrintNextPtr(os, t.pNext);
    os << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  arrayOfPointers" << std::endl;
    // arrayOfPointers -> Field -> VkBool32
    os << "value: " << t.arrayOfPointers << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  data" << std::endl;
    // data -> Field -> VkDeviceOrHostAddressConstKHR
    os << "members:" << std::endl << t.data << std::endl;
  }

  return os;
}

std::ostream& operator<<(std::ostream& os,
                         const VkAccelerationStructureGeometryDataKHR& t) {
  ScopedOstream sos(os);
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  triangles" << std::endl;
    // triangles -> Field -> VkAccelerationStructureGeometryTrianglesDataKHR
    os << "members:" << std::endl << t.triangles << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  aabbs" << std::endl;
    // aabbs -> Field -> VkAccelerationStructureGeometryAabbsDataKHR
    os << "members:" << std::endl << t.aabbs << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  instances" << std::endl;
    // instances -> Field -> VkAccelerationStructureGeometryInstancesDataKHR
    os << "members:" << std::endl << t.instances << std::endl;
  }

  return os;
}

std::ostream& operator<<(std::ostream& os,
                         const VkAccelerationStructureGeometryKHR& t) {
  ScopedOstream sos(os);
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  sType" << std::endl;
    // sType -> Field -> VkStructureType
    os << "value: " << t.sType << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  pNext" << std::endl;
    // pNext -> Field -> ConstNextPtr(void)

    // pNext
    os << "value: ";
    PrintNextPtr(os, t.pNext);
    os << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  geometryType" << std::endl;
    // geometryType -> Field -> VkGeometryTypeKHR
    os << "value: " << t.geometryType << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  geometry" << std::endl;
    // geometry -> Field -> VkAccelerationStructureGeometryDataKHR
    os << "members:" << std::endl << t.geometry << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  flags" << std::endl;
    // flags -> Field -> VkGeometryFlagsKHR
    os << "value: " << t.flags << std::endl;
  }

  return os;
}

std::ostream& operator<<(std::ostream& os,
                         const VkAccelerationStructureBuildGeometryInfoKHR& t) {
  ScopedOstream sos(os);
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  sType" << std::endl;
    // sType -> Field -> VkStructureType
    os << "value: " << t.sType << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  pNext" << std::endl;
    // pNext -> Field -> ConstNextPtr(void)

    // pNext
    os << "value: ";
    PrintNextPtr(os, t.pNext);
    os << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  type" << std::endl;
    // type -> Field -> VkAccelerationStructureTypeKHR
    os << "value: " << t.type << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  flags" << std::endl;
    // flags -> Field -> VkBuildAccelerationStructureFlagsKHR
    os << "value: " << t.flags << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  mode" << std::endl;
    // mode -> Field -> VkBuildAccelerationStructureModeKHR
    os << "value: " << t.mode << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  srcAccelerationStructure" << std::endl;
    // srcAccelerationStructure -> Field -> VkAccelerationStructureKHR
    os << "value: " << t.srcAccelerationStructure << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  dstAccelerationStructure" << std::endl;
    // dstAccelerationStructure -> Field -> VkAccelerationStructureKHR
    os << "value: " << t.dstAccelerationStructure << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  geometryCount" << std::endl;
    // geometryCount -> Field -> uint32_t
    os << "value: " << t.geometryCount << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  pGeometries" << std::endl;
    // pGeometries -> Field ->
    // ConstDynamicArray(VkAccelerationStructureGeometryKHR)
    {
      if (t.geometryCount == 0) {
        os << "value: nullptr" << std::endl;
      } else {
        os << "members:" << std::endl;
        {
          ScopedOstream soarray(os);
          os << "- # VkAccelerationStructureGeometryKHR" << std::endl;
          for (uint32_t i = 0; i < t.geometryCount; ++i) {
            ScopedOstream somember(os);
            os << "members:" << std::endl << t.pGeometries[i] << std::endl;
          }
        }
      }
    }
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  ppGeometries" << std::endl;
    // ppGeometries -> Field ->
    // ConstDynamicArray(ConstDynamicArray(VkAccelerationStructureGeometryKHR))
    {
      if (t.geometryCount == 0) {
        os << "value: nullptr" << std::endl;
      } else {
        os << "members:" << std::endl;
        {
          ScopedOstream soarray(os);
          os << "- # ConstDynamicArray(VkAccelerationStructureGeometryKHR)"
             << std::endl;
          for (uint32_t i = 0; i < t.geometryCount; ++i) {
            ScopedOstream somember(os);
            os << "value: " << t.ppGeometries[i] << std::endl;
          }
        }
      }
    }
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  scratchData" << std::endl;
    // scratchData -> Field -> VkDeviceOrHostAddressKHR
    os << "members:" << std::endl << t.scratchData << std::endl;
  }

  return os;
}

std::ostream& operator<<(std::ostream& os,
                         const VkAccelerationStructureBuildRangeInfoKHR& t) {
  ScopedOstream sos(os);
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  primitiveCount" << std::endl;
    // primitiveCount -> Field -> uint32_t
    os << "value: " << t.primitiveCount << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  primitiveOffset" << std::endl;
    // primitiveOffset -> Field -> uint32_t
    os << "value: " << t.primitiveOffset << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  firstVertex" << std::endl;
    // firstVertex -> Field -> uint32_t
    os << "value: " << t.firstVertex << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  transformOffset" << std::endl;
    // transformOffset -> Field -> uint32_t
    os << "value: " << t.transformOffset << std::endl;
  }

  return os;
}

std::ostream& operator<<(std::ostream& os,
                         const VkAccelerationStructureCreateInfoKHR& t) {
  ScopedOstream sos(os);
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  sType" << std::endl;
    // sType -> Field -> VkStructureType
    os << "value: " << t.sType << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  pNext" << std::endl;
    // pNext -> Field -> ConstNextPtr(void)

    // pNext
    os << "value: ";
    PrintNextPtr(os, t.pNext);
    os << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  createFlags" << std::endl;
    // createFlags -> Field -> VkAccelerationStructureCreateFlagsKHR
    os << "value: " << t.createFlags << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  buffer" << std::endl;
    // buffer -> Field -> VkBuffer
    os << "value: " << t.buffer << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  offset" << std::endl;
    // offset -> Field -> VkDeviceSize
    os << "value: " << t.offset << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  size" << std::endl;
    // size -> Field -> VkDeviceSize
    os << "value: " << t.size << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  type" << std::endl;
    // type -> Field -> VkAccelerationStructureTypeKHR
    os << "value: " << t.type << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  deviceAddress" << std::endl;
    // deviceAddress -> Field -> VkDeviceAddress
    os << "value: " << t.deviceAddress << std::endl;
  }

  return os;
}

std::ostream& operator<<(std::ostream& os, const VkAabbPositionsKHR& t) {
  ScopedOstream sos(os);
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  minX" << std::endl;
    // minX -> Field -> float
    os << "value: " << t.minX << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  minY" << std::endl;
    // minY -> Field -> float
    os << "value: " << t.minY << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  minZ" << std::endl;
    // minZ -> Field -> float
    os << "value: " << t.minZ << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  maxX" << std::endl;
    // maxX -> Field -> float
    os << "value: " << t.maxX << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  maxY" << std::endl;
    // maxY -> Field -> float
    os << "value: " << t.maxY << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  maxZ" << std::endl;
    // maxZ -> Field -> float
    os << "value: " << t.maxZ << std::endl;
  }

  return os;
}

std::ostream& operator<<(std::ostream& os, const VkTransformMatrixKHR& t) {
  ScopedOstream sos(os);
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  matrix" << std::endl;
    // matrix -> Field -> FixedArray(FixedArray(float))
    {
      if (3 == 0) {
        os << "value: nullptr" << std::endl;
      } else {
        os << "members:" << std::endl;
        {
          ScopedOstream soarray(os);
          os << "- # FixedArray(float)" << std::endl;
          for (uint32_t i = 0; i < 3; ++i) {
            ScopedOstream somember(os);
            os << "value: " << t.matrix[i] << std::endl;
          }
        }
      }
    }
  }

  return os;
}

std::ostream& operator<<(std::ostream& os,
                         const VkAccelerationStructureInstanceKHR& t) {
  ScopedOstream sos(os);
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  transform" << std::endl;
    // transform -> Field -> VkTransformMatrixKHR
    os << "members:" << std::endl << t.transform << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  instanceCustomIndex" << std::endl;
    // instanceCustomIndex -> Field -> uint32_t
    os << "value: " << t.instanceCustomIndex << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  mask" << std::endl;
    // mask -> Field -> uint32_t
    os << "value: " << t.mask << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  instanceShaderBindingTableRecordOffset" << std::endl;
    // instanceShaderBindingTableRecordOffset -> Field -> uint32_t
    os << "value: " << t.instanceShaderBindingTableRecordOffset << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  flags" << std::endl;
    // flags -> Field -> VkGeometryInstanceFlagsKHR
    os << "value: " << t.flags << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  accelerationStructureReference" << std::endl;
    // accelerationStructureReference -> Field -> uint64_t
    os << "value: " << t.accelerationStructureReference << std::endl;
  }

  return os;
}

std::ostream& operator<<(std::ostream& os,
                         const VkAccelerationStructureDeviceAddressInfoKHR& t) {
  ScopedOstream sos(os);
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  sType" << std::endl;
    // sType -> Field -> VkStructureType
    os << "value: " << t.sType << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  pNext" << std::endl;
    // pNext -> Field -> ConstNextPtr(void)

    // pNext
    os << "value: ";
    PrintNextPtr(os, t.pNext);
    os << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  accelerationStructure" << std::endl;
    // accelerationStructure -> Field -> VkAccelerationStructureKHR
    os << "value: " << t.accelerationStructure << std::endl;
  }

  return os;
}

std::ostream& operator<<(std::ostream& os,
                         const VkAccelerationStructureVersionInfoKHR& t) {
  ScopedOstream sos(os);
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  sType" << std::endl;
    // sType -> Field -> VkStructureType
    os << "value: " << t.sType << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  pNext" << std::endl;
    // pNext -> Field -> ConstNextPtr(void)

    // pNext
    os << "value: ";
    PrintNextPtr(os, t.pNext);
    os << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  pVersionData" << std::endl;
    // pVersionData -> Field -> ConstDynamicArray(uint8_t)
    {
      if (2 * VK_UUID_SIZE == 0) {
        os << "value: nullptr" << std::endl;
      } else {
        os << "members:" << std::endl;
        {
          ScopedOstream soarray(os);
          os << "- # uint8_t" << std::endl;
          for (uint32_t i = 0; i < 2 * VK_UUID_SIZE; ++i) {
            ScopedOstream somember(os);
            os << "value: " << t.pVersionData[i] << std::endl;
          }
        }
      }
    }
  }

  return os;
}

std::ostream& operator<<(std::ostream& os,
                         const VkCopyAccelerationStructureInfoKHR& t) {
  ScopedOstream sos(os);
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  sType" << std::endl;
    // sType -> Field -> VkStructureType
    os << "value: " << t.sType << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  pNext" << std::endl;
    // pNext -> Field -> ConstNextPtr(void)

    // pNext
    os << "value: ";
    PrintNextPtr(os, t.pNext);
    os << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  src" << std::endl;
    // src -> Field -> VkAccelerationStructureKHR
    os << "value: " << t.src << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  dst" << std::endl;
    // dst -> Field -> VkAccelerationStructureKHR
    os << "value: " << t.dst << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  mode" << std::endl;
    // mode -> Field -> VkCopyAccelerationStructureModeKHR
    os << "value: " << t.mode << std::endl;
  }

  return os;
}

std::ostream& operator<<(std::ostream& os,
                         const VkCopyAccelerationStructureToMemoryInfoKHR& t) {
  ScopedOstream sos(os);
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  sType" << std::endl;
    // sType -> Field -> VkStructureType
    os << "value: " << t.sType << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  pNext" << std::endl;
    // pNext -> Field -> ConstNextPtr(void)

    // pNext
    os << "value: ";
    PrintNextPtr(os, t.pNext);
    os << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  src" << std::endl;
    // src -> Field -> VkAccelerationStructureKHR
    os << "value: " << t.src << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  dst" << std::endl;
    // dst -> Field -> VkDeviceOrHostAddressKHR
    os << "members:" << std::endl << t.dst << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  mode" << std::endl;
    // mode -> Field -> VkCopyAccelerationStructureModeKHR
    os << "value: " << t.mode << std::endl;
  }

  return os;
}

std::ostream& operator<<(std::ostream& os,
                         const VkCopyMemoryToAccelerationStructureInfoKHR& t) {
  ScopedOstream sos(os);
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  sType" << std::endl;
    // sType -> Field -> VkStructureType
    os << "value: " << t.sType << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  pNext" << std::endl;
    // pNext -> Field -> ConstNextPtr(void)

    // pNext
    os << "value: ";
    PrintNextPtr(os, t.pNext);
    os << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  src" << std::endl;
    // src -> Field -> VkDeviceOrHostAddressConstKHR
    os << "members:" << std::endl << t.src << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  dst" << std::endl;
    // dst -> Field -> VkAccelerationStructureKHR
    os << "value: " << t.dst << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  mode" << std::endl;
    // mode -> Field -> VkCopyAccelerationStructureModeKHR
    os << "value: " << t.mode << std::endl;
  }

  return os;
}

std::ostream& operator<<(std::ostream& os,
                         const VkRayTracingPipelineInterfaceCreateInfoKHR& t) {
  ScopedOstream sos(os);
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  sType" << std::endl;
    // sType -> Field -> VkStructureType
    os << "value: " << t.sType << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  pNext" << std::endl;
    // pNext -> Field -> ConstNextPtr(void)

    // pNext
    os << "value: ";
    PrintNextPtr(os, t.pNext);
    os << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  maxPipelineRayPayloadSize" << std::endl;
    // maxPipelineRayPayloadSize -> Field -> uint32_t
    os << "value: " << t.maxPipelineRayPayloadSize << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  maxPipelineRayHitAttributeSize" << std::endl;
    // maxPipelineRayHitAttributeSize -> Field -> uint32_t
    os << "value: " << t.maxPipelineRayHitAttributeSize << std::endl;
  }

  return os;
}

std::ostream& operator<<(std::ostream& os,
                         const VkPipelineLibraryCreateInfoKHR& t) {
  ScopedOstream sos(os);
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  sType" << std::endl;
    // sType -> Field -> VkStructureType
    os << "value: " << t.sType << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  pNext" << std::endl;
    // pNext -> Field -> ConstNextPtr(void)

    // pNext
    os << "value: ";
    PrintNextPtr(os, t.pNext);
    os << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  libraryCount" << std::endl;
    // libraryCount -> Field -> uint32_t
    os << "value: " << t.libraryCount << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  pLibraries" << std::endl;
    // pLibraries -> Field -> ConstDynamicArray(VkPipeline)
    {
      if (t.libraryCount == 0) {
        os << "value: nullptr" << std::endl;
      } else {
        os << "members:" << std::endl;
        {
          ScopedOstream soarray(os);
          os << "- # VkPipeline" << std::endl;
          for (uint32_t i = 0; i < t.libraryCount; ++i) {
            ScopedOstream somember(os);
            os << "value: " << t.pLibraries[i] << std::endl;
          }
        }
      }
    }
  }

  return os;
}

std::ostream& operator<<(
    std::ostream& os,
    const VkPhysicalDeviceExtendedDynamicStateFeaturesEXT& t) {
  ScopedOstream sos(os);
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  sType" << std::endl;
    // sType -> Field -> VkStructureType
    os << "value: " << t.sType << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  pNext" << std::endl;
    // pNext -> Field -> NextPtr(void)

    // pNext
    os << "value: ";
    PrintNextPtr(os, t.pNext);
    os << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  extendedDynamicState" << std::endl;
    // extendedDynamicState -> Field -> VkBool32
    os << "value: " << t.extendedDynamicState << std::endl;
  }

  return os;
}

std::ostream& operator<<(
    std::ostream& os,
    const VkPhysicalDeviceExtendedDynamicState2FeaturesEXT& t) {
  ScopedOstream sos(os);
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  sType" << std::endl;
    // sType -> Field -> VkStructureType
    os << "value: " << t.sType << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  pNext" << std::endl;
    // pNext -> Field -> NextPtr(void)

    // pNext
    os << "value: ";
    PrintNextPtr(os, t.pNext);
    os << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  extendedDynamicState2" << std::endl;
    // extendedDynamicState2 -> Field -> VkBool32
    os << "value: " << t.extendedDynamicState2 << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  extendedDynamicState2LogicOp" << std::endl;
    // extendedDynamicState2LogicOp -> Field -> VkBool32
    os << "value: " << t.extendedDynamicState2LogicOp << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  extendedDynamicState2PatchControlPoints" << std::endl;
    // extendedDynamicState2PatchControlPoints -> Field -> VkBool32
    os << "value: " << t.extendedDynamicState2PatchControlPoints << std::endl;
  }

  return os;
}

std::ostream& operator<<(
    std::ostream& os,
    const VkPhysicalDeviceZeroInitializeWorkgroupMemoryFeaturesKHR& t) {
  ScopedOstream sos(os);
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  sType" << std::endl;
    // sType -> Field -> VkStructureType
    os << "value: " << t.sType << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  pNext" << std::endl;
    // pNext -> Field -> NextPtr(void)

    // pNext
    os << "value: ";
    PrintNextPtr(os, t.pNext);
    os << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  shaderZeroInitializeWorkgroupMemory" << std::endl;
    // shaderZeroInitializeWorkgroupMemory -> Field -> VkBool32
    os << "value: " << t.shaderZeroInitializeWorkgroupMemory << std::endl;
  }

  return os;
}

std::ostream& operator<<(
    std::ostream& os,
    const VkPhysicalDeviceShaderSubgroupUniformControlFlowFeaturesKHR& t) {
  ScopedOstream sos(os);
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  sType" << std::endl;
    // sType -> Field -> VkStructureType
    os << "value: " << t.sType << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  pNext" << std::endl;
    // pNext -> Field -> NextPtr(void)

    // pNext
    os << "value: ";
    PrintNextPtr(os, t.pNext);
    os << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  shaderSubgroupUniformControlFlow" << std::endl;
    // shaderSubgroupUniformControlFlow -> Field -> VkBool32
    os << "value: " << t.shaderSubgroupUniformControlFlow << std::endl;
  }

  return os;
}

std::ostream& operator<<(std::ostream& os,
                         const VkPhysicalDeviceRobustness2FeaturesEXT& t) {
  ScopedOstream sos(os);
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  sType" << std::endl;
    // sType -> Field -> VkStructureType
    os << "value: " << t.sType << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  pNext" << std::endl;
    // pNext -> Field -> NextPtr(void)

    // pNext
    os << "value: ";
    PrintNextPtr(os, t.pNext);
    os << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  robustBufferAccess2" << std::endl;
    // robustBufferAccess2 -> Field -> VkBool32
    os << "value: " << t.robustBufferAccess2 << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  robustImageAccess2" << std::endl;
    // robustImageAccess2 -> Field -> VkBool32
    os << "value: " << t.robustImageAccess2 << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  nullDescriptor" << std::endl;
    // nullDescriptor -> Field -> VkBool32
    os << "value: " << t.nullDescriptor << std::endl;
  }

  return os;
}

std::ostream& operator<<(std::ostream& os,
                         const VkPhysicalDeviceRobustness2PropertiesEXT& t) {
  ScopedOstream sos(os);
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  sType" << std::endl;
    // sType -> Field -> VkStructureType
    os << "value: " << t.sType << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  pNext" << std::endl;
    // pNext -> Field -> NextPtr(void)

    // pNext
    os << "value: ";
    PrintNextPtr(os, t.pNext);
    os << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  robustStorageBufferAccessSizeAlignment" << std::endl;
    // robustStorageBufferAccessSizeAlignment -> Field -> VkDeviceSize
    os << "value: " << t.robustStorageBufferAccessSizeAlignment << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  robustUniformBufferAccessSizeAlignment" << std::endl;
    // robustUniformBufferAccessSizeAlignment -> Field -> VkDeviceSize
    os << "value: " << t.robustUniformBufferAccessSizeAlignment << std::endl;
  }

  return os;
}

std::ostream& operator<<(std::ostream& os,
                         const VkPhysicalDeviceImageRobustnessFeaturesEXT& t) {
  ScopedOstream sos(os);
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  sType" << std::endl;
    // sType -> Field -> VkStructureType
    os << "value: " << t.sType << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  pNext" << std::endl;
    // pNext -> Field -> NextPtr(void)

    // pNext
    os << "value: ";
    PrintNextPtr(os, t.pNext);
    os << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  robustImageAccess" << std::endl;
    // robustImageAccess -> Field -> VkBool32
    os << "value: " << t.robustImageAccess << std::endl;
  }

  return os;
}

std::ostream& operator<<(
    std::ostream& os,
    const VkPhysicalDeviceWorkgroupMemoryExplicitLayoutFeaturesKHR& t) {
  ScopedOstream sos(os);
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  sType" << std::endl;
    // sType -> Field -> VkStructureType
    os << "value: " << t.sType << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  pNext" << std::endl;
    // pNext -> Field -> NextPtr(void)

    // pNext
    os << "value: ";
    PrintNextPtr(os, t.pNext);
    os << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  workgroupMemoryExplicitLayout" << std::endl;
    // workgroupMemoryExplicitLayout -> Field -> VkBool32
    os << "value: " << t.workgroupMemoryExplicitLayout << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  workgroupMemoryExplicitLayoutScalarBlockLayout" << std::endl;
    // workgroupMemoryExplicitLayoutScalarBlockLayout -> Field -> VkBool32
    os << "value: " << t.workgroupMemoryExplicitLayoutScalarBlockLayout
       << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  workgroupMemoryExplicitLayout8BitAccess" << std::endl;
    // workgroupMemoryExplicitLayout8BitAccess -> Field -> VkBool32
    os << "value: " << t.workgroupMemoryExplicitLayout8BitAccess << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  workgroupMemoryExplicitLayout16BitAccess" << std::endl;
    // workgroupMemoryExplicitLayout16BitAccess -> Field -> VkBool32
    os << "value: " << t.workgroupMemoryExplicitLayout16BitAccess << std::endl;
  }

  return os;
}

std::ostream& operator<<(std::ostream& os,
                         const VkPhysicalDevice4444FormatsFeaturesEXT& t) {
  ScopedOstream sos(os);
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  sType" << std::endl;
    // sType -> Field -> VkStructureType
    os << "value: " << t.sType << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  pNext" << std::endl;
    // pNext -> Field -> NextPtr(void)

    // pNext
    os << "value: ";
    PrintNextPtr(os, t.pNext);
    os << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  formatA4R4G4B4" << std::endl;
    // formatA4R4G4B4 -> Field -> VkBool32
    os << "value: " << t.formatA4R4G4B4 << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  formatA4B4G4R4" << std::endl;
    // formatA4B4G4R4 -> Field -> VkBool32
    os << "value: " << t.formatA4B4G4R4 << std::endl;
  }

  return os;
}

std::ostream& operator<<(std::ostream& os, const VkBufferCopy2KHR& t) {
  ScopedOstream sos(os);
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  sType" << std::endl;
    // sType -> Field -> VkStructureType
    os << "value: " << t.sType << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  pNext" << std::endl;
    // pNext -> Field -> ConstNextPtr(void)

    // pNext
    os << "value: ";
    PrintNextPtr(os, t.pNext);
    os << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  srcOffset" << std::endl;
    // srcOffset -> Field -> VkDeviceSize
    os << "value: " << t.srcOffset << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  dstOffset" << std::endl;
    // dstOffset -> Field -> VkDeviceSize
    os << "value: " << t.dstOffset << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  size" << std::endl;
    // size -> Field -> VkDeviceSize
    os << "value: " << t.size << std::endl;
  }

  return os;
}

std::ostream& operator<<(std::ostream& os, const VkImageCopy2KHR& t) {
  ScopedOstream sos(os);
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  sType" << std::endl;
    // sType -> Field -> VkStructureType
    os << "value: " << t.sType << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  pNext" << std::endl;
    // pNext -> Field -> ConstNextPtr(void)

    // pNext
    os << "value: ";
    PrintNextPtr(os, t.pNext);
    os << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  srcSubresource" << std::endl;
    // srcSubresource -> Field -> VkImageSubresourceLayers
    os << "members:" << std::endl << t.srcSubresource << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  srcOffset" << std::endl;
    // srcOffset -> Field -> VkOffset3D
    os << "members:" << std::endl << t.srcOffset << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  dstSubresource" << std::endl;
    // dstSubresource -> Field -> VkImageSubresourceLayers
    os << "members:" << std::endl << t.dstSubresource << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  dstOffset" << std::endl;
    // dstOffset -> Field -> VkOffset3D
    os << "members:" << std::endl << t.dstOffset << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  extent" << std::endl;
    // extent -> Field -> VkExtent3D
    os << "members:" << std::endl << t.extent << std::endl;
  }

  return os;
}

std::ostream& operator<<(std::ostream& os, const VkImageBlit2KHR& t) {
  ScopedOstream sos(os);
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  sType" << std::endl;
    // sType -> Field -> VkStructureType
    os << "value: " << t.sType << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  pNext" << std::endl;
    // pNext -> Field -> ConstNextPtr(void)

    // pNext
    os << "value: ";
    PrintNextPtr(os, t.pNext);
    os << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  srcSubresource" << std::endl;
    // srcSubresource -> Field -> VkImageSubresourceLayers
    os << "members:" << std::endl << t.srcSubresource << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  srcOffsets" << std::endl;
    // srcOffsets -> Field -> FixedArray(VkOffset3D)
    {
      if (2 == 0) {
        os << "value: nullptr" << std::endl;
      } else {
        os << "members:" << std::endl;
        {
          ScopedOstream soarray(os);
          os << "- # VkOffset3D" << std::endl;
          for (uint32_t i = 0; i < 2; ++i) {
            ScopedOstream somember(os);
            os << "members:" << std::endl << t.srcOffsets[i] << std::endl;
          }
        }
      }
    }
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  dstSubresource" << std::endl;
    // dstSubresource -> Field -> VkImageSubresourceLayers
    os << "members:" << std::endl << t.dstSubresource << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  dstOffsets" << std::endl;
    // dstOffsets -> Field -> FixedArray(VkOffset3D)
    {
      if (2 == 0) {
        os << "value: nullptr" << std::endl;
      } else {
        os << "members:" << std::endl;
        {
          ScopedOstream soarray(os);
          os << "- # VkOffset3D" << std::endl;
          for (uint32_t i = 0; i < 2; ++i) {
            ScopedOstream somember(os);
            os << "members:" << std::endl << t.dstOffsets[i] << std::endl;
          }
        }
      }
    }
  }

  return os;
}

std::ostream& operator<<(std::ostream& os, const VkBufferImageCopy2KHR& t) {
  ScopedOstream sos(os);
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  sType" << std::endl;
    // sType -> Field -> VkStructureType
    os << "value: " << t.sType << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  pNext" << std::endl;
    // pNext -> Field -> ConstNextPtr(void)

    // pNext
    os << "value: ";
    PrintNextPtr(os, t.pNext);
    os << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  bufferOffset" << std::endl;
    // bufferOffset -> Field -> VkDeviceSize
    os << "value: " << t.bufferOffset << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  bufferRowLength" << std::endl;
    // bufferRowLength -> Field -> uint32_t
    os << "value: " << t.bufferRowLength << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  bufferImageHeight" << std::endl;
    // bufferImageHeight -> Field -> uint32_t
    os << "value: " << t.bufferImageHeight << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  imageSubresource" << std::endl;
    // imageSubresource -> Field -> VkImageSubresourceLayers
    os << "members:" << std::endl << t.imageSubresource << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  imageOffset" << std::endl;
    // imageOffset -> Field -> VkOffset3D
    os << "members:" << std::endl << t.imageOffset << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  imageExtent" << std::endl;
    // imageExtent -> Field -> VkExtent3D
    os << "members:" << std::endl << t.imageExtent << std::endl;
  }

  return os;
}

std::ostream& operator<<(std::ostream& os, const VkImageResolve2KHR& t) {
  ScopedOstream sos(os);
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  sType" << std::endl;
    // sType -> Field -> VkStructureType
    os << "value: " << t.sType << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  pNext" << std::endl;
    // pNext -> Field -> ConstNextPtr(void)

    // pNext
    os << "value: ";
    PrintNextPtr(os, t.pNext);
    os << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  srcSubresource" << std::endl;
    // srcSubresource -> Field -> VkImageSubresourceLayers
    os << "members:" << std::endl << t.srcSubresource << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  srcOffset" << std::endl;
    // srcOffset -> Field -> VkOffset3D
    os << "members:" << std::endl << t.srcOffset << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  dstSubresource" << std::endl;
    // dstSubresource -> Field -> VkImageSubresourceLayers
    os << "members:" << std::endl << t.dstSubresource << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  dstOffset" << std::endl;
    // dstOffset -> Field -> VkOffset3D
    os << "members:" << std::endl << t.dstOffset << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  extent" << std::endl;
    // extent -> Field -> VkExtent3D
    os << "members:" << std::endl << t.extent << std::endl;
  }

  return os;
}

std::ostream& operator<<(std::ostream& os, const VkCopyBufferInfo2KHR& t) {
  ScopedOstream sos(os);
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  sType" << std::endl;
    // sType -> Field -> VkStructureType
    os << "value: " << t.sType << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  pNext" << std::endl;
    // pNext -> Field -> ConstNextPtr(void)

    // pNext
    os << "value: ";
    PrintNextPtr(os, t.pNext);
    os << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  srcBuffer" << std::endl;
    // srcBuffer -> Field -> VkBuffer
    os << "value: " << t.srcBuffer << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  dstBuffer" << std::endl;
    // dstBuffer -> Field -> VkBuffer
    os << "value: " << t.dstBuffer << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  regionCount" << std::endl;
    // regionCount -> Field -> uint32_t
    os << "value: " << t.regionCount << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  pRegions" << std::endl;
    // pRegions -> Field -> ConstDynamicArray(VkBufferCopy2KHR)
    {
      if (t.regionCount == 0) {
        os << "value: nullptr" << std::endl;
      } else {
        os << "members:" << std::endl;
        {
          ScopedOstream soarray(os);
          os << "- # VkBufferCopy2KHR" << std::endl;
          for (uint32_t i = 0; i < t.regionCount; ++i) {
            ScopedOstream somember(os);
            os << "members:" << std::endl << t.pRegions[i] << std::endl;
          }
        }
      }
    }
  }

  return os;
}

std::ostream& operator<<(std::ostream& os, const VkCopyImageInfo2KHR& t) {
  ScopedOstream sos(os);
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  sType" << std::endl;
    // sType -> Field -> VkStructureType
    os << "value: " << t.sType << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  pNext" << std::endl;
    // pNext -> Field -> ConstNextPtr(void)

    // pNext
    os << "value: ";
    PrintNextPtr(os, t.pNext);
    os << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  srcImage" << std::endl;
    // srcImage -> Field -> VkImage
    os << "value: " << t.srcImage << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  srcImageLayout" << std::endl;
    // srcImageLayout -> Field -> VkImageLayout
    os << "value: " << t.srcImageLayout << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  dstImage" << std::endl;
    // dstImage -> Field -> VkImage
    os << "value: " << t.dstImage << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  dstImageLayout" << std::endl;
    // dstImageLayout -> Field -> VkImageLayout
    os << "value: " << t.dstImageLayout << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  regionCount" << std::endl;
    // regionCount -> Field -> uint32_t
    os << "value: " << t.regionCount << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  pRegions" << std::endl;
    // pRegions -> Field -> ConstDynamicArray(VkImageCopy2KHR)
    {
      if (t.regionCount == 0) {
        os << "value: nullptr" << std::endl;
      } else {
        os << "members:" << std::endl;
        {
          ScopedOstream soarray(os);
          os << "- # VkImageCopy2KHR" << std::endl;
          for (uint32_t i = 0; i < t.regionCount; ++i) {
            ScopedOstream somember(os);
            os << "members:" << std::endl << t.pRegions[i] << std::endl;
          }
        }
      }
    }
  }

  return os;
}

std::ostream& operator<<(std::ostream& os, const VkBlitImageInfo2KHR& t) {
  ScopedOstream sos(os);
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  sType" << std::endl;
    // sType -> Field -> VkStructureType
    os << "value: " << t.sType << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  pNext" << std::endl;
    // pNext -> Field -> ConstNextPtr(void)

    // pNext
    os << "value: ";
    PrintNextPtr(os, t.pNext);
    os << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  srcImage" << std::endl;
    // srcImage -> Field -> VkImage
    os << "value: " << t.srcImage << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  srcImageLayout" << std::endl;
    // srcImageLayout -> Field -> VkImageLayout
    os << "value: " << t.srcImageLayout << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  dstImage" << std::endl;
    // dstImage -> Field -> VkImage
    os << "value: " << t.dstImage << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  dstImageLayout" << std::endl;
    // dstImageLayout -> Field -> VkImageLayout
    os << "value: " << t.dstImageLayout << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  regionCount" << std::endl;
    // regionCount -> Field -> uint32_t
    os << "value: " << t.regionCount << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  pRegions" << std::endl;
    // pRegions -> Field -> ConstDynamicArray(VkImageBlit2KHR)
    {
      if (t.regionCount == 0) {
        os << "value: nullptr" << std::endl;
      } else {
        os << "members:" << std::endl;
        {
          ScopedOstream soarray(os);
          os << "- # VkImageBlit2KHR" << std::endl;
          for (uint32_t i = 0; i < t.regionCount; ++i) {
            ScopedOstream somember(os);
            os << "members:" << std::endl << t.pRegions[i] << std::endl;
          }
        }
      }
    }
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  filter" << std::endl;
    // filter -> Field -> VkFilter
    os << "value: " << t.filter << std::endl;
  }

  return os;
}

std::ostream& operator<<(std::ostream& os,
                         const VkCopyBufferToImageInfo2KHR& t) {
  ScopedOstream sos(os);
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  sType" << std::endl;
    // sType -> Field -> VkStructureType
    os << "value: " << t.sType << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  pNext" << std::endl;
    // pNext -> Field -> ConstNextPtr(void)

    // pNext
    os << "value: ";
    PrintNextPtr(os, t.pNext);
    os << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  srcBuffer" << std::endl;
    // srcBuffer -> Field -> VkBuffer
    os << "value: " << t.srcBuffer << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  dstImage" << std::endl;
    // dstImage -> Field -> VkImage
    os << "value: " << t.dstImage << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  dstImageLayout" << std::endl;
    // dstImageLayout -> Field -> VkImageLayout
    os << "value: " << t.dstImageLayout << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  regionCount" << std::endl;
    // regionCount -> Field -> uint32_t
    os << "value: " << t.regionCount << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  pRegions" << std::endl;
    // pRegions -> Field -> ConstDynamicArray(VkBufferImageCopy2KHR)
    {
      if (t.regionCount == 0) {
        os << "value: nullptr" << std::endl;
      } else {
        os << "members:" << std::endl;
        {
          ScopedOstream soarray(os);
          os << "- # VkBufferImageCopy2KHR" << std::endl;
          for (uint32_t i = 0; i < t.regionCount; ++i) {
            ScopedOstream somember(os);
            os << "members:" << std::endl << t.pRegions[i] << std::endl;
          }
        }
      }
    }
  }

  return os;
}

std::ostream& operator<<(std::ostream& os,
                         const VkCopyImageToBufferInfo2KHR& t) {
  ScopedOstream sos(os);
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  sType" << std::endl;
    // sType -> Field -> VkStructureType
    os << "value: " << t.sType << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  pNext" << std::endl;
    // pNext -> Field -> ConstNextPtr(void)

    // pNext
    os << "value: ";
    PrintNextPtr(os, t.pNext);
    os << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  srcImage" << std::endl;
    // srcImage -> Field -> VkImage
    os << "value: " << t.srcImage << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  srcImageLayout" << std::endl;
    // srcImageLayout -> Field -> VkImageLayout
    os << "value: " << t.srcImageLayout << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  dstBuffer" << std::endl;
    // dstBuffer -> Field -> VkBuffer
    os << "value: " << t.dstBuffer << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  regionCount" << std::endl;
    // regionCount -> Field -> uint32_t
    os << "value: " << t.regionCount << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  pRegions" << std::endl;
    // pRegions -> Field -> ConstDynamicArray(VkBufferImageCopy2KHR)
    {
      if (t.regionCount == 0) {
        os << "value: nullptr" << std::endl;
      } else {
        os << "members:" << std::endl;
        {
          ScopedOstream soarray(os);
          os << "- # VkBufferImageCopy2KHR" << std::endl;
          for (uint32_t i = 0; i < t.regionCount; ++i) {
            ScopedOstream somember(os);
            os << "members:" << std::endl << t.pRegions[i] << std::endl;
          }
        }
      }
    }
  }

  return os;
}

std::ostream& operator<<(std::ostream& os, const VkResolveImageInfo2KHR& t) {
  ScopedOstream sos(os);
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  sType" << std::endl;
    // sType -> Field -> VkStructureType
    os << "value: " << t.sType << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  pNext" << std::endl;
    // pNext -> Field -> ConstNextPtr(void)

    // pNext
    os << "value: ";
    PrintNextPtr(os, t.pNext);
    os << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  srcImage" << std::endl;
    // srcImage -> Field -> VkImage
    os << "value: " << t.srcImage << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  srcImageLayout" << std::endl;
    // srcImageLayout -> Field -> VkImageLayout
    os << "value: " << t.srcImageLayout << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  dstImage" << std::endl;
    // dstImage -> Field -> VkImage
    os << "value: " << t.dstImage << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  dstImageLayout" << std::endl;
    // dstImageLayout -> Field -> VkImageLayout
    os << "value: " << t.dstImageLayout << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  regionCount" << std::endl;
    // regionCount -> Field -> uint32_t
    os << "value: " << t.regionCount << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  pRegions" << std::endl;
    // pRegions -> Field -> ConstDynamicArray(VkImageResolve2KHR)
    {
      if (t.regionCount == 0) {
        os << "value: nullptr" << std::endl;
      } else {
        os << "members:" << std::endl;
        {
          ScopedOstream soarray(os);
          os << "- # VkImageResolve2KHR" << std::endl;
          for (uint32_t i = 0; i < t.regionCount; ++i) {
            ScopedOstream somember(os);
            os << "members:" << std::endl << t.pRegions[i] << std::endl;
          }
        }
      }
    }
  }

  return os;
}

std::ostream& operator<<(
    std::ostream& os,
    const VkPhysicalDeviceShaderImageAtomicInt64FeaturesEXT& t) {
  ScopedOstream sos(os);
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  sType" << std::endl;
    // sType -> Field -> VkStructureType
    os << "value: " << t.sType << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  pNext" << std::endl;
    // pNext -> Field -> NextPtr(void)

    // pNext
    os << "value: ";
    PrintNextPtr(os, t.pNext);
    os << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  shaderImageInt64Atomics" << std::endl;
    // shaderImageInt64Atomics -> Field -> VkBool32
    os << "value: " << t.shaderImageInt64Atomics << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  sparseImageInt64Atomics" << std::endl;
    // sparseImageInt64Atomics -> Field -> VkBool32
    os << "value: " << t.sparseImageInt64Atomics << std::endl;
  }

  return os;
}

std::ostream& operator<<(std::ostream& os,
                         const VkFragmentShadingRateAttachmentInfoKHR& t) {
  ScopedOstream sos(os);
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  sType" << std::endl;
    // sType -> Field -> VkStructureType
    os << "value: " << t.sType << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  pNext" << std::endl;
    // pNext -> Field -> ConstNextPtr(void)

    // pNext
    os << "value: ";
    PrintNextPtr(os, t.pNext);
    os << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  pFragmentShadingRateAttachment" << std::endl;
    // pFragmentShadingRateAttachment -> Field ->
    // ConstPointer(VkAttachmentReference2) pointer
    if (t.pFragmentShadingRateAttachment) {
      os << "members:" << std::endl
         << *t.pFragmentShadingRateAttachment << std::endl;
    } else {
      os << "value: nullptr" << std::endl;
    }
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  shadingRateAttachmentTexelSize" << std::endl;
    // shadingRateAttachmentTexelSize -> Field -> VkExtent2D
    os << "members:" << std::endl
       << t.shadingRateAttachmentTexelSize << std::endl;
  }

  return os;
}

std::ostream& operator<<(
    std::ostream& os,
    const VkPipelineFragmentShadingRateStateCreateInfoKHR& t) {
  ScopedOstream sos(os);
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  sType" << std::endl;
    // sType -> Field -> VkStructureType
    os << "value: " << t.sType << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  pNext" << std::endl;
    // pNext -> Field -> ConstNextPtr(void)

    // pNext
    os << "value: ";
    PrintNextPtr(os, t.pNext);
    os << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  fragmentSize" << std::endl;
    // fragmentSize -> Field -> VkExtent2D
    os << "members:" << std::endl << t.fragmentSize << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  combinerOps" << std::endl;
    // combinerOps -> Field -> FixedArray(VkFragmentShadingRateCombinerOpKHR)
    {
      if (2 == 0) {
        os << "value: nullptr" << std::endl;
      } else {
        os << "members:" << std::endl;
        {
          ScopedOstream soarray(os);
          os << "- # VkFragmentShadingRateCombinerOpKHR" << std::endl;
          for (uint32_t i = 0; i < 2; ++i) {
            ScopedOstream somember(os);
            os << "value: " << t.combinerOps[i] << std::endl;
          }
        }
      }
    }
  }

  return os;
}

std::ostream& operator<<(
    std::ostream& os, const VkPhysicalDeviceFragmentShadingRateFeaturesKHR& t) {
  ScopedOstream sos(os);
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  sType" << std::endl;
    // sType -> Field -> VkStructureType
    os << "value: " << t.sType << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  pNext" << std::endl;
    // pNext -> Field -> NextPtr(void)

    // pNext
    os << "value: ";
    PrintNextPtr(os, t.pNext);
    os << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  pipelineFragmentShadingRate" << std::endl;
    // pipelineFragmentShadingRate -> Field -> VkBool32
    os << "value: " << t.pipelineFragmentShadingRate << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  primitiveFragmentShadingRate" << std::endl;
    // primitiveFragmentShadingRate -> Field -> VkBool32
    os << "value: " << t.primitiveFragmentShadingRate << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  attachmentFragmentShadingRate" << std::endl;
    // attachmentFragmentShadingRate -> Field -> VkBool32
    os << "value: " << t.attachmentFragmentShadingRate << std::endl;
  }

  return os;
}

std::ostream& operator<<(
    std::ostream& os,
    const VkPhysicalDeviceFragmentShadingRatePropertiesKHR& t) {
  ScopedOstream sos(os);
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  sType" << std::endl;
    // sType -> Field -> VkStructureType
    os << "value: " << t.sType << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  pNext" << std::endl;
    // pNext -> Field -> NextPtr(void)

    // pNext
    os << "value: ";
    PrintNextPtr(os, t.pNext);
    os << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  minFragmentShadingRateAttachmentTexelSize" << std::endl;
    // minFragmentShadingRateAttachmentTexelSize -> Field -> VkExtent2D
    os << "members:" << std::endl
       << t.minFragmentShadingRateAttachmentTexelSize << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  maxFragmentShadingRateAttachmentTexelSize" << std::endl;
    // maxFragmentShadingRateAttachmentTexelSize -> Field -> VkExtent2D
    os << "members:" << std::endl
       << t.maxFragmentShadingRateAttachmentTexelSize << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  maxFragmentShadingRateAttachmentTexelSizeAspectRatio"
       << std::endl;
    // maxFragmentShadingRateAttachmentTexelSizeAspectRatio -> Field -> uint32_t
    os << "value: " << t.maxFragmentShadingRateAttachmentTexelSizeAspectRatio
       << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  primitiveFragmentShadingRateWithMultipleViewports"
       << std::endl;
    // primitiveFragmentShadingRateWithMultipleViewports -> Field -> VkBool32
    os << "value: " << t.primitiveFragmentShadingRateWithMultipleViewports
       << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  layeredShadingRateAttachments" << std::endl;
    // layeredShadingRateAttachments -> Field -> VkBool32
    os << "value: " << t.layeredShadingRateAttachments << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  fragmentShadingRateNonTrivialCombinerOps" << std::endl;
    // fragmentShadingRateNonTrivialCombinerOps -> Field -> VkBool32
    os << "value: " << t.fragmentShadingRateNonTrivialCombinerOps << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  maxFragmentSize" << std::endl;
    // maxFragmentSize -> Field -> VkExtent2D
    os << "members:" << std::endl << t.maxFragmentSize << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  maxFragmentSizeAspectRatio" << std::endl;
    // maxFragmentSizeAspectRatio -> Field -> uint32_t
    os << "value: " << t.maxFragmentSizeAspectRatio << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  maxFragmentShadingRateCoverageSamples" << std::endl;
    // maxFragmentShadingRateCoverageSamples -> Field -> uint32_t
    os << "value: " << t.maxFragmentShadingRateCoverageSamples << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  maxFragmentShadingRateRasterizationSamples" << std::endl;
    // maxFragmentShadingRateRasterizationSamples -> Field ->
    // VkSampleCountFlagBits
    os << "value: " << t.maxFragmentShadingRateRasterizationSamples
       << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  fragmentShadingRateWithShaderDepthStencilWrites" << std::endl;
    // fragmentShadingRateWithShaderDepthStencilWrites -> Field -> VkBool32
    os << "value: " << t.fragmentShadingRateWithShaderDepthStencilWrites
       << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  fragmentShadingRateWithSampleMask" << std::endl;
    // fragmentShadingRateWithSampleMask -> Field -> VkBool32
    os << "value: " << t.fragmentShadingRateWithSampleMask << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  fragmentShadingRateWithShaderSampleMask" << std::endl;
    // fragmentShadingRateWithShaderSampleMask -> Field -> VkBool32
    os << "value: " << t.fragmentShadingRateWithShaderSampleMask << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  fragmentShadingRateWithConservativeRasterization"
       << std::endl;
    // fragmentShadingRateWithConservativeRasterization -> Field -> VkBool32
    os << "value: " << t.fragmentShadingRateWithConservativeRasterization
       << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  fragmentShadingRateWithFragmentShaderInterlock" << std::endl;
    // fragmentShadingRateWithFragmentShaderInterlock -> Field -> VkBool32
    os << "value: " << t.fragmentShadingRateWithFragmentShaderInterlock
       << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  fragmentShadingRateWithCustomSampleLocations" << std::endl;
    // fragmentShadingRateWithCustomSampleLocations -> Field -> VkBool32
    os << "value: " << t.fragmentShadingRateWithCustomSampleLocations
       << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  fragmentShadingRateStrictMultiplyCombiner" << std::endl;
    // fragmentShadingRateStrictMultiplyCombiner -> Field -> VkBool32
    os << "value: " << t.fragmentShadingRateStrictMultiplyCombiner << std::endl;
  }

  return os;
}

std::ostream& operator<<(std::ostream& os,
                         const VkPhysicalDeviceFragmentShadingRateKHR& t) {
  ScopedOstream sos(os);
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  sType" << std::endl;
    // sType -> Field -> VkStructureType
    os << "value: " << t.sType << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  pNext" << std::endl;
    // pNext -> Field -> NextPtr(void)

    // pNext
    os << "value: ";
    PrintNextPtr(os, t.pNext);
    os << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  sampleCounts" << std::endl;
    // sampleCounts -> Field -> VkSampleCountFlags
    os << "value: " << t.sampleCounts << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  fragmentSize" << std::endl;
    // fragmentSize -> Field -> VkExtent2D
    os << "members:" << std::endl << t.fragmentSize << std::endl;
  }

  return os;
}

std::ostream& operator<<(
    std::ostream& os,
    const VkPhysicalDeviceShaderTerminateInvocationFeaturesKHR& t) {
  ScopedOstream sos(os);
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  sType" << std::endl;
    // sType -> Field -> VkStructureType
    os << "value: " << t.sType << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  pNext" << std::endl;
    // pNext -> Field -> NextPtr(void)

    // pNext
    os << "value: ";
    PrintNextPtr(os, t.pNext);
    os << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  shaderTerminateInvocation" << std::endl;
    // shaderTerminateInvocation -> Field -> VkBool32
    os << "value: " << t.shaderTerminateInvocation << std::endl;
  }

  return os;
}

std::ostream& operator<<(std::ostream& os,
                         const VkAccelerationStructureBuildSizesInfoKHR& t) {
  ScopedOstream sos(os);
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  sType" << std::endl;
    // sType -> Field -> VkStructureType
    os << "value: " << t.sType << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  pNext" << std::endl;
    // pNext -> Field -> ConstNextPtr(void)

    // pNext
    os << "value: ";
    PrintNextPtr(os, t.pNext);
    os << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  accelerationStructureSize" << std::endl;
    // accelerationStructureSize -> Field -> VkDeviceSize
    os << "value: " << t.accelerationStructureSize << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  updateScratchSize" << std::endl;
    // updateScratchSize -> Field -> VkDeviceSize
    os << "value: " << t.updateScratchSize << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  buildScratchSize" << std::endl;
    // buildScratchSize -> Field -> VkDeviceSize
    os << "value: " << t.buildScratchSize << std::endl;
  }

  return os;
}

std::ostream& operator<<(
    std::ostream& os,
    const VkPhysicalDeviceVertexInputDynamicStateFeaturesEXT& t) {
  ScopedOstream sos(os);
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  sType" << std::endl;
    // sType -> Field -> VkStructureType
    os << "value: " << t.sType << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  pNext" << std::endl;
    // pNext -> Field -> NextPtr(void)

    // pNext
    os << "value: ";
    PrintNextPtr(os, t.pNext);
    os << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  vertexInputDynamicState" << std::endl;
    // vertexInputDynamicState -> Field -> VkBool32
    os << "value: " << t.vertexInputDynamicState << std::endl;
  }

  return os;
}

std::ostream& operator<<(std::ostream& os,
                         const VkVertexInputBindingDescription2EXT& t) {
  ScopedOstream sos(os);
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  sType" << std::endl;
    // sType -> Field -> VkStructureType
    os << "value: " << t.sType << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  pNext" << std::endl;
    // pNext -> Field -> NextPtr(void)

    // pNext
    os << "value: ";
    PrintNextPtr(os, t.pNext);
    os << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  binding" << std::endl;
    // binding -> Field -> uint32_t
    os << "value: " << t.binding << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  stride" << std::endl;
    // stride -> Field -> uint32_t
    os << "value: " << t.stride << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  inputRate" << std::endl;
    // inputRate -> Field -> VkVertexInputRate
    os << "value: " << t.inputRate << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  divisor" << std::endl;
    // divisor -> Field -> uint32_t
    os << "value: " << t.divisor << std::endl;
  }

  return os;
}

std::ostream& operator<<(std::ostream& os,
                         const VkVertexInputAttributeDescription2EXT& t) {
  ScopedOstream sos(os);
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  sType" << std::endl;
    // sType -> Field -> VkStructureType
    os << "value: " << t.sType << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  pNext" << std::endl;
    // pNext -> Field -> NextPtr(void)

    // pNext
    os << "value: ";
    PrintNextPtr(os, t.pNext);
    os << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  location" << std::endl;
    // location -> Field -> uint32_t
    os << "value: " << t.location << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  binding" << std::endl;
    // binding -> Field -> uint32_t
    os << "value: " << t.binding << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  format" << std::endl;
    // format -> Field -> VkFormat
    os << "value: " << t.format << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  offset" << std::endl;
    // offset -> Field -> uint32_t
    os << "value: " << t.offset << std::endl;
  }

  return os;
}

std::ostream& operator<<(std::ostream& os,
                         const VkPhysicalDeviceColorWriteEnableFeaturesEXT& t) {
  ScopedOstream sos(os);
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  sType" << std::endl;
    // sType -> Field -> VkStructureType
    os << "value: " << t.sType << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  pNext" << std::endl;
    // pNext -> Field -> NextPtr(void)

    // pNext
    os << "value: ";
    PrintNextPtr(os, t.pNext);
    os << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  colorWriteEnable" << std::endl;
    // colorWriteEnable -> Field -> VkBool32
    os << "value: " << t.colorWriteEnable << std::endl;
  }

  return os;
}

std::ostream& operator<<(std::ostream& os,
                         const VkPipelineColorWriteCreateInfoEXT& t) {
  ScopedOstream sos(os);
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  sType" << std::endl;
    // sType -> Field -> VkStructureType
    os << "value: " << t.sType << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  pNext" << std::endl;
    // pNext -> Field -> ConstNextPtr(void)

    // pNext
    os << "value: ";
    PrintNextPtr(os, t.pNext);
    os << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  attachmentCount" << std::endl;
    // attachmentCount -> Field -> uint32_t
    os << "value: " << t.attachmentCount << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  pColorWriteEnables" << std::endl;
    // pColorWriteEnables -> Field -> ConstDynamicArray(VkBool32)
    {
      if (t.attachmentCount == 0) {
        os << "value: nullptr" << std::endl;
      } else {
        os << "members:" << std::endl;
        {
          ScopedOstream soarray(os);
          os << "- # VkBool32" << std::endl;
          for (uint32_t i = 0; i < t.attachmentCount; ++i) {
            ScopedOstream somember(os);
            os << "value: " << t.pColorWriteEnables[i] << std::endl;
          }
        }
      }
    }
  }

  return os;
}

std::ostream& operator<<(std::ostream& os, const VkMemoryBarrier2KHR& t) {
  ScopedOstream sos(os);
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  sType" << std::endl;
    // sType -> Field -> VkStructureType
    os << "value: " << t.sType << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  pNext" << std::endl;
    // pNext -> Field -> ConstNextPtr(void)

    // pNext
    os << "value: ";
    PrintNextPtr(os, t.pNext);
    os << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  srcStageMask" << std::endl;
    // srcStageMask -> Field -> VkPipelineStageFlags2KHR
    os << "value: " << t.srcStageMask << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  srcAccessMask" << std::endl;
    // srcAccessMask -> Field -> VkAccessFlags2KHR
    os << "value: " << t.srcAccessMask << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  dstStageMask" << std::endl;
    // dstStageMask -> Field -> VkPipelineStageFlags2KHR
    os << "value: " << t.dstStageMask << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  dstAccessMask" << std::endl;
    // dstAccessMask -> Field -> VkAccessFlags2KHR
    os << "value: " << t.dstAccessMask << std::endl;
  }

  return os;
}

std::ostream& operator<<(std::ostream& os, const VkImageMemoryBarrier2KHR& t) {
  ScopedOstream sos(os);
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  sType" << std::endl;
    // sType -> Field -> VkStructureType
    os << "value: " << t.sType << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  pNext" << std::endl;
    // pNext -> Field -> ConstNextPtr(void)

    // pNext
    os << "value: ";
    PrintNextPtr(os, t.pNext);
    os << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  srcStageMask" << std::endl;
    // srcStageMask -> Field -> VkPipelineStageFlags2KHR
    os << "value: " << t.srcStageMask << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  srcAccessMask" << std::endl;
    // srcAccessMask -> Field -> VkAccessFlags2KHR
    os << "value: " << t.srcAccessMask << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  dstStageMask" << std::endl;
    // dstStageMask -> Field -> VkPipelineStageFlags2KHR
    os << "value: " << t.dstStageMask << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  dstAccessMask" << std::endl;
    // dstAccessMask -> Field -> VkAccessFlags2KHR
    os << "value: " << t.dstAccessMask << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  oldLayout" << std::endl;
    // oldLayout -> Field -> VkImageLayout
    os << "value: " << t.oldLayout << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  newLayout" << std::endl;
    // newLayout -> Field -> VkImageLayout
    os << "value: " << t.newLayout << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  srcQueueFamilyIndex" << std::endl;
    // srcQueueFamilyIndex -> Field -> uint32_t
    os << "value: " << t.srcQueueFamilyIndex << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  dstQueueFamilyIndex" << std::endl;
    // dstQueueFamilyIndex -> Field -> uint32_t
    os << "value: " << t.dstQueueFamilyIndex << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  image" << std::endl;
    // image -> Field -> VkImage
    os << "value: " << t.image << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  subresourceRange" << std::endl;
    // subresourceRange -> Field -> VkImageSubresourceRange
    os << "members:" << std::endl << t.subresourceRange << std::endl;
  }

  return os;
}

std::ostream& operator<<(std::ostream& os, const VkBufferMemoryBarrier2KHR& t) {
  ScopedOstream sos(os);
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  sType" << std::endl;
    // sType -> Field -> VkStructureType
    os << "value: " << t.sType << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  pNext" << std::endl;
    // pNext -> Field -> ConstNextPtr(void)

    // pNext
    os << "value: ";
    PrintNextPtr(os, t.pNext);
    os << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  srcStageMask" << std::endl;
    // srcStageMask -> Field -> VkPipelineStageFlags2KHR
    os << "value: " << t.srcStageMask << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  srcAccessMask" << std::endl;
    // srcAccessMask -> Field -> VkAccessFlags2KHR
    os << "value: " << t.srcAccessMask << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  dstStageMask" << std::endl;
    // dstStageMask -> Field -> VkPipelineStageFlags2KHR
    os << "value: " << t.dstStageMask << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  dstAccessMask" << std::endl;
    // dstAccessMask -> Field -> VkAccessFlags2KHR
    os << "value: " << t.dstAccessMask << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  srcQueueFamilyIndex" << std::endl;
    // srcQueueFamilyIndex -> Field -> uint32_t
    os << "value: " << t.srcQueueFamilyIndex << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  dstQueueFamilyIndex" << std::endl;
    // dstQueueFamilyIndex -> Field -> uint32_t
    os << "value: " << t.dstQueueFamilyIndex << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  buffer" << std::endl;
    // buffer -> Field -> VkBuffer
    os << "value: " << t.buffer << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  offset" << std::endl;
    // offset -> Field -> VkDeviceSize
    os << "value: " << t.offset << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  size" << std::endl;
    // size -> Field -> VkDeviceSize
    os << "value: " << t.size << std::endl;
  }

  return os;
}

std::ostream& operator<<(std::ostream& os, const VkDependencyInfoKHR& t) {
  ScopedOstream sos(os);
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  sType" << std::endl;
    // sType -> Field -> VkStructureType
    os << "value: " << t.sType << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  pNext" << std::endl;
    // pNext -> Field -> ConstNextPtr(void)

    // pNext
    os << "value: ";
    PrintNextPtr(os, t.pNext);
    os << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  dependencyFlags" << std::endl;
    // dependencyFlags -> Field -> VkDependencyFlags
    os << "value: " << t.dependencyFlags << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  memoryBarrierCount" << std::endl;
    // memoryBarrierCount -> Field -> uint32_t
    os << "value: " << t.memoryBarrierCount << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  pMemoryBarriers" << std::endl;
    // pMemoryBarriers -> Field -> ConstDynamicArray(VkMemoryBarrier2KHR)
    {
      if (t.memoryBarrierCount == 0) {
        os << "value: nullptr" << std::endl;
      } else {
        os << "members:" << std::endl;
        {
          ScopedOstream soarray(os);
          os << "- # VkMemoryBarrier2KHR" << std::endl;
          for (uint32_t i = 0; i < t.memoryBarrierCount; ++i) {
            ScopedOstream somember(os);
            os << "members:" << std::endl << t.pMemoryBarriers[i] << std::endl;
          }
        }
      }
    }
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  bufferMemoryBarrierCount" << std::endl;
    // bufferMemoryBarrierCount -> Field -> uint32_t
    os << "value: " << t.bufferMemoryBarrierCount << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  pBufferMemoryBarriers" << std::endl;
    // pBufferMemoryBarriers -> Field ->
    // ConstDynamicArray(VkBufferMemoryBarrier2KHR)
    {
      if (t.bufferMemoryBarrierCount == 0) {
        os << "value: nullptr" << std::endl;
      } else {
        os << "members:" << std::endl;
        {
          ScopedOstream soarray(os);
          os << "- # VkBufferMemoryBarrier2KHR" << std::endl;
          for (uint32_t i = 0; i < t.bufferMemoryBarrierCount; ++i) {
            ScopedOstream somember(os);
            os << "members:" << std::endl
               << t.pBufferMemoryBarriers[i] << std::endl;
          }
        }
      }
    }
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  imageMemoryBarrierCount" << std::endl;
    // imageMemoryBarrierCount -> Field -> uint32_t
    os << "value: " << t.imageMemoryBarrierCount << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  pImageMemoryBarriers" << std::endl;
    // pImageMemoryBarriers -> Field ->
    // ConstDynamicArray(VkImageMemoryBarrier2KHR)
    {
      if (t.imageMemoryBarrierCount == 0) {
        os << "value: nullptr" << std::endl;
      } else {
        os << "members:" << std::endl;
        {
          ScopedOstream soarray(os);
          os << "- # VkImageMemoryBarrier2KHR" << std::endl;
          for (uint32_t i = 0; i < t.imageMemoryBarrierCount; ++i) {
            ScopedOstream somember(os);
            os << "members:" << std::endl
               << t.pImageMemoryBarriers[i] << std::endl;
          }
        }
      }
    }
  }

  return os;
}

std::ostream& operator<<(std::ostream& os, const VkSemaphoreSubmitInfoKHR& t) {
  ScopedOstream sos(os);
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  sType" << std::endl;
    // sType -> Field -> VkStructureType
    os << "value: " << t.sType << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  pNext" << std::endl;
    // pNext -> Field -> ConstNextPtr(void)

    // pNext
    os << "value: ";
    PrintNextPtr(os, t.pNext);
    os << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  semaphore" << std::endl;
    // semaphore -> Field -> VkSemaphore
    os << "value: " << t.semaphore << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  value" << std::endl;
    // value -> Field -> uint64_t
    os << "value: " << t.value << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  stageMask" << std::endl;
    // stageMask -> Field -> VkPipelineStageFlags2KHR
    os << "value: " << t.stageMask << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  deviceIndex" << std::endl;
    // deviceIndex -> Field -> uint32_t
    os << "value: " << t.deviceIndex << std::endl;
  }

  return os;
}

std::ostream& operator<<(std::ostream& os,
                         const VkCommandBufferSubmitInfoKHR& t) {
  ScopedOstream sos(os);
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  sType" << std::endl;
    // sType -> Field -> VkStructureType
    os << "value: " << t.sType << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  pNext" << std::endl;
    // pNext -> Field -> ConstNextPtr(void)

    // pNext
    os << "value: ";
    PrintNextPtr(os, t.pNext);
    os << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  commandBuffer" << std::endl;
    // commandBuffer -> Field -> VkCommandBuffer
    os << "value: " << t.commandBuffer << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  deviceMask" << std::endl;
    // deviceMask -> Field -> uint32_t
    os << "value: " << t.deviceMask << std::endl;
  }

  return os;
}

std::ostream& operator<<(std::ostream& os, const VkSubmitInfo2KHR& t) {
  ScopedOstream sos(os);
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  sType" << std::endl;
    // sType -> Field -> VkStructureType
    os << "value: " << t.sType << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  pNext" << std::endl;
    // pNext -> Field -> ConstNextPtr(void)

    // pNext
    os << "value: ";
    PrintNextPtr(os, t.pNext);
    os << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  flags" << std::endl;
    // flags -> Field -> VkSubmitFlagsKHR
    os << "value: " << t.flags << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  waitSemaphoreInfoCount" << std::endl;
    // waitSemaphoreInfoCount -> Field -> uint32_t
    os << "value: " << t.waitSemaphoreInfoCount << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  pWaitSemaphoreInfos" << std::endl;
    // pWaitSemaphoreInfos -> Field ->
    // ConstDynamicArray(VkSemaphoreSubmitInfoKHR)
    {
      if (t.waitSemaphoreInfoCount == 0) {
        os << "value: nullptr" << std::endl;
      } else {
        os << "members:" << std::endl;
        {
          ScopedOstream soarray(os);
          os << "- # VkSemaphoreSubmitInfoKHR" << std::endl;
          for (uint32_t i = 0; i < t.waitSemaphoreInfoCount; ++i) {
            ScopedOstream somember(os);
            os << "members:" << std::endl
               << t.pWaitSemaphoreInfos[i] << std::endl;
          }
        }
      }
    }
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  commandBufferInfoCount" << std::endl;
    // commandBufferInfoCount -> Field -> uint32_t
    os << "value: " << t.commandBufferInfoCount << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  pCommandBufferInfos" << std::endl;
    // pCommandBufferInfos -> Field ->
    // ConstDynamicArray(VkCommandBufferSubmitInfoKHR)
    {
      if (t.commandBufferInfoCount == 0) {
        os << "value: nullptr" << std::endl;
      } else {
        os << "members:" << std::endl;
        {
          ScopedOstream soarray(os);
          os << "- # VkCommandBufferSubmitInfoKHR" << std::endl;
          for (uint32_t i = 0; i < t.commandBufferInfoCount; ++i) {
            ScopedOstream somember(os);
            os << "members:" << std::endl
               << t.pCommandBufferInfos[i] << std::endl;
          }
        }
      }
    }
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  signalSemaphoreInfoCount" << std::endl;
    // signalSemaphoreInfoCount -> Field -> uint32_t
    os << "value: " << t.signalSemaphoreInfoCount << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  pSignalSemaphoreInfos" << std::endl;
    // pSignalSemaphoreInfos -> Field ->
    // ConstDynamicArray(VkSemaphoreSubmitInfoKHR)
    {
      if (t.signalSemaphoreInfoCount == 0) {
        os << "value: nullptr" << std::endl;
      } else {
        os << "members:" << std::endl;
        {
          ScopedOstream soarray(os);
          os << "- # VkSemaphoreSubmitInfoKHR" << std::endl;
          for (uint32_t i = 0; i < t.signalSemaphoreInfoCount; ++i) {
            ScopedOstream somember(os);
            os << "members:" << std::endl
               << t.pSignalSemaphoreInfos[i] << std::endl;
          }
        }
      }
    }
  }

  return os;
}

std::ostream& operator<<(std::ostream& os,
                         const VkQueueFamilyCheckpointProperties2NV& t) {
  ScopedOstream sos(os);
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  sType" << std::endl;
    // sType -> Field -> VkStructureType
    os << "value: " << t.sType << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  pNext" << std::endl;
    // pNext -> Field -> NextPtr(void)

    // pNext
    os << "value: ";
    PrintNextPtr(os, t.pNext);
    os << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  checkpointExecutionStageMask" << std::endl;
    // checkpointExecutionStageMask -> Field -> VkPipelineStageFlags2KHR
    os << "value: " << t.checkpointExecutionStageMask << std::endl;
  }

  return os;
}

std::ostream& operator<<(std::ostream& os, const VkCheckpointData2NV& t) {
  ScopedOstream sos(os);
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  sType" << std::endl;
    // sType -> Field -> VkStructureType
    os << "value: " << t.sType << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  pNext" << std::endl;
    // pNext -> Field -> NextPtr(void)

    // pNext
    os << "value: ";
    PrintNextPtr(os, t.pNext);
    os << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  stage" << std::endl;
    // stage -> Field -> VkPipelineStageFlags2KHR
    os << "value: " << t.stage << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  pCheckpointMarker" << std::endl;
    // pCheckpointMarker -> Field -> Pointer(void)

    // void
    os << "value: NOT_AVAILABLE" << std::endl;
  }

  return os;
}

std::ostream& operator<<(std::ostream& os,
                         const VkPhysicalDeviceSynchronization2FeaturesKHR& t) {
  ScopedOstream sos(os);
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  sType" << std::endl;
    // sType -> Field -> VkStructureType
    os << "value: " << t.sType << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  pNext" << std::endl;
    // pNext -> Field -> NextPtr(void)

    // pNext
    os << "value: ";
    PrintNextPtr(os, t.pNext);
    os << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  synchronization2" << std::endl;
    // synchronization2 -> Field -> VkBool32
    os << "value: " << t.synchronization2 << std::endl;
  }

  return os;
}

std::ostream& operator<<(
    std::ostream& os,
    const VkPhysicalDeviceYcbcr2Plane444FormatsFeaturesEXT& t) {
  ScopedOstream sos(os);
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  sType" << std::endl;
    // sType -> Field -> VkStructureType
    os << "value: " << t.sType << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  pNext" << std::endl;
    // pNext -> Field -> NextPtr(void)

    // pNext
    os << "value: ";
    PrintNextPtr(os, t.pNext);
    os << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  ycbcr2plane444Formats" << std::endl;
    // ycbcr2plane444Formats -> Field -> VkBool32
    os << "value: " << t.ycbcr2plane444Formats << std::endl;
  }

  return os;
}

std::ostream& operator<<(std::ostream& os,
                         const VkPhysicalDeviceProvokingVertexFeaturesEXT& t) {
  ScopedOstream sos(os);
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  sType" << std::endl;
    // sType -> Field -> VkStructureType
    os << "value: " << t.sType << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  pNext" << std::endl;
    // pNext -> Field -> NextPtr(void)

    // pNext
    os << "value: ";
    PrintNextPtr(os, t.pNext);
    os << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  provokingVertexLast" << std::endl;
    // provokingVertexLast -> Field -> VkBool32
    os << "value: " << t.provokingVertexLast << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  transformFeedbackPreservesProvokingVertex" << std::endl;
    // transformFeedbackPreservesProvokingVertex -> Field -> VkBool32
    os << "value: " << t.transformFeedbackPreservesProvokingVertex << std::endl;
  }

  return os;
}

std::ostream& operator<<(
    std::ostream& os, const VkPhysicalDeviceProvokingVertexPropertiesEXT& t) {
  ScopedOstream sos(os);
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  sType" << std::endl;
    // sType -> Field -> VkStructureType
    os << "value: " << t.sType << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  pNext" << std::endl;
    // pNext -> Field -> NextPtr(void)

    // pNext
    os << "value: ";
    PrintNextPtr(os, t.pNext);
    os << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  provokingVertexModePerPipeline" << std::endl;
    // provokingVertexModePerPipeline -> Field -> VkBool32
    os << "value: " << t.provokingVertexModePerPipeline << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  transformFeedbackPreservesTriangleFanProvokingVertex"
       << std::endl;
    // transformFeedbackPreservesTriangleFanProvokingVertex -> Field -> VkBool32
    os << "value: " << t.transformFeedbackPreservesTriangleFanProvokingVertex
       << std::endl;
  }

  return os;
}

std::ostream& operator<<(
    std::ostream& os,
    const VkPipelineRasterizationProvokingVertexStateCreateInfoEXT& t) {
  ScopedOstream sos(os);
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  sType" << std::endl;
    // sType -> Field -> VkStructureType
    os << "value: " << t.sType << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  pNext" << std::endl;
    // pNext -> Field -> ConstNextPtr(void)

    // pNext
    os << "value: ";
    PrintNextPtr(os, t.pNext);
    os << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  provokingVertexMode" << std::endl;
    // provokingVertexMode -> Field -> VkProvokingVertexModeEXT
    os << "value: " << t.provokingVertexMode << std::endl;
  }

  return os;
}

std::ostream& operator<<(std::ostream& os,
                         const VkPhysicalDeviceDrmPropertiesEXT& t) {
  ScopedOstream sos(os);
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  sType" << std::endl;
    // sType -> Field -> VkStructureType
    os << "value: " << t.sType << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  pNext" << std::endl;
    // pNext -> Field -> NextPtr(void)

    // pNext
    os << "value: ";
    PrintNextPtr(os, t.pNext);
    os << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  hasPrimary" << std::endl;
    // hasPrimary -> Field -> VkBool32
    os << "value: " << t.hasPrimary << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  hasRender" << std::endl;
    // hasRender -> Field -> VkBool32
    os << "value: " << t.hasRender << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  primaryMajor" << std::endl;
    // primaryMajor -> Field -> int64_t
    os << "value: " << t.primaryMajor << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  primaryMinor" << std::endl;
    // primaryMinor -> Field -> int64_t
    os << "value: " << t.primaryMinor << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  renderMajor" << std::endl;
    // renderMajor -> Field -> int64_t
    os << "value: " << t.renderMajor << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  renderMinor" << std::endl;
    // renderMinor -> Field -> int64_t
    os << "value: " << t.renderMinor << std::endl;
  }

  return os;
}

std::ostream& operator<<(std::ostream& os, const VkBaseOutStructure& t) {
  ScopedOstream sos(os);
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  sType" << std::endl;
    // sType -> Field -> VkStructureType
    os << "value: " << t.sType << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  pNext" << std::endl;
    // pNext -> Field -> Pointer(VkBaseOutStructure)
    // pointer
    if (t.pNext) {
      os << "members:" << std::endl << *t.pNext << std::endl;
    } else {
      os << "value: nullptr" << std::endl;
    }
  }

  return os;
}

std::ostream& operator<<(std::ostream& os, const VkBaseInStructure& t) {
  ScopedOstream sos(os);
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  sType" << std::endl;
    // sType -> Field -> VkStructureType
    os << "value: " << t.sType << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  pNext" << std::endl;
    // pNext -> Field -> ConstPointer(VkBaseInStructure)
    // pointer
    if (t.pNext) {
      os << "members:" << std::endl << *t.pNext << std::endl;
    } else {
      os << "value: nullptr" << std::endl;
    }
  }

  return os;
}

std::ostream& operator<<(std::ostream& os, const VkOffset2D& t) {
  ScopedOstream sos(os);
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  x" << std::endl;
    // x -> Field -> int32_t
    os << "value: " << t.x << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  y" << std::endl;
    // y -> Field -> int32_t
    os << "value: " << t.y << std::endl;
  }

  return os;
}

std::ostream& operator<<(std::ostream& os, const VkOffset3D& t) {
  ScopedOstream sos(os);
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  x" << std::endl;
    // x -> Field -> int32_t
    os << "value: " << t.x << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  y" << std::endl;
    // y -> Field -> int32_t
    os << "value: " << t.y << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  z" << std::endl;
    // z -> Field -> int32_t
    os << "value: " << t.z << std::endl;
  }

  return os;
}

std::ostream& operator<<(std::ostream& os, const VkExtent2D& t) {
  ScopedOstream sos(os);
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  width" << std::endl;
    // width -> Field -> uint32_t
    os << "value: " << t.width << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  height" << std::endl;
    // height -> Field -> uint32_t
    os << "value: " << t.height << std::endl;
  }

  return os;
}

std::ostream& operator<<(std::ostream& os, const VkExtent3D& t) {
  ScopedOstream sos(os);
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  width" << std::endl;
    // width -> Field -> uint32_t
    os << "value: " << t.width << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  height" << std::endl;
    // height -> Field -> uint32_t
    os << "value: " << t.height << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  depth" << std::endl;
    // depth -> Field -> uint32_t
    os << "value: " << t.depth << std::endl;
  }

  return os;
}

std::ostream& operator<<(std::ostream& os, const VkViewport& t) {
  ScopedOstream sos(os);
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  x" << std::endl;
    // x -> Field -> float
    os << "value: " << t.x << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  y" << std::endl;
    // y -> Field -> float
    os << "value: " << t.y << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  width" << std::endl;
    // width -> Field -> float
    os << "value: " << t.width << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  height" << std::endl;
    // height -> Field -> float
    os << "value: " << t.height << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  minDepth" << std::endl;
    // minDepth -> Field -> float
    os << "value: " << t.minDepth << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  maxDepth" << std::endl;
    // maxDepth -> Field -> float
    os << "value: " << t.maxDepth << std::endl;
  }

  return os;
}

std::ostream& operator<<(std::ostream& os, const VkRect2D& t) {
  ScopedOstream sos(os);
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  offset" << std::endl;
    // offset -> Field -> VkOffset2D
    os << "members:" << std::endl << t.offset << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  extent" << std::endl;
    // extent -> Field -> VkExtent2D
    os << "members:" << std::endl << t.extent << std::endl;
  }

  return os;
}

std::ostream& operator<<(std::ostream& os, const VkClearRect& t) {
  ScopedOstream sos(os);
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  rect" << std::endl;
    // rect -> Field -> VkRect2D
    os << "members:" << std::endl << t.rect << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  baseArrayLayer" << std::endl;
    // baseArrayLayer -> Field -> uint32_t
    os << "value: " << t.baseArrayLayer << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  layerCount" << std::endl;
    // layerCount -> Field -> uint32_t
    os << "value: " << t.layerCount << std::endl;
  }

  return os;
}

std::ostream& operator<<(std::ostream& os, const VkComponentMapping& t) {
  ScopedOstream sos(os);
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  r" << std::endl;
    // r -> Field -> VkComponentSwizzle
    os << "value: " << t.r << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  g" << std::endl;
    // g -> Field -> VkComponentSwizzle
    os << "value: " << t.g << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  b" << std::endl;
    // b -> Field -> VkComponentSwizzle
    os << "value: " << t.b << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  a" << std::endl;
    // a -> Field -> VkComponentSwizzle
    os << "value: " << t.a << std::endl;
  }

  return os;
}

std::ostream& operator<<(std::ostream& os,
                         const VkPhysicalDeviceProperties& t) {
  ScopedOstream sos(os);
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  apiVersion" << std::endl;
    // apiVersion -> Field -> uint32_t
    os << "value: " << t.apiVersion << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  driverVersion" << std::endl;
    // driverVersion -> Field -> uint32_t
    os << "value: " << t.driverVersion << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  vendorID" << std::endl;
    // vendorID -> Field -> uint32_t
    os << "value: " << t.vendorID << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  deviceID" << std::endl;
    // deviceID -> Field -> uint32_t
    os << "value: " << t.deviceID << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  deviceType" << std::endl;
    // deviceType -> Field -> VkPhysicalDeviceType
    os << "value: " << t.deviceType << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  deviceName" << std::endl;
    // deviceName -> Field -> FixedArray(char)
    os << "value: " << t.deviceName << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  pipelineCacheUUID" << std::endl;
    // pipelineCacheUUID -> Field -> FixedArray(uint8_t)
    {
      if (VK_UUID_SIZE == 0) {
        os << "value: nullptr" << std::endl;
      } else {
        os << "members:" << std::endl;
        {
          ScopedOstream soarray(os);
          os << "- # uint8_t" << std::endl;
          for (uint32_t i = 0; i < VK_UUID_SIZE; ++i) {
            ScopedOstream somember(os);
            os << "value: " << t.pipelineCacheUUID[i] << std::endl;
          }
        }
      }
    }
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  limits" << std::endl;
    // limits -> Field -> VkPhysicalDeviceLimits
    os << "members:" << std::endl << t.limits << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  sparseProperties" << std::endl;
    // sparseProperties -> Field -> VkPhysicalDeviceSparseProperties
    os << "members:" << std::endl << t.sparseProperties << std::endl;
  }

  return os;
}

std::ostream& operator<<(std::ostream& os, const VkExtensionProperties& t) {
  ScopedOstream sos(os);
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  extensionName" << std::endl;
    // extensionName -> Field -> FixedArray(char)
    os << "value: " << t.extensionName << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  specVersion" << std::endl;
    // specVersion -> Field -> uint32_t
    os << "value: " << t.specVersion << std::endl;
  }

  return os;
}

std::ostream& operator<<(std::ostream& os, const VkLayerProperties& t) {
  ScopedOstream sos(os);
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  layerName" << std::endl;
    // layerName -> Field -> FixedArray(char)
    os << "value: " << t.layerName << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  specVersion" << std::endl;
    // specVersion -> Field -> uint32_t
    os << "value: " << t.specVersion << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  implementationVersion" << std::endl;
    // implementationVersion -> Field -> uint32_t
    os << "value: " << t.implementationVersion << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  description" << std::endl;
    // description -> Field -> FixedArray(char)
    os << "value: " << t.description << std::endl;
  }

  return os;
}

std::ostream& operator<<(std::ostream& os, const VkApplicationInfo& t) {
  ScopedOstream sos(os);
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  sType" << std::endl;
    // sType -> Field -> VkStructureType
    os << "value: " << t.sType << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  pNext" << std::endl;
    // pNext -> Field -> ConstNextPtr(void)

    // pNext
    os << "value: ";
    PrintNextPtr(os, t.pNext);
    os << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  pApplicationName" << std::endl;
    // pApplicationName -> Field -> string
    os << "value: " << t.pApplicationName << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  applicationVersion" << std::endl;
    // applicationVersion -> Field -> uint32_t
    os << "value: " << t.applicationVersion << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  pEngineName" << std::endl;
    // pEngineName -> Field -> string
    os << "value: " << t.pEngineName << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  engineVersion" << std::endl;
    // engineVersion -> Field -> uint32_t
    os << "value: " << t.engineVersion << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  apiVersion" << std::endl;
    // apiVersion -> Field -> uint32_t
    os << "value: " << t.apiVersion << std::endl;
  }

  return os;
}

std::ostream& operator<<(std::ostream& os, const VkAllocationCallbacks& t) {
  ScopedOstream sos(os);
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  pUserData" << std::endl;
    // pUserData -> Field -> Pointer(void)

    // void
    os << "value: NOT_AVAILABLE" << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  pfnAllocation" << std::endl;
    // pfnAllocation -> Field -> PFN_vkAllocationFunction
    os << "value: " << t.pfnAllocation << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  pfnReallocation" << std::endl;
    // pfnReallocation -> Field -> PFN_vkReallocationFunction
    os << "value: " << t.pfnReallocation << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  pfnFree" << std::endl;
    // pfnFree -> Field -> PFN_vkFreeFunction
    os << "value: " << t.pfnFree << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  pfnInternalAllocation" << std::endl;
    // pfnInternalAllocation -> Field -> PFN_vkInternalAllocationNotification
    os << "value: " << t.pfnInternalAllocation << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  pfnInternalFree" << std::endl;
    // pfnInternalFree -> Field -> PFN_vkInternalFreeNotification
    os << "value: " << t.pfnInternalFree << std::endl;
  }

  return os;
}

std::ostream& operator<<(std::ostream& os, const VkDeviceQueueCreateInfo& t) {
  ScopedOstream sos(os);
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  sType" << std::endl;
    // sType -> Field -> VkStructureType
    os << "value: " << t.sType << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  pNext" << std::endl;
    // pNext -> Field -> ConstNextPtr(void)

    // pNext
    os << "value: ";
    PrintNextPtr(os, t.pNext);
    os << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  flags" << std::endl;
    // flags -> Field -> VkDeviceQueueCreateFlags
    os << "value: " << t.flags << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  queueFamilyIndex" << std::endl;
    // queueFamilyIndex -> Field -> uint32_t
    os << "value: " << t.queueFamilyIndex << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  queueCount" << std::endl;
    // queueCount -> Field -> uint32_t
    os << "value: " << t.queueCount << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  pQueuePriorities" << std::endl;
    // pQueuePriorities -> Field -> ConstDynamicArray(float)
    {
      if (t.queueCount == 0) {
        os << "value: nullptr" << std::endl;
      } else {
        os << "members:" << std::endl;
        {
          ScopedOstream soarray(os);
          os << "- # float" << std::endl;
          for (uint32_t i = 0; i < t.queueCount; ++i) {
            ScopedOstream somember(os);
            os << "value: " << t.pQueuePriorities[i] << std::endl;
          }
        }
      }
    }
  }

  return os;
}

std::ostream& operator<<(std::ostream& os, const VkDeviceCreateInfo& t) {
  ScopedOstream sos(os);
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  sType" << std::endl;
    // sType -> Field -> VkStructureType
    os << "value: " << t.sType << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  pNext" << std::endl;
    // pNext -> Field -> ConstNextPtr(void)

    // pNext
    os << "value: ";
    PrintNextPtr(os, t.pNext);
    os << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  flags" << std::endl;
    // flags -> Field -> VkDeviceCreateFlags
    os << "value: " << t.flags << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  queueCreateInfoCount" << std::endl;
    // queueCreateInfoCount -> Field -> uint32_t
    os << "value: " << t.queueCreateInfoCount << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  pQueueCreateInfos" << std::endl;
    // pQueueCreateInfos -> Field -> ConstDynamicArray(VkDeviceQueueCreateInfo)
    {
      if (t.queueCreateInfoCount == 0) {
        os << "value: nullptr" << std::endl;
      } else {
        os << "members:" << std::endl;
        {
          ScopedOstream soarray(os);
          os << "- # VkDeviceQueueCreateInfo" << std::endl;
          for (uint32_t i = 0; i < t.queueCreateInfoCount; ++i) {
            ScopedOstream somember(os);
            os << "members:" << std::endl
               << t.pQueueCreateInfos[i] << std::endl;
          }
        }
      }
    }
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  enabledLayerCount" << std::endl;
    // enabledLayerCount -> Field -> uint32_t
    os << "value: " << t.enabledLayerCount << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  ppEnabledLayerNames" << std::endl;
    // ppEnabledLayerNames -> Field -> ConstDynamicArray(string)
    {
      if (t.enabledLayerCount == 0) {
        os << "value: nullptr" << std::endl;
      } else {
        os << "members:" << std::endl;
        {
          ScopedOstream soarray(os);
          os << "- # string" << std::endl;
          for (uint32_t i = 0; i < t.enabledLayerCount; ++i) {
            ScopedOstream somember(os);
            os << "value: " << t.ppEnabledLayerNames[i] << std::endl;
          }
        }
      }
    }
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  enabledExtensionCount" << std::endl;
    // enabledExtensionCount -> Field -> uint32_t
    os << "value: " << t.enabledExtensionCount << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  ppEnabledExtensionNames" << std::endl;
    // ppEnabledExtensionNames -> Field -> ConstDynamicArray(string)
    {
      if (t.enabledExtensionCount == 0) {
        os << "value: nullptr" << std::endl;
      } else {
        os << "members:" << std::endl;
        {
          ScopedOstream soarray(os);
          os << "- # string" << std::endl;
          for (uint32_t i = 0; i < t.enabledExtensionCount; ++i) {
            ScopedOstream somember(os);
            os << "value: " << t.ppEnabledExtensionNames[i] << std::endl;
          }
        }
      }
    }
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  pEnabledFeatures" << std::endl;
    // pEnabledFeatures -> Field -> ConstPointer(VkPhysicalDeviceFeatures)
    // pointer
    if (t.pEnabledFeatures) {
      os << "members:" << std::endl << *t.pEnabledFeatures << std::endl;
    } else {
      os << "value: nullptr" << std::endl;
    }
  }

  return os;
}

std::ostream& operator<<(std::ostream& os, const VkInstanceCreateInfo& t) {
  ScopedOstream sos(os);
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  sType" << std::endl;
    // sType -> Field -> VkStructureType
    os << "value: " << t.sType << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  pNext" << std::endl;
    // pNext -> Field -> ConstNextPtr(void)

    // pNext
    os << "value: ";
    PrintNextPtr(os, t.pNext);
    os << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  flags" << std::endl;
    // flags -> Field -> VkInstanceCreateFlags
    os << "value: " << t.flags << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  pApplicationInfo" << std::endl;
    // pApplicationInfo -> Field -> ConstPointer(VkApplicationInfo)
    // pointer
    if (t.pApplicationInfo) {
      os << "members:" << std::endl << *t.pApplicationInfo << std::endl;
    } else {
      os << "value: nullptr" << std::endl;
    }
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  enabledLayerCount" << std::endl;
    // enabledLayerCount -> Field -> uint32_t
    os << "value: " << t.enabledLayerCount << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  ppEnabledLayerNames" << std::endl;
    // ppEnabledLayerNames -> Field -> ConstDynamicArray(string)
    {
      if (t.enabledLayerCount == 0) {
        os << "value: nullptr" << std::endl;
      } else {
        os << "members:" << std::endl;
        {
          ScopedOstream soarray(os);
          os << "- # string" << std::endl;
          for (uint32_t i = 0; i < t.enabledLayerCount; ++i) {
            ScopedOstream somember(os);
            os << "value: " << t.ppEnabledLayerNames[i] << std::endl;
          }
        }
      }
    }
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  enabledExtensionCount" << std::endl;
    // enabledExtensionCount -> Field -> uint32_t
    os << "value: " << t.enabledExtensionCount << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  ppEnabledExtensionNames" << std::endl;
    // ppEnabledExtensionNames -> Field -> ConstDynamicArray(string)
    {
      if (t.enabledExtensionCount == 0) {
        os << "value: nullptr" << std::endl;
      } else {
        os << "members:" << std::endl;
        {
          ScopedOstream soarray(os);
          os << "- # string" << std::endl;
          for (uint32_t i = 0; i < t.enabledExtensionCount; ++i) {
            ScopedOstream somember(os);
            os << "value: " << t.ppEnabledExtensionNames[i] << std::endl;
          }
        }
      }
    }
  }

  return os;
}

std::ostream& operator<<(std::ostream& os, const VkQueueFamilyProperties& t) {
  ScopedOstream sos(os);
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  queueFlags" << std::endl;
    // queueFlags -> Field -> VkQueueFlags
    os << "value: " << t.queueFlags << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  queueCount" << std::endl;
    // queueCount -> Field -> uint32_t
    os << "value: " << t.queueCount << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  timestampValidBits" << std::endl;
    // timestampValidBits -> Field -> uint32_t
    os << "value: " << t.timestampValidBits << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  minImageTransferGranularity" << std::endl;
    // minImageTransferGranularity -> Field -> VkExtent3D
    os << "members:" << std::endl << t.minImageTransferGranularity << std::endl;
  }

  return os;
}

std::ostream& operator<<(std::ostream& os,
                         const VkPhysicalDeviceMemoryProperties& t) {
  ScopedOstream sos(os);
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  memoryTypeCount" << std::endl;
    // memoryTypeCount -> Field -> uint32_t
    os << "value: " << t.memoryTypeCount << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  memoryTypes" << std::endl;
    // memoryTypes -> Field -> FixedArray(VkMemoryType)
    {
      if (VK_MAX_MEMORY_TYPES == 0) {
        os << "value: nullptr" << std::endl;
      } else {
        os << "members:" << std::endl;
        {
          ScopedOstream soarray(os);
          os << "- # VkMemoryType" << std::endl;
          for (uint32_t i = 0; i < VK_MAX_MEMORY_TYPES; ++i) {
            ScopedOstream somember(os);
            os << "members:" << std::endl << t.memoryTypes[i] << std::endl;
          }
        }
      }
    }
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  memoryHeapCount" << std::endl;
    // memoryHeapCount -> Field -> uint32_t
    os << "value: " << t.memoryHeapCount << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  memoryHeaps" << std::endl;
    // memoryHeaps -> Field -> FixedArray(VkMemoryHeap)
    {
      if (VK_MAX_MEMORY_HEAPS == 0) {
        os << "value: nullptr" << std::endl;
      } else {
        os << "members:" << std::endl;
        {
          ScopedOstream soarray(os);
          os << "- # VkMemoryHeap" << std::endl;
          for (uint32_t i = 0; i < VK_MAX_MEMORY_HEAPS; ++i) {
            ScopedOstream somember(os);
            os << "members:" << std::endl << t.memoryHeaps[i] << std::endl;
          }
        }
      }
    }
  }

  return os;
}

std::ostream& operator<<(std::ostream& os, const VkMemoryAllocateInfo& t) {
  ScopedOstream sos(os);
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  sType" << std::endl;
    // sType -> Field -> VkStructureType
    os << "value: " << t.sType << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  pNext" << std::endl;
    // pNext -> Field -> ConstNextPtr(void)

    // pNext
    os << "value: ";
    PrintNextPtr(os, t.pNext);
    os << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  allocationSize" << std::endl;
    // allocationSize -> Field -> VkDeviceSize
    os << "value: " << t.allocationSize << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  memoryTypeIndex" << std::endl;
    // memoryTypeIndex -> Field -> uint32_t
    os << "value: " << t.memoryTypeIndex << std::endl;
  }

  return os;
}

std::ostream& operator<<(std::ostream& os, const VkMemoryRequirements& t) {
  ScopedOstream sos(os);
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  size" << std::endl;
    // size -> Field -> VkDeviceSize
    os << "value: " << t.size << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  alignment" << std::endl;
    // alignment -> Field -> VkDeviceSize
    os << "value: " << t.alignment << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  memoryTypeBits" << std::endl;
    // memoryTypeBits -> Field -> uint32_t
    os << "value: " << t.memoryTypeBits << std::endl;
  }

  return os;
}

std::ostream& operator<<(std::ostream& os,
                         const VkSparseImageFormatProperties& t) {
  ScopedOstream sos(os);
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  aspectMask" << std::endl;
    // aspectMask -> Field -> VkImageAspectFlags
    os << "value: " << t.aspectMask << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  imageGranularity" << std::endl;
    // imageGranularity -> Field -> VkExtent3D
    os << "members:" << std::endl << t.imageGranularity << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  flags" << std::endl;
    // flags -> Field -> VkSparseImageFormatFlags
    os << "value: " << t.flags << std::endl;
  }

  return os;
}

std::ostream& operator<<(std::ostream& os,
                         const VkSparseImageMemoryRequirements& t) {
  ScopedOstream sos(os);
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  formatProperties" << std::endl;
    // formatProperties -> Field -> VkSparseImageFormatProperties
    os << "members:" << std::endl << t.formatProperties << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  imageMipTailFirstLod" << std::endl;
    // imageMipTailFirstLod -> Field -> uint32_t
    os << "value: " << t.imageMipTailFirstLod << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  imageMipTailSize" << std::endl;
    // imageMipTailSize -> Field -> VkDeviceSize
    os << "value: " << t.imageMipTailSize << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  imageMipTailOffset" << std::endl;
    // imageMipTailOffset -> Field -> VkDeviceSize
    os << "value: " << t.imageMipTailOffset << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  imageMipTailStride" << std::endl;
    // imageMipTailStride -> Field -> VkDeviceSize
    os << "value: " << t.imageMipTailStride << std::endl;
  }

  return os;
}

std::ostream& operator<<(std::ostream& os, const VkMemoryType& t) {
  ScopedOstream sos(os);
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  propertyFlags" << std::endl;
    // propertyFlags -> Field -> VkMemoryPropertyFlags
    os << "value: " << t.propertyFlags << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  heapIndex" << std::endl;
    // heapIndex -> Field -> uint32_t
    os << "value: " << t.heapIndex << std::endl;
  }

  return os;
}

std::ostream& operator<<(std::ostream& os, const VkMemoryHeap& t) {
  ScopedOstream sos(os);
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  size" << std::endl;
    // size -> Field -> VkDeviceSize
    os << "value: " << t.size << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  flags" << std::endl;
    // flags -> Field -> VkMemoryHeapFlags
    os << "value: " << t.flags << std::endl;
  }

  return os;
}

std::ostream& operator<<(std::ostream& os, const VkMappedMemoryRange& t) {
  ScopedOstream sos(os);
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  sType" << std::endl;
    // sType -> Field -> VkStructureType
    os << "value: " << t.sType << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  pNext" << std::endl;
    // pNext -> Field -> ConstNextPtr(void)

    // pNext
    os << "value: ";
    PrintNextPtr(os, t.pNext);
    os << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  memory" << std::endl;
    // memory -> Field -> VkDeviceMemory
    os << "value: " << t.memory << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  offset" << std::endl;
    // offset -> Field -> VkDeviceSize
    os << "value: " << t.offset << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  size" << std::endl;
    // size -> Field -> VkDeviceSize
    os << "value: " << t.size << std::endl;
  }

  return os;
}

std::ostream& operator<<(std::ostream& os, const VkFormatProperties& t) {
  ScopedOstream sos(os);
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  linearTilingFeatures" << std::endl;
    // linearTilingFeatures -> Field -> VkFormatFeatureFlags
    os << "value: " << t.linearTilingFeatures << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  optimalTilingFeatures" << std::endl;
    // optimalTilingFeatures -> Field -> VkFormatFeatureFlags
    os << "value: " << t.optimalTilingFeatures << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  bufferFeatures" << std::endl;
    // bufferFeatures -> Field -> VkFormatFeatureFlags
    os << "value: " << t.bufferFeatures << std::endl;
  }

  return os;
}

std::ostream& operator<<(std::ostream& os, const VkImageFormatProperties& t) {
  ScopedOstream sos(os);
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  maxExtent" << std::endl;
    // maxExtent -> Field -> VkExtent3D
    os << "members:" << std::endl << t.maxExtent << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  maxMipLevels" << std::endl;
    // maxMipLevels -> Field -> uint32_t
    os << "value: " << t.maxMipLevels << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  maxArrayLayers" << std::endl;
    // maxArrayLayers -> Field -> uint32_t
    os << "value: " << t.maxArrayLayers << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  sampleCounts" << std::endl;
    // sampleCounts -> Field -> VkSampleCountFlags
    os << "value: " << t.sampleCounts << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  maxResourceSize" << std::endl;
    // maxResourceSize -> Field -> VkDeviceSize
    os << "value: " << t.maxResourceSize << std::endl;
  }

  return os;
}

std::ostream& operator<<(std::ostream& os, const VkDescriptorBufferInfo& t) {
  ScopedOstream sos(os);
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  buffer" << std::endl;
    // buffer -> Field -> VkBuffer
    os << "value: " << t.buffer << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  offset" << std::endl;
    // offset -> Field -> VkDeviceSize
    os << "value: " << t.offset << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  range" << std::endl;
    // range -> Field -> VkDeviceSize
    os << "value: " << t.range << std::endl;
  }

  return os;
}

std::ostream& operator<<(std::ostream& os, const VkDescriptorImageInfo& t) {
  ScopedOstream sos(os);
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  sampler" << std::endl;
    // sampler -> Field -> VkSampler
    os << "value: " << t.sampler << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  imageView" << std::endl;
    // imageView -> Field -> VkImageView
    os << "value: " << t.imageView << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  imageLayout" << std::endl;
    // imageLayout -> Field -> VkImageLayout
    os << "value: " << t.imageLayout << std::endl;
  }

  return os;
}

std::ostream& operator<<(std::ostream& os, const VkCopyDescriptorSet& t) {
  ScopedOstream sos(os);
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  sType" << std::endl;
    // sType -> Field -> VkStructureType
    os << "value: " << t.sType << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  pNext" << std::endl;
    // pNext -> Field -> ConstNextPtr(void)

    // pNext
    os << "value: ";
    PrintNextPtr(os, t.pNext);
    os << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  srcSet" << std::endl;
    // srcSet -> Field -> VkDescriptorSet
    os << "value: " << t.srcSet << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  srcBinding" << std::endl;
    // srcBinding -> Field -> uint32_t
    os << "value: " << t.srcBinding << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  srcArrayElement" << std::endl;
    // srcArrayElement -> Field -> uint32_t
    os << "value: " << t.srcArrayElement << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  dstSet" << std::endl;
    // dstSet -> Field -> VkDescriptorSet
    os << "value: " << t.dstSet << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  dstBinding" << std::endl;
    // dstBinding -> Field -> uint32_t
    os << "value: " << t.dstBinding << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  dstArrayElement" << std::endl;
    // dstArrayElement -> Field -> uint32_t
    os << "value: " << t.dstArrayElement << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  descriptorCount" << std::endl;
    // descriptorCount -> Field -> uint32_t
    os << "value: " << t.descriptorCount << std::endl;
  }

  return os;
}

std::ostream& operator<<(std::ostream& os, const VkBufferCreateInfo& t) {
  ScopedOstream sos(os);
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  sType" << std::endl;
    // sType -> Field -> VkStructureType
    os << "value: " << t.sType << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  pNext" << std::endl;
    // pNext -> Field -> ConstNextPtr(void)

    // pNext
    os << "value: ";
    PrintNextPtr(os, t.pNext);
    os << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  flags" << std::endl;
    // flags -> Field -> VkBufferCreateFlags
    os << "value: " << t.flags << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  size" << std::endl;
    // size -> Field -> VkDeviceSize
    os << "value: " << t.size << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  usage" << std::endl;
    // usage -> Field -> VkBufferUsageFlags
    os << "value: " << t.usage << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  sharingMode" << std::endl;
    // sharingMode -> Field -> VkSharingMode
    os << "value: " << t.sharingMode << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  queueFamilyIndexCount" << std::endl;
    // queueFamilyIndexCount -> Field -> uint32_t
    os << "value: " << t.queueFamilyIndexCount << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  pQueueFamilyIndices" << std::endl;
    // pQueueFamilyIndices -> Field -> ConstDynamicArray(uint32_t)
    {
      if (t.queueFamilyIndexCount == 0) {
        os << "value: nullptr" << std::endl;
      } else {
        os << "members:" << std::endl;
        {
          ScopedOstream soarray(os);
          os << "- # uint32_t" << std::endl;
          for (uint32_t i = 0; i < t.queueFamilyIndexCount; ++i) {
            ScopedOstream somember(os);
            os << "value: " << t.pQueueFamilyIndices[i] << std::endl;
          }
        }
      }
    }
  }

  return os;
}

std::ostream& operator<<(std::ostream& os, const VkBufferViewCreateInfo& t) {
  ScopedOstream sos(os);
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  sType" << std::endl;
    // sType -> Field -> VkStructureType
    os << "value: " << t.sType << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  pNext" << std::endl;
    // pNext -> Field -> ConstNextPtr(void)

    // pNext
    os << "value: ";
    PrintNextPtr(os, t.pNext);
    os << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  flags" << std::endl;
    // flags -> Field -> VkBufferViewCreateFlags
    os << "value: " << t.flags << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  buffer" << std::endl;
    // buffer -> Field -> VkBuffer
    os << "value: " << t.buffer << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  format" << std::endl;
    // format -> Field -> VkFormat
    os << "value: " << t.format << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  offset" << std::endl;
    // offset -> Field -> VkDeviceSize
    os << "value: " << t.offset << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  range" << std::endl;
    // range -> Field -> VkDeviceSize
    os << "value: " << t.range << std::endl;
  }

  return os;
}

std::ostream& operator<<(std::ostream& os, const VkImageSubresource& t) {
  ScopedOstream sos(os);
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  aspectMask" << std::endl;
    // aspectMask -> Field -> VkImageAspectFlags
    os << "value: " << t.aspectMask << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  mipLevel" << std::endl;
    // mipLevel -> Field -> uint32_t
    os << "value: " << t.mipLevel << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  arrayLayer" << std::endl;
    // arrayLayer -> Field -> uint32_t
    os << "value: " << t.arrayLayer << std::endl;
  }

  return os;
}

std::ostream& operator<<(std::ostream& os, const VkImageSubresourceLayers& t) {
  ScopedOstream sos(os);
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  aspectMask" << std::endl;
    // aspectMask -> Field -> VkImageAspectFlags
    os << "value: " << t.aspectMask << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  mipLevel" << std::endl;
    // mipLevel -> Field -> uint32_t
    os << "value: " << t.mipLevel << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  baseArrayLayer" << std::endl;
    // baseArrayLayer -> Field -> uint32_t
    os << "value: " << t.baseArrayLayer << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  layerCount" << std::endl;
    // layerCount -> Field -> uint32_t
    os << "value: " << t.layerCount << std::endl;
  }

  return os;
}

std::ostream& operator<<(std::ostream& os, const VkImageSubresourceRange& t) {
  ScopedOstream sos(os);
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  aspectMask" << std::endl;
    // aspectMask -> Field -> VkImageAspectFlags
    os << "value: " << t.aspectMask << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  baseMipLevel" << std::endl;
    // baseMipLevel -> Field -> uint32_t
    os << "value: " << t.baseMipLevel << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  levelCount" << std::endl;
    // levelCount -> Field -> uint32_t
    os << "value: " << t.levelCount << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  baseArrayLayer" << std::endl;
    // baseArrayLayer -> Field -> uint32_t
    os << "value: " << t.baseArrayLayer << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  layerCount" << std::endl;
    // layerCount -> Field -> uint32_t
    os << "value: " << t.layerCount << std::endl;
  }

  return os;
}

std::ostream& operator<<(std::ostream& os, const VkMemoryBarrier& t) {
  ScopedOstream sos(os);
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  sType" << std::endl;
    // sType -> Field -> VkStructureType
    os << "value: " << t.sType << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  pNext" << std::endl;
    // pNext -> Field -> ConstNextPtr(void)

    // pNext
    os << "value: ";
    PrintNextPtr(os, t.pNext);
    os << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  srcAccessMask" << std::endl;
    // srcAccessMask -> Field -> VkAccessFlags
    os << "value: " << t.srcAccessMask << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  dstAccessMask" << std::endl;
    // dstAccessMask -> Field -> VkAccessFlags
    os << "value: " << t.dstAccessMask << std::endl;
  }

  return os;
}

std::ostream& operator<<(std::ostream& os, const VkBufferMemoryBarrier& t) {
  ScopedOstream sos(os);
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  sType" << std::endl;
    // sType -> Field -> VkStructureType
    os << "value: " << t.sType << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  pNext" << std::endl;
    // pNext -> Field -> ConstNextPtr(void)

    // pNext
    os << "value: ";
    PrintNextPtr(os, t.pNext);
    os << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  srcAccessMask" << std::endl;
    // srcAccessMask -> Field -> VkAccessFlags
    os << "value: " << t.srcAccessMask << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  dstAccessMask" << std::endl;
    // dstAccessMask -> Field -> VkAccessFlags
    os << "value: " << t.dstAccessMask << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  srcQueueFamilyIndex" << std::endl;
    // srcQueueFamilyIndex -> Field -> uint32_t
    os << "value: " << t.srcQueueFamilyIndex << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  dstQueueFamilyIndex" << std::endl;
    // dstQueueFamilyIndex -> Field -> uint32_t
    os << "value: " << t.dstQueueFamilyIndex << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  buffer" << std::endl;
    // buffer -> Field -> VkBuffer
    os << "value: " << t.buffer << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  offset" << std::endl;
    // offset -> Field -> VkDeviceSize
    os << "value: " << t.offset << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  size" << std::endl;
    // size -> Field -> VkDeviceSize
    os << "value: " << t.size << std::endl;
  }

  return os;
}

std::ostream& operator<<(std::ostream& os, const VkImageMemoryBarrier& t) {
  ScopedOstream sos(os);
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  sType" << std::endl;
    // sType -> Field -> VkStructureType
    os << "value: " << t.sType << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  pNext" << std::endl;
    // pNext -> Field -> ConstNextPtr(void)

    // pNext
    os << "value: ";
    PrintNextPtr(os, t.pNext);
    os << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  srcAccessMask" << std::endl;
    // srcAccessMask -> Field -> VkAccessFlags
    os << "value: " << t.srcAccessMask << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  dstAccessMask" << std::endl;
    // dstAccessMask -> Field -> VkAccessFlags
    os << "value: " << t.dstAccessMask << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  oldLayout" << std::endl;
    // oldLayout -> Field -> VkImageLayout
    os << "value: " << t.oldLayout << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  newLayout" << std::endl;
    // newLayout -> Field -> VkImageLayout
    os << "value: " << t.newLayout << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  srcQueueFamilyIndex" << std::endl;
    // srcQueueFamilyIndex -> Field -> uint32_t
    os << "value: " << t.srcQueueFamilyIndex << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  dstQueueFamilyIndex" << std::endl;
    // dstQueueFamilyIndex -> Field -> uint32_t
    os << "value: " << t.dstQueueFamilyIndex << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  image" << std::endl;
    // image -> Field -> VkImage
    os << "value: " << t.image << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  subresourceRange" << std::endl;
    // subresourceRange -> Field -> VkImageSubresourceRange
    os << "members:" << std::endl << t.subresourceRange << std::endl;
  }

  return os;
}

std::ostream& operator<<(std::ostream& os, const VkImageCreateInfo& t) {
  ScopedOstream sos(os);
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  sType" << std::endl;
    // sType -> Field -> VkStructureType
    os << "value: " << t.sType << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  pNext" << std::endl;
    // pNext -> Field -> ConstNextPtr(void)

    // pNext
    os << "value: ";
    PrintNextPtr(os, t.pNext);
    os << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  flags" << std::endl;
    // flags -> Field -> VkImageCreateFlags
    os << "value: " << t.flags << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  imageType" << std::endl;
    // imageType -> Field -> VkImageType
    os << "value: " << t.imageType << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  format" << std::endl;
    // format -> Field -> VkFormat
    os << "value: " << t.format << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  extent" << std::endl;
    // extent -> Field -> VkExtent3D
    os << "members:" << std::endl << t.extent << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  mipLevels" << std::endl;
    // mipLevels -> Field -> uint32_t
    os << "value: " << t.mipLevels << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  arrayLayers" << std::endl;
    // arrayLayers -> Field -> uint32_t
    os << "value: " << t.arrayLayers << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  samples" << std::endl;
    // samples -> Field -> VkSampleCountFlagBits
    os << "value: " << t.samples << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  tiling" << std::endl;
    // tiling -> Field -> VkImageTiling
    os << "value: " << t.tiling << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  usage" << std::endl;
    // usage -> Field -> VkImageUsageFlags
    os << "value: " << t.usage << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  sharingMode" << std::endl;
    // sharingMode -> Field -> VkSharingMode
    os << "value: " << t.sharingMode << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  queueFamilyIndexCount" << std::endl;
    // queueFamilyIndexCount -> Field -> uint32_t
    os << "value: " << t.queueFamilyIndexCount << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  pQueueFamilyIndices" << std::endl;
    // pQueueFamilyIndices -> Field -> ConstDynamicArray(uint32_t)
    {
      if (t.queueFamilyIndexCount == 0) {
        os << "value: nullptr" << std::endl;
      } else {
        os << "members:" << std::endl;
        {
          ScopedOstream soarray(os);
          os << "- # uint32_t" << std::endl;
          for (uint32_t i = 0; i < t.queueFamilyIndexCount; ++i) {
            ScopedOstream somember(os);
            os << "value: " << t.pQueueFamilyIndices[i] << std::endl;
          }
        }
      }
    }
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  initialLayout" << std::endl;
    // initialLayout -> Field -> VkImageLayout
    os << "value: " << t.initialLayout << std::endl;
  }

  return os;
}

std::ostream& operator<<(std::ostream& os, const VkSubresourceLayout& t) {
  ScopedOstream sos(os);
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  offset" << std::endl;
    // offset -> Field -> VkDeviceSize
    os << "value: " << t.offset << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  size" << std::endl;
    // size -> Field -> VkDeviceSize
    os << "value: " << t.size << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  rowPitch" << std::endl;
    // rowPitch -> Field -> VkDeviceSize
    os << "value: " << t.rowPitch << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  arrayPitch" << std::endl;
    // arrayPitch -> Field -> VkDeviceSize
    os << "value: " << t.arrayPitch << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  depthPitch" << std::endl;
    // depthPitch -> Field -> VkDeviceSize
    os << "value: " << t.depthPitch << std::endl;
  }

  return os;
}

std::ostream& operator<<(std::ostream& os, const VkImageViewCreateInfo& t) {
  ScopedOstream sos(os);
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  sType" << std::endl;
    // sType -> Field -> VkStructureType
    os << "value: " << t.sType << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  pNext" << std::endl;
    // pNext -> Field -> ConstNextPtr(void)

    // pNext
    os << "value: ";
    PrintNextPtr(os, t.pNext);
    os << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  flags" << std::endl;
    // flags -> Field -> VkImageViewCreateFlags
    os << "value: " << t.flags << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  image" << std::endl;
    // image -> Field -> VkImage
    os << "value: " << t.image << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  viewType" << std::endl;
    // viewType -> Field -> VkImageViewType
    os << "value: " << t.viewType << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  format" << std::endl;
    // format -> Field -> VkFormat
    os << "value: " << t.format << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  components" << std::endl;
    // components -> Field -> VkComponentMapping
    os << "members:" << std::endl << t.components << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  subresourceRange" << std::endl;
    // subresourceRange -> Field -> VkImageSubresourceRange
    os << "members:" << std::endl << t.subresourceRange << std::endl;
  }

  return os;
}

std::ostream& operator<<(std::ostream& os, const VkBufferCopy& t) {
  ScopedOstream sos(os);
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  srcOffset" << std::endl;
    // srcOffset -> Field -> VkDeviceSize
    os << "value: " << t.srcOffset << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  dstOffset" << std::endl;
    // dstOffset -> Field -> VkDeviceSize
    os << "value: " << t.dstOffset << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  size" << std::endl;
    // size -> Field -> VkDeviceSize
    os << "value: " << t.size << std::endl;
  }

  return os;
}

std::ostream& operator<<(std::ostream& os, const VkSparseMemoryBind& t) {
  ScopedOstream sos(os);
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  resourceOffset" << std::endl;
    // resourceOffset -> Field -> VkDeviceSize
    os << "value: " << t.resourceOffset << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  size" << std::endl;
    // size -> Field -> VkDeviceSize
    os << "value: " << t.size << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  memory" << std::endl;
    // memory -> Field -> VkDeviceMemory
    os << "value: " << t.memory << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  memoryOffset" << std::endl;
    // memoryOffset -> Field -> VkDeviceSize
    os << "value: " << t.memoryOffset << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  flags" << std::endl;
    // flags -> Field -> VkSparseMemoryBindFlags
    os << "value: " << t.flags << std::endl;
  }

  return os;
}

std::ostream& operator<<(std::ostream& os, const VkSparseImageMemoryBind& t) {
  ScopedOstream sos(os);
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  subresource" << std::endl;
    // subresource -> Field -> VkImageSubresource
    os << "members:" << std::endl << t.subresource << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  offset" << std::endl;
    // offset -> Field -> VkOffset3D
    os << "members:" << std::endl << t.offset << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  extent" << std::endl;
    // extent -> Field -> VkExtent3D
    os << "members:" << std::endl << t.extent << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  memory" << std::endl;
    // memory -> Field -> VkDeviceMemory
    os << "value: " << t.memory << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  memoryOffset" << std::endl;
    // memoryOffset -> Field -> VkDeviceSize
    os << "value: " << t.memoryOffset << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  flags" << std::endl;
    // flags -> Field -> VkSparseMemoryBindFlags
    os << "value: " << t.flags << std::endl;
  }

  return os;
}

std::ostream& operator<<(std::ostream& os,
                         const VkSparseBufferMemoryBindInfo& t) {
  ScopedOstream sos(os);
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  buffer" << std::endl;
    // buffer -> Field -> VkBuffer
    os << "value: " << t.buffer << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  bindCount" << std::endl;
    // bindCount -> Field -> uint32_t
    os << "value: " << t.bindCount << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  pBinds" << std::endl;
    // pBinds -> Field -> ConstDynamicArray(VkSparseMemoryBind)
    {
      if (t.bindCount == 0) {
        os << "value: nullptr" << std::endl;
      } else {
        os << "members:" << std::endl;
        {
          ScopedOstream soarray(os);
          os << "- # VkSparseMemoryBind" << std::endl;
          for (uint32_t i = 0; i < t.bindCount; ++i) {
            ScopedOstream somember(os);
            os << "members:" << std::endl << t.pBinds[i] << std::endl;
          }
        }
      }
    }
  }

  return os;
}

std::ostream& operator<<(std::ostream& os,
                         const VkSparseImageOpaqueMemoryBindInfo& t) {
  ScopedOstream sos(os);
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  image" << std::endl;
    // image -> Field -> VkImage
    os << "value: " << t.image << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  bindCount" << std::endl;
    // bindCount -> Field -> uint32_t
    os << "value: " << t.bindCount << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  pBinds" << std::endl;
    // pBinds -> Field -> ConstDynamicArray(VkSparseMemoryBind)
    {
      if (t.bindCount == 0) {
        os << "value: nullptr" << std::endl;
      } else {
        os << "members:" << std::endl;
        {
          ScopedOstream soarray(os);
          os << "- # VkSparseMemoryBind" << std::endl;
          for (uint32_t i = 0; i < t.bindCount; ++i) {
            ScopedOstream somember(os);
            os << "members:" << std::endl << t.pBinds[i] << std::endl;
          }
        }
      }
    }
  }

  return os;
}

std::ostream& operator<<(std::ostream& os,
                         const VkSparseImageMemoryBindInfo& t) {
  ScopedOstream sos(os);
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  image" << std::endl;
    // image -> Field -> VkImage
    os << "value: " << t.image << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  bindCount" << std::endl;
    // bindCount -> Field -> uint32_t
    os << "value: " << t.bindCount << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  pBinds" << std::endl;
    // pBinds -> Field -> ConstDynamicArray(VkSparseImageMemoryBind)
    {
      if (t.bindCount == 0) {
        os << "value: nullptr" << std::endl;
      } else {
        os << "members:" << std::endl;
        {
          ScopedOstream soarray(os);
          os << "- # VkSparseImageMemoryBind" << std::endl;
          for (uint32_t i = 0; i < t.bindCount; ++i) {
            ScopedOstream somember(os);
            os << "members:" << std::endl << t.pBinds[i] << std::endl;
          }
        }
      }
    }
  }

  return os;
}

std::ostream& operator<<(std::ostream& os, const VkBindSparseInfo& t) {
  ScopedOstream sos(os);
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  sType" << std::endl;
    // sType -> Field -> VkStructureType
    os << "value: " << t.sType << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  pNext" << std::endl;
    // pNext -> Field -> ConstNextPtr(void)

    // pNext
    os << "value: ";
    PrintNextPtr(os, t.pNext);
    os << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  waitSemaphoreCount" << std::endl;
    // waitSemaphoreCount -> Field -> uint32_t
    os << "value: " << t.waitSemaphoreCount << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  pWaitSemaphores" << std::endl;
    // pWaitSemaphores -> Field -> ConstDynamicArray(VkSemaphore)
    {
      if (t.waitSemaphoreCount == 0) {
        os << "value: nullptr" << std::endl;
      } else {
        os << "members:" << std::endl;
        {
          ScopedOstream soarray(os);
          os << "- # VkSemaphore" << std::endl;
          for (uint32_t i = 0; i < t.waitSemaphoreCount; ++i) {
            ScopedOstream somember(os);
            os << "value: " << t.pWaitSemaphores[i] << std::endl;
          }
        }
      }
    }
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  bufferBindCount" << std::endl;
    // bufferBindCount -> Field -> uint32_t
    os << "value: " << t.bufferBindCount << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  pBufferBinds" << std::endl;
    // pBufferBinds -> Field -> ConstDynamicArray(VkSparseBufferMemoryBindInfo)
    {
      if (t.bufferBindCount == 0) {
        os << "value: nullptr" << std::endl;
      } else {
        os << "members:" << std::endl;
        {
          ScopedOstream soarray(os);
          os << "- # VkSparseBufferMemoryBindInfo" << std::endl;
          for (uint32_t i = 0; i < t.bufferBindCount; ++i) {
            ScopedOstream somember(os);
            os << "members:" << std::endl << t.pBufferBinds[i] << std::endl;
          }
        }
      }
    }
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  imageOpaqueBindCount" << std::endl;
    // imageOpaqueBindCount -> Field -> uint32_t
    os << "value: " << t.imageOpaqueBindCount << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  pImageOpaqueBinds" << std::endl;
    // pImageOpaqueBinds -> Field ->
    // ConstDynamicArray(VkSparseImageOpaqueMemoryBindInfo)
    {
      if (t.imageOpaqueBindCount == 0) {
        os << "value: nullptr" << std::endl;
      } else {
        os << "members:" << std::endl;
        {
          ScopedOstream soarray(os);
          os << "- # VkSparseImageOpaqueMemoryBindInfo" << std::endl;
          for (uint32_t i = 0; i < t.imageOpaqueBindCount; ++i) {
            ScopedOstream somember(os);
            os << "members:" << std::endl
               << t.pImageOpaqueBinds[i] << std::endl;
          }
        }
      }
    }
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  imageBindCount" << std::endl;
    // imageBindCount -> Field -> uint32_t
    os << "value: " << t.imageBindCount << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  pImageBinds" << std::endl;
    // pImageBinds -> Field -> ConstDynamicArray(VkSparseImageMemoryBindInfo)
    {
      if (t.imageBindCount == 0) {
        os << "value: nullptr" << std::endl;
      } else {
        os << "members:" << std::endl;
        {
          ScopedOstream soarray(os);
          os << "- # VkSparseImageMemoryBindInfo" << std::endl;
          for (uint32_t i = 0; i < t.imageBindCount; ++i) {
            ScopedOstream somember(os);
            os << "members:" << std::endl << t.pImageBinds[i] << std::endl;
          }
        }
      }
    }
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  signalSemaphoreCount" << std::endl;
    // signalSemaphoreCount -> Field -> uint32_t
    os << "value: " << t.signalSemaphoreCount << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  pSignalSemaphores" << std::endl;
    // pSignalSemaphores -> Field -> ConstDynamicArray(VkSemaphore)
    {
      if (t.signalSemaphoreCount == 0) {
        os << "value: nullptr" << std::endl;
      } else {
        os << "members:" << std::endl;
        {
          ScopedOstream soarray(os);
          os << "- # VkSemaphore" << std::endl;
          for (uint32_t i = 0; i < t.signalSemaphoreCount; ++i) {
            ScopedOstream somember(os);
            os << "value: " << t.pSignalSemaphores[i] << std::endl;
          }
        }
      }
    }
  }

  return os;
}

std::ostream& operator<<(std::ostream& os, const VkImageCopy& t) {
  ScopedOstream sos(os);
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  srcSubresource" << std::endl;
    // srcSubresource -> Field -> VkImageSubresourceLayers
    os << "members:" << std::endl << t.srcSubresource << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  srcOffset" << std::endl;
    // srcOffset -> Field -> VkOffset3D
    os << "members:" << std::endl << t.srcOffset << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  dstSubresource" << std::endl;
    // dstSubresource -> Field -> VkImageSubresourceLayers
    os << "members:" << std::endl << t.dstSubresource << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  dstOffset" << std::endl;
    // dstOffset -> Field -> VkOffset3D
    os << "members:" << std::endl << t.dstOffset << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  extent" << std::endl;
    // extent -> Field -> VkExtent3D
    os << "members:" << std::endl << t.extent << std::endl;
  }

  return os;
}

std::ostream& operator<<(std::ostream& os, const VkImageBlit& t) {
  ScopedOstream sos(os);
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  srcSubresource" << std::endl;
    // srcSubresource -> Field -> VkImageSubresourceLayers
    os << "members:" << std::endl << t.srcSubresource << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  srcOffsets" << std::endl;
    // srcOffsets -> Field -> FixedArray(VkOffset3D)
    {
      if (2 == 0) {
        os << "value: nullptr" << std::endl;
      } else {
        os << "members:" << std::endl;
        {
          ScopedOstream soarray(os);
          os << "- # VkOffset3D" << std::endl;
          for (uint32_t i = 0; i < 2; ++i) {
            ScopedOstream somember(os);
            os << "members:" << std::endl << t.srcOffsets[i] << std::endl;
          }
        }
      }
    }
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  dstSubresource" << std::endl;
    // dstSubresource -> Field -> VkImageSubresourceLayers
    os << "members:" << std::endl << t.dstSubresource << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  dstOffsets" << std::endl;
    // dstOffsets -> Field -> FixedArray(VkOffset3D)
    {
      if (2 == 0) {
        os << "value: nullptr" << std::endl;
      } else {
        os << "members:" << std::endl;
        {
          ScopedOstream soarray(os);
          os << "- # VkOffset3D" << std::endl;
          for (uint32_t i = 0; i < 2; ++i) {
            ScopedOstream somember(os);
            os << "members:" << std::endl << t.dstOffsets[i] << std::endl;
          }
        }
      }
    }
  }

  return os;
}

std::ostream& operator<<(std::ostream& os, const VkBufferImageCopy& t) {
  ScopedOstream sos(os);
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  bufferOffset" << std::endl;
    // bufferOffset -> Field -> VkDeviceSize
    os << "value: " << t.bufferOffset << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  bufferRowLength" << std::endl;
    // bufferRowLength -> Field -> uint32_t
    os << "value: " << t.bufferRowLength << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  bufferImageHeight" << std::endl;
    // bufferImageHeight -> Field -> uint32_t
    os << "value: " << t.bufferImageHeight << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  imageSubresource" << std::endl;
    // imageSubresource -> Field -> VkImageSubresourceLayers
    os << "members:" << std::endl << t.imageSubresource << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  imageOffset" << std::endl;
    // imageOffset -> Field -> VkOffset3D
    os << "members:" << std::endl << t.imageOffset << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  imageExtent" << std::endl;
    // imageExtent -> Field -> VkExtent3D
    os << "members:" << std::endl << t.imageExtent << std::endl;
  }

  return os;
}

std::ostream& operator<<(std::ostream& os, const VkImageResolve& t) {
  ScopedOstream sos(os);
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  srcSubresource" << std::endl;
    // srcSubresource -> Field -> VkImageSubresourceLayers
    os << "members:" << std::endl << t.srcSubresource << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  srcOffset" << std::endl;
    // srcOffset -> Field -> VkOffset3D
    os << "members:" << std::endl << t.srcOffset << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  dstSubresource" << std::endl;
    // dstSubresource -> Field -> VkImageSubresourceLayers
    os << "members:" << std::endl << t.dstSubresource << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  dstOffset" << std::endl;
    // dstOffset -> Field -> VkOffset3D
    os << "members:" << std::endl << t.dstOffset << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  extent" << std::endl;
    // extent -> Field -> VkExtent3D
    os << "members:" << std::endl << t.extent << std::endl;
  }

  return os;
}

std::ostream& operator<<(std::ostream& os, const VkShaderModuleCreateInfo& t) {
  ScopedOstream sos(os);
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  sType" << std::endl;
    // sType -> Field -> VkStructureType
    os << "value: " << t.sType << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  pNext" << std::endl;
    // pNext -> Field -> ConstNextPtr(void)

    // pNext
    os << "value: ";
    PrintNextPtr(os, t.pNext);
    os << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  flags" << std::endl;
    // flags -> Field -> VkShaderModuleCreateFlags
    os << "value: " << t.flags << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  codeSize" << std::endl;
    // codeSize -> Field -> size_t
    os << "value: " << t.codeSize << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  pCode" << std::endl;
    // pCode -> Field -> ConstDynamicArray(uint32_t)
    {
      if (t.codeSize / 4 == 0) {
        os << "value: nullptr" << std::endl;
      } else {
        os << "members:" << std::endl;
        {
          ScopedOstream soarray(os);
          os << "- # uint32_t" << std::endl;
          for (uint32_t i = 0; i < t.codeSize / 4; ++i) {
            ScopedOstream somember(os);
            os << "value: " << t.pCode[i] << std::endl;
          }
        }
      }
    }
  }

  return os;
}

std::ostream& operator<<(std::ostream& os,
                         const VkDescriptorSetLayoutBinding& t) {
  ScopedOstream sos(os);
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  binding" << std::endl;
    // binding -> Field -> uint32_t
    os << "value: " << t.binding << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  descriptorType" << std::endl;
    // descriptorType -> Field -> VkDescriptorType
    os << "value: " << t.descriptorType << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  descriptorCount" << std::endl;
    // descriptorCount -> Field -> uint32_t
    os << "value: " << t.descriptorCount << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  stageFlags" << std::endl;
    // stageFlags -> Field -> VkShaderStageFlags
    os << "value: " << t.stageFlags << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  pImmutableSamplers" << std::endl;
    // pImmutableSamplers -> Field -> ConstDynamicArray(VkSampler)
    {
      if (t.descriptorCount == 0) {
        os << "value: nullptr" << std::endl;
      } else {
        os << "members:" << std::endl;
        {
          ScopedOstream soarray(os);
          os << "- # VkSampler" << std::endl;
          for (uint32_t i = 0; i < t.descriptorCount; ++i) {
            ScopedOstream somember(os);
            os << "value: " << t.pImmutableSamplers[i] << std::endl;
          }
        }
      }
    }
  }

  return os;
}

std::ostream& operator<<(std::ostream& os,
                         const VkDescriptorSetLayoutCreateInfo& t) {
  ScopedOstream sos(os);
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  sType" << std::endl;
    // sType -> Field -> VkStructureType
    os << "value: " << t.sType << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  pNext" << std::endl;
    // pNext -> Field -> ConstNextPtr(void)

    // pNext
    os << "value: ";
    PrintNextPtr(os, t.pNext);
    os << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  flags" << std::endl;
    // flags -> Field -> VkDescriptorSetLayoutCreateFlags
    os << "value: " << t.flags << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  bindingCount" << std::endl;
    // bindingCount -> Field -> uint32_t
    os << "value: " << t.bindingCount << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  pBindings" << std::endl;
    // pBindings -> Field -> ConstDynamicArray(VkDescriptorSetLayoutBinding)
    {
      if (t.bindingCount == 0) {
        os << "value: nullptr" << std::endl;
      } else {
        os << "members:" << std::endl;
        {
          ScopedOstream soarray(os);
          os << "- # VkDescriptorSetLayoutBinding" << std::endl;
          for (uint32_t i = 0; i < t.bindingCount; ++i) {
            ScopedOstream somember(os);
            os << "members:" << std::endl << t.pBindings[i] << std::endl;
          }
        }
      }
    }
  }

  return os;
}

std::ostream& operator<<(std::ostream& os, const VkDescriptorPoolSize& t) {
  ScopedOstream sos(os);
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  type" << std::endl;
    // type -> Field -> VkDescriptorType
    os << "value: " << t.type << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  descriptorCount" << std::endl;
    // descriptorCount -> Field -> uint32_t
    os << "value: " << t.descriptorCount << std::endl;
  }

  return os;
}

std::ostream& operator<<(std::ostream& os,
                         const VkDescriptorPoolCreateInfo& t) {
  ScopedOstream sos(os);
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  sType" << std::endl;
    // sType -> Field -> VkStructureType
    os << "value: " << t.sType << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  pNext" << std::endl;
    // pNext -> Field -> ConstNextPtr(void)

    // pNext
    os << "value: ";
    PrintNextPtr(os, t.pNext);
    os << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  flags" << std::endl;
    // flags -> Field -> VkDescriptorPoolCreateFlags
    os << "value: " << t.flags << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  maxSets" << std::endl;
    // maxSets -> Field -> uint32_t
    os << "value: " << t.maxSets << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  poolSizeCount" << std::endl;
    // poolSizeCount -> Field -> uint32_t
    os << "value: " << t.poolSizeCount << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  pPoolSizes" << std::endl;
    // pPoolSizes -> Field -> ConstDynamicArray(VkDescriptorPoolSize)
    {
      if (t.poolSizeCount == 0) {
        os << "value: nullptr" << std::endl;
      } else {
        os << "members:" << std::endl;
        {
          ScopedOstream soarray(os);
          os << "- # VkDescriptorPoolSize" << std::endl;
          for (uint32_t i = 0; i < t.poolSizeCount; ++i) {
            ScopedOstream somember(os);
            os << "members:" << std::endl << t.pPoolSizes[i] << std::endl;
          }
        }
      }
    }
  }

  return os;
}

std::ostream& operator<<(std::ostream& os,
                         const VkDescriptorSetAllocateInfo& t) {
  ScopedOstream sos(os);
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  sType" << std::endl;
    // sType -> Field -> VkStructureType
    os << "value: " << t.sType << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  pNext" << std::endl;
    // pNext -> Field -> ConstNextPtr(void)

    // pNext
    os << "value: ";
    PrintNextPtr(os, t.pNext);
    os << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  descriptorPool" << std::endl;
    // descriptorPool -> Field -> VkDescriptorPool
    os << "value: " << t.descriptorPool << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  descriptorSetCount" << std::endl;
    // descriptorSetCount -> Field -> uint32_t
    os << "value: " << t.descriptorSetCount << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  pSetLayouts" << std::endl;
    // pSetLayouts -> Field -> ConstDynamicArray(VkDescriptorSetLayout)
    {
      if (t.descriptorSetCount == 0) {
        os << "value: nullptr" << std::endl;
      } else {
        os << "members:" << std::endl;
        {
          ScopedOstream soarray(os);
          os << "- # VkDescriptorSetLayout" << std::endl;
          for (uint32_t i = 0; i < t.descriptorSetCount; ++i) {
            ScopedOstream somember(os);
            os << "value: " << t.pSetLayouts[i] << std::endl;
          }
        }
      }
    }
  }

  return os;
}

std::ostream& operator<<(std::ostream& os, const VkSpecializationMapEntry& t) {
  ScopedOstream sos(os);
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  constantID" << std::endl;
    // constantID -> Field -> uint32_t
    os << "value: " << t.constantID << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  offset" << std::endl;
    // offset -> Field -> uint32_t
    os << "value: " << t.offset << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  size" << std::endl;
    // size -> Field -> size_t
    os << "value: " << t.size << std::endl;
  }

  return os;
}

std::ostream& operator<<(std::ostream& os, const VkSpecializationInfo& t) {
  ScopedOstream sos(os);
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  mapEntryCount" << std::endl;
    // mapEntryCount -> Field -> uint32_t
    os << "value: " << t.mapEntryCount << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  pMapEntries" << std::endl;
    // pMapEntries -> Field -> ConstDynamicArray(VkSpecializationMapEntry)
    {
      if (t.mapEntryCount == 0) {
        os << "value: nullptr" << std::endl;
      } else {
        os << "members:" << std::endl;
        {
          ScopedOstream soarray(os);
          os << "- # VkSpecializationMapEntry" << std::endl;
          for (uint32_t i = 0; i < t.mapEntryCount; ++i) {
            ScopedOstream somember(os);
            os << "members:" << std::endl << t.pMapEntries[i] << std::endl;
          }
        }
      }
    }
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  dataSize" << std::endl;
    // dataSize -> Field -> size_t
    os << "value: " << t.dataSize << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  pData" << std::endl;
    // pData -> Field -> ConstDynamicArray(void)
    {
      if (t.dataSize == 0) {
        os << "value: nullptr" << std::endl;
      } else {
        os << std::hex;
        os << "members:" << std::endl;
        {
          ScopedOstream soarray(os);
          const uint8_t* p = (const uint8_t*)t.pData;
          for (uint32_t i = 0; i < t.dataSize; ++i) {
            os << "- 0x" << p[i] << std::endl;
          }
        }
        os << std::dec;
      }
    }
  }

  return os;
}

std::ostream& operator<<(std::ostream& os,
                         const VkPipelineShaderStageCreateInfo& t) {
  ScopedOstream sos(os);
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  sType" << std::endl;
    // sType -> Field -> VkStructureType
    os << "value: " << t.sType << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  pNext" << std::endl;
    // pNext -> Field -> ConstNextPtr(void)

    // pNext
    os << "value: ";
    PrintNextPtr(os, t.pNext);
    os << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  flags" << std::endl;
    // flags -> Field -> VkPipelineShaderStageCreateFlags
    os << "value: " << t.flags << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  stage" << std::endl;
    // stage -> Field -> VkShaderStageFlagBits
    os << "value: " << t.stage << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  module" << std::endl;
    // module -> Field -> VkShaderModule
    os << "value: " << t.module << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  pName" << std::endl;
    // pName -> Field -> string
    os << "value: " << t.pName << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  pSpecializationInfo" << std::endl;
    // pSpecializationInfo -> Field -> ConstPointer(VkSpecializationInfo)
    // pointer
    if (t.pSpecializationInfo) {
      os << "members:" << std::endl << *t.pSpecializationInfo << std::endl;
    } else {
      os << "value: nullptr" << std::endl;
    }
  }

  return os;
}

std::ostream& operator<<(std::ostream& os,
                         const VkComputePipelineCreateInfo& t) {
  ScopedOstream sos(os);
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  sType" << std::endl;
    // sType -> Field -> VkStructureType
    os << "value: " << t.sType << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  pNext" << std::endl;
    // pNext -> Field -> ConstNextPtr(void)

    // pNext
    os << "value: ";
    PrintNextPtr(os, t.pNext);
    os << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  flags" << std::endl;
    // flags -> Field -> VkPipelineCreateFlags
    os << "value: " << t.flags << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  stage" << std::endl;
    // stage -> Field -> VkPipelineShaderStageCreateInfo
    os << "members:" << std::endl << t.stage << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  layout" << std::endl;
    // layout -> Field -> VkPipelineLayout
    os << "value: " << t.layout << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  basePipelineHandle" << std::endl;
    // basePipelineHandle -> Field -> VkPipeline
    os << "value: " << t.basePipelineHandle << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  basePipelineIndex" << std::endl;
    // basePipelineIndex -> Field -> int32_t
    os << "value: " << t.basePipelineIndex << std::endl;
  }

  return os;
}

std::ostream& operator<<(std::ostream& os,
                         const VkVertexInputBindingDescription& t) {
  ScopedOstream sos(os);
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  binding" << std::endl;
    // binding -> Field -> uint32_t
    os << "value: " << t.binding << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  stride" << std::endl;
    // stride -> Field -> uint32_t
    os << "value: " << t.stride << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  inputRate" << std::endl;
    // inputRate -> Field -> VkVertexInputRate
    os << "value: " << t.inputRate << std::endl;
  }

  return os;
}

std::ostream& operator<<(std::ostream& os,
                         const VkVertexInputAttributeDescription& t) {
  ScopedOstream sos(os);
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  location" << std::endl;
    // location -> Field -> uint32_t
    os << "value: " << t.location << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  binding" << std::endl;
    // binding -> Field -> uint32_t
    os << "value: " << t.binding << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  format" << std::endl;
    // format -> Field -> VkFormat
    os << "value: " << t.format << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  offset" << std::endl;
    // offset -> Field -> uint32_t
    os << "value: " << t.offset << std::endl;
  }

  return os;
}

std::ostream& operator<<(std::ostream& os,
                         const VkPipelineVertexInputStateCreateInfo& t) {
  ScopedOstream sos(os);
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  sType" << std::endl;
    // sType -> Field -> VkStructureType
    os << "value: " << t.sType << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  pNext" << std::endl;
    // pNext -> Field -> ConstNextPtr(void)

    // pNext
    os << "value: ";
    PrintNextPtr(os, t.pNext);
    os << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  flags" << std::endl;
    // flags -> Field -> VkPipelineVertexInputStateCreateFlags
    os << "value: " << t.flags << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  vertexBindingDescriptionCount" << std::endl;
    // vertexBindingDescriptionCount -> Field -> uint32_t
    os << "value: " << t.vertexBindingDescriptionCount << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  pVertexBindingDescriptions" << std::endl;
    // pVertexBindingDescriptions -> Field ->
    // ConstDynamicArray(VkVertexInputBindingDescription)
    {
      if (t.vertexBindingDescriptionCount == 0) {
        os << "value: nullptr" << std::endl;
      } else {
        os << "members:" << std::endl;
        {
          ScopedOstream soarray(os);
          os << "- # VkVertexInputBindingDescription" << std::endl;
          for (uint32_t i = 0; i < t.vertexBindingDescriptionCount; ++i) {
            ScopedOstream somember(os);
            os << "members:" << std::endl
               << t.pVertexBindingDescriptions[i] << std::endl;
          }
        }
      }
    }
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  vertexAttributeDescriptionCount" << std::endl;
    // vertexAttributeDescriptionCount -> Field -> uint32_t
    os << "value: " << t.vertexAttributeDescriptionCount << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  pVertexAttributeDescriptions" << std::endl;
    // pVertexAttributeDescriptions -> Field ->
    // ConstDynamicArray(VkVertexInputAttributeDescription)
    {
      if (t.vertexAttributeDescriptionCount == 0) {
        os << "value: nullptr" << std::endl;
      } else {
        os << "members:" << std::endl;
        {
          ScopedOstream soarray(os);
          os << "- # VkVertexInputAttributeDescription" << std::endl;
          for (uint32_t i = 0; i < t.vertexAttributeDescriptionCount; ++i) {
            ScopedOstream somember(os);
            os << "members:" << std::endl
               << t.pVertexAttributeDescriptions[i] << std::endl;
          }
        }
      }
    }
  }

  return os;
}

std::ostream& operator<<(std::ostream& os,
                         const VkPipelineInputAssemblyStateCreateInfo& t) {
  ScopedOstream sos(os);
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  sType" << std::endl;
    // sType -> Field -> VkStructureType
    os << "value: " << t.sType << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  pNext" << std::endl;
    // pNext -> Field -> ConstNextPtr(void)

    // pNext
    os << "value: ";
    PrintNextPtr(os, t.pNext);
    os << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  flags" << std::endl;
    // flags -> Field -> VkPipelineInputAssemblyStateCreateFlags
    os << "value: " << t.flags << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  topology" << std::endl;
    // topology -> Field -> VkPrimitiveTopology
    os << "value: " << t.topology << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  primitiveRestartEnable" << std::endl;
    // primitiveRestartEnable -> Field -> VkBool32
    os << "value: " << t.primitiveRestartEnable << std::endl;
  }

  return os;
}

std::ostream& operator<<(std::ostream& os,
                         const VkPipelineTessellationStateCreateInfo& t) {
  ScopedOstream sos(os);
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  sType" << std::endl;
    // sType -> Field -> VkStructureType
    os << "value: " << t.sType << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  pNext" << std::endl;
    // pNext -> Field -> ConstNextPtr(void)

    // pNext
    os << "value: ";
    PrintNextPtr(os, t.pNext);
    os << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  flags" << std::endl;
    // flags -> Field -> VkPipelineTessellationStateCreateFlags
    os << "value: " << t.flags << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  patchControlPoints" << std::endl;
    // patchControlPoints -> Field -> uint32_t
    os << "value: " << t.patchControlPoints << std::endl;
  }

  return os;
}

std::ostream& operator<<(std::ostream& os,
                         const VkPipelineViewportStateCreateInfo& t) {
  ScopedOstream sos(os);
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  sType" << std::endl;
    // sType -> Field -> VkStructureType
    os << "value: " << t.sType << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  pNext" << std::endl;
    // pNext -> Field -> ConstNextPtr(void)

    // pNext
    os << "value: ";
    PrintNextPtr(os, t.pNext);
    os << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  flags" << std::endl;
    // flags -> Field -> VkPipelineViewportStateCreateFlags
    os << "value: " << t.flags << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  viewportCount" << std::endl;
    // viewportCount -> Field -> uint32_t
    os << "value: " << t.viewportCount << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  pViewports" << std::endl;
    // pViewports -> Field -> ConstDynamicArray(VkViewport)
    {
      if (t.viewportCount == 0) {
        os << "value: nullptr" << std::endl;
      } else {
        os << "members:" << std::endl;
        {
          ScopedOstream soarray(os);
          os << "- # VkViewport" << std::endl;
          for (uint32_t i = 0; i < t.viewportCount; ++i) {
            ScopedOstream somember(os);
            os << "members:" << std::endl << t.pViewports[i] << std::endl;
          }
        }
      }
    }
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  scissorCount" << std::endl;
    // scissorCount -> Field -> uint32_t
    os << "value: " << t.scissorCount << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  pScissors" << std::endl;
    // pScissors -> Field -> ConstDynamicArray(VkRect2D)
    {
      if (t.scissorCount == 0) {
        os << "value: nullptr" << std::endl;
      } else {
        os << "members:" << std::endl;
        {
          ScopedOstream soarray(os);
          os << "- # VkRect2D" << std::endl;
          for (uint32_t i = 0; i < t.scissorCount; ++i) {
            ScopedOstream somember(os);
            os << "members:" << std::endl << t.pScissors[i] << std::endl;
          }
        }
      }
    }
  }

  return os;
}

std::ostream& operator<<(std::ostream& os,
                         const VkPipelineRasterizationStateCreateInfo& t) {
  ScopedOstream sos(os);
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  sType" << std::endl;
    // sType -> Field -> VkStructureType
    os << "value: " << t.sType << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  pNext" << std::endl;
    // pNext -> Field -> ConstNextPtr(void)

    // pNext
    os << "value: ";
    PrintNextPtr(os, t.pNext);
    os << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  flags" << std::endl;
    // flags -> Field -> VkPipelineRasterizationStateCreateFlags
    os << "value: " << t.flags << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  depthClampEnable" << std::endl;
    // depthClampEnable -> Field -> VkBool32
    os << "value: " << t.depthClampEnable << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  rasterizerDiscardEnable" << std::endl;
    // rasterizerDiscardEnable -> Field -> VkBool32
    os << "value: " << t.rasterizerDiscardEnable << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  polygonMode" << std::endl;
    // polygonMode -> Field -> VkPolygonMode
    os << "value: " << t.polygonMode << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  cullMode" << std::endl;
    // cullMode -> Field -> VkCullModeFlags
    os << "value: " << t.cullMode << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  frontFace" << std::endl;
    // frontFace -> Field -> VkFrontFace
    os << "value: " << t.frontFace << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  depthBiasEnable" << std::endl;
    // depthBiasEnable -> Field -> VkBool32
    os << "value: " << t.depthBiasEnable << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  depthBiasConstantFactor" << std::endl;
    // depthBiasConstantFactor -> Field -> float
    os << "value: " << t.depthBiasConstantFactor << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  depthBiasClamp" << std::endl;
    // depthBiasClamp -> Field -> float
    os << "value: " << t.depthBiasClamp << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  depthBiasSlopeFactor" << std::endl;
    // depthBiasSlopeFactor -> Field -> float
    os << "value: " << t.depthBiasSlopeFactor << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  lineWidth" << std::endl;
    // lineWidth -> Field -> float
    os << "value: " << t.lineWidth << std::endl;
  }

  return os;
}

std::ostream& operator<<(std::ostream& os,
                         const VkPipelineMultisampleStateCreateInfo& t) {
  ScopedOstream sos(os);
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  sType" << std::endl;
    // sType -> Field -> VkStructureType
    os << "value: " << t.sType << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  pNext" << std::endl;
    // pNext -> Field -> ConstNextPtr(void)

    // pNext
    os << "value: ";
    PrintNextPtr(os, t.pNext);
    os << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  flags" << std::endl;
    // flags -> Field -> VkPipelineMultisampleStateCreateFlags
    os << "value: " << t.flags << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  rasterizationSamples" << std::endl;
    // rasterizationSamples -> Field -> VkSampleCountFlagBits
    os << "value: " << t.rasterizationSamples << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  sampleShadingEnable" << std::endl;
    // sampleShadingEnable -> Field -> VkBool32
    os << "value: " << t.sampleShadingEnable << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  minSampleShading" << std::endl;
    // minSampleShading -> Field -> float
    os << "value: " << t.minSampleShading << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  pSampleMask" << std::endl;
    // pSampleMask -> Field -> ConstDynamicArray(VkSampleMask)
    {
      if ((t.rasterizationSamples + 31) / 32 == 0) {
        os << "value: nullptr" << std::endl;
      } else {
        os << "members:" << std::endl;
        {
          ScopedOstream soarray(os);
          os << "- # VkSampleMask" << std::endl;
          for (uint32_t i = 0; i < (t.rasterizationSamples + 31) / 32; ++i) {
            ScopedOstream somember(os);
            os << "value: " << t.pSampleMask[i] << std::endl;
          }
        }
      }
    }
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  alphaToCoverageEnable" << std::endl;
    // alphaToCoverageEnable -> Field -> VkBool32
    os << "value: " << t.alphaToCoverageEnable << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  alphaToOneEnable" << std::endl;
    // alphaToOneEnable -> Field -> VkBool32
    os << "value: " << t.alphaToOneEnable << std::endl;
  }

  return os;
}

std::ostream& operator<<(std::ostream& os,
                         const VkPipelineColorBlendAttachmentState& t) {
  ScopedOstream sos(os);
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  blendEnable" << std::endl;
    // blendEnable -> Field -> VkBool32
    os << "value: " << t.blendEnable << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  srcColorBlendFactor" << std::endl;
    // srcColorBlendFactor -> Field -> VkBlendFactor
    os << "value: " << t.srcColorBlendFactor << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  dstColorBlendFactor" << std::endl;
    // dstColorBlendFactor -> Field -> VkBlendFactor
    os << "value: " << t.dstColorBlendFactor << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  colorBlendOp" << std::endl;
    // colorBlendOp -> Field -> VkBlendOp
    os << "value: " << t.colorBlendOp << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  srcAlphaBlendFactor" << std::endl;
    // srcAlphaBlendFactor -> Field -> VkBlendFactor
    os << "value: " << t.srcAlphaBlendFactor << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  dstAlphaBlendFactor" << std::endl;
    // dstAlphaBlendFactor -> Field -> VkBlendFactor
    os << "value: " << t.dstAlphaBlendFactor << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  alphaBlendOp" << std::endl;
    // alphaBlendOp -> Field -> VkBlendOp
    os << "value: " << t.alphaBlendOp << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  colorWriteMask" << std::endl;
    // colorWriteMask -> Field -> VkColorComponentFlags
    os << "value: " << t.colorWriteMask << std::endl;
  }

  return os;
}

std::ostream& operator<<(std::ostream& os,
                         const VkPipelineColorBlendStateCreateInfo& t) {
  ScopedOstream sos(os);
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  sType" << std::endl;
    // sType -> Field -> VkStructureType
    os << "value: " << t.sType << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  pNext" << std::endl;
    // pNext -> Field -> ConstNextPtr(void)

    // pNext
    os << "value: ";
    PrintNextPtr(os, t.pNext);
    os << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  flags" << std::endl;
    // flags -> Field -> VkPipelineColorBlendStateCreateFlags
    os << "value: " << t.flags << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  logicOpEnable" << std::endl;
    // logicOpEnable -> Field -> VkBool32
    os << "value: " << t.logicOpEnable << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  logicOp" << std::endl;
    // logicOp -> Field -> VkLogicOp
    os << "value: " << t.logicOp << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  attachmentCount" << std::endl;
    // attachmentCount -> Field -> uint32_t
    os << "value: " << t.attachmentCount << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  pAttachments" << std::endl;
    // pAttachments -> Field ->
    // ConstDynamicArray(VkPipelineColorBlendAttachmentState)
    {
      if (t.attachmentCount == 0) {
        os << "value: nullptr" << std::endl;
      } else {
        os << "members:" << std::endl;
        {
          ScopedOstream soarray(os);
          os << "- # VkPipelineColorBlendAttachmentState" << std::endl;
          for (uint32_t i = 0; i < t.attachmentCount; ++i) {
            ScopedOstream somember(os);
            os << "members:" << std::endl << t.pAttachments[i] << std::endl;
          }
        }
      }
    }
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  blendConstants" << std::endl;
    // blendConstants -> Field -> FixedArray(float)
    {
      if (4 == 0) {
        os << "value: nullptr" << std::endl;
      } else {
        os << "members:" << std::endl;
        {
          ScopedOstream soarray(os);
          os << "- # float" << std::endl;
          for (uint32_t i = 0; i < 4; ++i) {
            ScopedOstream somember(os);
            os << "value: " << t.blendConstants[i] << std::endl;
          }
        }
      }
    }
  }

  return os;
}

std::ostream& operator<<(std::ostream& os,
                         const VkPipelineDynamicStateCreateInfo& t) {
  ScopedOstream sos(os);
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  sType" << std::endl;
    // sType -> Field -> VkStructureType
    os << "value: " << t.sType << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  pNext" << std::endl;
    // pNext -> Field -> ConstNextPtr(void)

    // pNext
    os << "value: ";
    PrintNextPtr(os, t.pNext);
    os << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  flags" << std::endl;
    // flags -> Field -> VkPipelineDynamicStateCreateFlags
    os << "value: " << t.flags << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  dynamicStateCount" << std::endl;
    // dynamicStateCount -> Field -> uint32_t
    os << "value: " << t.dynamicStateCount << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  pDynamicStates" << std::endl;
    // pDynamicStates -> Field -> ConstDynamicArray(VkDynamicState)
    {
      if (t.dynamicStateCount == 0) {
        os << "value: nullptr" << std::endl;
      } else {
        os << "members:" << std::endl;
        {
          ScopedOstream soarray(os);
          os << "- # VkDynamicState" << std::endl;
          for (uint32_t i = 0; i < t.dynamicStateCount; ++i) {
            ScopedOstream somember(os);
            os << "value: " << t.pDynamicStates[i] << std::endl;
          }
        }
      }
    }
  }

  return os;
}

std::ostream& operator<<(std::ostream& os, const VkStencilOpState& t) {
  ScopedOstream sos(os);
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  failOp" << std::endl;
    // failOp -> Field -> VkStencilOp
    os << "value: " << t.failOp << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  passOp" << std::endl;
    // passOp -> Field -> VkStencilOp
    os << "value: " << t.passOp << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  depthFailOp" << std::endl;
    // depthFailOp -> Field -> VkStencilOp
    os << "value: " << t.depthFailOp << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  compareOp" << std::endl;
    // compareOp -> Field -> VkCompareOp
    os << "value: " << t.compareOp << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  compareMask" << std::endl;
    // compareMask -> Field -> uint32_t
    os << "value: " << t.compareMask << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  writeMask" << std::endl;
    // writeMask -> Field -> uint32_t
    os << "value: " << t.writeMask << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  reference" << std::endl;
    // reference -> Field -> uint32_t
    os << "value: " << t.reference << std::endl;
  }

  return os;
}

std::ostream& operator<<(std::ostream& os,
                         const VkPipelineDepthStencilStateCreateInfo& t) {
  ScopedOstream sos(os);
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  sType" << std::endl;
    // sType -> Field -> VkStructureType
    os << "value: " << t.sType << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  pNext" << std::endl;
    // pNext -> Field -> ConstNextPtr(void)

    // pNext
    os << "value: ";
    PrintNextPtr(os, t.pNext);
    os << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  flags" << std::endl;
    // flags -> Field -> VkPipelineDepthStencilStateCreateFlags
    os << "value: " << t.flags << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  depthTestEnable" << std::endl;
    // depthTestEnable -> Field -> VkBool32
    os << "value: " << t.depthTestEnable << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  depthWriteEnable" << std::endl;
    // depthWriteEnable -> Field -> VkBool32
    os << "value: " << t.depthWriteEnable << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  depthCompareOp" << std::endl;
    // depthCompareOp -> Field -> VkCompareOp
    os << "value: " << t.depthCompareOp << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  depthBoundsTestEnable" << std::endl;
    // depthBoundsTestEnable -> Field -> VkBool32
    os << "value: " << t.depthBoundsTestEnable << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  stencilTestEnable" << std::endl;
    // stencilTestEnable -> Field -> VkBool32
    os << "value: " << t.stencilTestEnable << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  front" << std::endl;
    // front -> Field -> VkStencilOpState
    os << "members:" << std::endl << t.front << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  back" << std::endl;
    // back -> Field -> VkStencilOpState
    os << "members:" << std::endl << t.back << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  minDepthBounds" << std::endl;
    // minDepthBounds -> Field -> float
    os << "value: " << t.minDepthBounds << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  maxDepthBounds" << std::endl;
    // maxDepthBounds -> Field -> float
    os << "value: " << t.maxDepthBounds << std::endl;
  }

  return os;
}

std::ostream& operator<<(std::ostream& os,
                         const VkGraphicsPipelineCreateInfo& t) {
  ScopedOstream sos(os);
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  sType" << std::endl;
    // sType -> Field -> VkStructureType
    os << "value: " << t.sType << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  pNext" << std::endl;
    // pNext -> Field -> ConstNextPtr(void)

    // pNext
    os << "value: ";
    PrintNextPtr(os, t.pNext);
    os << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  flags" << std::endl;
    // flags -> Field -> VkPipelineCreateFlags
    os << "value: " << t.flags << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  stageCount" << std::endl;
    // stageCount -> Field -> uint32_t
    os << "value: " << t.stageCount << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  pStages" << std::endl;
    // pStages -> Field -> ConstDynamicArray(VkPipelineShaderStageCreateInfo)
    {
      if (t.stageCount == 0) {
        os << "value: nullptr" << std::endl;
      } else {
        os << "members:" << std::endl;
        {
          ScopedOstream soarray(os);
          os << "- # VkPipelineShaderStageCreateInfo" << std::endl;
          for (uint32_t i = 0; i < t.stageCount; ++i) {
            ScopedOstream somember(os);
            os << "members:" << std::endl << t.pStages[i] << std::endl;
          }
        }
      }
    }
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  pVertexInputState" << std::endl;
    // pVertexInputState -> Field ->
    // ConstPointer(VkPipelineVertexInputStateCreateInfo) pointer
    if (t.pVertexInputState) {
      os << "members:" << std::endl << *t.pVertexInputState << std::endl;
    } else {
      os << "value: nullptr" << std::endl;
    }
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  pInputAssemblyState" << std::endl;
    // pInputAssemblyState -> Field ->
    // ConstPointer(VkPipelineInputAssemblyStateCreateInfo) pointer
    if (t.pInputAssemblyState) {
      os << "members:" << std::endl << *t.pInputAssemblyState << std::endl;
    } else {
      os << "value: nullptr" << std::endl;
    }
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  pTessellationState" << std::endl;
    // pTessellationState -> Field ->
    // ConstPointer(VkPipelineTessellationStateCreateInfo) pointer
    if (t.pTessellationState) {
      os << "members:" << std::endl << *t.pTessellationState << std::endl;
    } else {
      os << "value: nullptr" << std::endl;
    }
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  pViewportState" << std::endl;
    // pViewportState -> Field ->
    // ConstPointer(VkPipelineViewportStateCreateInfo) pointer
    if (t.pViewportState) {
      os << "members:" << std::endl << *t.pViewportState << std::endl;
    } else {
      os << "value: nullptr" << std::endl;
    }
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  pRasterizationState" << std::endl;
    // pRasterizationState -> Field ->
    // ConstPointer(VkPipelineRasterizationStateCreateInfo) pointer
    if (t.pRasterizationState) {
      os << "members:" << std::endl << *t.pRasterizationState << std::endl;
    } else {
      os << "value: nullptr" << std::endl;
    }
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  pMultisampleState" << std::endl;
    // pMultisampleState -> Field ->
    // ConstPointer(VkPipelineMultisampleStateCreateInfo) pointer
    if (t.pMultisampleState) {
      os << "members:" << std::endl << *t.pMultisampleState << std::endl;
    } else {
      os << "value: nullptr" << std::endl;
    }
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  pDepthStencilState" << std::endl;
    // pDepthStencilState -> Field ->
    // ConstPointer(VkPipelineDepthStencilStateCreateInfo) pointer
    if (t.pDepthStencilState) {
      os << "members:" << std::endl << *t.pDepthStencilState << std::endl;
    } else {
      os << "value: nullptr" << std::endl;
    }
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  pColorBlendState" << std::endl;
    // pColorBlendState -> Field ->
    // ConstPointer(VkPipelineColorBlendStateCreateInfo) pointer
    if (t.pColorBlendState) {
      os << "members:" << std::endl << *t.pColorBlendState << std::endl;
    } else {
      os << "value: nullptr" << std::endl;
    }
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  pDynamicState" << std::endl;
    // pDynamicState -> Field -> ConstPointer(VkPipelineDynamicStateCreateInfo)
    // pointer
    if (t.pDynamicState) {
      os << "members:" << std::endl << *t.pDynamicState << std::endl;
    } else {
      os << "value: nullptr" << std::endl;
    }
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  layout" << std::endl;
    // layout -> Field -> VkPipelineLayout
    os << "value: " << t.layout << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  renderPass" << std::endl;
    // renderPass -> Field -> VkRenderPass
    os << "value: " << t.renderPass << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  subpass" << std::endl;
    // subpass -> Field -> uint32_t
    os << "value: " << t.subpass << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  basePipelineHandle" << std::endl;
    // basePipelineHandle -> Field -> VkPipeline
    os << "value: " << t.basePipelineHandle << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  basePipelineIndex" << std::endl;
    // basePipelineIndex -> Field -> int32_t
    os << "value: " << t.basePipelineIndex << std::endl;
  }

  return os;
}

std::ostream& operator<<(std::ostream& os, const VkPipelineCacheCreateInfo& t) {
  ScopedOstream sos(os);
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  sType" << std::endl;
    // sType -> Field -> VkStructureType
    os << "value: " << t.sType << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  pNext" << std::endl;
    // pNext -> Field -> ConstNextPtr(void)

    // pNext
    os << "value: ";
    PrintNextPtr(os, t.pNext);
    os << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  flags" << std::endl;
    // flags -> Field -> VkPipelineCacheCreateFlags
    os << "value: " << t.flags << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  initialDataSize" << std::endl;
    // initialDataSize -> Field -> size_t
    os << "value: " << t.initialDataSize << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  pInitialData" << std::endl;
    // pInitialData -> Field -> ConstDynamicArray(void)
    {
      if (t.initialDataSize == 0) {
        os << "value: nullptr" << std::endl;
      } else {
        os << std::hex;
        os << "members:" << std::endl;
        {
          ScopedOstream soarray(os);
          const uint8_t* p = (const uint8_t*)t.pInitialData;
          for (uint32_t i = 0; i < t.initialDataSize; ++i) {
            os << "- 0x" << p[i] << std::endl;
          }
        }
        os << std::dec;
      }
    }
  }

  return os;
}

std::ostream& operator<<(std::ostream& os, const VkPushConstantRange& t) {
  ScopedOstream sos(os);
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  stageFlags" << std::endl;
    // stageFlags -> Field -> VkShaderStageFlags
    os << "value: " << t.stageFlags << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  offset" << std::endl;
    // offset -> Field -> uint32_t
    os << "value: " << t.offset << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  size" << std::endl;
    // size -> Field -> uint32_t
    os << "value: " << t.size << std::endl;
  }

  return os;
}

std::ostream& operator<<(std::ostream& os,
                         const VkPipelineLayoutCreateInfo& t) {
  ScopedOstream sos(os);
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  sType" << std::endl;
    // sType -> Field -> VkStructureType
    os << "value: " << t.sType << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  pNext" << std::endl;
    // pNext -> Field -> ConstNextPtr(void)

    // pNext
    os << "value: ";
    PrintNextPtr(os, t.pNext);
    os << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  flags" << std::endl;
    // flags -> Field -> VkPipelineLayoutCreateFlags
    os << "value: " << t.flags << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  setLayoutCount" << std::endl;
    // setLayoutCount -> Field -> uint32_t
    os << "value: " << t.setLayoutCount << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  pSetLayouts" << std::endl;
    // pSetLayouts -> Field -> ConstDynamicArray(VkDescriptorSetLayout)
    {
      if (t.setLayoutCount == 0) {
        os << "value: nullptr" << std::endl;
      } else {
        os << "members:" << std::endl;
        {
          ScopedOstream soarray(os);
          os << "- # VkDescriptorSetLayout" << std::endl;
          for (uint32_t i = 0; i < t.setLayoutCount; ++i) {
            ScopedOstream somember(os);
            os << "value: " << t.pSetLayouts[i] << std::endl;
          }
        }
      }
    }
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  pushConstantRangeCount" << std::endl;
    // pushConstantRangeCount -> Field -> uint32_t
    os << "value: " << t.pushConstantRangeCount << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  pPushConstantRanges" << std::endl;
    // pPushConstantRanges -> Field -> ConstDynamicArray(VkPushConstantRange)
    {
      if (t.pushConstantRangeCount == 0) {
        os << "value: nullptr" << std::endl;
      } else {
        os << "members:" << std::endl;
        {
          ScopedOstream soarray(os);
          os << "- # VkPushConstantRange" << std::endl;
          for (uint32_t i = 0; i < t.pushConstantRangeCount; ++i) {
            ScopedOstream somember(os);
            os << "members:" << std::endl
               << t.pPushConstantRanges[i] << std::endl;
          }
        }
      }
    }
  }

  return os;
}

std::ostream& operator<<(std::ostream& os, const VkSamplerCreateInfo& t) {
  ScopedOstream sos(os);
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  sType" << std::endl;
    // sType -> Field -> VkStructureType
    os << "value: " << t.sType << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  pNext" << std::endl;
    // pNext -> Field -> ConstNextPtr(void)

    // pNext
    os << "value: ";
    PrintNextPtr(os, t.pNext);
    os << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  flags" << std::endl;
    // flags -> Field -> VkSamplerCreateFlags
    os << "value: " << t.flags << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  magFilter" << std::endl;
    // magFilter -> Field -> VkFilter
    os << "value: " << t.magFilter << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  minFilter" << std::endl;
    // minFilter -> Field -> VkFilter
    os << "value: " << t.minFilter << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  mipmapMode" << std::endl;
    // mipmapMode -> Field -> VkSamplerMipmapMode
    os << "value: " << t.mipmapMode << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  addressModeU" << std::endl;
    // addressModeU -> Field -> VkSamplerAddressMode
    os << "value: " << t.addressModeU << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  addressModeV" << std::endl;
    // addressModeV -> Field -> VkSamplerAddressMode
    os << "value: " << t.addressModeV << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  addressModeW" << std::endl;
    // addressModeW -> Field -> VkSamplerAddressMode
    os << "value: " << t.addressModeW << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  mipLodBias" << std::endl;
    // mipLodBias -> Field -> float
    os << "value: " << t.mipLodBias << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  anisotropyEnable" << std::endl;
    // anisotropyEnable -> Field -> VkBool32
    os << "value: " << t.anisotropyEnable << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  maxAnisotropy" << std::endl;
    // maxAnisotropy -> Field -> float
    os << "value: " << t.maxAnisotropy << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  compareEnable" << std::endl;
    // compareEnable -> Field -> VkBool32
    os << "value: " << t.compareEnable << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  compareOp" << std::endl;
    // compareOp -> Field -> VkCompareOp
    os << "value: " << t.compareOp << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  minLod" << std::endl;
    // minLod -> Field -> float
    os << "value: " << t.minLod << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  maxLod" << std::endl;
    // maxLod -> Field -> float
    os << "value: " << t.maxLod << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  borderColor" << std::endl;
    // borderColor -> Field -> VkBorderColor
    os << "value: " << t.borderColor << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  unnormalizedCoordinates" << std::endl;
    // unnormalizedCoordinates -> Field -> VkBool32
    os << "value: " << t.unnormalizedCoordinates << std::endl;
  }

  return os;
}

std::ostream& operator<<(std::ostream& os, const VkCommandPoolCreateInfo& t) {
  ScopedOstream sos(os);
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  sType" << std::endl;
    // sType -> Field -> VkStructureType
    os << "value: " << t.sType << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  pNext" << std::endl;
    // pNext -> Field -> ConstNextPtr(void)

    // pNext
    os << "value: ";
    PrintNextPtr(os, t.pNext);
    os << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  flags" << std::endl;
    // flags -> Field -> VkCommandPoolCreateFlags
    os << "value: " << t.flags << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  queueFamilyIndex" << std::endl;
    // queueFamilyIndex -> Field -> uint32_t
    os << "value: " << t.queueFamilyIndex << std::endl;
  }

  return os;
}

std::ostream& operator<<(std::ostream& os,
                         const VkCommandBufferAllocateInfo& t) {
  ScopedOstream sos(os);
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  sType" << std::endl;
    // sType -> Field -> VkStructureType
    os << "value: " << t.sType << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  pNext" << std::endl;
    // pNext -> Field -> ConstNextPtr(void)

    // pNext
    os << "value: ";
    PrintNextPtr(os, t.pNext);
    os << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  commandPool" << std::endl;
    // commandPool -> Field -> VkCommandPool
    os << "value: " << t.commandPool << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  level" << std::endl;
    // level -> Field -> VkCommandBufferLevel
    os << "value: " << t.level << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  commandBufferCount" << std::endl;
    // commandBufferCount -> Field -> uint32_t
    os << "value: " << t.commandBufferCount << std::endl;
  }

  return os;
}

std::ostream& operator<<(std::ostream& os,
                         const VkCommandBufferInheritanceInfo& t) {
  ScopedOstream sos(os);
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  sType" << std::endl;
    // sType -> Field -> VkStructureType
    os << "value: " << t.sType << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  pNext" << std::endl;
    // pNext -> Field -> ConstNextPtr(void)

    // pNext
    os << "value: ";
    PrintNextPtr(os, t.pNext);
    os << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  renderPass" << std::endl;
    // renderPass -> Field -> VkRenderPass
    os << "value: " << t.renderPass << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  subpass" << std::endl;
    // subpass -> Field -> uint32_t
    os << "value: " << t.subpass << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  framebuffer" << std::endl;
    // framebuffer -> Field -> VkFramebuffer
    os << "value: " << t.framebuffer << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  occlusionQueryEnable" << std::endl;
    // occlusionQueryEnable -> Field -> VkBool32
    os << "value: " << t.occlusionQueryEnable << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  queryFlags" << std::endl;
    // queryFlags -> Field -> VkQueryControlFlags
    os << "value: " << t.queryFlags << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  pipelineStatistics" << std::endl;
    // pipelineStatistics -> Field -> VkQueryPipelineStatisticFlags
    os << "value: " << t.pipelineStatistics << std::endl;
  }

  return os;
}

std::ostream& operator<<(std::ostream& os, const VkCommandBufferBeginInfo& t) {
  ScopedOstream sos(os);
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  sType" << std::endl;
    // sType -> Field -> VkStructureType
    os << "value: " << t.sType << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  pNext" << std::endl;
    // pNext -> Field -> ConstNextPtr(void)

    // pNext
    os << "value: ";
    PrintNextPtr(os, t.pNext);
    os << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  flags" << std::endl;
    // flags -> Field -> VkCommandBufferUsageFlags
    os << "value: " << t.flags << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  pInheritanceInfo" << std::endl;
    // pInheritanceInfo -> Field -> ConstPointer(VkCommandBufferInheritanceInfo)
    // pointer
    if (t.pInheritanceInfo) {
      os << "members:" << std::endl << *t.pInheritanceInfo << std::endl;
    } else {
      os << "value: nullptr" << std::endl;
    }
  }

  return os;
}

std::ostream& operator<<(std::ostream& os, const VkRenderPassBeginInfo& t) {
  ScopedOstream sos(os);
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  sType" << std::endl;
    // sType -> Field -> VkStructureType
    os << "value: " << t.sType << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  pNext" << std::endl;
    // pNext -> Field -> ConstNextPtr(void)

    // pNext
    os << "value: ";
    PrintNextPtr(os, t.pNext);
    os << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  renderPass" << std::endl;
    // renderPass -> Field -> VkRenderPass
    os << "value: " << t.renderPass << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  framebuffer" << std::endl;
    // framebuffer -> Field -> VkFramebuffer
    os << "value: " << t.framebuffer << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  renderArea" << std::endl;
    // renderArea -> Field -> VkRect2D
    os << "members:" << std::endl << t.renderArea << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  clearValueCount" << std::endl;
    // clearValueCount -> Field -> uint32_t
    os << "value: " << t.clearValueCount << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  pClearValues" << std::endl;
    // pClearValues -> Field -> ConstDynamicArray(VkClearValue)
    {
      if (t.clearValueCount == 0) {
        os << "value: nullptr" << std::endl;
      } else {
        os << "members:" << std::endl;
        {
          ScopedOstream soarray(os);
          os << "- # VkClearValue" << std::endl;
          for (uint32_t i = 0; i < t.clearValueCount; ++i) {
            ScopedOstream somember(os);
            os << "members:" << std::endl << t.pClearValues[i] << std::endl;
          }
        }
      }
    }
  }

  return os;
}

std::ostream& operator<<(std::ostream& os, const VkClearColorValue& t) {
  ScopedOstream sos(os);
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  float32" << std::endl;
    // float32 -> Field -> FixedArray(float)
    {
      if (4 == 0) {
        os << "value: nullptr" << std::endl;
      } else {
        os << "members:" << std::endl;
        {
          ScopedOstream soarray(os);
          os << "- # float" << std::endl;
          for (uint32_t i = 0; i < 4; ++i) {
            ScopedOstream somember(os);
            os << "value: " << t.float32[i] << std::endl;
          }
        }
      }
    }
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  int32" << std::endl;
    // int32 -> Field -> FixedArray(int32_t)
    {
      if (4 == 0) {
        os << "value: nullptr" << std::endl;
      } else {
        os << "members:" << std::endl;
        {
          ScopedOstream soarray(os);
          os << "- # int32_t" << std::endl;
          for (uint32_t i = 0; i < 4; ++i) {
            ScopedOstream somember(os);
            os << "value: " << t.int32[i] << std::endl;
          }
        }
      }
    }
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  uint32" << std::endl;
    // uint32 -> Field -> FixedArray(uint32_t)
    {
      if (4 == 0) {
        os << "value: nullptr" << std::endl;
      } else {
        os << "members:" << std::endl;
        {
          ScopedOstream soarray(os);
          os << "- # uint32_t" << std::endl;
          for (uint32_t i = 0; i < 4; ++i) {
            ScopedOstream somember(os);
            os << "value: " << t.uint32[i] << std::endl;
          }
        }
      }
    }
  }

  return os;
}

std::ostream& operator<<(std::ostream& os, const VkClearDepthStencilValue& t) {
  ScopedOstream sos(os);
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  depth" << std::endl;
    // depth -> Field -> float
    os << "value: " << t.depth << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  stencil" << std::endl;
    // stencil -> Field -> uint32_t
    os << "value: " << t.stencil << std::endl;
  }

  return os;
}

std::ostream& operator<<(std::ostream& os, const VkClearValue& t) {
  ScopedOstream sos(os);
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  color" << std::endl;
    // color -> Field -> VkClearColorValue
    os << "members:" << std::endl << t.color << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  depthStencil" << std::endl;
    // depthStencil -> Field -> VkClearDepthStencilValue
    os << "members:" << std::endl << t.depthStencil << std::endl;
  }

  return os;
}

std::ostream& operator<<(std::ostream& os, const VkClearAttachment& t) {
  ScopedOstream sos(os);
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  aspectMask" << std::endl;
    // aspectMask -> Field -> VkImageAspectFlags
    os << "value: " << t.aspectMask << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  colorAttachment" << std::endl;
    // colorAttachment -> Field -> uint32_t
    os << "value: " << t.colorAttachment << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  clearValue" << std::endl;
    // clearValue -> Field -> VkClearValue
    os << "members:" << std::endl << t.clearValue << std::endl;
  }

  return os;
}

std::ostream& operator<<(std::ostream& os, const VkAttachmentDescription& t) {
  ScopedOstream sos(os);
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  flags" << std::endl;
    // flags -> Field -> VkAttachmentDescriptionFlags
    os << "value: " << t.flags << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  format" << std::endl;
    // format -> Field -> VkFormat
    os << "value: " << t.format << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  samples" << std::endl;
    // samples -> Field -> VkSampleCountFlagBits
    os << "value: " << t.samples << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  loadOp" << std::endl;
    // loadOp -> Field -> VkAttachmentLoadOp
    os << "value: " << t.loadOp << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  storeOp" << std::endl;
    // storeOp -> Field -> VkAttachmentStoreOp
    os << "value: " << t.storeOp << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  stencilLoadOp" << std::endl;
    // stencilLoadOp -> Field -> VkAttachmentLoadOp
    os << "value: " << t.stencilLoadOp << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  stencilStoreOp" << std::endl;
    // stencilStoreOp -> Field -> VkAttachmentStoreOp
    os << "value: " << t.stencilStoreOp << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  initialLayout" << std::endl;
    // initialLayout -> Field -> VkImageLayout
    os << "value: " << t.initialLayout << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  finalLayout" << std::endl;
    // finalLayout -> Field -> VkImageLayout
    os << "value: " << t.finalLayout << std::endl;
  }

  return os;
}

std::ostream& operator<<(std::ostream& os, const VkAttachmentReference& t) {
  ScopedOstream sos(os);
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  attachment" << std::endl;
    // attachment -> Field -> uint32_t
    os << "value: " << t.attachment << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  layout" << std::endl;
    // layout -> Field -> VkImageLayout
    os << "value: " << t.layout << std::endl;
  }

  return os;
}

std::ostream& operator<<(std::ostream& os, const VkSubpassDescription& t) {
  ScopedOstream sos(os);
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  flags" << std::endl;
    // flags -> Field -> VkSubpassDescriptionFlags
    os << "value: " << t.flags << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  pipelineBindPoint" << std::endl;
    // pipelineBindPoint -> Field -> VkPipelineBindPoint
    os << "value: " << t.pipelineBindPoint << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  inputAttachmentCount" << std::endl;
    // inputAttachmentCount -> Field -> uint32_t
    os << "value: " << t.inputAttachmentCount << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  pInputAttachments" << std::endl;
    // pInputAttachments -> Field -> ConstDynamicArray(VkAttachmentReference)
    {
      if (t.inputAttachmentCount == 0) {
        os << "value: nullptr" << std::endl;
      } else {
        os << "members:" << std::endl;
        {
          ScopedOstream soarray(os);
          os << "- # VkAttachmentReference" << std::endl;
          for (uint32_t i = 0; i < t.inputAttachmentCount; ++i) {
            ScopedOstream somember(os);
            os << "members:" << std::endl
               << t.pInputAttachments[i] << std::endl;
          }
        }
      }
    }
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  colorAttachmentCount" << std::endl;
    // colorAttachmentCount -> Field -> uint32_t
    os << "value: " << t.colorAttachmentCount << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  pColorAttachments" << std::endl;
    // pColorAttachments -> Field -> ConstDynamicArray(VkAttachmentReference)
    {
      if (t.colorAttachmentCount == 0) {
        os << "value: nullptr" << std::endl;
      } else {
        os << "members:" << std::endl;
        {
          ScopedOstream soarray(os);
          os << "- # VkAttachmentReference" << std::endl;
          for (uint32_t i = 0; i < t.colorAttachmentCount; ++i) {
            ScopedOstream somember(os);
            os << "members:" << std::endl
               << t.pColorAttachments[i] << std::endl;
          }
        }
      }
    }
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  pResolveAttachments" << std::endl;
    // pResolveAttachments -> Field -> ConstDynamicArray(VkAttachmentReference)
    {
      if (t.colorAttachmentCount == 0) {
        os << "value: nullptr" << std::endl;
      } else {
        os << "members:" << std::endl;
        {
          ScopedOstream soarray(os);
          os << "- # VkAttachmentReference" << std::endl;
          for (uint32_t i = 0; i < t.colorAttachmentCount; ++i) {
            ScopedOstream somember(os);
            os << "members:" << std::endl
               << t.pResolveAttachments[i] << std::endl;
          }
        }
      }
    }
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  pDepthStencilAttachment" << std::endl;
    // pDepthStencilAttachment -> Field -> ConstPointer(VkAttachmentReference)
    // pointer
    if (t.pDepthStencilAttachment) {
      os << "members:" << std::endl << *t.pDepthStencilAttachment << std::endl;
    } else {
      os << "value: nullptr" << std::endl;
    }
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  preserveAttachmentCount" << std::endl;
    // preserveAttachmentCount -> Field -> uint32_t
    os << "value: " << t.preserveAttachmentCount << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  pPreserveAttachments" << std::endl;
    // pPreserveAttachments -> Field -> ConstDynamicArray(uint32_t)
    {
      if (t.preserveAttachmentCount == 0) {
        os << "value: nullptr" << std::endl;
      } else {
        os << "members:" << std::endl;
        {
          ScopedOstream soarray(os);
          os << "- # uint32_t" << std::endl;
          for (uint32_t i = 0; i < t.preserveAttachmentCount; ++i) {
            ScopedOstream somember(os);
            os << "value: " << t.pPreserveAttachments[i] << std::endl;
          }
        }
      }
    }
  }

  return os;
}

std::ostream& operator<<(std::ostream& os, const VkSubpassDependency& t) {
  ScopedOstream sos(os);
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  srcSubpass" << std::endl;
    // srcSubpass -> Field -> uint32_t
    os << "value: " << t.srcSubpass << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  dstSubpass" << std::endl;
    // dstSubpass -> Field -> uint32_t
    os << "value: " << t.dstSubpass << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  srcStageMask" << std::endl;
    // srcStageMask -> Field -> VkPipelineStageFlags
    os << "value: " << t.srcStageMask << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  dstStageMask" << std::endl;
    // dstStageMask -> Field -> VkPipelineStageFlags
    os << "value: " << t.dstStageMask << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  srcAccessMask" << std::endl;
    // srcAccessMask -> Field -> VkAccessFlags
    os << "value: " << t.srcAccessMask << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  dstAccessMask" << std::endl;
    // dstAccessMask -> Field -> VkAccessFlags
    os << "value: " << t.dstAccessMask << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  dependencyFlags" << std::endl;
    // dependencyFlags -> Field -> VkDependencyFlags
    os << "value: " << t.dependencyFlags << std::endl;
  }

  return os;
}

std::ostream& operator<<(std::ostream& os, const VkRenderPassCreateInfo& t) {
  ScopedOstream sos(os);
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  sType" << std::endl;
    // sType -> Field -> VkStructureType
    os << "value: " << t.sType << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  pNext" << std::endl;
    // pNext -> Field -> ConstNextPtr(void)

    // pNext
    os << "value: ";
    PrintNextPtr(os, t.pNext);
    os << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  flags" << std::endl;
    // flags -> Field -> VkRenderPassCreateFlags
    os << "value: " << t.flags << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  attachmentCount" << std::endl;
    // attachmentCount -> Field -> uint32_t
    os << "value: " << t.attachmentCount << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  pAttachments" << std::endl;
    // pAttachments -> Field -> ConstDynamicArray(VkAttachmentDescription)
    {
      if (t.attachmentCount == 0) {
        os << "value: nullptr" << std::endl;
      } else {
        os << "members:" << std::endl;
        {
          ScopedOstream soarray(os);
          os << "- # VkAttachmentDescription" << std::endl;
          for (uint32_t i = 0; i < t.attachmentCount; ++i) {
            ScopedOstream somember(os);
            os << "members:" << std::endl << t.pAttachments[i] << std::endl;
          }
        }
      }
    }
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  subpassCount" << std::endl;
    // subpassCount -> Field -> uint32_t
    os << "value: " << t.subpassCount << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  pSubpasses" << std::endl;
    // pSubpasses -> Field -> ConstDynamicArray(VkSubpassDescription)
    {
      if (t.subpassCount == 0) {
        os << "value: nullptr" << std::endl;
      } else {
        os << "members:" << std::endl;
        {
          ScopedOstream soarray(os);
          os << "- # VkSubpassDescription" << std::endl;
          for (uint32_t i = 0; i < t.subpassCount; ++i) {
            ScopedOstream somember(os);
            os << "members:" << std::endl << t.pSubpasses[i] << std::endl;
          }
        }
      }
    }
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  dependencyCount" << std::endl;
    // dependencyCount -> Field -> uint32_t
    os << "value: " << t.dependencyCount << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  pDependencies" << std::endl;
    // pDependencies -> Field -> ConstDynamicArray(VkSubpassDependency)
    {
      if (t.dependencyCount == 0) {
        os << "value: nullptr" << std::endl;
      } else {
        os << "members:" << std::endl;
        {
          ScopedOstream soarray(os);
          os << "- # VkSubpassDependency" << std::endl;
          for (uint32_t i = 0; i < t.dependencyCount; ++i) {
            ScopedOstream somember(os);
            os << "members:" << std::endl << t.pDependencies[i] << std::endl;
          }
        }
      }
    }
  }

  return os;
}

std::ostream& operator<<(std::ostream& os, const VkEventCreateInfo& t) {
  ScopedOstream sos(os);
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  sType" << std::endl;
    // sType -> Field -> VkStructureType
    os << "value: " << t.sType << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  pNext" << std::endl;
    // pNext -> Field -> ConstNextPtr(void)

    // pNext
    os << "value: ";
    PrintNextPtr(os, t.pNext);
    os << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  flags" << std::endl;
    // flags -> Field -> VkEventCreateFlags
    os << "value: " << t.flags << std::endl;
  }

  return os;
}

std::ostream& operator<<(std::ostream& os, const VkFenceCreateInfo& t) {
  ScopedOstream sos(os);
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  sType" << std::endl;
    // sType -> Field -> VkStructureType
    os << "value: " << t.sType << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  pNext" << std::endl;
    // pNext -> Field -> ConstNextPtr(void)

    // pNext
    os << "value: ";
    PrintNextPtr(os, t.pNext);
    os << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  flags" << std::endl;
    // flags -> Field -> VkFenceCreateFlags
    os << "value: " << t.flags << std::endl;
  }

  return os;
}

std::ostream& operator<<(std::ostream& os, const VkPhysicalDeviceFeatures& t) {
  ScopedOstream sos(os);
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  robustBufferAccess" << std::endl;
    // robustBufferAccess -> Field -> VkBool32
    os << "value: " << t.robustBufferAccess << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  fullDrawIndexUint32" << std::endl;
    // fullDrawIndexUint32 -> Field -> VkBool32
    os << "value: " << t.fullDrawIndexUint32 << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  imageCubeArray" << std::endl;
    // imageCubeArray -> Field -> VkBool32
    os << "value: " << t.imageCubeArray << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  independentBlend" << std::endl;
    // independentBlend -> Field -> VkBool32
    os << "value: " << t.independentBlend << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  geometryShader" << std::endl;
    // geometryShader -> Field -> VkBool32
    os << "value: " << t.geometryShader << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  tessellationShader" << std::endl;
    // tessellationShader -> Field -> VkBool32
    os << "value: " << t.tessellationShader << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  sampleRateShading" << std::endl;
    // sampleRateShading -> Field -> VkBool32
    os << "value: " << t.sampleRateShading << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  dualSrcBlend" << std::endl;
    // dualSrcBlend -> Field -> VkBool32
    os << "value: " << t.dualSrcBlend << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  logicOp" << std::endl;
    // logicOp -> Field -> VkBool32
    os << "value: " << t.logicOp << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  multiDrawIndirect" << std::endl;
    // multiDrawIndirect -> Field -> VkBool32
    os << "value: " << t.multiDrawIndirect << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  drawIndirectFirstInstance" << std::endl;
    // drawIndirectFirstInstance -> Field -> VkBool32
    os << "value: " << t.drawIndirectFirstInstance << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  depthClamp" << std::endl;
    // depthClamp -> Field -> VkBool32
    os << "value: " << t.depthClamp << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  depthBiasClamp" << std::endl;
    // depthBiasClamp -> Field -> VkBool32
    os << "value: " << t.depthBiasClamp << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  fillModeNonSolid" << std::endl;
    // fillModeNonSolid -> Field -> VkBool32
    os << "value: " << t.fillModeNonSolid << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  depthBounds" << std::endl;
    // depthBounds -> Field -> VkBool32
    os << "value: " << t.depthBounds << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  wideLines" << std::endl;
    // wideLines -> Field -> VkBool32
    os << "value: " << t.wideLines << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  largePoints" << std::endl;
    // largePoints -> Field -> VkBool32
    os << "value: " << t.largePoints << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  alphaToOne" << std::endl;
    // alphaToOne -> Field -> VkBool32
    os << "value: " << t.alphaToOne << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  multiViewport" << std::endl;
    // multiViewport -> Field -> VkBool32
    os << "value: " << t.multiViewport << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  samplerAnisotropy" << std::endl;
    // samplerAnisotropy -> Field -> VkBool32
    os << "value: " << t.samplerAnisotropy << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  textureCompressionETC2" << std::endl;
    // textureCompressionETC2 -> Field -> VkBool32
    os << "value: " << t.textureCompressionETC2 << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  textureCompressionASTC_LDR" << std::endl;
    // textureCompressionASTC_LDR -> Field -> VkBool32
    os << "value: " << t.textureCompressionASTC_LDR << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  textureCompressionBC" << std::endl;
    // textureCompressionBC -> Field -> VkBool32
    os << "value: " << t.textureCompressionBC << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  occlusionQueryPrecise" << std::endl;
    // occlusionQueryPrecise -> Field -> VkBool32
    os << "value: " << t.occlusionQueryPrecise << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  pipelineStatisticsQuery" << std::endl;
    // pipelineStatisticsQuery -> Field -> VkBool32
    os << "value: " << t.pipelineStatisticsQuery << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  vertexPipelineStoresAndAtomics" << std::endl;
    // vertexPipelineStoresAndAtomics -> Field -> VkBool32
    os << "value: " << t.vertexPipelineStoresAndAtomics << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  fragmentStoresAndAtomics" << std::endl;
    // fragmentStoresAndAtomics -> Field -> VkBool32
    os << "value: " << t.fragmentStoresAndAtomics << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  shaderTessellationAndGeometryPointSize" << std::endl;
    // shaderTessellationAndGeometryPointSize -> Field -> VkBool32
    os << "value: " << t.shaderTessellationAndGeometryPointSize << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  shaderImageGatherExtended" << std::endl;
    // shaderImageGatherExtended -> Field -> VkBool32
    os << "value: " << t.shaderImageGatherExtended << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  shaderStorageImageExtendedFormats" << std::endl;
    // shaderStorageImageExtendedFormats -> Field -> VkBool32
    os << "value: " << t.shaderStorageImageExtendedFormats << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  shaderStorageImageMultisample" << std::endl;
    // shaderStorageImageMultisample -> Field -> VkBool32
    os << "value: " << t.shaderStorageImageMultisample << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  shaderStorageImageReadWithoutFormat" << std::endl;
    // shaderStorageImageReadWithoutFormat -> Field -> VkBool32
    os << "value: " << t.shaderStorageImageReadWithoutFormat << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  shaderStorageImageWriteWithoutFormat" << std::endl;
    // shaderStorageImageWriteWithoutFormat -> Field -> VkBool32
    os << "value: " << t.shaderStorageImageWriteWithoutFormat << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  shaderUniformBufferArrayDynamicIndexing" << std::endl;
    // shaderUniformBufferArrayDynamicIndexing -> Field -> VkBool32
    os << "value: " << t.shaderUniformBufferArrayDynamicIndexing << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  shaderSampledImageArrayDynamicIndexing" << std::endl;
    // shaderSampledImageArrayDynamicIndexing -> Field -> VkBool32
    os << "value: " << t.shaderSampledImageArrayDynamicIndexing << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  shaderStorageBufferArrayDynamicIndexing" << std::endl;
    // shaderStorageBufferArrayDynamicIndexing -> Field -> VkBool32
    os << "value: " << t.shaderStorageBufferArrayDynamicIndexing << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  shaderStorageImageArrayDynamicIndexing" << std::endl;
    // shaderStorageImageArrayDynamicIndexing -> Field -> VkBool32
    os << "value: " << t.shaderStorageImageArrayDynamicIndexing << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  shaderClipDistance" << std::endl;
    // shaderClipDistance -> Field -> VkBool32
    os << "value: " << t.shaderClipDistance << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  shaderCullDistance" << std::endl;
    // shaderCullDistance -> Field -> VkBool32
    os << "value: " << t.shaderCullDistance << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  shaderFloat64" << std::endl;
    // shaderFloat64 -> Field -> VkBool32
    os << "value: " << t.shaderFloat64 << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  shaderInt64" << std::endl;
    // shaderInt64 -> Field -> VkBool32
    os << "value: " << t.shaderInt64 << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  shaderInt16" << std::endl;
    // shaderInt16 -> Field -> VkBool32
    os << "value: " << t.shaderInt16 << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  shaderResourceResidency" << std::endl;
    // shaderResourceResidency -> Field -> VkBool32
    os << "value: " << t.shaderResourceResidency << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  shaderResourceMinLod" << std::endl;
    // shaderResourceMinLod -> Field -> VkBool32
    os << "value: " << t.shaderResourceMinLod << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  sparseBinding" << std::endl;
    // sparseBinding -> Field -> VkBool32
    os << "value: " << t.sparseBinding << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  sparseResidencyBuffer" << std::endl;
    // sparseResidencyBuffer -> Field -> VkBool32
    os << "value: " << t.sparseResidencyBuffer << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  sparseResidencyImage2D" << std::endl;
    // sparseResidencyImage2D -> Field -> VkBool32
    os << "value: " << t.sparseResidencyImage2D << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  sparseResidencyImage3D" << std::endl;
    // sparseResidencyImage3D -> Field -> VkBool32
    os << "value: " << t.sparseResidencyImage3D << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  sparseResidency2Samples" << std::endl;
    // sparseResidency2Samples -> Field -> VkBool32
    os << "value: " << t.sparseResidency2Samples << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  sparseResidency4Samples" << std::endl;
    // sparseResidency4Samples -> Field -> VkBool32
    os << "value: " << t.sparseResidency4Samples << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  sparseResidency8Samples" << std::endl;
    // sparseResidency8Samples -> Field -> VkBool32
    os << "value: " << t.sparseResidency8Samples << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  sparseResidency16Samples" << std::endl;
    // sparseResidency16Samples -> Field -> VkBool32
    os << "value: " << t.sparseResidency16Samples << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  sparseResidencyAliased" << std::endl;
    // sparseResidencyAliased -> Field -> VkBool32
    os << "value: " << t.sparseResidencyAliased << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  variableMultisampleRate" << std::endl;
    // variableMultisampleRate -> Field -> VkBool32
    os << "value: " << t.variableMultisampleRate << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  inheritedQueries" << std::endl;
    // inheritedQueries -> Field -> VkBool32
    os << "value: " << t.inheritedQueries << std::endl;
  }

  return os;
}

std::ostream& operator<<(std::ostream& os,
                         const VkPhysicalDeviceSparseProperties& t) {
  ScopedOstream sos(os);
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  residencyStandard2DBlockShape" << std::endl;
    // residencyStandard2DBlockShape -> Field -> VkBool32
    os << "value: " << t.residencyStandard2DBlockShape << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  residencyStandard2DMultisampleBlockShape" << std::endl;
    // residencyStandard2DMultisampleBlockShape -> Field -> VkBool32
    os << "value: " << t.residencyStandard2DMultisampleBlockShape << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  residencyStandard3DBlockShape" << std::endl;
    // residencyStandard3DBlockShape -> Field -> VkBool32
    os << "value: " << t.residencyStandard3DBlockShape << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  residencyAlignedMipSize" << std::endl;
    // residencyAlignedMipSize -> Field -> VkBool32
    os << "value: " << t.residencyAlignedMipSize << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  residencyNonResidentStrict" << std::endl;
    // residencyNonResidentStrict -> Field -> VkBool32
    os << "value: " << t.residencyNonResidentStrict << std::endl;
  }

  return os;
}

std::ostream& operator<<(std::ostream& os, const VkPhysicalDeviceLimits& t) {
  ScopedOstream sos(os);
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  maxImageDimension1D" << std::endl;
    // maxImageDimension1D -> Field -> uint32_t
    os << "value: " << t.maxImageDimension1D << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  maxImageDimension2D" << std::endl;
    // maxImageDimension2D -> Field -> uint32_t
    os << "value: " << t.maxImageDimension2D << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  maxImageDimension3D" << std::endl;
    // maxImageDimension3D -> Field -> uint32_t
    os << "value: " << t.maxImageDimension3D << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  maxImageDimensionCube" << std::endl;
    // maxImageDimensionCube -> Field -> uint32_t
    os << "value: " << t.maxImageDimensionCube << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  maxImageArrayLayers" << std::endl;
    // maxImageArrayLayers -> Field -> uint32_t
    os << "value: " << t.maxImageArrayLayers << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  maxTexelBufferElements" << std::endl;
    // maxTexelBufferElements -> Field -> uint32_t
    os << "value: " << t.maxTexelBufferElements << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  maxUniformBufferRange" << std::endl;
    // maxUniformBufferRange -> Field -> uint32_t
    os << "value: " << t.maxUniformBufferRange << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  maxStorageBufferRange" << std::endl;
    // maxStorageBufferRange -> Field -> uint32_t
    os << "value: " << t.maxStorageBufferRange << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  maxPushConstantsSize" << std::endl;
    // maxPushConstantsSize -> Field -> uint32_t
    os << "value: " << t.maxPushConstantsSize << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  maxMemoryAllocationCount" << std::endl;
    // maxMemoryAllocationCount -> Field -> uint32_t
    os << "value: " << t.maxMemoryAllocationCount << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  maxSamplerAllocationCount" << std::endl;
    // maxSamplerAllocationCount -> Field -> uint32_t
    os << "value: " << t.maxSamplerAllocationCount << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  bufferImageGranularity" << std::endl;
    // bufferImageGranularity -> Field -> VkDeviceSize
    os << "value: " << t.bufferImageGranularity << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  sparseAddressSpaceSize" << std::endl;
    // sparseAddressSpaceSize -> Field -> VkDeviceSize
    os << "value: " << t.sparseAddressSpaceSize << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  maxBoundDescriptorSets" << std::endl;
    // maxBoundDescriptorSets -> Field -> uint32_t
    os << "value: " << t.maxBoundDescriptorSets << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  maxPerStageDescriptorSamplers" << std::endl;
    // maxPerStageDescriptorSamplers -> Field -> uint32_t
    os << "value: " << t.maxPerStageDescriptorSamplers << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  maxPerStageDescriptorUniformBuffers" << std::endl;
    // maxPerStageDescriptorUniformBuffers -> Field -> uint32_t
    os << "value: " << t.maxPerStageDescriptorUniformBuffers << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  maxPerStageDescriptorStorageBuffers" << std::endl;
    // maxPerStageDescriptorStorageBuffers -> Field -> uint32_t
    os << "value: " << t.maxPerStageDescriptorStorageBuffers << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  maxPerStageDescriptorSampledImages" << std::endl;
    // maxPerStageDescriptorSampledImages -> Field -> uint32_t
    os << "value: " << t.maxPerStageDescriptorSampledImages << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  maxPerStageDescriptorStorageImages" << std::endl;
    // maxPerStageDescriptorStorageImages -> Field -> uint32_t
    os << "value: " << t.maxPerStageDescriptorStorageImages << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  maxPerStageDescriptorInputAttachments" << std::endl;
    // maxPerStageDescriptorInputAttachments -> Field -> uint32_t
    os << "value: " << t.maxPerStageDescriptorInputAttachments << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  maxPerStageResources" << std::endl;
    // maxPerStageResources -> Field -> uint32_t
    os << "value: " << t.maxPerStageResources << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  maxDescriptorSetSamplers" << std::endl;
    // maxDescriptorSetSamplers -> Field -> uint32_t
    os << "value: " << t.maxDescriptorSetSamplers << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  maxDescriptorSetUniformBuffers" << std::endl;
    // maxDescriptorSetUniformBuffers -> Field -> uint32_t
    os << "value: " << t.maxDescriptorSetUniformBuffers << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  maxDescriptorSetUniformBuffersDynamic" << std::endl;
    // maxDescriptorSetUniformBuffersDynamic -> Field -> uint32_t
    os << "value: " << t.maxDescriptorSetUniformBuffersDynamic << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  maxDescriptorSetStorageBuffers" << std::endl;
    // maxDescriptorSetStorageBuffers -> Field -> uint32_t
    os << "value: " << t.maxDescriptorSetStorageBuffers << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  maxDescriptorSetStorageBuffersDynamic" << std::endl;
    // maxDescriptorSetStorageBuffersDynamic -> Field -> uint32_t
    os << "value: " << t.maxDescriptorSetStorageBuffersDynamic << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  maxDescriptorSetSampledImages" << std::endl;
    // maxDescriptorSetSampledImages -> Field -> uint32_t
    os << "value: " << t.maxDescriptorSetSampledImages << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  maxDescriptorSetStorageImages" << std::endl;
    // maxDescriptorSetStorageImages -> Field -> uint32_t
    os << "value: " << t.maxDescriptorSetStorageImages << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  maxDescriptorSetInputAttachments" << std::endl;
    // maxDescriptorSetInputAttachments -> Field -> uint32_t
    os << "value: " << t.maxDescriptorSetInputAttachments << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  maxVertexInputAttributes" << std::endl;
    // maxVertexInputAttributes -> Field -> uint32_t
    os << "value: " << t.maxVertexInputAttributes << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  maxVertexInputBindings" << std::endl;
    // maxVertexInputBindings -> Field -> uint32_t
    os << "value: " << t.maxVertexInputBindings << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  maxVertexInputAttributeOffset" << std::endl;
    // maxVertexInputAttributeOffset -> Field -> uint32_t
    os << "value: " << t.maxVertexInputAttributeOffset << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  maxVertexInputBindingStride" << std::endl;
    // maxVertexInputBindingStride -> Field -> uint32_t
    os << "value: " << t.maxVertexInputBindingStride << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  maxVertexOutputComponents" << std::endl;
    // maxVertexOutputComponents -> Field -> uint32_t
    os << "value: " << t.maxVertexOutputComponents << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  maxTessellationGenerationLevel" << std::endl;
    // maxTessellationGenerationLevel -> Field -> uint32_t
    os << "value: " << t.maxTessellationGenerationLevel << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  maxTessellationPatchSize" << std::endl;
    // maxTessellationPatchSize -> Field -> uint32_t
    os << "value: " << t.maxTessellationPatchSize << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  maxTessellationControlPerVertexInputComponents" << std::endl;
    // maxTessellationControlPerVertexInputComponents -> Field -> uint32_t
    os << "value: " << t.maxTessellationControlPerVertexInputComponents
       << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  maxTessellationControlPerVertexOutputComponents" << std::endl;
    // maxTessellationControlPerVertexOutputComponents -> Field -> uint32_t
    os << "value: " << t.maxTessellationControlPerVertexOutputComponents
       << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  maxTessellationControlPerPatchOutputComponents" << std::endl;
    // maxTessellationControlPerPatchOutputComponents -> Field -> uint32_t
    os << "value: " << t.maxTessellationControlPerPatchOutputComponents
       << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  maxTessellationControlTotalOutputComponents" << std::endl;
    // maxTessellationControlTotalOutputComponents -> Field -> uint32_t
    os << "value: " << t.maxTessellationControlTotalOutputComponents
       << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  maxTessellationEvaluationInputComponents" << std::endl;
    // maxTessellationEvaluationInputComponents -> Field -> uint32_t
    os << "value: " << t.maxTessellationEvaluationInputComponents << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  maxTessellationEvaluationOutputComponents" << std::endl;
    // maxTessellationEvaluationOutputComponents -> Field -> uint32_t
    os << "value: " << t.maxTessellationEvaluationOutputComponents << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  maxGeometryShaderInvocations" << std::endl;
    // maxGeometryShaderInvocations -> Field -> uint32_t
    os << "value: " << t.maxGeometryShaderInvocations << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  maxGeometryInputComponents" << std::endl;
    // maxGeometryInputComponents -> Field -> uint32_t
    os << "value: " << t.maxGeometryInputComponents << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  maxGeometryOutputComponents" << std::endl;
    // maxGeometryOutputComponents -> Field -> uint32_t
    os << "value: " << t.maxGeometryOutputComponents << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  maxGeometryOutputVertices" << std::endl;
    // maxGeometryOutputVertices -> Field -> uint32_t
    os << "value: " << t.maxGeometryOutputVertices << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  maxGeometryTotalOutputComponents" << std::endl;
    // maxGeometryTotalOutputComponents -> Field -> uint32_t
    os << "value: " << t.maxGeometryTotalOutputComponents << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  maxFragmentInputComponents" << std::endl;
    // maxFragmentInputComponents -> Field -> uint32_t
    os << "value: " << t.maxFragmentInputComponents << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  maxFragmentOutputAttachments" << std::endl;
    // maxFragmentOutputAttachments -> Field -> uint32_t
    os << "value: " << t.maxFragmentOutputAttachments << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  maxFragmentDualSrcAttachments" << std::endl;
    // maxFragmentDualSrcAttachments -> Field -> uint32_t
    os << "value: " << t.maxFragmentDualSrcAttachments << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  maxFragmentCombinedOutputResources" << std::endl;
    // maxFragmentCombinedOutputResources -> Field -> uint32_t
    os << "value: " << t.maxFragmentCombinedOutputResources << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  maxComputeSharedMemorySize" << std::endl;
    // maxComputeSharedMemorySize -> Field -> uint32_t
    os << "value: " << t.maxComputeSharedMemorySize << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  maxComputeWorkGroupCount" << std::endl;
    // maxComputeWorkGroupCount -> Field -> FixedArray(uint32_t)
    {
      if (3 == 0) {
        os << "value: nullptr" << std::endl;
      } else {
        os << "members:" << std::endl;
        {
          ScopedOstream soarray(os);
          os << "- # uint32_t" << std::endl;
          for (uint32_t i = 0; i < 3; ++i) {
            ScopedOstream somember(os);
            os << "value: " << t.maxComputeWorkGroupCount[i] << std::endl;
          }
        }
      }
    }
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  maxComputeWorkGroupInvocations" << std::endl;
    // maxComputeWorkGroupInvocations -> Field -> uint32_t
    os << "value: " << t.maxComputeWorkGroupInvocations << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  maxComputeWorkGroupSize" << std::endl;
    // maxComputeWorkGroupSize -> Field -> FixedArray(uint32_t)
    {
      if (3 == 0) {
        os << "value: nullptr" << std::endl;
      } else {
        os << "members:" << std::endl;
        {
          ScopedOstream soarray(os);
          os << "- # uint32_t" << std::endl;
          for (uint32_t i = 0; i < 3; ++i) {
            ScopedOstream somember(os);
            os << "value: " << t.maxComputeWorkGroupSize[i] << std::endl;
          }
        }
      }
    }
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  subPixelPrecisionBits" << std::endl;
    // subPixelPrecisionBits -> Field -> uint32_t
    os << "value: " << t.subPixelPrecisionBits << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  subTexelPrecisionBits" << std::endl;
    // subTexelPrecisionBits -> Field -> uint32_t
    os << "value: " << t.subTexelPrecisionBits << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  mipmapPrecisionBits" << std::endl;
    // mipmapPrecisionBits -> Field -> uint32_t
    os << "value: " << t.mipmapPrecisionBits << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  maxDrawIndexedIndexValue" << std::endl;
    // maxDrawIndexedIndexValue -> Field -> uint32_t
    os << "value: " << t.maxDrawIndexedIndexValue << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  maxDrawIndirectCount" << std::endl;
    // maxDrawIndirectCount -> Field -> uint32_t
    os << "value: " << t.maxDrawIndirectCount << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  maxSamplerLodBias" << std::endl;
    // maxSamplerLodBias -> Field -> float
    os << "value: " << t.maxSamplerLodBias << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  maxSamplerAnisotropy" << std::endl;
    // maxSamplerAnisotropy -> Field -> float
    os << "value: " << t.maxSamplerAnisotropy << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  maxViewports" << std::endl;
    // maxViewports -> Field -> uint32_t
    os << "value: " << t.maxViewports << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  maxViewportDimensions" << std::endl;
    // maxViewportDimensions -> Field -> FixedArray(uint32_t)
    {
      if (2 == 0) {
        os << "value: nullptr" << std::endl;
      } else {
        os << "members:" << std::endl;
        {
          ScopedOstream soarray(os);
          os << "- # uint32_t" << std::endl;
          for (uint32_t i = 0; i < 2; ++i) {
            ScopedOstream somember(os);
            os << "value: " << t.maxViewportDimensions[i] << std::endl;
          }
        }
      }
    }
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  viewportBoundsRange" << std::endl;
    // viewportBoundsRange -> Field -> FixedArray(float)
    {
      if (2 == 0) {
        os << "value: nullptr" << std::endl;
      } else {
        os << "members:" << std::endl;
        {
          ScopedOstream soarray(os);
          os << "- # float" << std::endl;
          for (uint32_t i = 0; i < 2; ++i) {
            ScopedOstream somember(os);
            os << "value: " << t.viewportBoundsRange[i] << std::endl;
          }
        }
      }
    }
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  viewportSubPixelBits" << std::endl;
    // viewportSubPixelBits -> Field -> uint32_t
    os << "value: " << t.viewportSubPixelBits << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  minMemoryMapAlignment" << std::endl;
    // minMemoryMapAlignment -> Field -> size_t
    os << "value: " << t.minMemoryMapAlignment << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  minTexelBufferOffsetAlignment" << std::endl;
    // minTexelBufferOffsetAlignment -> Field -> VkDeviceSize
    os << "value: " << t.minTexelBufferOffsetAlignment << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  minUniformBufferOffsetAlignment" << std::endl;
    // minUniformBufferOffsetAlignment -> Field -> VkDeviceSize
    os << "value: " << t.minUniformBufferOffsetAlignment << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  minStorageBufferOffsetAlignment" << std::endl;
    // minStorageBufferOffsetAlignment -> Field -> VkDeviceSize
    os << "value: " << t.minStorageBufferOffsetAlignment << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  minTexelOffset" << std::endl;
    // minTexelOffset -> Field -> int32_t
    os << "value: " << t.minTexelOffset << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  maxTexelOffset" << std::endl;
    // maxTexelOffset -> Field -> uint32_t
    os << "value: " << t.maxTexelOffset << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  minTexelGatherOffset" << std::endl;
    // minTexelGatherOffset -> Field -> int32_t
    os << "value: " << t.minTexelGatherOffset << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  maxTexelGatherOffset" << std::endl;
    // maxTexelGatherOffset -> Field -> uint32_t
    os << "value: " << t.maxTexelGatherOffset << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  minInterpolationOffset" << std::endl;
    // minInterpolationOffset -> Field -> float
    os << "value: " << t.minInterpolationOffset << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  maxInterpolationOffset" << std::endl;
    // maxInterpolationOffset -> Field -> float
    os << "value: " << t.maxInterpolationOffset << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  subPixelInterpolationOffsetBits" << std::endl;
    // subPixelInterpolationOffsetBits -> Field -> uint32_t
    os << "value: " << t.subPixelInterpolationOffsetBits << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  maxFramebufferWidth" << std::endl;
    // maxFramebufferWidth -> Field -> uint32_t
    os << "value: " << t.maxFramebufferWidth << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  maxFramebufferHeight" << std::endl;
    // maxFramebufferHeight -> Field -> uint32_t
    os << "value: " << t.maxFramebufferHeight << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  maxFramebufferLayers" << std::endl;
    // maxFramebufferLayers -> Field -> uint32_t
    os << "value: " << t.maxFramebufferLayers << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  framebufferColorSampleCounts" << std::endl;
    // framebufferColorSampleCounts -> Field -> VkSampleCountFlags
    os << "value: " << t.framebufferColorSampleCounts << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  framebufferDepthSampleCounts" << std::endl;
    // framebufferDepthSampleCounts -> Field -> VkSampleCountFlags
    os << "value: " << t.framebufferDepthSampleCounts << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  framebufferStencilSampleCounts" << std::endl;
    // framebufferStencilSampleCounts -> Field -> VkSampleCountFlags
    os << "value: " << t.framebufferStencilSampleCounts << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  framebufferNoAttachmentsSampleCounts" << std::endl;
    // framebufferNoAttachmentsSampleCounts -> Field -> VkSampleCountFlags
    os << "value: " << t.framebufferNoAttachmentsSampleCounts << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  maxColorAttachments" << std::endl;
    // maxColorAttachments -> Field -> uint32_t
    os << "value: " << t.maxColorAttachments << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  sampledImageColorSampleCounts" << std::endl;
    // sampledImageColorSampleCounts -> Field -> VkSampleCountFlags
    os << "value: " << t.sampledImageColorSampleCounts << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  sampledImageIntegerSampleCounts" << std::endl;
    // sampledImageIntegerSampleCounts -> Field -> VkSampleCountFlags
    os << "value: " << t.sampledImageIntegerSampleCounts << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  sampledImageDepthSampleCounts" << std::endl;
    // sampledImageDepthSampleCounts -> Field -> VkSampleCountFlags
    os << "value: " << t.sampledImageDepthSampleCounts << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  sampledImageStencilSampleCounts" << std::endl;
    // sampledImageStencilSampleCounts -> Field -> VkSampleCountFlags
    os << "value: " << t.sampledImageStencilSampleCounts << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  storageImageSampleCounts" << std::endl;
    // storageImageSampleCounts -> Field -> VkSampleCountFlags
    os << "value: " << t.storageImageSampleCounts << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  maxSampleMaskWords" << std::endl;
    // maxSampleMaskWords -> Field -> uint32_t
    os << "value: " << t.maxSampleMaskWords << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  timestampComputeAndGraphics" << std::endl;
    // timestampComputeAndGraphics -> Field -> VkBool32
    os << "value: " << t.timestampComputeAndGraphics << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  timestampPeriod" << std::endl;
    // timestampPeriod -> Field -> float
    os << "value: " << t.timestampPeriod << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  maxClipDistances" << std::endl;
    // maxClipDistances -> Field -> uint32_t
    os << "value: " << t.maxClipDistances << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  maxCullDistances" << std::endl;
    // maxCullDistances -> Field -> uint32_t
    os << "value: " << t.maxCullDistances << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  maxCombinedClipAndCullDistances" << std::endl;
    // maxCombinedClipAndCullDistances -> Field -> uint32_t
    os << "value: " << t.maxCombinedClipAndCullDistances << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  discreteQueuePriorities" << std::endl;
    // discreteQueuePriorities -> Field -> uint32_t
    os << "value: " << t.discreteQueuePriorities << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  pointSizeRange" << std::endl;
    // pointSizeRange -> Field -> FixedArray(float)
    {
      if (2 == 0) {
        os << "value: nullptr" << std::endl;
      } else {
        os << "members:" << std::endl;
        {
          ScopedOstream soarray(os);
          os << "- # float" << std::endl;
          for (uint32_t i = 0; i < 2; ++i) {
            ScopedOstream somember(os);
            os << "value: " << t.pointSizeRange[i] << std::endl;
          }
        }
      }
    }
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  lineWidthRange" << std::endl;
    // lineWidthRange -> Field -> FixedArray(float)
    {
      if (2 == 0) {
        os << "value: nullptr" << std::endl;
      } else {
        os << "members:" << std::endl;
        {
          ScopedOstream soarray(os);
          os << "- # float" << std::endl;
          for (uint32_t i = 0; i < 2; ++i) {
            ScopedOstream somember(os);
            os << "value: " << t.lineWidthRange[i] << std::endl;
          }
        }
      }
    }
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  pointSizeGranularity" << std::endl;
    // pointSizeGranularity -> Field -> float
    os << "value: " << t.pointSizeGranularity << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  lineWidthGranularity" << std::endl;
    // lineWidthGranularity -> Field -> float
    os << "value: " << t.lineWidthGranularity << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  strictLines" << std::endl;
    // strictLines -> Field -> VkBool32
    os << "value: " << t.strictLines << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  standardSampleLocations" << std::endl;
    // standardSampleLocations -> Field -> VkBool32
    os << "value: " << t.standardSampleLocations << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  optimalBufferCopyOffsetAlignment" << std::endl;
    // optimalBufferCopyOffsetAlignment -> Field -> VkDeviceSize
    os << "value: " << t.optimalBufferCopyOffsetAlignment << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  optimalBufferCopyRowPitchAlignment" << std::endl;
    // optimalBufferCopyRowPitchAlignment -> Field -> VkDeviceSize
    os << "value: " << t.optimalBufferCopyRowPitchAlignment << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  nonCoherentAtomSize" << std::endl;
    // nonCoherentAtomSize -> Field -> VkDeviceSize
    os << "value: " << t.nonCoherentAtomSize << std::endl;
  }

  return os;
}

std::ostream& operator<<(std::ostream& os, const VkSemaphoreCreateInfo& t) {
  ScopedOstream sos(os);
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  sType" << std::endl;
    // sType -> Field -> VkStructureType
    os << "value: " << t.sType << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  pNext" << std::endl;
    // pNext -> Field -> ConstNextPtr(void)

    // pNext
    os << "value: ";
    PrintNextPtr(os, t.pNext);
    os << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  flags" << std::endl;
    // flags -> Field -> VkSemaphoreCreateFlags
    os << "value: " << t.flags << std::endl;
  }

  return os;
}

std::ostream& operator<<(std::ostream& os, const VkQueryPoolCreateInfo& t) {
  ScopedOstream sos(os);
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  sType" << std::endl;
    // sType -> Field -> VkStructureType
    os << "value: " << t.sType << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  pNext" << std::endl;
    // pNext -> Field -> ConstNextPtr(void)

    // pNext
    os << "value: ";
    PrintNextPtr(os, t.pNext);
    os << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  flags" << std::endl;
    // flags -> Field -> VkQueryPoolCreateFlags
    os << "value: " << t.flags << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  queryType" << std::endl;
    // queryType -> Field -> VkQueryType
    os << "value: " << t.queryType << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  queryCount" << std::endl;
    // queryCount -> Field -> uint32_t
    os << "value: " << t.queryCount << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  pipelineStatistics" << std::endl;
    // pipelineStatistics -> Field -> VkQueryPipelineStatisticFlags
    os << "value: " << t.pipelineStatistics << std::endl;
  }

  return os;
}

std::ostream& operator<<(std::ostream& os, const VkFramebufferCreateInfo& t) {
  ScopedOstream sos(os);
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  sType" << std::endl;
    // sType -> Field -> VkStructureType
    os << "value: " << t.sType << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  pNext" << std::endl;
    // pNext -> Field -> ConstNextPtr(void)

    // pNext
    os << "value: ";
    PrintNextPtr(os, t.pNext);
    os << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  flags" << std::endl;
    // flags -> Field -> VkFramebufferCreateFlags
    os << "value: " << t.flags << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  renderPass" << std::endl;
    // renderPass -> Field -> VkRenderPass
    os << "value: " << t.renderPass << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  attachmentCount" << std::endl;
    // attachmentCount -> Field -> uint32_t
    os << "value: " << t.attachmentCount << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  pAttachments" << std::endl;
    // pAttachments -> Field -> ConstDynamicArray(VkImageView)
    {
      if (t.attachmentCount == 0) {
        os << "value: nullptr" << std::endl;
      } else {
        os << "members:" << std::endl;
        {
          ScopedOstream soarray(os);
          os << "- # VkImageView" << std::endl;
          for (uint32_t i = 0; i < t.attachmentCount; ++i) {
            ScopedOstream somember(os);
            os << "value: " << t.pAttachments[i] << std::endl;
          }
        }
      }
    }
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  width" << std::endl;
    // width -> Field -> uint32_t
    os << "value: " << t.width << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  height" << std::endl;
    // height -> Field -> uint32_t
    os << "value: " << t.height << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  layers" << std::endl;
    // layers -> Field -> uint32_t
    os << "value: " << t.layers << std::endl;
  }

  return os;
}

std::ostream& operator<<(std::ostream& os, const VkDrawIndirectCommand& t) {
  ScopedOstream sos(os);
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  vertexCount" << std::endl;
    // vertexCount -> Field -> uint32_t
    os << "value: " << t.vertexCount << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  instanceCount" << std::endl;
    // instanceCount -> Field -> uint32_t
    os << "value: " << t.instanceCount << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  firstVertex" << std::endl;
    // firstVertex -> Field -> uint32_t
    os << "value: " << t.firstVertex << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  firstInstance" << std::endl;
    // firstInstance -> Field -> uint32_t
    os << "value: " << t.firstInstance << std::endl;
  }

  return os;
}

std::ostream& operator<<(std::ostream& os,
                         const VkDrawIndexedIndirectCommand& t) {
  ScopedOstream sos(os);
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  indexCount" << std::endl;
    // indexCount -> Field -> uint32_t
    os << "value: " << t.indexCount << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  instanceCount" << std::endl;
    // instanceCount -> Field -> uint32_t
    os << "value: " << t.instanceCount << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  firstIndex" << std::endl;
    // firstIndex -> Field -> uint32_t
    os << "value: " << t.firstIndex << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  vertexOffset" << std::endl;
    // vertexOffset -> Field -> int32_t
    os << "value: " << t.vertexOffset << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  firstInstance" << std::endl;
    // firstInstance -> Field -> uint32_t
    os << "value: " << t.firstInstance << std::endl;
  }

  return os;
}

std::ostream& operator<<(std::ostream& os, const VkDispatchIndirectCommand& t) {
  ScopedOstream sos(os);
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  x" << std::endl;
    // x -> Field -> uint32_t
    os << "value: " << t.x << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  y" << std::endl;
    // y -> Field -> uint32_t
    os << "value: " << t.y << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  z" << std::endl;
    // z -> Field -> uint32_t
    os << "value: " << t.z << std::endl;
  }

  return os;
}

std::ostream& operator<<(std::ostream& os, const VkSubmitInfo& t) {
  ScopedOstream sos(os);
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  sType" << std::endl;
    // sType -> Field -> VkStructureType
    os << "value: " << t.sType << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  pNext" << std::endl;
    // pNext -> Field -> ConstNextPtr(void)

    // pNext
    os << "value: ";
    PrintNextPtr(os, t.pNext);
    os << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  waitSemaphoreCount" << std::endl;
    // waitSemaphoreCount -> Field -> uint32_t
    os << "value: " << t.waitSemaphoreCount << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  pWaitSemaphores" << std::endl;
    // pWaitSemaphores -> Field -> ConstDynamicArray(VkSemaphore)
    {
      if (t.waitSemaphoreCount == 0) {
        os << "value: nullptr" << std::endl;
      } else {
        os << "members:" << std::endl;
        {
          ScopedOstream soarray(os);
          os << "- # VkSemaphore" << std::endl;
          for (uint32_t i = 0; i < t.waitSemaphoreCount; ++i) {
            ScopedOstream somember(os);
            os << "value: " << t.pWaitSemaphores[i] << std::endl;
          }
        }
      }
    }
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  pWaitDstStageMask" << std::endl;
    // pWaitDstStageMask -> Field -> ConstDynamicArray(VkPipelineStageFlags)
    {
      if (t.waitSemaphoreCount == 0) {
        os << "value: nullptr" << std::endl;
      } else {
        os << "members:" << std::endl;
        {
          ScopedOstream soarray(os);
          os << "- # VkPipelineStageFlags" << std::endl;
          for (uint32_t i = 0; i < t.waitSemaphoreCount; ++i) {
            ScopedOstream somember(os);
            os << "value: " << t.pWaitDstStageMask[i] << std::endl;
          }
        }
      }
    }
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  commandBufferCount" << std::endl;
    // commandBufferCount -> Field -> uint32_t
    os << "value: " << t.commandBufferCount << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  pCommandBuffers" << std::endl;
    // pCommandBuffers -> Field -> ConstDynamicArray(VkCommandBuffer)
    {
      if (t.commandBufferCount == 0) {
        os << "value: nullptr" << std::endl;
      } else {
        os << "members:" << std::endl;
        {
          ScopedOstream soarray(os);
          os << "- # VkCommandBuffer" << std::endl;
          for (uint32_t i = 0; i < t.commandBufferCount; ++i) {
            ScopedOstream somember(os);
            os << "value: " << t.pCommandBuffers[i] << std::endl;
          }
        }
      }
    }
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  signalSemaphoreCount" << std::endl;
    // signalSemaphoreCount -> Field -> uint32_t
    os << "value: " << t.signalSemaphoreCount << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  pSignalSemaphores" << std::endl;
    // pSignalSemaphores -> Field -> ConstDynamicArray(VkSemaphore)
    {
      if (t.signalSemaphoreCount == 0) {
        os << "value: nullptr" << std::endl;
      } else {
        os << "members:" << std::endl;
        {
          ScopedOstream soarray(os);
          os << "- # VkSemaphore" << std::endl;
          for (uint32_t i = 0; i < t.signalSemaphoreCount; ++i) {
            ScopedOstream somember(os);
            os << "value: " << t.pSignalSemaphores[i] << std::endl;
          }
        }
      }
    }
  }

  return os;
}

std::ostream& operator<<(std::ostream& os, const VkPhysicalDeviceFeatures2& t) {
  ScopedOstream sos(os);
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  sType" << std::endl;
    // sType -> Field -> VkStructureType
    os << "value: " << t.sType << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  pNext" << std::endl;
    // pNext -> Field -> NextPtr(void)

    // pNext
    os << "value: ";
    PrintNextPtr(os, t.pNext);
    os << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  features" << std::endl;
    // features -> Field -> VkPhysicalDeviceFeatures
    os << "members:" << std::endl << t.features << std::endl;
  }

  return os;
}

std::ostream& operator<<(std::ostream& os,
                         const VkPhysicalDeviceProperties2& t) {
  ScopedOstream sos(os);
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  sType" << std::endl;
    // sType -> Field -> VkStructureType
    os << "value: " << t.sType << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  pNext" << std::endl;
    // pNext -> Field -> NextPtr(void)

    // pNext
    os << "value: ";
    PrintNextPtr(os, t.pNext);
    os << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  properties" << std::endl;
    // properties -> Field -> VkPhysicalDeviceProperties
    os << "members:" << std::endl << t.properties << std::endl;
  }

  return os;
}

std::ostream& operator<<(std::ostream& os, const VkFormatProperties2& t) {
  ScopedOstream sos(os);
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  sType" << std::endl;
    // sType -> Field -> VkStructureType
    os << "value: " << t.sType << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  pNext" << std::endl;
    // pNext -> Field -> NextPtr(void)

    // pNext
    os << "value: ";
    PrintNextPtr(os, t.pNext);
    os << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  formatProperties" << std::endl;
    // formatProperties -> Field -> VkFormatProperties
    os << "members:" << std::endl << t.formatProperties << std::endl;
  }

  return os;
}

std::ostream& operator<<(std::ostream& os, const VkImageFormatProperties2& t) {
  ScopedOstream sos(os);
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  sType" << std::endl;
    // sType -> Field -> VkStructureType
    os << "value: " << t.sType << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  pNext" << std::endl;
    // pNext -> Field -> NextPtr(void)

    // pNext
    os << "value: ";
    PrintNextPtr(os, t.pNext);
    os << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  imageFormatProperties" << std::endl;
    // imageFormatProperties -> Field -> VkImageFormatProperties
    os << "members:" << std::endl << t.imageFormatProperties << std::endl;
  }

  return os;
}

std::ostream& operator<<(std::ostream& os,
                         const VkPhysicalDeviceImageFormatInfo2& t) {
  ScopedOstream sos(os);
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  sType" << std::endl;
    // sType -> Field -> VkStructureType
    os << "value: " << t.sType << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  pNext" << std::endl;
    // pNext -> Field -> ConstNextPtr(void)

    // pNext
    os << "value: ";
    PrintNextPtr(os, t.pNext);
    os << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  format" << std::endl;
    // format -> Field -> VkFormat
    os << "value: " << t.format << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  type" << std::endl;
    // type -> Field -> VkImageType
    os << "value: " << t.type << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  tiling" << std::endl;
    // tiling -> Field -> VkImageTiling
    os << "value: " << t.tiling << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  usage" << std::endl;
    // usage -> Field -> VkImageUsageFlags
    os << "value: " << t.usage << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  flags" << std::endl;
    // flags -> Field -> VkImageCreateFlags
    os << "value: " << t.flags << std::endl;
  }

  return os;
}

std::ostream& operator<<(std::ostream& os, const VkQueueFamilyProperties2& t) {
  ScopedOstream sos(os);
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  sType" << std::endl;
    // sType -> Field -> VkStructureType
    os << "value: " << t.sType << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  pNext" << std::endl;
    // pNext -> Field -> NextPtr(void)

    // pNext
    os << "value: ";
    PrintNextPtr(os, t.pNext);
    os << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  queueFamilyProperties" << std::endl;
    // queueFamilyProperties -> Field -> VkQueueFamilyProperties
    os << "members:" << std::endl << t.queueFamilyProperties << std::endl;
  }

  return os;
}

std::ostream& operator<<(std::ostream& os,
                         const VkPhysicalDeviceMemoryProperties2& t) {
  ScopedOstream sos(os);
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  sType" << std::endl;
    // sType -> Field -> VkStructureType
    os << "value: " << t.sType << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  pNext" << std::endl;
    // pNext -> Field -> NextPtr(void)

    // pNext
    os << "value: ";
    PrintNextPtr(os, t.pNext);
    os << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  memoryProperties" << std::endl;
    // memoryProperties -> Field -> VkPhysicalDeviceMemoryProperties
    os << "members:" << std::endl << t.memoryProperties << std::endl;
  }

  return os;
}

std::ostream& operator<<(std::ostream& os,
                         const VkSparseImageFormatProperties2& t) {
  ScopedOstream sos(os);
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  sType" << std::endl;
    // sType -> Field -> VkStructureType
    os << "value: " << t.sType << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  pNext" << std::endl;
    // pNext -> Field -> NextPtr(void)

    // pNext
    os << "value: ";
    PrintNextPtr(os, t.pNext);
    os << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  properties" << std::endl;
    // properties -> Field -> VkSparseImageFormatProperties
    os << "members:" << std::endl << t.properties << std::endl;
  }

  return os;
}

std::ostream& operator<<(std::ostream& os,
                         const VkPhysicalDeviceSparseImageFormatInfo2& t) {
  ScopedOstream sos(os);
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  sType" << std::endl;
    // sType -> Field -> VkStructureType
    os << "value: " << t.sType << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  pNext" << std::endl;
    // pNext -> Field -> ConstNextPtr(void)

    // pNext
    os << "value: ";
    PrintNextPtr(os, t.pNext);
    os << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  format" << std::endl;
    // format -> Field -> VkFormat
    os << "value: " << t.format << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  type" << std::endl;
    // type -> Field -> VkImageType
    os << "value: " << t.type << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  samples" << std::endl;
    // samples -> Field -> VkSampleCountFlagBits
    os << "value: " << t.samples << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  usage" << std::endl;
    // usage -> Field -> VkImageUsageFlags
    os << "value: " << t.usage << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  tiling" << std::endl;
    // tiling -> Field -> VkImageTiling
    os << "value: " << t.tiling << std::endl;
  }

  return os;
}

std::ostream& operator<<(std::ostream& os, const VkConformanceVersion& t) {
  ScopedOstream sos(os);
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  major" << std::endl;
    // major -> Field -> uint8_t
    os << "value: " << t.major << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  minor" << std::endl;
    // minor -> Field -> uint8_t
    os << "value: " << t.minor << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  subminor" << std::endl;
    // subminor -> Field -> uint8_t
    os << "value: " << t.subminor << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  patch" << std::endl;
    // patch -> Field -> uint8_t
    os << "value: " << t.patch << std::endl;
  }

  return os;
}

std::ostream& operator<<(std::ostream& os,
                         const VkPhysicalDeviceDriverProperties& t) {
  ScopedOstream sos(os);
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  sType" << std::endl;
    // sType -> Field -> VkStructureType
    os << "value: " << t.sType << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  pNext" << std::endl;
    // pNext -> Field -> NextPtr(void)

    // pNext
    os << "value: ";
    PrintNextPtr(os, t.pNext);
    os << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  driverID" << std::endl;
    // driverID -> Field -> VkDriverId
    os << "value: " << t.driverID << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  driverName" << std::endl;
    // driverName -> Field -> FixedArray(char)
    os << "value: " << t.driverName << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  driverInfo" << std::endl;
    // driverInfo -> Field -> FixedArray(char)
    os << "value: " << t.driverInfo << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  conformanceVersion" << std::endl;
    // conformanceVersion -> Field -> VkConformanceVersion
    os << "members:" << std::endl << t.conformanceVersion << std::endl;
  }

  return os;
}

std::ostream& operator<<(std::ostream& os,
                         const VkPhysicalDeviceVariablePointersFeatures& t) {
  ScopedOstream sos(os);
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  sType" << std::endl;
    // sType -> Field -> VkStructureType
    os << "value: " << t.sType << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  pNext" << std::endl;
    // pNext -> Field -> NextPtr(void)

    // pNext
    os << "value: ";
    PrintNextPtr(os, t.pNext);
    os << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  variablePointersStorageBuffer" << std::endl;
    // variablePointersStorageBuffer -> Field -> VkBool32
    os << "value: " << t.variablePointersStorageBuffer << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  variablePointers" << std::endl;
    // variablePointers -> Field -> VkBool32
    os << "value: " << t.variablePointers << std::endl;
  }

  return os;
}

std::ostream& operator<<(std::ostream& os,
                         const VkExternalMemoryProperties& t) {
  ScopedOstream sos(os);
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  externalMemoryFeatures" << std::endl;
    // externalMemoryFeatures -> Field -> VkExternalMemoryFeatureFlags
    os << "value: " << t.externalMemoryFeatures << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  exportFromImportedHandleTypes" << std::endl;
    // exportFromImportedHandleTypes -> Field -> VkExternalMemoryHandleTypeFlags
    os << "value: " << t.exportFromImportedHandleTypes << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  compatibleHandleTypes" << std::endl;
    // compatibleHandleTypes -> Field -> VkExternalMemoryHandleTypeFlags
    os << "value: " << t.compatibleHandleTypes << std::endl;
  }

  return os;
}

std::ostream& operator<<(std::ostream& os,
                         const VkPhysicalDeviceExternalImageFormatInfo& t) {
  ScopedOstream sos(os);
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  sType" << std::endl;
    // sType -> Field -> VkStructureType
    os << "value: " << t.sType << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  pNext" << std::endl;
    // pNext -> Field -> ConstNextPtr(void)

    // pNext
    os << "value: ";
    PrintNextPtr(os, t.pNext);
    os << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  handleType" << std::endl;
    // handleType -> Field -> VkExternalMemoryHandleTypeFlagBits
    os << "value: " << t.handleType << std::endl;
  }

  return os;
}

std::ostream& operator<<(std::ostream& os,
                         const VkExternalImageFormatProperties& t) {
  ScopedOstream sos(os);
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  sType" << std::endl;
    // sType -> Field -> VkStructureType
    os << "value: " << t.sType << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  pNext" << std::endl;
    // pNext -> Field -> NextPtr(void)

    // pNext
    os << "value: ";
    PrintNextPtr(os, t.pNext);
    os << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  externalMemoryProperties" << std::endl;
    // externalMemoryProperties -> Field -> VkExternalMemoryProperties
    os << "members:" << std::endl << t.externalMemoryProperties << std::endl;
  }

  return os;
}

std::ostream& operator<<(std::ostream& os,
                         const VkPhysicalDeviceExternalBufferInfo& t) {
  ScopedOstream sos(os);
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  sType" << std::endl;
    // sType -> Field -> VkStructureType
    os << "value: " << t.sType << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  pNext" << std::endl;
    // pNext -> Field -> ConstNextPtr(void)

    // pNext
    os << "value: ";
    PrintNextPtr(os, t.pNext);
    os << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  flags" << std::endl;
    // flags -> Field -> VkBufferCreateFlags
    os << "value: " << t.flags << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  usage" << std::endl;
    // usage -> Field -> VkBufferUsageFlags
    os << "value: " << t.usage << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  handleType" << std::endl;
    // handleType -> Field -> VkExternalMemoryHandleTypeFlagBits
    os << "value: " << t.handleType << std::endl;
  }

  return os;
}

std::ostream& operator<<(std::ostream& os,
                         const VkExternalBufferProperties& t) {
  ScopedOstream sos(os);
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  sType" << std::endl;
    // sType -> Field -> VkStructureType
    os << "value: " << t.sType << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  pNext" << std::endl;
    // pNext -> Field -> NextPtr(void)

    // pNext
    os << "value: ";
    PrintNextPtr(os, t.pNext);
    os << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  externalMemoryProperties" << std::endl;
    // externalMemoryProperties -> Field -> VkExternalMemoryProperties
    os << "members:" << std::endl << t.externalMemoryProperties << std::endl;
  }

  return os;
}

std::ostream& operator<<(std::ostream& os,
                         const VkPhysicalDeviceIDProperties& t) {
  ScopedOstream sos(os);
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  sType" << std::endl;
    // sType -> Field -> VkStructureType
    os << "value: " << t.sType << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  pNext" << std::endl;
    // pNext -> Field -> NextPtr(void)

    // pNext
    os << "value: ";
    PrintNextPtr(os, t.pNext);
    os << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  deviceUUID" << std::endl;
    // deviceUUID -> Field -> FixedArray(uint8_t)
    {
      if (VK_UUID_SIZE == 0) {
        os << "value: nullptr" << std::endl;
      } else {
        os << "members:" << std::endl;
        {
          ScopedOstream soarray(os);
          os << "- # uint8_t" << std::endl;
          for (uint32_t i = 0; i < VK_UUID_SIZE; ++i) {
            ScopedOstream somember(os);
            os << "value: " << t.deviceUUID[i] << std::endl;
          }
        }
      }
    }
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  driverUUID" << std::endl;
    // driverUUID -> Field -> FixedArray(uint8_t)
    {
      if (VK_UUID_SIZE == 0) {
        os << "value: nullptr" << std::endl;
      } else {
        os << "members:" << std::endl;
        {
          ScopedOstream soarray(os);
          os << "- # uint8_t" << std::endl;
          for (uint32_t i = 0; i < VK_UUID_SIZE; ++i) {
            ScopedOstream somember(os);
            os << "value: " << t.driverUUID[i] << std::endl;
          }
        }
      }
    }
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  deviceLUID" << std::endl;
    // deviceLUID -> Field -> FixedArray(uint8_t)
    {
      if (VK_LUID_SIZE == 0) {
        os << "value: nullptr" << std::endl;
      } else {
        os << "members:" << std::endl;
        {
          ScopedOstream soarray(os);
          os << "- # uint8_t" << std::endl;
          for (uint32_t i = 0; i < VK_LUID_SIZE; ++i) {
            ScopedOstream somember(os);
            os << "value: " << t.deviceLUID[i] << std::endl;
          }
        }
      }
    }
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  deviceNodeMask" << std::endl;
    // deviceNodeMask -> Field -> uint32_t
    os << "value: " << t.deviceNodeMask << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  deviceLUIDValid" << std::endl;
    // deviceLUIDValid -> Field -> VkBool32
    os << "value: " << t.deviceLUIDValid << std::endl;
  }

  return os;
}

std::ostream& operator<<(std::ostream& os,
                         const VkExternalMemoryImageCreateInfo& t) {
  ScopedOstream sos(os);
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  sType" << std::endl;
    // sType -> Field -> VkStructureType
    os << "value: " << t.sType << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  pNext" << std::endl;
    // pNext -> Field -> ConstNextPtr(void)

    // pNext
    os << "value: ";
    PrintNextPtr(os, t.pNext);
    os << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  handleTypes" << std::endl;
    // handleTypes -> Field -> VkExternalMemoryHandleTypeFlags
    os << "value: " << t.handleTypes << std::endl;
  }

  return os;
}

std::ostream& operator<<(std::ostream& os,
                         const VkExternalMemoryBufferCreateInfo& t) {
  ScopedOstream sos(os);
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  sType" << std::endl;
    // sType -> Field -> VkStructureType
    os << "value: " << t.sType << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  pNext" << std::endl;
    // pNext -> Field -> ConstNextPtr(void)

    // pNext
    os << "value: ";
    PrintNextPtr(os, t.pNext);
    os << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  handleTypes" << std::endl;
    // handleTypes -> Field -> VkExternalMemoryHandleTypeFlags
    os << "value: " << t.handleTypes << std::endl;
  }

  return os;
}

std::ostream& operator<<(std::ostream& os,
                         const VkExportMemoryAllocateInfo& t) {
  ScopedOstream sos(os);
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  sType" << std::endl;
    // sType -> Field -> VkStructureType
    os << "value: " << t.sType << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  pNext" << std::endl;
    // pNext -> Field -> ConstNextPtr(void)

    // pNext
    os << "value: ";
    PrintNextPtr(os, t.pNext);
    os << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  handleTypes" << std::endl;
    // handleTypes -> Field -> VkExternalMemoryHandleTypeFlags
    os << "value: " << t.handleTypes << std::endl;
  }

  return os;
}

std::ostream& operator<<(std::ostream& os,
                         const VkPhysicalDeviceExternalSemaphoreInfo& t) {
  ScopedOstream sos(os);
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  sType" << std::endl;
    // sType -> Field -> VkStructureType
    os << "value: " << t.sType << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  pNext" << std::endl;
    // pNext -> Field -> ConstNextPtr(void)

    // pNext
    os << "value: ";
    PrintNextPtr(os, t.pNext);
    os << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  handleType" << std::endl;
    // handleType -> Field -> VkExternalSemaphoreHandleTypeFlagBits
    os << "value: " << t.handleType << std::endl;
  }

  return os;
}

std::ostream& operator<<(std::ostream& os,
                         const VkExternalSemaphoreProperties& t) {
  ScopedOstream sos(os);
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  sType" << std::endl;
    // sType -> Field -> VkStructureType
    os << "value: " << t.sType << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  pNext" << std::endl;
    // pNext -> Field -> NextPtr(void)

    // pNext
    os << "value: ";
    PrintNextPtr(os, t.pNext);
    os << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  exportFromImportedHandleTypes" << std::endl;
    // exportFromImportedHandleTypes -> Field ->
    // VkExternalSemaphoreHandleTypeFlags
    os << "value: " << t.exportFromImportedHandleTypes << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  compatibleHandleTypes" << std::endl;
    // compatibleHandleTypes -> Field -> VkExternalSemaphoreHandleTypeFlags
    os << "value: " << t.compatibleHandleTypes << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  externalSemaphoreFeatures" << std::endl;
    // externalSemaphoreFeatures -> Field -> VkExternalSemaphoreFeatureFlags
    os << "value: " << t.externalSemaphoreFeatures << std::endl;
  }

  return os;
}

std::ostream& operator<<(std::ostream& os,
                         const VkExportSemaphoreCreateInfo& t) {
  ScopedOstream sos(os);
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  sType" << std::endl;
    // sType -> Field -> VkStructureType
    os << "value: " << t.sType << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  pNext" << std::endl;
    // pNext -> Field -> ConstNextPtr(void)

    // pNext
    os << "value: ";
    PrintNextPtr(os, t.pNext);
    os << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  handleTypes" << std::endl;
    // handleTypes -> Field -> VkExternalSemaphoreHandleTypeFlags
    os << "value: " << t.handleTypes << std::endl;
  }

  return os;
}

std::ostream& operator<<(std::ostream& os,
                         const VkPhysicalDeviceExternalFenceInfo& t) {
  ScopedOstream sos(os);
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  sType" << std::endl;
    // sType -> Field -> VkStructureType
    os << "value: " << t.sType << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  pNext" << std::endl;
    // pNext -> Field -> ConstNextPtr(void)

    // pNext
    os << "value: ";
    PrintNextPtr(os, t.pNext);
    os << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  handleType" << std::endl;
    // handleType -> Field -> VkExternalFenceHandleTypeFlagBits
    os << "value: " << t.handleType << std::endl;
  }

  return os;
}

std::ostream& operator<<(std::ostream& os, const VkExternalFenceProperties& t) {
  ScopedOstream sos(os);
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  sType" << std::endl;
    // sType -> Field -> VkStructureType
    os << "value: " << t.sType << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  pNext" << std::endl;
    // pNext -> Field -> NextPtr(void)

    // pNext
    os << "value: ";
    PrintNextPtr(os, t.pNext);
    os << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  exportFromImportedHandleTypes" << std::endl;
    // exportFromImportedHandleTypes -> Field -> VkExternalFenceHandleTypeFlags
    os << "value: " << t.exportFromImportedHandleTypes << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  compatibleHandleTypes" << std::endl;
    // compatibleHandleTypes -> Field -> VkExternalFenceHandleTypeFlags
    os << "value: " << t.compatibleHandleTypes << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  externalFenceFeatures" << std::endl;
    // externalFenceFeatures -> Field -> VkExternalFenceFeatureFlags
    os << "value: " << t.externalFenceFeatures << std::endl;
  }

  return os;
}

std::ostream& operator<<(std::ostream& os, const VkExportFenceCreateInfo& t) {
  ScopedOstream sos(os);
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  sType" << std::endl;
    // sType -> Field -> VkStructureType
    os << "value: " << t.sType << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  pNext" << std::endl;
    // pNext -> Field -> ConstNextPtr(void)

    // pNext
    os << "value: ";
    PrintNextPtr(os, t.pNext);
    os << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  handleTypes" << std::endl;
    // handleTypes -> Field -> VkExternalFenceHandleTypeFlags
    os << "value: " << t.handleTypes << std::endl;
  }

  return os;
}

std::ostream& operator<<(std::ostream& os,
                         const VkPhysicalDeviceMultiviewFeatures& t) {
  ScopedOstream sos(os);
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  sType" << std::endl;
    // sType -> Field -> VkStructureType
    os << "value: " << t.sType << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  pNext" << std::endl;
    // pNext -> Field -> NextPtr(void)

    // pNext
    os << "value: ";
    PrintNextPtr(os, t.pNext);
    os << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  multiview" << std::endl;
    // multiview -> Field -> VkBool32
    os << "value: " << t.multiview << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  multiviewGeometryShader" << std::endl;
    // multiviewGeometryShader -> Field -> VkBool32
    os << "value: " << t.multiviewGeometryShader << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  multiviewTessellationShader" << std::endl;
    // multiviewTessellationShader -> Field -> VkBool32
    os << "value: " << t.multiviewTessellationShader << std::endl;
  }

  return os;
}

std::ostream& operator<<(std::ostream& os,
                         const VkPhysicalDeviceMultiviewProperties& t) {
  ScopedOstream sos(os);
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  sType" << std::endl;
    // sType -> Field -> VkStructureType
    os << "value: " << t.sType << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  pNext" << std::endl;
    // pNext -> Field -> NextPtr(void)

    // pNext
    os << "value: ";
    PrintNextPtr(os, t.pNext);
    os << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  maxMultiviewViewCount" << std::endl;
    // maxMultiviewViewCount -> Field -> uint32_t
    os << "value: " << t.maxMultiviewViewCount << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  maxMultiviewInstanceIndex" << std::endl;
    // maxMultiviewInstanceIndex -> Field -> uint32_t
    os << "value: " << t.maxMultiviewInstanceIndex << std::endl;
  }

  return os;
}

std::ostream& operator<<(std::ostream& os,
                         const VkRenderPassMultiviewCreateInfo& t) {
  ScopedOstream sos(os);
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  sType" << std::endl;
    // sType -> Field -> VkStructureType
    os << "value: " << t.sType << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  pNext" << std::endl;
    // pNext -> Field -> ConstNextPtr(void)

    // pNext
    os << "value: ";
    PrintNextPtr(os, t.pNext);
    os << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  subpassCount" << std::endl;
    // subpassCount -> Field -> uint32_t
    os << "value: " << t.subpassCount << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  pViewMasks" << std::endl;
    // pViewMasks -> Field -> ConstDynamicArray(uint32_t)
    {
      if (t.subpassCount == 0) {
        os << "value: nullptr" << std::endl;
      } else {
        os << "members:" << std::endl;
        {
          ScopedOstream soarray(os);
          os << "- # uint32_t" << std::endl;
          for (uint32_t i = 0; i < t.subpassCount; ++i) {
            ScopedOstream somember(os);
            os << "value: " << t.pViewMasks[i] << std::endl;
          }
        }
      }
    }
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  dependencyCount" << std::endl;
    // dependencyCount -> Field -> uint32_t
    os << "value: " << t.dependencyCount << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  pViewOffsets" << std::endl;
    // pViewOffsets -> Field -> ConstDynamicArray(int32_t)
    {
      if (t.dependencyCount == 0) {
        os << "value: nullptr" << std::endl;
      } else {
        os << "members:" << std::endl;
        {
          ScopedOstream soarray(os);
          os << "- # int32_t" << std::endl;
          for (uint32_t i = 0; i < t.dependencyCount; ++i) {
            ScopedOstream somember(os);
            os << "value: " << t.pViewOffsets[i] << std::endl;
          }
        }
      }
    }
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  correlationMaskCount" << std::endl;
    // correlationMaskCount -> Field -> uint32_t
    os << "value: " << t.correlationMaskCount << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  pCorrelationMasks" << std::endl;
    // pCorrelationMasks -> Field -> ConstDynamicArray(uint32_t)
    {
      if (t.correlationMaskCount == 0) {
        os << "value: nullptr" << std::endl;
      } else {
        os << "members:" << std::endl;
        {
          ScopedOstream soarray(os);
          os << "- # uint32_t" << std::endl;
          for (uint32_t i = 0; i < t.correlationMaskCount; ++i) {
            ScopedOstream somember(os);
            os << "value: " << t.pCorrelationMasks[i] << std::endl;
          }
        }
      }
    }
  }

  return os;
}

std::ostream& operator<<(std::ostream& os,
                         const VkPhysicalDeviceGroupProperties& t) {
  ScopedOstream sos(os);
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  sType" << std::endl;
    // sType -> Field -> VkStructureType
    os << "value: " << t.sType << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  pNext" << std::endl;
    // pNext -> Field -> NextPtr(void)

    // pNext
    os << "value: ";
    PrintNextPtr(os, t.pNext);
    os << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  physicalDeviceCount" << std::endl;
    // physicalDeviceCount -> Field -> uint32_t
    os << "value: " << t.physicalDeviceCount << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  physicalDevices" << std::endl;
    // physicalDevices -> Field -> FixedArray(VkPhysicalDevice)
    {
      if (VK_MAX_DEVICE_GROUP_SIZE == 0) {
        os << "value: nullptr" << std::endl;
      } else {
        os << "members:" << std::endl;
        {
          ScopedOstream soarray(os);
          os << "- # VkPhysicalDevice" << std::endl;
          for (uint32_t i = 0; i < VK_MAX_DEVICE_GROUP_SIZE; ++i) {
            ScopedOstream somember(os);
            os << "value: " << t.physicalDevices[i] << std::endl;
          }
        }
      }
    }
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  subsetAllocation" << std::endl;
    // subsetAllocation -> Field -> VkBool32
    os << "value: " << t.subsetAllocation << std::endl;
  }

  return os;
}

std::ostream& operator<<(std::ostream& os, const VkMemoryAllocateFlagsInfo& t) {
  ScopedOstream sos(os);
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  sType" << std::endl;
    // sType -> Field -> VkStructureType
    os << "value: " << t.sType << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  pNext" << std::endl;
    // pNext -> Field -> ConstNextPtr(void)

    // pNext
    os << "value: ";
    PrintNextPtr(os, t.pNext);
    os << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  flags" << std::endl;
    // flags -> Field -> VkMemoryAllocateFlags
    os << "value: " << t.flags << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  deviceMask" << std::endl;
    // deviceMask -> Field -> uint32_t
    os << "value: " << t.deviceMask << std::endl;
  }

  return os;
}

std::ostream& operator<<(std::ostream& os, const VkBindBufferMemoryInfo& t) {
  ScopedOstream sos(os);
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  sType" << std::endl;
    // sType -> Field -> VkStructureType
    os << "value: " << t.sType << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  pNext" << std::endl;
    // pNext -> Field -> ConstNextPtr(void)

    // pNext
    os << "value: ";
    PrintNextPtr(os, t.pNext);
    os << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  buffer" << std::endl;
    // buffer -> Field -> VkBuffer
    os << "value: " << t.buffer << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  memory" << std::endl;
    // memory -> Field -> VkDeviceMemory
    os << "value: " << t.memory << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  memoryOffset" << std::endl;
    // memoryOffset -> Field -> VkDeviceSize
    os << "value: " << t.memoryOffset << std::endl;
  }

  return os;
}

std::ostream& operator<<(std::ostream& os,
                         const VkBindBufferMemoryDeviceGroupInfo& t) {
  ScopedOstream sos(os);
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  sType" << std::endl;
    // sType -> Field -> VkStructureType
    os << "value: " << t.sType << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  pNext" << std::endl;
    // pNext -> Field -> ConstNextPtr(void)

    // pNext
    os << "value: ";
    PrintNextPtr(os, t.pNext);
    os << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  deviceIndexCount" << std::endl;
    // deviceIndexCount -> Field -> uint32_t
    os << "value: " << t.deviceIndexCount << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  pDeviceIndices" << std::endl;
    // pDeviceIndices -> Field -> ConstDynamicArray(uint32_t)
    {
      if (t.deviceIndexCount == 0) {
        os << "value: nullptr" << std::endl;
      } else {
        os << "members:" << std::endl;
        {
          ScopedOstream soarray(os);
          os << "- # uint32_t" << std::endl;
          for (uint32_t i = 0; i < t.deviceIndexCount; ++i) {
            ScopedOstream somember(os);
            os << "value: " << t.pDeviceIndices[i] << std::endl;
          }
        }
      }
    }
  }

  return os;
}

std::ostream& operator<<(std::ostream& os, const VkBindImageMemoryInfo& t) {
  ScopedOstream sos(os);
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  sType" << std::endl;
    // sType -> Field -> VkStructureType
    os << "value: " << t.sType << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  pNext" << std::endl;
    // pNext -> Field -> ConstNextPtr(void)

    // pNext
    os << "value: ";
    PrintNextPtr(os, t.pNext);
    os << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  image" << std::endl;
    // image -> Field -> VkImage
    os << "value: " << t.image << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  memory" << std::endl;
    // memory -> Field -> VkDeviceMemory
    os << "value: " << t.memory << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  memoryOffset" << std::endl;
    // memoryOffset -> Field -> VkDeviceSize
    os << "value: " << t.memoryOffset << std::endl;
  }

  return os;
}

std::ostream& operator<<(std::ostream& os,
                         const VkBindImageMemoryDeviceGroupInfo& t) {
  ScopedOstream sos(os);
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  sType" << std::endl;
    // sType -> Field -> VkStructureType
    os << "value: " << t.sType << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  pNext" << std::endl;
    // pNext -> Field -> ConstNextPtr(void)

    // pNext
    os << "value: ";
    PrintNextPtr(os, t.pNext);
    os << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  deviceIndexCount" << std::endl;
    // deviceIndexCount -> Field -> uint32_t
    os << "value: " << t.deviceIndexCount << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  pDeviceIndices" << std::endl;
    // pDeviceIndices -> Field -> ConstDynamicArray(uint32_t)
    {
      if (t.deviceIndexCount == 0) {
        os << "value: nullptr" << std::endl;
      } else {
        os << "members:" << std::endl;
        {
          ScopedOstream soarray(os);
          os << "- # uint32_t" << std::endl;
          for (uint32_t i = 0; i < t.deviceIndexCount; ++i) {
            ScopedOstream somember(os);
            os << "value: " << t.pDeviceIndices[i] << std::endl;
          }
        }
      }
    }
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  splitInstanceBindRegionCount" << std::endl;
    // splitInstanceBindRegionCount -> Field -> uint32_t
    os << "value: " << t.splitInstanceBindRegionCount << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  pSplitInstanceBindRegions" << std::endl;
    // pSplitInstanceBindRegions -> Field -> ConstDynamicArray(VkRect2D)
    {
      if (t.splitInstanceBindRegionCount == 0) {
        os << "value: nullptr" << std::endl;
      } else {
        os << "members:" << std::endl;
        {
          ScopedOstream soarray(os);
          os << "- # VkRect2D" << std::endl;
          for (uint32_t i = 0; i < t.splitInstanceBindRegionCount; ++i) {
            ScopedOstream somember(os);
            os << "members:" << std::endl
               << t.pSplitInstanceBindRegions[i] << std::endl;
          }
        }
      }
    }
  }

  return os;
}

std::ostream& operator<<(std::ostream& os,
                         const VkDeviceGroupRenderPassBeginInfo& t) {
  ScopedOstream sos(os);
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  sType" << std::endl;
    // sType -> Field -> VkStructureType
    os << "value: " << t.sType << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  pNext" << std::endl;
    // pNext -> Field -> ConstNextPtr(void)

    // pNext
    os << "value: ";
    PrintNextPtr(os, t.pNext);
    os << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  deviceMask" << std::endl;
    // deviceMask -> Field -> uint32_t
    os << "value: " << t.deviceMask << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  deviceRenderAreaCount" << std::endl;
    // deviceRenderAreaCount -> Field -> uint32_t
    os << "value: " << t.deviceRenderAreaCount << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  pDeviceRenderAreas" << std::endl;
    // pDeviceRenderAreas -> Field -> ConstDynamicArray(VkRect2D)
    {
      if (t.deviceRenderAreaCount == 0) {
        os << "value: nullptr" << std::endl;
      } else {
        os << "members:" << std::endl;
        {
          ScopedOstream soarray(os);
          os << "- # VkRect2D" << std::endl;
          for (uint32_t i = 0; i < t.deviceRenderAreaCount; ++i) {
            ScopedOstream somember(os);
            os << "members:" << std::endl
               << t.pDeviceRenderAreas[i] << std::endl;
          }
        }
      }
    }
  }

  return os;
}

std::ostream& operator<<(std::ostream& os,
                         const VkDeviceGroupCommandBufferBeginInfo& t) {
  ScopedOstream sos(os);
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  sType" << std::endl;
    // sType -> Field -> VkStructureType
    os << "value: " << t.sType << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  pNext" << std::endl;
    // pNext -> Field -> ConstNextPtr(void)

    // pNext
    os << "value: ";
    PrintNextPtr(os, t.pNext);
    os << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  deviceMask" << std::endl;
    // deviceMask -> Field -> uint32_t
    os << "value: " << t.deviceMask << std::endl;
  }

  return os;
}

std::ostream& operator<<(std::ostream& os, const VkDeviceGroupSubmitInfo& t) {
  ScopedOstream sos(os);
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  sType" << std::endl;
    // sType -> Field -> VkStructureType
    os << "value: " << t.sType << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  pNext" << std::endl;
    // pNext -> Field -> ConstNextPtr(void)

    // pNext
    os << "value: ";
    PrintNextPtr(os, t.pNext);
    os << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  waitSemaphoreCount" << std::endl;
    // waitSemaphoreCount -> Field -> uint32_t
    os << "value: " << t.waitSemaphoreCount << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  pWaitSemaphoreDeviceIndices" << std::endl;
    // pWaitSemaphoreDeviceIndices -> Field -> ConstDynamicArray(uint32_t)
    {
      if (t.waitSemaphoreCount == 0) {
        os << "value: nullptr" << std::endl;
      } else {
        os << "members:" << std::endl;
        {
          ScopedOstream soarray(os);
          os << "- # uint32_t" << std::endl;
          for (uint32_t i = 0; i < t.waitSemaphoreCount; ++i) {
            ScopedOstream somember(os);
            os << "value: " << t.pWaitSemaphoreDeviceIndices[i] << std::endl;
          }
        }
      }
    }
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  commandBufferCount" << std::endl;
    // commandBufferCount -> Field -> uint32_t
    os << "value: " << t.commandBufferCount << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  pCommandBufferDeviceMasks" << std::endl;
    // pCommandBufferDeviceMasks -> Field -> ConstDynamicArray(uint32_t)
    {
      if (t.commandBufferCount == 0) {
        os << "value: nullptr" << std::endl;
      } else {
        os << "members:" << std::endl;
        {
          ScopedOstream soarray(os);
          os << "- # uint32_t" << std::endl;
          for (uint32_t i = 0; i < t.commandBufferCount; ++i) {
            ScopedOstream somember(os);
            os << "value: " << t.pCommandBufferDeviceMasks[i] << std::endl;
          }
        }
      }
    }
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  signalSemaphoreCount" << std::endl;
    // signalSemaphoreCount -> Field -> uint32_t
    os << "value: " << t.signalSemaphoreCount << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  pSignalSemaphoreDeviceIndices" << std::endl;
    // pSignalSemaphoreDeviceIndices -> Field -> ConstDynamicArray(uint32_t)
    {
      if (t.signalSemaphoreCount == 0) {
        os << "value: nullptr" << std::endl;
      } else {
        os << "members:" << std::endl;
        {
          ScopedOstream soarray(os);
          os << "- # uint32_t" << std::endl;
          for (uint32_t i = 0; i < t.signalSemaphoreCount; ++i) {
            ScopedOstream somember(os);
            os << "value: " << t.pSignalSemaphoreDeviceIndices[i] << std::endl;
          }
        }
      }
    }
  }

  return os;
}

std::ostream& operator<<(std::ostream& os,
                         const VkDeviceGroupBindSparseInfo& t) {
  ScopedOstream sos(os);
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  sType" << std::endl;
    // sType -> Field -> VkStructureType
    os << "value: " << t.sType << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  pNext" << std::endl;
    // pNext -> Field -> ConstNextPtr(void)

    // pNext
    os << "value: ";
    PrintNextPtr(os, t.pNext);
    os << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  resourceDeviceIndex" << std::endl;
    // resourceDeviceIndex -> Field -> uint32_t
    os << "value: " << t.resourceDeviceIndex << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  memoryDeviceIndex" << std::endl;
    // memoryDeviceIndex -> Field -> uint32_t
    os << "value: " << t.memoryDeviceIndex << std::endl;
  }

  return os;
}

std::ostream& operator<<(std::ostream& os,
                         const VkDeviceGroupDeviceCreateInfo& t) {
  ScopedOstream sos(os);
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  sType" << std::endl;
    // sType -> Field -> VkStructureType
    os << "value: " << t.sType << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  pNext" << std::endl;
    // pNext -> Field -> ConstNextPtr(void)

    // pNext
    os << "value: ";
    PrintNextPtr(os, t.pNext);
    os << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  physicalDeviceCount" << std::endl;
    // physicalDeviceCount -> Field -> uint32_t
    os << "value: " << t.physicalDeviceCount << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  pPhysicalDevices" << std::endl;
    // pPhysicalDevices -> Field -> ConstDynamicArray(VkPhysicalDevice)
    {
      if (t.physicalDeviceCount == 0) {
        os << "value: nullptr" << std::endl;
      } else {
        os << "members:" << std::endl;
        {
          ScopedOstream soarray(os);
          os << "- # VkPhysicalDevice" << std::endl;
          for (uint32_t i = 0; i < t.physicalDeviceCount; ++i) {
            ScopedOstream somember(os);
            os << "value: " << t.pPhysicalDevices[i] << std::endl;
          }
        }
      }
    }
  }

  return os;
}

std::ostream& operator<<(std::ostream& os,
                         const VkDescriptorUpdateTemplateEntry& t) {
  ScopedOstream sos(os);
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  dstBinding" << std::endl;
    // dstBinding -> Field -> uint32_t
    os << "value: " << t.dstBinding << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  dstArrayElement" << std::endl;
    // dstArrayElement -> Field -> uint32_t
    os << "value: " << t.dstArrayElement << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  descriptorCount" << std::endl;
    // descriptorCount -> Field -> uint32_t
    os << "value: " << t.descriptorCount << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  descriptorType" << std::endl;
    // descriptorType -> Field -> VkDescriptorType
    os << "value: " << t.descriptorType << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  offset" << std::endl;
    // offset -> Field -> size_t
    os << "value: " << t.offset << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  stride" << std::endl;
    // stride -> Field -> size_t
    os << "value: " << t.stride << std::endl;
  }

  return os;
}

std::ostream& operator<<(std::ostream& os,
                         const VkDescriptorUpdateTemplateCreateInfo& t) {
  ScopedOstream sos(os);
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  sType" << std::endl;
    // sType -> Field -> VkStructureType
    os << "value: " << t.sType << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  pNext" << std::endl;
    // pNext -> Field -> ConstNextPtr(void)

    // pNext
    os << "value: ";
    PrintNextPtr(os, t.pNext);
    os << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  flags" << std::endl;
    // flags -> Field -> VkDescriptorUpdateTemplateCreateFlags
    os << "value: " << t.flags << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  descriptorUpdateEntryCount" << std::endl;
    // descriptorUpdateEntryCount -> Field -> uint32_t
    os << "value: " << t.descriptorUpdateEntryCount << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  pDescriptorUpdateEntries" << std::endl;
    // pDescriptorUpdateEntries -> Field ->
    // ConstDynamicArray(VkDescriptorUpdateTemplateEntry)
    {
      if (t.descriptorUpdateEntryCount == 0) {
        os << "value: nullptr" << std::endl;
      } else {
        os << "members:" << std::endl;
        {
          ScopedOstream soarray(os);
          os << "- # VkDescriptorUpdateTemplateEntry" << std::endl;
          for (uint32_t i = 0; i < t.descriptorUpdateEntryCount; ++i) {
            ScopedOstream somember(os);
            os << "members:" << std::endl
               << t.pDescriptorUpdateEntries[i] << std::endl;
          }
        }
      }
    }
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  templateType" << std::endl;
    // templateType -> Field -> VkDescriptorUpdateTemplateType
    os << "value: " << t.templateType << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  descriptorSetLayout" << std::endl;
    // descriptorSetLayout -> Field -> VkDescriptorSetLayout
    os << "value: " << t.descriptorSetLayout << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  pipelineBindPoint" << std::endl;
    // pipelineBindPoint -> Field -> VkPipelineBindPoint
    os << "value: " << t.pipelineBindPoint << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  pipelineLayout" << std::endl;
    // pipelineLayout -> Field -> VkPipelineLayout
    os << "value: " << t.pipelineLayout << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  set" << std::endl;
    // set -> Field -> uint32_t
    os << "value: " << t.set << std::endl;
  }

  return os;
}

std::ostream& operator<<(std::ostream& os,
                         const VkInputAttachmentAspectReference& t) {
  ScopedOstream sos(os);
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  subpass" << std::endl;
    // subpass -> Field -> uint32_t
    os << "value: " << t.subpass << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  inputAttachmentIndex" << std::endl;
    // inputAttachmentIndex -> Field -> uint32_t
    os << "value: " << t.inputAttachmentIndex << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  aspectMask" << std::endl;
    // aspectMask -> Field -> VkImageAspectFlags
    os << "value: " << t.aspectMask << std::endl;
  }

  return os;
}

std::ostream& operator<<(std::ostream& os,
                         const VkRenderPassInputAttachmentAspectCreateInfo& t) {
  ScopedOstream sos(os);
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  sType" << std::endl;
    // sType -> Field -> VkStructureType
    os << "value: " << t.sType << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  pNext" << std::endl;
    // pNext -> Field -> ConstNextPtr(void)

    // pNext
    os << "value: ";
    PrintNextPtr(os, t.pNext);
    os << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  aspectReferenceCount" << std::endl;
    // aspectReferenceCount -> Field -> uint32_t
    os << "value: " << t.aspectReferenceCount << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  pAspectReferences" << std::endl;
    // pAspectReferences -> Field ->
    // ConstDynamicArray(VkInputAttachmentAspectReference)
    {
      if (t.aspectReferenceCount == 0) {
        os << "value: nullptr" << std::endl;
      } else {
        os << "members:" << std::endl;
        {
          ScopedOstream soarray(os);
          os << "- # VkInputAttachmentAspectReference" << std::endl;
          for (uint32_t i = 0; i < t.aspectReferenceCount; ++i) {
            ScopedOstream somember(os);
            os << "members:" << std::endl
               << t.pAspectReferences[i] << std::endl;
          }
        }
      }
    }
  }

  return os;
}

std::ostream& operator<<(std::ostream& os,
                         const VkPhysicalDevice16BitStorageFeatures& t) {
  ScopedOstream sos(os);
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  sType" << std::endl;
    // sType -> Field -> VkStructureType
    os << "value: " << t.sType << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  pNext" << std::endl;
    // pNext -> Field -> NextPtr(void)

    // pNext
    os << "value: ";
    PrintNextPtr(os, t.pNext);
    os << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  storageBuffer16BitAccess" << std::endl;
    // storageBuffer16BitAccess -> Field -> VkBool32
    os << "value: " << t.storageBuffer16BitAccess << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  uniformAndStorageBuffer16BitAccess" << std::endl;
    // uniformAndStorageBuffer16BitAccess -> Field -> VkBool32
    os << "value: " << t.uniformAndStorageBuffer16BitAccess << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  storagePushConstant16" << std::endl;
    // storagePushConstant16 -> Field -> VkBool32
    os << "value: " << t.storagePushConstant16 << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  storageInputOutput16" << std::endl;
    // storageInputOutput16 -> Field -> VkBool32
    os << "value: " << t.storageInputOutput16 << std::endl;
  }

  return os;
}

std::ostream& operator<<(std::ostream& os,
                         const VkPhysicalDeviceSubgroupProperties& t) {
  ScopedOstream sos(os);
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  sType" << std::endl;
    // sType -> Field -> VkStructureType
    os << "value: " << t.sType << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  pNext" << std::endl;
    // pNext -> Field -> NextPtr(void)

    // pNext
    os << "value: ";
    PrintNextPtr(os, t.pNext);
    os << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  subgroupSize" << std::endl;
    // subgroupSize -> Field -> uint32_t
    os << "value: " << t.subgroupSize << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  supportedStages" << std::endl;
    // supportedStages -> Field -> VkShaderStageFlags
    os << "value: " << t.supportedStages << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  supportedOperations" << std::endl;
    // supportedOperations -> Field -> VkSubgroupFeatureFlags
    os << "value: " << t.supportedOperations << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  quadOperationsInAllStages" << std::endl;
    // quadOperationsInAllStages -> Field -> VkBool32
    os << "value: " << t.quadOperationsInAllStages << std::endl;
  }

  return os;
}

std::ostream& operator<<(
    std::ostream& os,
    const VkPhysicalDeviceShaderSubgroupExtendedTypesFeatures& t) {
  ScopedOstream sos(os);
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  sType" << std::endl;
    // sType -> Field -> VkStructureType
    os << "value: " << t.sType << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  pNext" << std::endl;
    // pNext -> Field -> NextPtr(void)

    // pNext
    os << "value: ";
    PrintNextPtr(os, t.pNext);
    os << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  shaderSubgroupExtendedTypes" << std::endl;
    // shaderSubgroupExtendedTypes -> Field -> VkBool32
    os << "value: " << t.shaderSubgroupExtendedTypes << std::endl;
  }

  return os;
}

std::ostream& operator<<(std::ostream& os,
                         const VkBufferMemoryRequirementsInfo2& t) {
  ScopedOstream sos(os);
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  sType" << std::endl;
    // sType -> Field -> VkStructureType
    os << "value: " << t.sType << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  pNext" << std::endl;
    // pNext -> Field -> ConstNextPtr(void)

    // pNext
    os << "value: ";
    PrintNextPtr(os, t.pNext);
    os << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  buffer" << std::endl;
    // buffer -> Field -> VkBuffer
    os << "value: " << t.buffer << std::endl;
  }

  return os;
}

std::ostream& operator<<(std::ostream& os,
                         const VkImageMemoryRequirementsInfo2& t) {
  ScopedOstream sos(os);
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  sType" << std::endl;
    // sType -> Field -> VkStructureType
    os << "value: " << t.sType << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  pNext" << std::endl;
    // pNext -> Field -> ConstNextPtr(void)

    // pNext
    os << "value: ";
    PrintNextPtr(os, t.pNext);
    os << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  image" << std::endl;
    // image -> Field -> VkImage
    os << "value: " << t.image << std::endl;
  }

  return os;
}

std::ostream& operator<<(std::ostream& os,
                         const VkImageSparseMemoryRequirementsInfo2& t) {
  ScopedOstream sos(os);
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  sType" << std::endl;
    // sType -> Field -> VkStructureType
    os << "value: " << t.sType << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  pNext" << std::endl;
    // pNext -> Field -> ConstNextPtr(void)

    // pNext
    os << "value: ";
    PrintNextPtr(os, t.pNext);
    os << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  image" << std::endl;
    // image -> Field -> VkImage
    os << "value: " << t.image << std::endl;
  }

  return os;
}

std::ostream& operator<<(std::ostream& os, const VkMemoryRequirements2& t) {
  ScopedOstream sos(os);
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  sType" << std::endl;
    // sType -> Field -> VkStructureType
    os << "value: " << t.sType << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  pNext" << std::endl;
    // pNext -> Field -> NextPtr(void)

    // pNext
    os << "value: ";
    PrintNextPtr(os, t.pNext);
    os << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  memoryRequirements" << std::endl;
    // memoryRequirements -> Field -> VkMemoryRequirements
    os << "members:" << std::endl << t.memoryRequirements << std::endl;
  }

  return os;
}

std::ostream& operator<<(std::ostream& os,
                         const VkSparseImageMemoryRequirements2& t) {
  ScopedOstream sos(os);
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  sType" << std::endl;
    // sType -> Field -> VkStructureType
    os << "value: " << t.sType << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  pNext" << std::endl;
    // pNext -> Field -> NextPtr(void)

    // pNext
    os << "value: ";
    PrintNextPtr(os, t.pNext);
    os << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  memoryRequirements" << std::endl;
    // memoryRequirements -> Field -> VkSparseImageMemoryRequirements
    os << "members:" << std::endl << t.memoryRequirements << std::endl;
  }

  return os;
}

std::ostream& operator<<(std::ostream& os,
                         const VkPhysicalDevicePointClippingProperties& t) {
  ScopedOstream sos(os);
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  sType" << std::endl;
    // sType -> Field -> VkStructureType
    os << "value: " << t.sType << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  pNext" << std::endl;
    // pNext -> Field -> NextPtr(void)

    // pNext
    os << "value: ";
    PrintNextPtr(os, t.pNext);
    os << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  pointClippingBehavior" << std::endl;
    // pointClippingBehavior -> Field -> VkPointClippingBehavior
    os << "value: " << t.pointClippingBehavior << std::endl;
  }

  return os;
}

std::ostream& operator<<(std::ostream& os,
                         const VkMemoryDedicatedRequirements& t) {
  ScopedOstream sos(os);
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  sType" << std::endl;
    // sType -> Field -> VkStructureType
    os << "value: " << t.sType << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  pNext" << std::endl;
    // pNext -> Field -> NextPtr(void)

    // pNext
    os << "value: ";
    PrintNextPtr(os, t.pNext);
    os << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  prefersDedicatedAllocation" << std::endl;
    // prefersDedicatedAllocation -> Field -> VkBool32
    os << "value: " << t.prefersDedicatedAllocation << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  requiresDedicatedAllocation" << std::endl;
    // requiresDedicatedAllocation -> Field -> VkBool32
    os << "value: " << t.requiresDedicatedAllocation << std::endl;
  }

  return os;
}

std::ostream& operator<<(std::ostream& os,
                         const VkMemoryDedicatedAllocateInfo& t) {
  ScopedOstream sos(os);
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  sType" << std::endl;
    // sType -> Field -> VkStructureType
    os << "value: " << t.sType << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  pNext" << std::endl;
    // pNext -> Field -> ConstNextPtr(void)

    // pNext
    os << "value: ";
    PrintNextPtr(os, t.pNext);
    os << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  image" << std::endl;
    // image -> Field -> VkImage
    os << "value: " << t.image << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  buffer" << std::endl;
    // buffer -> Field -> VkBuffer
    os << "value: " << t.buffer << std::endl;
  }

  return os;
}

std::ostream& operator<<(std::ostream& os,
                         const VkImageViewUsageCreateInfo& t) {
  ScopedOstream sos(os);
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  sType" << std::endl;
    // sType -> Field -> VkStructureType
    os << "value: " << t.sType << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  pNext" << std::endl;
    // pNext -> Field -> ConstNextPtr(void)

    // pNext
    os << "value: ";
    PrintNextPtr(os, t.pNext);
    os << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  usage" << std::endl;
    // usage -> Field -> VkImageUsageFlags
    os << "value: " << t.usage << std::endl;
  }

  return os;
}

std::ostream& operator<<(
    std::ostream& os,
    const VkPipelineTessellationDomainOriginStateCreateInfo& t) {
  ScopedOstream sos(os);
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  sType" << std::endl;
    // sType -> Field -> VkStructureType
    os << "value: " << t.sType << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  pNext" << std::endl;
    // pNext -> Field -> ConstNextPtr(void)

    // pNext
    os << "value: ";
    PrintNextPtr(os, t.pNext);
    os << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  domainOrigin" << std::endl;
    // domainOrigin -> Field -> VkTessellationDomainOrigin
    os << "value: " << t.domainOrigin << std::endl;
  }

  return os;
}

std::ostream& operator<<(std::ostream& os,
                         const VkSamplerYcbcrConversionInfo& t) {
  ScopedOstream sos(os);
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  sType" << std::endl;
    // sType -> Field -> VkStructureType
    os << "value: " << t.sType << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  pNext" << std::endl;
    // pNext -> Field -> ConstNextPtr(void)

    // pNext
    os << "value: ";
    PrintNextPtr(os, t.pNext);
    os << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  conversion" << std::endl;
    // conversion -> Field -> VkSamplerYcbcrConversion
    os << "value: " << t.conversion << std::endl;
  }

  return os;
}

std::ostream& operator<<(std::ostream& os,
                         const VkSamplerYcbcrConversionCreateInfo& t) {
  ScopedOstream sos(os);
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  sType" << std::endl;
    // sType -> Field -> VkStructureType
    os << "value: " << t.sType << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  pNext" << std::endl;
    // pNext -> Field -> ConstNextPtr(void)

    // pNext
    os << "value: ";
    PrintNextPtr(os, t.pNext);
    os << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  format" << std::endl;
    // format -> Field -> VkFormat
    os << "value: " << t.format << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  ycbcrModel" << std::endl;
    // ycbcrModel -> Field -> VkSamplerYcbcrModelConversion
    os << "value: " << t.ycbcrModel << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  ycbcrRange" << std::endl;
    // ycbcrRange -> Field -> VkSamplerYcbcrRange
    os << "value: " << t.ycbcrRange << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  components" << std::endl;
    // components -> Field -> VkComponentMapping
    os << "members:" << std::endl << t.components << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  xChromaOffset" << std::endl;
    // xChromaOffset -> Field -> VkChromaLocation
    os << "value: " << t.xChromaOffset << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  yChromaOffset" << std::endl;
    // yChromaOffset -> Field -> VkChromaLocation
    os << "value: " << t.yChromaOffset << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  chromaFilter" << std::endl;
    // chromaFilter -> Field -> VkFilter
    os << "value: " << t.chromaFilter << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  forceExplicitReconstruction" << std::endl;
    // forceExplicitReconstruction -> Field -> VkBool32
    os << "value: " << t.forceExplicitReconstruction << std::endl;
  }

  return os;
}

std::ostream& operator<<(std::ostream& os,
                         const VkBindImagePlaneMemoryInfo& t) {
  ScopedOstream sos(os);
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  sType" << std::endl;
    // sType -> Field -> VkStructureType
    os << "value: " << t.sType << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  pNext" << std::endl;
    // pNext -> Field -> ConstNextPtr(void)

    // pNext
    os << "value: ";
    PrintNextPtr(os, t.pNext);
    os << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  planeAspect" << std::endl;
    // planeAspect -> Field -> VkImageAspectFlagBits
    os << "value: " << t.planeAspect << std::endl;
  }

  return os;
}

std::ostream& operator<<(std::ostream& os,
                         const VkImagePlaneMemoryRequirementsInfo& t) {
  ScopedOstream sos(os);
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  sType" << std::endl;
    // sType -> Field -> VkStructureType
    os << "value: " << t.sType << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  pNext" << std::endl;
    // pNext -> Field -> ConstNextPtr(void)

    // pNext
    os << "value: ";
    PrintNextPtr(os, t.pNext);
    os << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  planeAspect" << std::endl;
    // planeAspect -> Field -> VkImageAspectFlagBits
    os << "value: " << t.planeAspect << std::endl;
  }

  return os;
}

std::ostream& operator<<(
    std::ostream& os, const VkPhysicalDeviceSamplerYcbcrConversionFeatures& t) {
  ScopedOstream sos(os);
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  sType" << std::endl;
    // sType -> Field -> VkStructureType
    os << "value: " << t.sType << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  pNext" << std::endl;
    // pNext -> Field -> NextPtr(void)

    // pNext
    os << "value: ";
    PrintNextPtr(os, t.pNext);
    os << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  samplerYcbcrConversion" << std::endl;
    // samplerYcbcrConversion -> Field -> VkBool32
    os << "value: " << t.samplerYcbcrConversion << std::endl;
  }

  return os;
}

std::ostream& operator<<(
    std::ostream& os, const VkSamplerYcbcrConversionImageFormatProperties& t) {
  ScopedOstream sos(os);
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  sType" << std::endl;
    // sType -> Field -> VkStructureType
    os << "value: " << t.sType << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  pNext" << std::endl;
    // pNext -> Field -> NextPtr(void)

    // pNext
    os << "value: ";
    PrintNextPtr(os, t.pNext);
    os << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  combinedImageSamplerDescriptorCount" << std::endl;
    // combinedImageSamplerDescriptorCount -> Field -> uint32_t
    os << "value: " << t.combinedImageSamplerDescriptorCount << std::endl;
  }

  return os;
}

std::ostream& operator<<(std::ostream& os, const VkProtectedSubmitInfo& t) {
  ScopedOstream sos(os);
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  sType" << std::endl;
    // sType -> Field -> VkStructureType
    os << "value: " << t.sType << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  pNext" << std::endl;
    // pNext -> Field -> ConstNextPtr(void)

    // pNext
    os << "value: ";
    PrintNextPtr(os, t.pNext);
    os << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  protectedSubmit" << std::endl;
    // protectedSubmit -> Field -> VkBool32
    os << "value: " << t.protectedSubmit << std::endl;
  }

  return os;
}

std::ostream& operator<<(std::ostream& os,
                         const VkPhysicalDeviceProtectedMemoryFeatures& t) {
  ScopedOstream sos(os);
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  sType" << std::endl;
    // sType -> Field -> VkStructureType
    os << "value: " << t.sType << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  pNext" << std::endl;
    // pNext -> Field -> NextPtr(void)

    // pNext
    os << "value: ";
    PrintNextPtr(os, t.pNext);
    os << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  protectedMemory" << std::endl;
    // protectedMemory -> Field -> VkBool32
    os << "value: " << t.protectedMemory << std::endl;
  }

  return os;
}

std::ostream& operator<<(std::ostream& os,
                         const VkPhysicalDeviceProtectedMemoryProperties& t) {
  ScopedOstream sos(os);
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  sType" << std::endl;
    // sType -> Field -> VkStructureType
    os << "value: " << t.sType << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  pNext" << std::endl;
    // pNext -> Field -> NextPtr(void)

    // pNext
    os << "value: ";
    PrintNextPtr(os, t.pNext);
    os << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  protectedNoFault" << std::endl;
    // protectedNoFault -> Field -> VkBool32
    os << "value: " << t.protectedNoFault << std::endl;
  }

  return os;
}

std::ostream& operator<<(std::ostream& os, const VkDeviceQueueInfo2& t) {
  ScopedOstream sos(os);
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  sType" << std::endl;
    // sType -> Field -> VkStructureType
    os << "value: " << t.sType << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  pNext" << std::endl;
    // pNext -> Field -> ConstNextPtr(void)

    // pNext
    os << "value: ";
    PrintNextPtr(os, t.pNext);
    os << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  flags" << std::endl;
    // flags -> Field -> VkDeviceQueueCreateFlags
    os << "value: " << t.flags << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  queueFamilyIndex" << std::endl;
    // queueFamilyIndex -> Field -> uint32_t
    os << "value: " << t.queueFamilyIndex << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  queueIndex" << std::endl;
    // queueIndex -> Field -> uint32_t
    os << "value: " << t.queueIndex << std::endl;
  }

  return os;
}

std::ostream& operator<<(
    std::ostream& os, const VkPhysicalDeviceSamplerFilterMinmaxProperties& t) {
  ScopedOstream sos(os);
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  sType" << std::endl;
    // sType -> Field -> VkStructureType
    os << "value: " << t.sType << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  pNext" << std::endl;
    // pNext -> Field -> NextPtr(void)

    // pNext
    os << "value: ";
    PrintNextPtr(os, t.pNext);
    os << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  filterMinmaxSingleComponentFormats" << std::endl;
    // filterMinmaxSingleComponentFormats -> Field -> VkBool32
    os << "value: " << t.filterMinmaxSingleComponentFormats << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  filterMinmaxImageComponentMapping" << std::endl;
    // filterMinmaxImageComponentMapping -> Field -> VkBool32
    os << "value: " << t.filterMinmaxImageComponentMapping << std::endl;
  }

  return os;
}

std::ostream& operator<<(std::ostream& os,
                         const VkSamplerReductionModeCreateInfo& t) {
  ScopedOstream sos(os);
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  sType" << std::endl;
    // sType -> Field -> VkStructureType
    os << "value: " << t.sType << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  pNext" << std::endl;
    // pNext -> Field -> ConstNextPtr(void)

    // pNext
    os << "value: ";
    PrintNextPtr(os, t.pNext);
    os << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  reductionMode" << std::endl;
    // reductionMode -> Field -> VkSamplerReductionMode
    os << "value: " << t.reductionMode << std::endl;
  }

  return os;
}

std::ostream& operator<<(std::ostream& os,
                         const VkImageFormatListCreateInfo& t) {
  ScopedOstream sos(os);
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  sType" << std::endl;
    // sType -> Field -> VkStructureType
    os << "value: " << t.sType << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  pNext" << std::endl;
    // pNext -> Field -> ConstNextPtr(void)

    // pNext
    os << "value: ";
    PrintNextPtr(os, t.pNext);
    os << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  viewFormatCount" << std::endl;
    // viewFormatCount -> Field -> uint32_t
    os << "value: " << t.viewFormatCount << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  pViewFormats" << std::endl;
    // pViewFormats -> Field -> ConstDynamicArray(VkFormat)
    {
      if (t.viewFormatCount == 0) {
        os << "value: nullptr" << std::endl;
      } else {
        os << "members:" << std::endl;
        {
          ScopedOstream soarray(os);
          os << "- # VkFormat" << std::endl;
          for (uint32_t i = 0; i < t.viewFormatCount; ++i) {
            ScopedOstream somember(os);
            os << "value: " << t.pViewFormats[i] << std::endl;
          }
        }
      }
    }
  }

  return os;
}

std::ostream& operator<<(std::ostream& os,
                         const VkPhysicalDeviceMaintenance3Properties& t) {
  ScopedOstream sos(os);
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  sType" << std::endl;
    // sType -> Field -> VkStructureType
    os << "value: " << t.sType << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  pNext" << std::endl;
    // pNext -> Field -> NextPtr(void)

    // pNext
    os << "value: ";
    PrintNextPtr(os, t.pNext);
    os << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  maxPerSetDescriptors" << std::endl;
    // maxPerSetDescriptors -> Field -> uint32_t
    os << "value: " << t.maxPerSetDescriptors << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  maxMemoryAllocationSize" << std::endl;
    // maxMemoryAllocationSize -> Field -> VkDeviceSize
    os << "value: " << t.maxMemoryAllocationSize << std::endl;
  }

  return os;
}

std::ostream& operator<<(std::ostream& os,
                         const VkDescriptorSetLayoutSupport& t) {
  ScopedOstream sos(os);
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  sType" << std::endl;
    // sType -> Field -> VkStructureType
    os << "value: " << t.sType << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  pNext" << std::endl;
    // pNext -> Field -> NextPtr(void)

    // pNext
    os << "value: ";
    PrintNextPtr(os, t.pNext);
    os << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  supported" << std::endl;
    // supported -> Field -> VkBool32
    os << "value: " << t.supported << std::endl;
  }

  return os;
}

std::ostream& operator<<(
    std::ostream& os, const VkPhysicalDeviceShaderDrawParametersFeatures& t) {
  ScopedOstream sos(os);
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  sType" << std::endl;
    // sType -> Field -> VkStructureType
    os << "value: " << t.sType << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  pNext" << std::endl;
    // pNext -> Field -> NextPtr(void)

    // pNext
    os << "value: ";
    PrintNextPtr(os, t.pNext);
    os << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  shaderDrawParameters" << std::endl;
    // shaderDrawParameters -> Field -> VkBool32
    os << "value: " << t.shaderDrawParameters << std::endl;
  }

  return os;
}

std::ostream& operator<<(std::ostream& os,
                         const VkPhysicalDeviceShaderFloat16Int8Features& t) {
  ScopedOstream sos(os);
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  sType" << std::endl;
    // sType -> Field -> VkStructureType
    os << "value: " << t.sType << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  pNext" << std::endl;
    // pNext -> Field -> NextPtr(void)

    // pNext
    os << "value: ";
    PrintNextPtr(os, t.pNext);
    os << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  shaderFloat16" << std::endl;
    // shaderFloat16 -> Field -> VkBool32
    os << "value: " << t.shaderFloat16 << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  shaderInt8" << std::endl;
    // shaderInt8 -> Field -> VkBool32
    os << "value: " << t.shaderInt8 << std::endl;
  }

  return os;
}

std::ostream& operator<<(std::ostream& os,
                         const VkPhysicalDeviceFloatControlsProperties& t) {
  ScopedOstream sos(os);
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  sType" << std::endl;
    // sType -> Field -> VkStructureType
    os << "value: " << t.sType << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  pNext" << std::endl;
    // pNext -> Field -> NextPtr(void)

    // pNext
    os << "value: ";
    PrintNextPtr(os, t.pNext);
    os << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  denormBehaviorIndependence" << std::endl;
    // denormBehaviorIndependence -> Field -> VkShaderFloatControlsIndependence
    os << "value: " << t.denormBehaviorIndependence << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  roundingModeIndependence" << std::endl;
    // roundingModeIndependence -> Field -> VkShaderFloatControlsIndependence
    os << "value: " << t.roundingModeIndependence << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  shaderSignedZeroInfNanPreserveFloat16" << std::endl;
    // shaderSignedZeroInfNanPreserveFloat16 -> Field -> VkBool32
    os << "value: " << t.shaderSignedZeroInfNanPreserveFloat16 << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  shaderSignedZeroInfNanPreserveFloat32" << std::endl;
    // shaderSignedZeroInfNanPreserveFloat32 -> Field -> VkBool32
    os << "value: " << t.shaderSignedZeroInfNanPreserveFloat32 << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  shaderSignedZeroInfNanPreserveFloat64" << std::endl;
    // shaderSignedZeroInfNanPreserveFloat64 -> Field -> VkBool32
    os << "value: " << t.shaderSignedZeroInfNanPreserveFloat64 << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  shaderDenormPreserveFloat16" << std::endl;
    // shaderDenormPreserveFloat16 -> Field -> VkBool32
    os << "value: " << t.shaderDenormPreserveFloat16 << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  shaderDenormPreserveFloat32" << std::endl;
    // shaderDenormPreserveFloat32 -> Field -> VkBool32
    os << "value: " << t.shaderDenormPreserveFloat32 << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  shaderDenormPreserveFloat64" << std::endl;
    // shaderDenormPreserveFloat64 -> Field -> VkBool32
    os << "value: " << t.shaderDenormPreserveFloat64 << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  shaderDenormFlushToZeroFloat16" << std::endl;
    // shaderDenormFlushToZeroFloat16 -> Field -> VkBool32
    os << "value: " << t.shaderDenormFlushToZeroFloat16 << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  shaderDenormFlushToZeroFloat32" << std::endl;
    // shaderDenormFlushToZeroFloat32 -> Field -> VkBool32
    os << "value: " << t.shaderDenormFlushToZeroFloat32 << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  shaderDenormFlushToZeroFloat64" << std::endl;
    // shaderDenormFlushToZeroFloat64 -> Field -> VkBool32
    os << "value: " << t.shaderDenormFlushToZeroFloat64 << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  shaderRoundingModeRTEFloat16" << std::endl;
    // shaderRoundingModeRTEFloat16 -> Field -> VkBool32
    os << "value: " << t.shaderRoundingModeRTEFloat16 << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  shaderRoundingModeRTEFloat32" << std::endl;
    // shaderRoundingModeRTEFloat32 -> Field -> VkBool32
    os << "value: " << t.shaderRoundingModeRTEFloat32 << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  shaderRoundingModeRTEFloat64" << std::endl;
    // shaderRoundingModeRTEFloat64 -> Field -> VkBool32
    os << "value: " << t.shaderRoundingModeRTEFloat64 << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  shaderRoundingModeRTZFloat16" << std::endl;
    // shaderRoundingModeRTZFloat16 -> Field -> VkBool32
    os << "value: " << t.shaderRoundingModeRTZFloat16 << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  shaderRoundingModeRTZFloat32" << std::endl;
    // shaderRoundingModeRTZFloat32 -> Field -> VkBool32
    os << "value: " << t.shaderRoundingModeRTZFloat32 << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  shaderRoundingModeRTZFloat64" << std::endl;
    // shaderRoundingModeRTZFloat64 -> Field -> VkBool32
    os << "value: " << t.shaderRoundingModeRTZFloat64 << std::endl;
  }

  return os;
}

std::ostream& operator<<(std::ostream& os,
                         const VkPhysicalDeviceHostQueryResetFeatures& t) {
  ScopedOstream sos(os);
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  sType" << std::endl;
    // sType -> Field -> VkStructureType
    os << "value: " << t.sType << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  pNext" << std::endl;
    // pNext -> Field -> NextPtr(void)

    // pNext
    os << "value: ";
    PrintNextPtr(os, t.pNext);
    os << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  hostQueryReset" << std::endl;
    // hostQueryReset -> Field -> VkBool32
    os << "value: " << t.hostQueryReset << std::endl;
  }

  return os;
}

std::ostream& operator<<(std::ostream& os,
                         const VkPhysicalDeviceDescriptorIndexingFeatures& t) {
  ScopedOstream sos(os);
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  sType" << std::endl;
    // sType -> Field -> VkStructureType
    os << "value: " << t.sType << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  pNext" << std::endl;
    // pNext -> Field -> NextPtr(void)

    // pNext
    os << "value: ";
    PrintNextPtr(os, t.pNext);
    os << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  shaderInputAttachmentArrayDynamicIndexing" << std::endl;
    // shaderInputAttachmentArrayDynamicIndexing -> Field -> VkBool32
    os << "value: " << t.shaderInputAttachmentArrayDynamicIndexing << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  shaderUniformTexelBufferArrayDynamicIndexing" << std::endl;
    // shaderUniformTexelBufferArrayDynamicIndexing -> Field -> VkBool32
    os << "value: " << t.shaderUniformTexelBufferArrayDynamicIndexing
       << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  shaderStorageTexelBufferArrayDynamicIndexing" << std::endl;
    // shaderStorageTexelBufferArrayDynamicIndexing -> Field -> VkBool32
    os << "value: " << t.shaderStorageTexelBufferArrayDynamicIndexing
       << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  shaderUniformBufferArrayNonUniformIndexing" << std::endl;
    // shaderUniformBufferArrayNonUniformIndexing -> Field -> VkBool32
    os << "value: " << t.shaderUniformBufferArrayNonUniformIndexing
       << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  shaderSampledImageArrayNonUniformIndexing" << std::endl;
    // shaderSampledImageArrayNonUniformIndexing -> Field -> VkBool32
    os << "value: " << t.shaderSampledImageArrayNonUniformIndexing << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  shaderStorageBufferArrayNonUniformIndexing" << std::endl;
    // shaderStorageBufferArrayNonUniformIndexing -> Field -> VkBool32
    os << "value: " << t.shaderStorageBufferArrayNonUniformIndexing
       << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  shaderStorageImageArrayNonUniformIndexing" << std::endl;
    // shaderStorageImageArrayNonUniformIndexing -> Field -> VkBool32
    os << "value: " << t.shaderStorageImageArrayNonUniformIndexing << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  shaderInputAttachmentArrayNonUniformIndexing" << std::endl;
    // shaderInputAttachmentArrayNonUniformIndexing -> Field -> VkBool32
    os << "value: " << t.shaderInputAttachmentArrayNonUniformIndexing
       << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  shaderUniformTexelBufferArrayNonUniformIndexing" << std::endl;
    // shaderUniformTexelBufferArrayNonUniformIndexing -> Field -> VkBool32
    os << "value: " << t.shaderUniformTexelBufferArrayNonUniformIndexing
       << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  shaderStorageTexelBufferArrayNonUniformIndexing" << std::endl;
    // shaderStorageTexelBufferArrayNonUniformIndexing -> Field -> VkBool32
    os << "value: " << t.shaderStorageTexelBufferArrayNonUniformIndexing
       << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  descriptorBindingUniformBufferUpdateAfterBind" << std::endl;
    // descriptorBindingUniformBufferUpdateAfterBind -> Field -> VkBool32
    os << "value: " << t.descriptorBindingUniformBufferUpdateAfterBind
       << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  descriptorBindingSampledImageUpdateAfterBind" << std::endl;
    // descriptorBindingSampledImageUpdateAfterBind -> Field -> VkBool32
    os << "value: " << t.descriptorBindingSampledImageUpdateAfterBind
       << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  descriptorBindingStorageImageUpdateAfterBind" << std::endl;
    // descriptorBindingStorageImageUpdateAfterBind -> Field -> VkBool32
    os << "value: " << t.descriptorBindingStorageImageUpdateAfterBind
       << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  descriptorBindingStorageBufferUpdateAfterBind" << std::endl;
    // descriptorBindingStorageBufferUpdateAfterBind -> Field -> VkBool32
    os << "value: " << t.descriptorBindingStorageBufferUpdateAfterBind
       << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  descriptorBindingUniformTexelBufferUpdateAfterBind"
       << std::endl;
    // descriptorBindingUniformTexelBufferUpdateAfterBind -> Field -> VkBool32
    os << "value: " << t.descriptorBindingUniformTexelBufferUpdateAfterBind
       << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  descriptorBindingStorageTexelBufferUpdateAfterBind"
       << std::endl;
    // descriptorBindingStorageTexelBufferUpdateAfterBind -> Field -> VkBool32
    os << "value: " << t.descriptorBindingStorageTexelBufferUpdateAfterBind
       << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  descriptorBindingUpdateUnusedWhilePending" << std::endl;
    // descriptorBindingUpdateUnusedWhilePending -> Field -> VkBool32
    os << "value: " << t.descriptorBindingUpdateUnusedWhilePending << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  descriptorBindingPartiallyBound" << std::endl;
    // descriptorBindingPartiallyBound -> Field -> VkBool32
    os << "value: " << t.descriptorBindingPartiallyBound << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  descriptorBindingVariableDescriptorCount" << std::endl;
    // descriptorBindingVariableDescriptorCount -> Field -> VkBool32
    os << "value: " << t.descriptorBindingVariableDescriptorCount << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  runtimeDescriptorArray" << std::endl;
    // runtimeDescriptorArray -> Field -> VkBool32
    os << "value: " << t.runtimeDescriptorArray << std::endl;
  }

  return os;
}

std::ostream& operator<<(
    std::ostream& os, const VkPhysicalDeviceDescriptorIndexingProperties& t) {
  ScopedOstream sos(os);
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  sType" << std::endl;
    // sType -> Field -> VkStructureType
    os << "value: " << t.sType << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  pNext" << std::endl;
    // pNext -> Field -> NextPtr(void)

    // pNext
    os << "value: ";
    PrintNextPtr(os, t.pNext);
    os << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  maxUpdateAfterBindDescriptorsInAllPools" << std::endl;
    // maxUpdateAfterBindDescriptorsInAllPools -> Field -> uint32_t
    os << "value: " << t.maxUpdateAfterBindDescriptorsInAllPools << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  shaderUniformBufferArrayNonUniformIndexingNative"
       << std::endl;
    // shaderUniformBufferArrayNonUniformIndexingNative -> Field -> VkBool32
    os << "value: " << t.shaderUniformBufferArrayNonUniformIndexingNative
       << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  shaderSampledImageArrayNonUniformIndexingNative" << std::endl;
    // shaderSampledImageArrayNonUniformIndexingNative -> Field -> VkBool32
    os << "value: " << t.shaderSampledImageArrayNonUniformIndexingNative
       << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  shaderStorageBufferArrayNonUniformIndexingNative"
       << std::endl;
    // shaderStorageBufferArrayNonUniformIndexingNative -> Field -> VkBool32
    os << "value: " << t.shaderStorageBufferArrayNonUniformIndexingNative
       << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  shaderStorageImageArrayNonUniformIndexingNative" << std::endl;
    // shaderStorageImageArrayNonUniformIndexingNative -> Field -> VkBool32
    os << "value: " << t.shaderStorageImageArrayNonUniformIndexingNative
       << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  shaderInputAttachmentArrayNonUniformIndexingNative"
       << std::endl;
    // shaderInputAttachmentArrayNonUniformIndexingNative -> Field -> VkBool32
    os << "value: " << t.shaderInputAttachmentArrayNonUniformIndexingNative
       << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  robustBufferAccessUpdateAfterBind" << std::endl;
    // robustBufferAccessUpdateAfterBind -> Field -> VkBool32
    os << "value: " << t.robustBufferAccessUpdateAfterBind << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  quadDivergentImplicitLod" << std::endl;
    // quadDivergentImplicitLod -> Field -> VkBool32
    os << "value: " << t.quadDivergentImplicitLod << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  maxPerStageDescriptorUpdateAfterBindSamplers" << std::endl;
    // maxPerStageDescriptorUpdateAfterBindSamplers -> Field -> uint32_t
    os << "value: " << t.maxPerStageDescriptorUpdateAfterBindSamplers
       << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  maxPerStageDescriptorUpdateAfterBindUniformBuffers"
       << std::endl;
    // maxPerStageDescriptorUpdateAfterBindUniformBuffers -> Field -> uint32_t
    os << "value: " << t.maxPerStageDescriptorUpdateAfterBindUniformBuffers
       << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  maxPerStageDescriptorUpdateAfterBindStorageBuffers"
       << std::endl;
    // maxPerStageDescriptorUpdateAfterBindStorageBuffers -> Field -> uint32_t
    os << "value: " << t.maxPerStageDescriptorUpdateAfterBindStorageBuffers
       << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  maxPerStageDescriptorUpdateAfterBindSampledImages"
       << std::endl;
    // maxPerStageDescriptorUpdateAfterBindSampledImages -> Field -> uint32_t
    os << "value: " << t.maxPerStageDescriptorUpdateAfterBindSampledImages
       << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  maxPerStageDescriptorUpdateAfterBindStorageImages"
       << std::endl;
    // maxPerStageDescriptorUpdateAfterBindStorageImages -> Field -> uint32_t
    os << "value: " << t.maxPerStageDescriptorUpdateAfterBindStorageImages
       << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  maxPerStageDescriptorUpdateAfterBindInputAttachments"
       << std::endl;
    // maxPerStageDescriptorUpdateAfterBindInputAttachments -> Field -> uint32_t
    os << "value: " << t.maxPerStageDescriptorUpdateAfterBindInputAttachments
       << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  maxPerStageUpdateAfterBindResources" << std::endl;
    // maxPerStageUpdateAfterBindResources -> Field -> uint32_t
    os << "value: " << t.maxPerStageUpdateAfterBindResources << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  maxDescriptorSetUpdateAfterBindSamplers" << std::endl;
    // maxDescriptorSetUpdateAfterBindSamplers -> Field -> uint32_t
    os << "value: " << t.maxDescriptorSetUpdateAfterBindSamplers << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  maxDescriptorSetUpdateAfterBindUniformBuffers" << std::endl;
    // maxDescriptorSetUpdateAfterBindUniformBuffers -> Field -> uint32_t
    os << "value: " << t.maxDescriptorSetUpdateAfterBindUniformBuffers
       << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  maxDescriptorSetUpdateAfterBindUniformBuffersDynamic"
       << std::endl;
    // maxDescriptorSetUpdateAfterBindUniformBuffersDynamic -> Field -> uint32_t
    os << "value: " << t.maxDescriptorSetUpdateAfterBindUniformBuffersDynamic
       << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  maxDescriptorSetUpdateAfterBindStorageBuffers" << std::endl;
    // maxDescriptorSetUpdateAfterBindStorageBuffers -> Field -> uint32_t
    os << "value: " << t.maxDescriptorSetUpdateAfterBindStorageBuffers
       << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  maxDescriptorSetUpdateAfterBindStorageBuffersDynamic"
       << std::endl;
    // maxDescriptorSetUpdateAfterBindStorageBuffersDynamic -> Field -> uint32_t
    os << "value: " << t.maxDescriptorSetUpdateAfterBindStorageBuffersDynamic
       << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  maxDescriptorSetUpdateAfterBindSampledImages" << std::endl;
    // maxDescriptorSetUpdateAfterBindSampledImages -> Field -> uint32_t
    os << "value: " << t.maxDescriptorSetUpdateAfterBindSampledImages
       << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  maxDescriptorSetUpdateAfterBindStorageImages" << std::endl;
    // maxDescriptorSetUpdateAfterBindStorageImages -> Field -> uint32_t
    os << "value: " << t.maxDescriptorSetUpdateAfterBindStorageImages
       << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  maxDescriptorSetUpdateAfterBindInputAttachments" << std::endl;
    // maxDescriptorSetUpdateAfterBindInputAttachments -> Field -> uint32_t
    os << "value: " << t.maxDescriptorSetUpdateAfterBindInputAttachments
       << std::endl;
  }

  return os;
}

std::ostream& operator<<(std::ostream& os,
                         const VkDescriptorSetLayoutBindingFlagsCreateInfo& t) {
  ScopedOstream sos(os);
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  sType" << std::endl;
    // sType -> Field -> VkStructureType
    os << "value: " << t.sType << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  pNext" << std::endl;
    // pNext -> Field -> ConstNextPtr(void)

    // pNext
    os << "value: ";
    PrintNextPtr(os, t.pNext);
    os << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  bindingCount" << std::endl;
    // bindingCount -> Field -> uint32_t
    os << "value: " << t.bindingCount << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  pBindingFlags" << std::endl;
    // pBindingFlags -> Field -> ConstDynamicArray(VkDescriptorBindingFlags)
    {
      if (t.bindingCount == 0) {
        os << "value: nullptr" << std::endl;
      } else {
        os << "members:" << std::endl;
        {
          ScopedOstream soarray(os);
          os << "- # VkDescriptorBindingFlags" << std::endl;
          for (uint32_t i = 0; i < t.bindingCount; ++i) {
            ScopedOstream somember(os);
            os << "value: " << t.pBindingFlags[i] << std::endl;
          }
        }
      }
    }
  }

  return os;
}

std::ostream& operator<<(
    std::ostream& os,
    const VkDescriptorSetVariableDescriptorCountAllocateInfo& t) {
  ScopedOstream sos(os);
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  sType" << std::endl;
    // sType -> Field -> VkStructureType
    os << "value: " << t.sType << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  pNext" << std::endl;
    // pNext -> Field -> ConstNextPtr(void)

    // pNext
    os << "value: ";
    PrintNextPtr(os, t.pNext);
    os << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  descriptorSetCount" << std::endl;
    // descriptorSetCount -> Field -> uint32_t
    os << "value: " << t.descriptorSetCount << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  pDescriptorCounts" << std::endl;
    // pDescriptorCounts -> Field -> ConstDynamicArray(uint32_t)
    {
      if (t.descriptorSetCount == 0) {
        os << "value: nullptr" << std::endl;
      } else {
        os << "members:" << std::endl;
        {
          ScopedOstream soarray(os);
          os << "- # uint32_t" << std::endl;
          for (uint32_t i = 0; i < t.descriptorSetCount; ++i) {
            ScopedOstream somember(os);
            os << "value: " << t.pDescriptorCounts[i] << std::endl;
          }
        }
      }
    }
  }

  return os;
}

std::ostream& operator<<(
    std::ostream& os,
    const VkDescriptorSetVariableDescriptorCountLayoutSupport& t) {
  ScopedOstream sos(os);
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  sType" << std::endl;
    // sType -> Field -> VkStructureType
    os << "value: " << t.sType << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  pNext" << std::endl;
    // pNext -> Field -> NextPtr(void)

    // pNext
    os << "value: ";
    PrintNextPtr(os, t.pNext);
    os << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  maxVariableDescriptorCount" << std::endl;
    // maxVariableDescriptorCount -> Field -> uint32_t
    os << "value: " << t.maxVariableDescriptorCount << std::endl;
  }

  return os;
}

std::ostream& operator<<(std::ostream& os, const VkAttachmentDescription2& t) {
  ScopedOstream sos(os);
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  sType" << std::endl;
    // sType -> Field -> VkStructureType
    os << "value: " << t.sType << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  pNext" << std::endl;
    // pNext -> Field -> ConstNextPtr(void)

    // pNext
    os << "value: ";
    PrintNextPtr(os, t.pNext);
    os << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  flags" << std::endl;
    // flags -> Field -> VkAttachmentDescriptionFlags
    os << "value: " << t.flags << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  format" << std::endl;
    // format -> Field -> VkFormat
    os << "value: " << t.format << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  samples" << std::endl;
    // samples -> Field -> VkSampleCountFlagBits
    os << "value: " << t.samples << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  loadOp" << std::endl;
    // loadOp -> Field -> VkAttachmentLoadOp
    os << "value: " << t.loadOp << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  storeOp" << std::endl;
    // storeOp -> Field -> VkAttachmentStoreOp
    os << "value: " << t.storeOp << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  stencilLoadOp" << std::endl;
    // stencilLoadOp -> Field -> VkAttachmentLoadOp
    os << "value: " << t.stencilLoadOp << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  stencilStoreOp" << std::endl;
    // stencilStoreOp -> Field -> VkAttachmentStoreOp
    os << "value: " << t.stencilStoreOp << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  initialLayout" << std::endl;
    // initialLayout -> Field -> VkImageLayout
    os << "value: " << t.initialLayout << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  finalLayout" << std::endl;
    // finalLayout -> Field -> VkImageLayout
    os << "value: " << t.finalLayout << std::endl;
  }

  return os;
}

std::ostream& operator<<(std::ostream& os, const VkAttachmentReference2& t) {
  ScopedOstream sos(os);
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  sType" << std::endl;
    // sType -> Field -> VkStructureType
    os << "value: " << t.sType << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  pNext" << std::endl;
    // pNext -> Field -> ConstNextPtr(void)

    // pNext
    os << "value: ";
    PrintNextPtr(os, t.pNext);
    os << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  attachment" << std::endl;
    // attachment -> Field -> uint32_t
    os << "value: " << t.attachment << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  layout" << std::endl;
    // layout -> Field -> VkImageLayout
    os << "value: " << t.layout << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  aspectMask" << std::endl;
    // aspectMask -> Field -> VkImageAspectFlags
    os << "value: " << t.aspectMask << std::endl;
  }

  return os;
}

std::ostream& operator<<(std::ostream& os, const VkSubpassDescription2& t) {
  ScopedOstream sos(os);
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  sType" << std::endl;
    // sType -> Field -> VkStructureType
    os << "value: " << t.sType << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  pNext" << std::endl;
    // pNext -> Field -> ConstNextPtr(void)

    // pNext
    os << "value: ";
    PrintNextPtr(os, t.pNext);
    os << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  flags" << std::endl;
    // flags -> Field -> VkSubpassDescriptionFlags
    os << "value: " << t.flags << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  pipelineBindPoint" << std::endl;
    // pipelineBindPoint -> Field -> VkPipelineBindPoint
    os << "value: " << t.pipelineBindPoint << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  viewMask" << std::endl;
    // viewMask -> Field -> uint32_t
    os << "value: " << t.viewMask << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  inputAttachmentCount" << std::endl;
    // inputAttachmentCount -> Field -> uint32_t
    os << "value: " << t.inputAttachmentCount << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  pInputAttachments" << std::endl;
    // pInputAttachments -> Field -> ConstDynamicArray(VkAttachmentReference2)
    {
      if (t.inputAttachmentCount == 0) {
        os << "value: nullptr" << std::endl;
      } else {
        os << "members:" << std::endl;
        {
          ScopedOstream soarray(os);
          os << "- # VkAttachmentReference2" << std::endl;
          for (uint32_t i = 0; i < t.inputAttachmentCount; ++i) {
            ScopedOstream somember(os);
            os << "members:" << std::endl
               << t.pInputAttachments[i] << std::endl;
          }
        }
      }
    }
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  colorAttachmentCount" << std::endl;
    // colorAttachmentCount -> Field -> uint32_t
    os << "value: " << t.colorAttachmentCount << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  pColorAttachments" << std::endl;
    // pColorAttachments -> Field -> ConstDynamicArray(VkAttachmentReference2)
    {
      if (t.colorAttachmentCount == 0) {
        os << "value: nullptr" << std::endl;
      } else {
        os << "members:" << std::endl;
        {
          ScopedOstream soarray(os);
          os << "- # VkAttachmentReference2" << std::endl;
          for (uint32_t i = 0; i < t.colorAttachmentCount; ++i) {
            ScopedOstream somember(os);
            os << "members:" << std::endl
               << t.pColorAttachments[i] << std::endl;
          }
        }
      }
    }
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  pResolveAttachments" << std::endl;
    // pResolveAttachments -> Field -> ConstDynamicArray(VkAttachmentReference2)
    {
      if (t.colorAttachmentCount == 0) {
        os << "value: nullptr" << std::endl;
      } else {
        os << "members:" << std::endl;
        {
          ScopedOstream soarray(os);
          os << "- # VkAttachmentReference2" << std::endl;
          for (uint32_t i = 0; i < t.colorAttachmentCount; ++i) {
            ScopedOstream somember(os);
            os << "members:" << std::endl
               << t.pResolveAttachments[i] << std::endl;
          }
        }
      }
    }
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  pDepthStencilAttachment" << std::endl;
    // pDepthStencilAttachment -> Field -> ConstPointer(VkAttachmentReference2)
    // pointer
    if (t.pDepthStencilAttachment) {
      os << "members:" << std::endl << *t.pDepthStencilAttachment << std::endl;
    } else {
      os << "value: nullptr" << std::endl;
    }
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  preserveAttachmentCount" << std::endl;
    // preserveAttachmentCount -> Field -> uint32_t
    os << "value: " << t.preserveAttachmentCount << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  pPreserveAttachments" << std::endl;
    // pPreserveAttachments -> Field -> ConstDynamicArray(uint32_t)
    {
      if (t.preserveAttachmentCount == 0) {
        os << "value: nullptr" << std::endl;
      } else {
        os << "members:" << std::endl;
        {
          ScopedOstream soarray(os);
          os << "- # uint32_t" << std::endl;
          for (uint32_t i = 0; i < t.preserveAttachmentCount; ++i) {
            ScopedOstream somember(os);
            os << "value: " << t.pPreserveAttachments[i] << std::endl;
          }
        }
      }
    }
  }

  return os;
}

std::ostream& operator<<(std::ostream& os, const VkSubpassDependency2& t) {
  ScopedOstream sos(os);
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  sType" << std::endl;
    // sType -> Field -> VkStructureType
    os << "value: " << t.sType << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  pNext" << std::endl;
    // pNext -> Field -> ConstNextPtr(void)

    // pNext
    os << "value: ";
    PrintNextPtr(os, t.pNext);
    os << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  srcSubpass" << std::endl;
    // srcSubpass -> Field -> uint32_t
    os << "value: " << t.srcSubpass << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  dstSubpass" << std::endl;
    // dstSubpass -> Field -> uint32_t
    os << "value: " << t.dstSubpass << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  srcStageMask" << std::endl;
    // srcStageMask -> Field -> VkPipelineStageFlags
    os << "value: " << t.srcStageMask << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  dstStageMask" << std::endl;
    // dstStageMask -> Field -> VkPipelineStageFlags
    os << "value: " << t.dstStageMask << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  srcAccessMask" << std::endl;
    // srcAccessMask -> Field -> VkAccessFlags
    os << "value: " << t.srcAccessMask << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  dstAccessMask" << std::endl;
    // dstAccessMask -> Field -> VkAccessFlags
    os << "value: " << t.dstAccessMask << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  dependencyFlags" << std::endl;
    // dependencyFlags -> Field -> VkDependencyFlags
    os << "value: " << t.dependencyFlags << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  viewOffset" << std::endl;
    // viewOffset -> Field -> int32_t
    os << "value: " << t.viewOffset << std::endl;
  }

  return os;
}

std::ostream& operator<<(std::ostream& os, const VkRenderPassCreateInfo2& t) {
  ScopedOstream sos(os);
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  sType" << std::endl;
    // sType -> Field -> VkStructureType
    os << "value: " << t.sType << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  pNext" << std::endl;
    // pNext -> Field -> ConstNextPtr(void)

    // pNext
    os << "value: ";
    PrintNextPtr(os, t.pNext);
    os << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  flags" << std::endl;
    // flags -> Field -> VkRenderPassCreateFlags
    os << "value: " << t.flags << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  attachmentCount" << std::endl;
    // attachmentCount -> Field -> uint32_t
    os << "value: " << t.attachmentCount << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  pAttachments" << std::endl;
    // pAttachments -> Field -> ConstDynamicArray(VkAttachmentDescription2)
    {
      if (t.attachmentCount == 0) {
        os << "value: nullptr" << std::endl;
      } else {
        os << "members:" << std::endl;
        {
          ScopedOstream soarray(os);
          os << "- # VkAttachmentDescription2" << std::endl;
          for (uint32_t i = 0; i < t.attachmentCount; ++i) {
            ScopedOstream somember(os);
            os << "members:" << std::endl << t.pAttachments[i] << std::endl;
          }
        }
      }
    }
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  subpassCount" << std::endl;
    // subpassCount -> Field -> uint32_t
    os << "value: " << t.subpassCount << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  pSubpasses" << std::endl;
    // pSubpasses -> Field -> ConstDynamicArray(VkSubpassDescription2)
    {
      if (t.subpassCount == 0) {
        os << "value: nullptr" << std::endl;
      } else {
        os << "members:" << std::endl;
        {
          ScopedOstream soarray(os);
          os << "- # VkSubpassDescription2" << std::endl;
          for (uint32_t i = 0; i < t.subpassCount; ++i) {
            ScopedOstream somember(os);
            os << "members:" << std::endl << t.pSubpasses[i] << std::endl;
          }
        }
      }
    }
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  dependencyCount" << std::endl;
    // dependencyCount -> Field -> uint32_t
    os << "value: " << t.dependencyCount << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  pDependencies" << std::endl;
    // pDependencies -> Field -> ConstDynamicArray(VkSubpassDependency2)
    {
      if (t.dependencyCount == 0) {
        os << "value: nullptr" << std::endl;
      } else {
        os << "members:" << std::endl;
        {
          ScopedOstream soarray(os);
          os << "- # VkSubpassDependency2" << std::endl;
          for (uint32_t i = 0; i < t.dependencyCount; ++i) {
            ScopedOstream somember(os);
            os << "members:" << std::endl << t.pDependencies[i] << std::endl;
          }
        }
      }
    }
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  correlatedViewMaskCount" << std::endl;
    // correlatedViewMaskCount -> Field -> uint32_t
    os << "value: " << t.correlatedViewMaskCount << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  pCorrelatedViewMasks" << std::endl;
    // pCorrelatedViewMasks -> Field -> ConstDynamicArray(uint32_t)
    {
      if (t.correlatedViewMaskCount == 0) {
        os << "value: nullptr" << std::endl;
      } else {
        os << "members:" << std::endl;
        {
          ScopedOstream soarray(os);
          os << "- # uint32_t" << std::endl;
          for (uint32_t i = 0; i < t.correlatedViewMaskCount; ++i) {
            ScopedOstream somember(os);
            os << "value: " << t.pCorrelatedViewMasks[i] << std::endl;
          }
        }
      }
    }
  }

  return os;
}

std::ostream& operator<<(std::ostream& os, const VkSubpassBeginInfo& t) {
  ScopedOstream sos(os);
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  sType" << std::endl;
    // sType -> Field -> VkStructureType
    os << "value: " << t.sType << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  pNext" << std::endl;
    // pNext -> Field -> ConstNextPtr(void)

    // pNext
    os << "value: ";
    PrintNextPtr(os, t.pNext);
    os << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  contents" << std::endl;
    // contents -> Field -> VkSubpassContents
    os << "value: " << t.contents << std::endl;
  }

  return os;
}

std::ostream& operator<<(std::ostream& os, const VkSubpassEndInfo& t) {
  ScopedOstream sos(os);
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  sType" << std::endl;
    // sType -> Field -> VkStructureType
    os << "value: " << t.sType << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  pNext" << std::endl;
    // pNext -> Field -> ConstNextPtr(void)

    // pNext
    os << "value: ";
    PrintNextPtr(os, t.pNext);
    os << std::endl;
  }

  return os;
}

std::ostream& operator<<(std::ostream& os,
                         const VkPhysicalDeviceTimelineSemaphoreFeatures& t) {
  ScopedOstream sos(os);
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  sType" << std::endl;
    // sType -> Field -> VkStructureType
    os << "value: " << t.sType << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  pNext" << std::endl;
    // pNext -> Field -> NextPtr(void)

    // pNext
    os << "value: ";
    PrintNextPtr(os, t.pNext);
    os << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  timelineSemaphore" << std::endl;
    // timelineSemaphore -> Field -> VkBool32
    os << "value: " << t.timelineSemaphore << std::endl;
  }

  return os;
}

std::ostream& operator<<(std::ostream& os,
                         const VkPhysicalDeviceTimelineSemaphoreProperties& t) {
  ScopedOstream sos(os);
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  sType" << std::endl;
    // sType -> Field -> VkStructureType
    os << "value: " << t.sType << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  pNext" << std::endl;
    // pNext -> Field -> NextPtr(void)

    // pNext
    os << "value: ";
    PrintNextPtr(os, t.pNext);
    os << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  maxTimelineSemaphoreValueDifference" << std::endl;
    // maxTimelineSemaphoreValueDifference -> Field -> uint64_t
    os << "value: " << t.maxTimelineSemaphoreValueDifference << std::endl;
  }

  return os;
}

std::ostream& operator<<(std::ostream& os, const VkSemaphoreTypeCreateInfo& t) {
  ScopedOstream sos(os);
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  sType" << std::endl;
    // sType -> Field -> VkStructureType
    os << "value: " << t.sType << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  pNext" << std::endl;
    // pNext -> Field -> ConstNextPtr(void)

    // pNext
    os << "value: ";
    PrintNextPtr(os, t.pNext);
    os << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  semaphoreType" << std::endl;
    // semaphoreType -> Field -> VkSemaphoreType
    os << "value: " << t.semaphoreType << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  initialValue" << std::endl;
    // initialValue -> Field -> uint64_t
    os << "value: " << t.initialValue << std::endl;
  }

  return os;
}

std::ostream& operator<<(std::ostream& os,
                         const VkTimelineSemaphoreSubmitInfo& t) {
  ScopedOstream sos(os);
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  sType" << std::endl;
    // sType -> Field -> VkStructureType
    os << "value: " << t.sType << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  pNext" << std::endl;
    // pNext -> Field -> ConstNextPtr(void)

    // pNext
    os << "value: ";
    PrintNextPtr(os, t.pNext);
    os << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  waitSemaphoreValueCount" << std::endl;
    // waitSemaphoreValueCount -> Field -> uint32_t
    os << "value: " << t.waitSemaphoreValueCount << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  pWaitSemaphoreValues" << std::endl;
    // pWaitSemaphoreValues -> Field -> ConstDynamicArray(uint64_t)
    {
      if (t.waitSemaphoreValueCount == 0) {
        os << "value: nullptr" << std::endl;
      } else {
        os << "members:" << std::endl;
        {
          ScopedOstream soarray(os);
          os << "- # uint64_t" << std::endl;
          for (uint32_t i = 0; i < t.waitSemaphoreValueCount; ++i) {
            ScopedOstream somember(os);
            os << "value: " << t.pWaitSemaphoreValues[i] << std::endl;
          }
        }
      }
    }
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  signalSemaphoreValueCount" << std::endl;
    // signalSemaphoreValueCount -> Field -> uint32_t
    os << "value: " << t.signalSemaphoreValueCount << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  pSignalSemaphoreValues" << std::endl;
    // pSignalSemaphoreValues -> Field -> ConstDynamicArray(uint64_t)
    {
      if (t.signalSemaphoreValueCount == 0) {
        os << "value: nullptr" << std::endl;
      } else {
        os << "members:" << std::endl;
        {
          ScopedOstream soarray(os);
          os << "- # uint64_t" << std::endl;
          for (uint32_t i = 0; i < t.signalSemaphoreValueCount; ++i) {
            ScopedOstream somember(os);
            os << "value: " << t.pSignalSemaphoreValues[i] << std::endl;
          }
        }
      }
    }
  }

  return os;
}

std::ostream& operator<<(std::ostream& os, const VkSemaphoreWaitInfo& t) {
  ScopedOstream sos(os);
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  sType" << std::endl;
    // sType -> Field -> VkStructureType
    os << "value: " << t.sType << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  pNext" << std::endl;
    // pNext -> Field -> ConstNextPtr(void)

    // pNext
    os << "value: ";
    PrintNextPtr(os, t.pNext);
    os << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  flags" << std::endl;
    // flags -> Field -> VkSemaphoreWaitFlags
    os << "value: " << t.flags << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  semaphoreCount" << std::endl;
    // semaphoreCount -> Field -> uint32_t
    os << "value: " << t.semaphoreCount << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  pSemaphores" << std::endl;
    // pSemaphores -> Field -> ConstDynamicArray(VkSemaphore)
    {
      if (t.semaphoreCount == 0) {
        os << "value: nullptr" << std::endl;
      } else {
        os << "members:" << std::endl;
        {
          ScopedOstream soarray(os);
          os << "- # VkSemaphore" << std::endl;
          for (uint32_t i = 0; i < t.semaphoreCount; ++i) {
            ScopedOstream somember(os);
            os << "value: " << t.pSemaphores[i] << std::endl;
          }
        }
      }
    }
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  pValues" << std::endl;
    // pValues -> Field -> ConstDynamicArray(uint64_t)
    {
      if (t.semaphoreCount == 0) {
        os << "value: nullptr" << std::endl;
      } else {
        os << "members:" << std::endl;
        {
          ScopedOstream soarray(os);
          os << "- # uint64_t" << std::endl;
          for (uint32_t i = 0; i < t.semaphoreCount; ++i) {
            ScopedOstream somember(os);
            os << "value: " << t.pValues[i] << std::endl;
          }
        }
      }
    }
  }

  return os;
}

std::ostream& operator<<(std::ostream& os, const VkSemaphoreSignalInfo& t) {
  ScopedOstream sos(os);
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  sType" << std::endl;
    // sType -> Field -> VkStructureType
    os << "value: " << t.sType << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  pNext" << std::endl;
    // pNext -> Field -> ConstNextPtr(void)

    // pNext
    os << "value: ";
    PrintNextPtr(os, t.pNext);
    os << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  semaphore" << std::endl;
    // semaphore -> Field -> VkSemaphore
    os << "value: " << t.semaphore << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  value" << std::endl;
    // value -> Field -> uint64_t
    os << "value: " << t.value << std::endl;
  }

  return os;
}

std::ostream& operator<<(std::ostream& os,
                         const VkPhysicalDevice8BitStorageFeatures& t) {
  ScopedOstream sos(os);
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  sType" << std::endl;
    // sType -> Field -> VkStructureType
    os << "value: " << t.sType << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  pNext" << std::endl;
    // pNext -> Field -> NextPtr(void)

    // pNext
    os << "value: ";
    PrintNextPtr(os, t.pNext);
    os << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  storageBuffer8BitAccess" << std::endl;
    // storageBuffer8BitAccess -> Field -> VkBool32
    os << "value: " << t.storageBuffer8BitAccess << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  uniformAndStorageBuffer8BitAccess" << std::endl;
    // uniformAndStorageBuffer8BitAccess -> Field -> VkBool32
    os << "value: " << t.uniformAndStorageBuffer8BitAccess << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  storagePushConstant8" << std::endl;
    // storagePushConstant8 -> Field -> VkBool32
    os << "value: " << t.storagePushConstant8 << std::endl;
  }

  return os;
}

std::ostream& operator<<(std::ostream& os,
                         const VkPhysicalDeviceVulkanMemoryModelFeatures& t) {
  ScopedOstream sos(os);
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  sType" << std::endl;
    // sType -> Field -> VkStructureType
    os << "value: " << t.sType << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  pNext" << std::endl;
    // pNext -> Field -> NextPtr(void)

    // pNext
    os << "value: ";
    PrintNextPtr(os, t.pNext);
    os << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  vulkanMemoryModel" << std::endl;
    // vulkanMemoryModel -> Field -> VkBool32
    os << "value: " << t.vulkanMemoryModel << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  vulkanMemoryModelDeviceScope" << std::endl;
    // vulkanMemoryModelDeviceScope -> Field -> VkBool32
    os << "value: " << t.vulkanMemoryModelDeviceScope << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  vulkanMemoryModelAvailabilityVisibilityChains" << std::endl;
    // vulkanMemoryModelAvailabilityVisibilityChains -> Field -> VkBool32
    os << "value: " << t.vulkanMemoryModelAvailabilityVisibilityChains
       << std::endl;
  }

  return os;
}

std::ostream& operator<<(std::ostream& os,
                         const VkPhysicalDeviceShaderAtomicInt64Features& t) {
  ScopedOstream sos(os);
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  sType" << std::endl;
    // sType -> Field -> VkStructureType
    os << "value: " << t.sType << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  pNext" << std::endl;
    // pNext -> Field -> NextPtr(void)

    // pNext
    os << "value: ";
    PrintNextPtr(os, t.pNext);
    os << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  shaderBufferInt64Atomics" << std::endl;
    // shaderBufferInt64Atomics -> Field -> VkBool32
    os << "value: " << t.shaderBufferInt64Atomics << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  shaderSharedInt64Atomics" << std::endl;
    // shaderSharedInt64Atomics -> Field -> VkBool32
    os << "value: " << t.shaderSharedInt64Atomics << std::endl;
  }

  return os;
}

std::ostream& operator<<(
    std::ostream& os, const VkPhysicalDeviceDepthStencilResolveProperties& t) {
  ScopedOstream sos(os);
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  sType" << std::endl;
    // sType -> Field -> VkStructureType
    os << "value: " << t.sType << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  pNext" << std::endl;
    // pNext -> Field -> NextPtr(void)

    // pNext
    os << "value: ";
    PrintNextPtr(os, t.pNext);
    os << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  supportedDepthResolveModes" << std::endl;
    // supportedDepthResolveModes -> Field -> VkResolveModeFlags
    os << "value: " << t.supportedDepthResolveModes << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  supportedStencilResolveModes" << std::endl;
    // supportedStencilResolveModes -> Field -> VkResolveModeFlags
    os << "value: " << t.supportedStencilResolveModes << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  independentResolveNone" << std::endl;
    // independentResolveNone -> Field -> VkBool32
    os << "value: " << t.independentResolveNone << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  independentResolve" << std::endl;
    // independentResolve -> Field -> VkBool32
    os << "value: " << t.independentResolve << std::endl;
  }

  return os;
}

std::ostream& operator<<(std::ostream& os,
                         const VkSubpassDescriptionDepthStencilResolve& t) {
  ScopedOstream sos(os);
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  sType" << std::endl;
    // sType -> Field -> VkStructureType
    os << "value: " << t.sType << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  pNext" << std::endl;
    // pNext -> Field -> ConstNextPtr(void)

    // pNext
    os << "value: ";
    PrintNextPtr(os, t.pNext);
    os << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  depthResolveMode" << std::endl;
    // depthResolveMode -> Field -> VkResolveModeFlagBits
    os << "value: " << t.depthResolveMode << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  stencilResolveMode" << std::endl;
    // stencilResolveMode -> Field -> VkResolveModeFlagBits
    os << "value: " << t.stencilResolveMode << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  pDepthStencilResolveAttachment" << std::endl;
    // pDepthStencilResolveAttachment -> Field ->
    // ConstPointer(VkAttachmentReference2) pointer
    if (t.pDepthStencilResolveAttachment) {
      os << "members:" << std::endl
         << *t.pDepthStencilResolveAttachment << std::endl;
    } else {
      os << "value: nullptr" << std::endl;
    }
  }

  return os;
}

std::ostream& operator<<(std::ostream& os,
                         const VkImageStencilUsageCreateInfo& t) {
  ScopedOstream sos(os);
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  sType" << std::endl;
    // sType -> Field -> VkStructureType
    os << "value: " << t.sType << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  pNext" << std::endl;
    // pNext -> Field -> ConstNextPtr(void)

    // pNext
    os << "value: ";
    PrintNextPtr(os, t.pNext);
    os << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  stencilUsage" << std::endl;
    // stencilUsage -> Field -> VkImageUsageFlags
    os << "value: " << t.stencilUsage << std::endl;
  }

  return os;
}

std::ostream& operator<<(std::ostream& os,
                         const VkPhysicalDeviceScalarBlockLayoutFeatures& t) {
  ScopedOstream sos(os);
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  sType" << std::endl;
    // sType -> Field -> VkStructureType
    os << "value: " << t.sType << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  pNext" << std::endl;
    // pNext -> Field -> NextPtr(void)

    // pNext
    os << "value: ";
    PrintNextPtr(os, t.pNext);
    os << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  scalarBlockLayout" << std::endl;
    // scalarBlockLayout -> Field -> VkBool32
    os << "value: " << t.scalarBlockLayout << std::endl;
  }

  return os;
}

std::ostream& operator<<(
    std::ostream& os,
    const VkPhysicalDeviceUniformBufferStandardLayoutFeatures& t) {
  ScopedOstream sos(os);
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  sType" << std::endl;
    // sType -> Field -> VkStructureType
    os << "value: " << t.sType << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  pNext" << std::endl;
    // pNext -> Field -> NextPtr(void)

    // pNext
    os << "value: ";
    PrintNextPtr(os, t.pNext);
    os << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  uniformBufferStandardLayout" << std::endl;
    // uniformBufferStandardLayout -> Field -> VkBool32
    os << "value: " << t.uniformBufferStandardLayout << std::endl;
  }

  return os;
}

std::ostream& operator<<(std::ostream& os,
                         const VkPhysicalDeviceBufferDeviceAddressFeatures& t) {
  ScopedOstream sos(os);
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  sType" << std::endl;
    // sType -> Field -> VkStructureType
    os << "value: " << t.sType << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  pNext" << std::endl;
    // pNext -> Field -> NextPtr(void)

    // pNext
    os << "value: ";
    PrintNextPtr(os, t.pNext);
    os << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  bufferDeviceAddress" << std::endl;
    // bufferDeviceAddress -> Field -> VkBool32
    os << "value: " << t.bufferDeviceAddress << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  bufferDeviceAddressCaptureReplay" << std::endl;
    // bufferDeviceAddressCaptureReplay -> Field -> VkBool32
    os << "value: " << t.bufferDeviceAddressCaptureReplay << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  bufferDeviceAddressMultiDevice" << std::endl;
    // bufferDeviceAddressMultiDevice -> Field -> VkBool32
    os << "value: " << t.bufferDeviceAddressMultiDevice << std::endl;
  }

  return os;
}

std::ostream& operator<<(std::ostream& os, const VkBufferDeviceAddressInfo& t) {
  ScopedOstream sos(os);
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  sType" << std::endl;
    // sType -> Field -> VkStructureType
    os << "value: " << t.sType << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  pNext" << std::endl;
    // pNext -> Field -> ConstNextPtr(void)

    // pNext
    os << "value: ";
    PrintNextPtr(os, t.pNext);
    os << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  buffer" << std::endl;
    // buffer -> Field -> VkBuffer
    os << "value: " << t.buffer << std::endl;
  }

  return os;
}

std::ostream& operator<<(std::ostream& os,
                         const VkBufferOpaqueCaptureAddressCreateInfo& t) {
  ScopedOstream sos(os);
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  sType" << std::endl;
    // sType -> Field -> VkStructureType
    os << "value: " << t.sType << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  pNext" << std::endl;
    // pNext -> Field -> ConstNextPtr(void)

    // pNext
    os << "value: ";
    PrintNextPtr(os, t.pNext);
    os << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  opaqueCaptureAddress" << std::endl;
    // opaqueCaptureAddress -> Field -> uint64_t
    os << "value: " << t.opaqueCaptureAddress << std::endl;
  }

  return os;
}

std::ostream& operator<<(
    std::ostream& os, const VkPhysicalDeviceImagelessFramebufferFeatures& t) {
  ScopedOstream sos(os);
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  sType" << std::endl;
    // sType -> Field -> VkStructureType
    os << "value: " << t.sType << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  pNext" << std::endl;
    // pNext -> Field -> NextPtr(void)

    // pNext
    os << "value: ";
    PrintNextPtr(os, t.pNext);
    os << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  imagelessFramebuffer" << std::endl;
    // imagelessFramebuffer -> Field -> VkBool32
    os << "value: " << t.imagelessFramebuffer << std::endl;
  }

  return os;
}

std::ostream& operator<<(std::ostream& os,
                         const VkFramebufferAttachmentsCreateInfo& t) {
  ScopedOstream sos(os);
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  sType" << std::endl;
    // sType -> Field -> VkStructureType
    os << "value: " << t.sType << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  pNext" << std::endl;
    // pNext -> Field -> ConstNextPtr(void)

    // pNext
    os << "value: ";
    PrintNextPtr(os, t.pNext);
    os << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  attachmentImageInfoCount" << std::endl;
    // attachmentImageInfoCount -> Field -> uint32_t
    os << "value: " << t.attachmentImageInfoCount << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  pAttachmentImageInfos" << std::endl;
    // pAttachmentImageInfos -> Field ->
    // ConstDynamicArray(VkFramebufferAttachmentImageInfo)
    {
      if (t.attachmentImageInfoCount == 0) {
        os << "value: nullptr" << std::endl;
      } else {
        os << "members:" << std::endl;
        {
          ScopedOstream soarray(os);
          os << "- # VkFramebufferAttachmentImageInfo" << std::endl;
          for (uint32_t i = 0; i < t.attachmentImageInfoCount; ++i) {
            ScopedOstream somember(os);
            os << "members:" << std::endl
               << t.pAttachmentImageInfos[i] << std::endl;
          }
        }
      }
    }
  }

  return os;
}

std::ostream& operator<<(std::ostream& os,
                         const VkFramebufferAttachmentImageInfo& t) {
  ScopedOstream sos(os);
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  sType" << std::endl;
    // sType -> Field -> VkStructureType
    os << "value: " << t.sType << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  pNext" << std::endl;
    // pNext -> Field -> ConstNextPtr(void)

    // pNext
    os << "value: ";
    PrintNextPtr(os, t.pNext);
    os << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  flags" << std::endl;
    // flags -> Field -> VkImageCreateFlags
    os << "value: " << t.flags << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  usage" << std::endl;
    // usage -> Field -> VkImageUsageFlags
    os << "value: " << t.usage << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  width" << std::endl;
    // width -> Field -> uint32_t
    os << "value: " << t.width << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  height" << std::endl;
    // height -> Field -> uint32_t
    os << "value: " << t.height << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  layerCount" << std::endl;
    // layerCount -> Field -> uint32_t
    os << "value: " << t.layerCount << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  viewFormatCount" << std::endl;
    // viewFormatCount -> Field -> uint32_t
    os << "value: " << t.viewFormatCount << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  pViewFormats" << std::endl;
    // pViewFormats -> Field -> ConstDynamicArray(VkFormat)
    {
      if (t.viewFormatCount == 0) {
        os << "value: nullptr" << std::endl;
      } else {
        os << "members:" << std::endl;
        {
          ScopedOstream soarray(os);
          os << "- # VkFormat" << std::endl;
          for (uint32_t i = 0; i < t.viewFormatCount; ++i) {
            ScopedOstream somember(os);
            os << "value: " << t.pViewFormats[i] << std::endl;
          }
        }
      }
    }
  }

  return os;
}

std::ostream& operator<<(std::ostream& os,
                         const VkRenderPassAttachmentBeginInfo& t) {
  ScopedOstream sos(os);
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  sType" << std::endl;
    // sType -> Field -> VkStructureType
    os << "value: " << t.sType << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  pNext" << std::endl;
    // pNext -> Field -> ConstNextPtr(void)

    // pNext
    os << "value: ";
    PrintNextPtr(os, t.pNext);
    os << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  attachmentCount" << std::endl;
    // attachmentCount -> Field -> uint32_t
    os << "value: " << t.attachmentCount << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  pAttachments" << std::endl;
    // pAttachments -> Field -> ConstDynamicArray(VkImageView)
    {
      if (t.attachmentCount == 0) {
        os << "value: nullptr" << std::endl;
      } else {
        os << "members:" << std::endl;
        {
          ScopedOstream soarray(os);
          os << "- # VkImageView" << std::endl;
          for (uint32_t i = 0; i < t.attachmentCount; ++i) {
            ScopedOstream somember(os);
            os << "value: " << t.pAttachments[i] << std::endl;
          }
        }
      }
    }
  }

  return os;
}

std::ostream& operator<<(
    std::ostream& os,
    const VkPhysicalDeviceSeparateDepthStencilLayoutsFeatures& t) {
  ScopedOstream sos(os);
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  sType" << std::endl;
    // sType -> Field -> VkStructureType
    os << "value: " << t.sType << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  pNext" << std::endl;
    // pNext -> Field -> NextPtr(void)

    // pNext
    os << "value: ";
    PrintNextPtr(os, t.pNext);
    os << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  separateDepthStencilLayouts" << std::endl;
    // separateDepthStencilLayouts -> Field -> VkBool32
    os << "value: " << t.separateDepthStencilLayouts << std::endl;
  }

  return os;
}

std::ostream& operator<<(std::ostream& os,
                         const VkAttachmentReferenceStencilLayout& t) {
  ScopedOstream sos(os);
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  sType" << std::endl;
    // sType -> Field -> VkStructureType
    os << "value: " << t.sType << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  pNext" << std::endl;
    // pNext -> Field -> NextPtr(void)

    // pNext
    os << "value: ";
    PrintNextPtr(os, t.pNext);
    os << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  stencilLayout" << std::endl;
    // stencilLayout -> Field -> VkImageLayout
    os << "value: " << t.stencilLayout << std::endl;
  }

  return os;
}

std::ostream& operator<<(std::ostream& os,
                         const VkAttachmentDescriptionStencilLayout& t) {
  ScopedOstream sos(os);
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  sType" << std::endl;
    // sType -> Field -> VkStructureType
    os << "value: " << t.sType << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  pNext" << std::endl;
    // pNext -> Field -> NextPtr(void)

    // pNext
    os << "value: ";
    PrintNextPtr(os, t.pNext);
    os << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  stencilInitialLayout" << std::endl;
    // stencilInitialLayout -> Field -> VkImageLayout
    os << "value: " << t.stencilInitialLayout << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  stencilFinalLayout" << std::endl;
    // stencilFinalLayout -> Field -> VkImageLayout
    os << "value: " << t.stencilFinalLayout << std::endl;
  }

  return os;
}

std::ostream& operator<<(std::ostream& os,
                         const VkMemoryOpaqueCaptureAddressAllocateInfo& t) {
  ScopedOstream sos(os);
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  sType" << std::endl;
    // sType -> Field -> VkStructureType
    os << "value: " << t.sType << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  pNext" << std::endl;
    // pNext -> Field -> ConstNextPtr(void)

    // pNext
    os << "value: ";
    PrintNextPtr(os, t.pNext);
    os << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  opaqueCaptureAddress" << std::endl;
    // opaqueCaptureAddress -> Field -> uint64_t
    os << "value: " << t.opaqueCaptureAddress << std::endl;
  }

  return os;
}

std::ostream& operator<<(std::ostream& os,
                         const VkDeviceMemoryOpaqueCaptureAddressInfo& t) {
  ScopedOstream sos(os);
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  sType" << std::endl;
    // sType -> Field -> VkStructureType
    os << "value: " << t.sType << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  pNext" << std::endl;
    // pNext -> Field -> ConstNextPtr(void)

    // pNext
    os << "value: ";
    PrintNextPtr(os, t.pNext);
    os << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  memory" << std::endl;
    // memory -> Field -> VkDeviceMemory
    os << "value: " << t.memory << std::endl;
  }

  return os;
}

std::ostream& operator<<(std::ostream& os,
                         const VkPhysicalDeviceVulkan11Features& t) {
  ScopedOstream sos(os);
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  sType" << std::endl;
    // sType -> Field -> VkStructureType
    os << "value: " << t.sType << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  pNext" << std::endl;
    // pNext -> Field -> NextPtr(void)

    // pNext
    os << "value: ";
    PrintNextPtr(os, t.pNext);
    os << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  storageBuffer16BitAccess" << std::endl;
    // storageBuffer16BitAccess -> Field -> VkBool32
    os << "value: " << t.storageBuffer16BitAccess << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  uniformAndStorageBuffer16BitAccess" << std::endl;
    // uniformAndStorageBuffer16BitAccess -> Field -> VkBool32
    os << "value: " << t.uniformAndStorageBuffer16BitAccess << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  storagePushConstant16" << std::endl;
    // storagePushConstant16 -> Field -> VkBool32
    os << "value: " << t.storagePushConstant16 << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  storageInputOutput16" << std::endl;
    // storageInputOutput16 -> Field -> VkBool32
    os << "value: " << t.storageInputOutput16 << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  multiview" << std::endl;
    // multiview -> Field -> VkBool32
    os << "value: " << t.multiview << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  multiviewGeometryShader" << std::endl;
    // multiviewGeometryShader -> Field -> VkBool32
    os << "value: " << t.multiviewGeometryShader << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  multiviewTessellationShader" << std::endl;
    // multiviewTessellationShader -> Field -> VkBool32
    os << "value: " << t.multiviewTessellationShader << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  variablePointersStorageBuffer" << std::endl;
    // variablePointersStorageBuffer -> Field -> VkBool32
    os << "value: " << t.variablePointersStorageBuffer << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  variablePointers" << std::endl;
    // variablePointers -> Field -> VkBool32
    os << "value: " << t.variablePointers << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  protectedMemory" << std::endl;
    // protectedMemory -> Field -> VkBool32
    os << "value: " << t.protectedMemory << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  samplerYcbcrConversion" << std::endl;
    // samplerYcbcrConversion -> Field -> VkBool32
    os << "value: " << t.samplerYcbcrConversion << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  shaderDrawParameters" << std::endl;
    // shaderDrawParameters -> Field -> VkBool32
    os << "value: " << t.shaderDrawParameters << std::endl;
  }

  return os;
}

std::ostream& operator<<(std::ostream& os,
                         const VkPhysicalDeviceVulkan11Properties& t) {
  ScopedOstream sos(os);
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  sType" << std::endl;
    // sType -> Field -> VkStructureType
    os << "value: " << t.sType << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  pNext" << std::endl;
    // pNext -> Field -> NextPtr(void)

    // pNext
    os << "value: ";
    PrintNextPtr(os, t.pNext);
    os << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  deviceUUID" << std::endl;
    // deviceUUID -> Field -> FixedArray(uint8_t)
    {
      if (VK_UUID_SIZE == 0) {
        os << "value: nullptr" << std::endl;
      } else {
        os << "members:" << std::endl;
        {
          ScopedOstream soarray(os);
          os << "- # uint8_t" << std::endl;
          for (uint32_t i = 0; i < VK_UUID_SIZE; ++i) {
            ScopedOstream somember(os);
            os << "value: " << t.deviceUUID[i] << std::endl;
          }
        }
      }
    }
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  driverUUID" << std::endl;
    // driverUUID -> Field -> FixedArray(uint8_t)
    {
      if (VK_UUID_SIZE == 0) {
        os << "value: nullptr" << std::endl;
      } else {
        os << "members:" << std::endl;
        {
          ScopedOstream soarray(os);
          os << "- # uint8_t" << std::endl;
          for (uint32_t i = 0; i < VK_UUID_SIZE; ++i) {
            ScopedOstream somember(os);
            os << "value: " << t.driverUUID[i] << std::endl;
          }
        }
      }
    }
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  deviceLUID" << std::endl;
    // deviceLUID -> Field -> FixedArray(uint8_t)
    {
      if (VK_LUID_SIZE == 0) {
        os << "value: nullptr" << std::endl;
      } else {
        os << "members:" << std::endl;
        {
          ScopedOstream soarray(os);
          os << "- # uint8_t" << std::endl;
          for (uint32_t i = 0; i < VK_LUID_SIZE; ++i) {
            ScopedOstream somember(os);
            os << "value: " << t.deviceLUID[i] << std::endl;
          }
        }
      }
    }
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  deviceNodeMask" << std::endl;
    // deviceNodeMask -> Field -> uint32_t
    os << "value: " << t.deviceNodeMask << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  deviceLUIDValid" << std::endl;
    // deviceLUIDValid -> Field -> VkBool32
    os << "value: " << t.deviceLUIDValid << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  subgroupSize" << std::endl;
    // subgroupSize -> Field -> uint32_t
    os << "value: " << t.subgroupSize << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  subgroupSupportedStages" << std::endl;
    // subgroupSupportedStages -> Field -> VkShaderStageFlags
    os << "value: " << t.subgroupSupportedStages << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  subgroupSupportedOperations" << std::endl;
    // subgroupSupportedOperations -> Field -> VkSubgroupFeatureFlags
    os << "value: " << t.subgroupSupportedOperations << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  subgroupQuadOperationsInAllStages" << std::endl;
    // subgroupQuadOperationsInAllStages -> Field -> VkBool32
    os << "value: " << t.subgroupQuadOperationsInAllStages << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  pointClippingBehavior" << std::endl;
    // pointClippingBehavior -> Field -> VkPointClippingBehavior
    os << "value: " << t.pointClippingBehavior << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  maxMultiviewViewCount" << std::endl;
    // maxMultiviewViewCount -> Field -> uint32_t
    os << "value: " << t.maxMultiviewViewCount << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  maxMultiviewInstanceIndex" << std::endl;
    // maxMultiviewInstanceIndex -> Field -> uint32_t
    os << "value: " << t.maxMultiviewInstanceIndex << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  protectedNoFault" << std::endl;
    // protectedNoFault -> Field -> VkBool32
    os << "value: " << t.protectedNoFault << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  maxPerSetDescriptors" << std::endl;
    // maxPerSetDescriptors -> Field -> uint32_t
    os << "value: " << t.maxPerSetDescriptors << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  maxMemoryAllocationSize" << std::endl;
    // maxMemoryAllocationSize -> Field -> VkDeviceSize
    os << "value: " << t.maxMemoryAllocationSize << std::endl;
  }

  return os;
}

std::ostream& operator<<(std::ostream& os,
                         const VkPhysicalDeviceVulkan12Features& t) {
  ScopedOstream sos(os);
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  sType" << std::endl;
    // sType -> Field -> VkStructureType
    os << "value: " << t.sType << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  pNext" << std::endl;
    // pNext -> Field -> NextPtr(void)

    // pNext
    os << "value: ";
    PrintNextPtr(os, t.pNext);
    os << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  samplerMirrorClampToEdge" << std::endl;
    // samplerMirrorClampToEdge -> Field -> VkBool32
    os << "value: " << t.samplerMirrorClampToEdge << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  drawIndirectCount" << std::endl;
    // drawIndirectCount -> Field -> VkBool32
    os << "value: " << t.drawIndirectCount << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  storageBuffer8BitAccess" << std::endl;
    // storageBuffer8BitAccess -> Field -> VkBool32
    os << "value: " << t.storageBuffer8BitAccess << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  uniformAndStorageBuffer8BitAccess" << std::endl;
    // uniformAndStorageBuffer8BitAccess -> Field -> VkBool32
    os << "value: " << t.uniformAndStorageBuffer8BitAccess << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  storagePushConstant8" << std::endl;
    // storagePushConstant8 -> Field -> VkBool32
    os << "value: " << t.storagePushConstant8 << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  shaderBufferInt64Atomics" << std::endl;
    // shaderBufferInt64Atomics -> Field -> VkBool32
    os << "value: " << t.shaderBufferInt64Atomics << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  shaderSharedInt64Atomics" << std::endl;
    // shaderSharedInt64Atomics -> Field -> VkBool32
    os << "value: " << t.shaderSharedInt64Atomics << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  shaderFloat16" << std::endl;
    // shaderFloat16 -> Field -> VkBool32
    os << "value: " << t.shaderFloat16 << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  shaderInt8" << std::endl;
    // shaderInt8 -> Field -> VkBool32
    os << "value: " << t.shaderInt8 << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  descriptorIndexing" << std::endl;
    // descriptorIndexing -> Field -> VkBool32
    os << "value: " << t.descriptorIndexing << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  shaderInputAttachmentArrayDynamicIndexing" << std::endl;
    // shaderInputAttachmentArrayDynamicIndexing -> Field -> VkBool32
    os << "value: " << t.shaderInputAttachmentArrayDynamicIndexing << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  shaderUniformTexelBufferArrayDynamicIndexing" << std::endl;
    // shaderUniformTexelBufferArrayDynamicIndexing -> Field -> VkBool32
    os << "value: " << t.shaderUniformTexelBufferArrayDynamicIndexing
       << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  shaderStorageTexelBufferArrayDynamicIndexing" << std::endl;
    // shaderStorageTexelBufferArrayDynamicIndexing -> Field -> VkBool32
    os << "value: " << t.shaderStorageTexelBufferArrayDynamicIndexing
       << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  shaderUniformBufferArrayNonUniformIndexing" << std::endl;
    // shaderUniformBufferArrayNonUniformIndexing -> Field -> VkBool32
    os << "value: " << t.shaderUniformBufferArrayNonUniformIndexing
       << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  shaderSampledImageArrayNonUniformIndexing" << std::endl;
    // shaderSampledImageArrayNonUniformIndexing -> Field -> VkBool32
    os << "value: " << t.shaderSampledImageArrayNonUniformIndexing << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  shaderStorageBufferArrayNonUniformIndexing" << std::endl;
    // shaderStorageBufferArrayNonUniformIndexing -> Field -> VkBool32
    os << "value: " << t.shaderStorageBufferArrayNonUniformIndexing
       << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  shaderStorageImageArrayNonUniformIndexing" << std::endl;
    // shaderStorageImageArrayNonUniformIndexing -> Field -> VkBool32
    os << "value: " << t.shaderStorageImageArrayNonUniformIndexing << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  shaderInputAttachmentArrayNonUniformIndexing" << std::endl;
    // shaderInputAttachmentArrayNonUniformIndexing -> Field -> VkBool32
    os << "value: " << t.shaderInputAttachmentArrayNonUniformIndexing
       << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  shaderUniformTexelBufferArrayNonUniformIndexing" << std::endl;
    // shaderUniformTexelBufferArrayNonUniformIndexing -> Field -> VkBool32
    os << "value: " << t.shaderUniformTexelBufferArrayNonUniformIndexing
       << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  shaderStorageTexelBufferArrayNonUniformIndexing" << std::endl;
    // shaderStorageTexelBufferArrayNonUniformIndexing -> Field -> VkBool32
    os << "value: " << t.shaderStorageTexelBufferArrayNonUniformIndexing
       << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  descriptorBindingUniformBufferUpdateAfterBind" << std::endl;
    // descriptorBindingUniformBufferUpdateAfterBind -> Field -> VkBool32
    os << "value: " << t.descriptorBindingUniformBufferUpdateAfterBind
       << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  descriptorBindingSampledImageUpdateAfterBind" << std::endl;
    // descriptorBindingSampledImageUpdateAfterBind -> Field -> VkBool32
    os << "value: " << t.descriptorBindingSampledImageUpdateAfterBind
       << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  descriptorBindingStorageImageUpdateAfterBind" << std::endl;
    // descriptorBindingStorageImageUpdateAfterBind -> Field -> VkBool32
    os << "value: " << t.descriptorBindingStorageImageUpdateAfterBind
       << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  descriptorBindingStorageBufferUpdateAfterBind" << std::endl;
    // descriptorBindingStorageBufferUpdateAfterBind -> Field -> VkBool32
    os << "value: " << t.descriptorBindingStorageBufferUpdateAfterBind
       << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  descriptorBindingUniformTexelBufferUpdateAfterBind"
       << std::endl;
    // descriptorBindingUniformTexelBufferUpdateAfterBind -> Field -> VkBool32
    os << "value: " << t.descriptorBindingUniformTexelBufferUpdateAfterBind
       << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  descriptorBindingStorageTexelBufferUpdateAfterBind"
       << std::endl;
    // descriptorBindingStorageTexelBufferUpdateAfterBind -> Field -> VkBool32
    os << "value: " << t.descriptorBindingStorageTexelBufferUpdateAfterBind
       << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  descriptorBindingUpdateUnusedWhilePending" << std::endl;
    // descriptorBindingUpdateUnusedWhilePending -> Field -> VkBool32
    os << "value: " << t.descriptorBindingUpdateUnusedWhilePending << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  descriptorBindingPartiallyBound" << std::endl;
    // descriptorBindingPartiallyBound -> Field -> VkBool32
    os << "value: " << t.descriptorBindingPartiallyBound << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  descriptorBindingVariableDescriptorCount" << std::endl;
    // descriptorBindingVariableDescriptorCount -> Field -> VkBool32
    os << "value: " << t.descriptorBindingVariableDescriptorCount << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  runtimeDescriptorArray" << std::endl;
    // runtimeDescriptorArray -> Field -> VkBool32
    os << "value: " << t.runtimeDescriptorArray << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  samplerFilterMinmax" << std::endl;
    // samplerFilterMinmax -> Field -> VkBool32
    os << "value: " << t.samplerFilterMinmax << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  scalarBlockLayout" << std::endl;
    // scalarBlockLayout -> Field -> VkBool32
    os << "value: " << t.scalarBlockLayout << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  imagelessFramebuffer" << std::endl;
    // imagelessFramebuffer -> Field -> VkBool32
    os << "value: " << t.imagelessFramebuffer << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  uniformBufferStandardLayout" << std::endl;
    // uniformBufferStandardLayout -> Field -> VkBool32
    os << "value: " << t.uniformBufferStandardLayout << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  shaderSubgroupExtendedTypes" << std::endl;
    // shaderSubgroupExtendedTypes -> Field -> VkBool32
    os << "value: " << t.shaderSubgroupExtendedTypes << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  separateDepthStencilLayouts" << std::endl;
    // separateDepthStencilLayouts -> Field -> VkBool32
    os << "value: " << t.separateDepthStencilLayouts << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  hostQueryReset" << std::endl;
    // hostQueryReset -> Field -> VkBool32
    os << "value: " << t.hostQueryReset << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  timelineSemaphore" << std::endl;
    // timelineSemaphore -> Field -> VkBool32
    os << "value: " << t.timelineSemaphore << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  bufferDeviceAddress" << std::endl;
    // bufferDeviceAddress -> Field -> VkBool32
    os << "value: " << t.bufferDeviceAddress << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  bufferDeviceAddressCaptureReplay" << std::endl;
    // bufferDeviceAddressCaptureReplay -> Field -> VkBool32
    os << "value: " << t.bufferDeviceAddressCaptureReplay << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  bufferDeviceAddressMultiDevice" << std::endl;
    // bufferDeviceAddressMultiDevice -> Field -> VkBool32
    os << "value: " << t.bufferDeviceAddressMultiDevice << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  vulkanMemoryModel" << std::endl;
    // vulkanMemoryModel -> Field -> VkBool32
    os << "value: " << t.vulkanMemoryModel << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  vulkanMemoryModelDeviceScope" << std::endl;
    // vulkanMemoryModelDeviceScope -> Field -> VkBool32
    os << "value: " << t.vulkanMemoryModelDeviceScope << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  vulkanMemoryModelAvailabilityVisibilityChains" << std::endl;
    // vulkanMemoryModelAvailabilityVisibilityChains -> Field -> VkBool32
    os << "value: " << t.vulkanMemoryModelAvailabilityVisibilityChains
       << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  shaderOutputViewportIndex" << std::endl;
    // shaderOutputViewportIndex -> Field -> VkBool32
    os << "value: " << t.shaderOutputViewportIndex << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  shaderOutputLayer" << std::endl;
    // shaderOutputLayer -> Field -> VkBool32
    os << "value: " << t.shaderOutputLayer << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  subgroupBroadcastDynamicId" << std::endl;
    // subgroupBroadcastDynamicId -> Field -> VkBool32
    os << "value: " << t.subgroupBroadcastDynamicId << std::endl;
  }

  return os;
}

std::ostream& operator<<(std::ostream& os,
                         const VkPhysicalDeviceVulkan12Properties& t) {
  ScopedOstream sos(os);
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  sType" << std::endl;
    // sType -> Field -> VkStructureType
    os << "value: " << t.sType << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  pNext" << std::endl;
    // pNext -> Field -> NextPtr(void)

    // pNext
    os << "value: ";
    PrintNextPtr(os, t.pNext);
    os << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  driverID" << std::endl;
    // driverID -> Field -> VkDriverId
    os << "value: " << t.driverID << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  driverName" << std::endl;
    // driverName -> Field -> FixedArray(char)
    os << "value: " << t.driverName << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  driverInfo" << std::endl;
    // driverInfo -> Field -> FixedArray(char)
    os << "value: " << t.driverInfo << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  conformanceVersion" << std::endl;
    // conformanceVersion -> Field -> VkConformanceVersion
    os << "members:" << std::endl << t.conformanceVersion << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  denormBehaviorIndependence" << std::endl;
    // denormBehaviorIndependence -> Field -> VkShaderFloatControlsIndependence
    os << "value: " << t.denormBehaviorIndependence << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  roundingModeIndependence" << std::endl;
    // roundingModeIndependence -> Field -> VkShaderFloatControlsIndependence
    os << "value: " << t.roundingModeIndependence << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  shaderSignedZeroInfNanPreserveFloat16" << std::endl;
    // shaderSignedZeroInfNanPreserveFloat16 -> Field -> VkBool32
    os << "value: " << t.shaderSignedZeroInfNanPreserveFloat16 << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  shaderSignedZeroInfNanPreserveFloat32" << std::endl;
    // shaderSignedZeroInfNanPreserveFloat32 -> Field -> VkBool32
    os << "value: " << t.shaderSignedZeroInfNanPreserveFloat32 << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  shaderSignedZeroInfNanPreserveFloat64" << std::endl;
    // shaderSignedZeroInfNanPreserveFloat64 -> Field -> VkBool32
    os << "value: " << t.shaderSignedZeroInfNanPreserveFloat64 << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  shaderDenormPreserveFloat16" << std::endl;
    // shaderDenormPreserveFloat16 -> Field -> VkBool32
    os << "value: " << t.shaderDenormPreserveFloat16 << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  shaderDenormPreserveFloat32" << std::endl;
    // shaderDenormPreserveFloat32 -> Field -> VkBool32
    os << "value: " << t.shaderDenormPreserveFloat32 << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  shaderDenormPreserveFloat64" << std::endl;
    // shaderDenormPreserveFloat64 -> Field -> VkBool32
    os << "value: " << t.shaderDenormPreserveFloat64 << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  shaderDenormFlushToZeroFloat16" << std::endl;
    // shaderDenormFlushToZeroFloat16 -> Field -> VkBool32
    os << "value: " << t.shaderDenormFlushToZeroFloat16 << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  shaderDenormFlushToZeroFloat32" << std::endl;
    // shaderDenormFlushToZeroFloat32 -> Field -> VkBool32
    os << "value: " << t.shaderDenormFlushToZeroFloat32 << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  shaderDenormFlushToZeroFloat64" << std::endl;
    // shaderDenormFlushToZeroFloat64 -> Field -> VkBool32
    os << "value: " << t.shaderDenormFlushToZeroFloat64 << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  shaderRoundingModeRTEFloat16" << std::endl;
    // shaderRoundingModeRTEFloat16 -> Field -> VkBool32
    os << "value: " << t.shaderRoundingModeRTEFloat16 << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  shaderRoundingModeRTEFloat32" << std::endl;
    // shaderRoundingModeRTEFloat32 -> Field -> VkBool32
    os << "value: " << t.shaderRoundingModeRTEFloat32 << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  shaderRoundingModeRTEFloat64" << std::endl;
    // shaderRoundingModeRTEFloat64 -> Field -> VkBool32
    os << "value: " << t.shaderRoundingModeRTEFloat64 << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  shaderRoundingModeRTZFloat16" << std::endl;
    // shaderRoundingModeRTZFloat16 -> Field -> VkBool32
    os << "value: " << t.shaderRoundingModeRTZFloat16 << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  shaderRoundingModeRTZFloat32" << std::endl;
    // shaderRoundingModeRTZFloat32 -> Field -> VkBool32
    os << "value: " << t.shaderRoundingModeRTZFloat32 << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  shaderRoundingModeRTZFloat64" << std::endl;
    // shaderRoundingModeRTZFloat64 -> Field -> VkBool32
    os << "value: " << t.shaderRoundingModeRTZFloat64 << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  maxUpdateAfterBindDescriptorsInAllPools" << std::endl;
    // maxUpdateAfterBindDescriptorsInAllPools -> Field -> uint32_t
    os << "value: " << t.maxUpdateAfterBindDescriptorsInAllPools << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  shaderUniformBufferArrayNonUniformIndexingNative"
       << std::endl;
    // shaderUniformBufferArrayNonUniformIndexingNative -> Field -> VkBool32
    os << "value: " << t.shaderUniformBufferArrayNonUniformIndexingNative
       << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  shaderSampledImageArrayNonUniformIndexingNative" << std::endl;
    // shaderSampledImageArrayNonUniformIndexingNative -> Field -> VkBool32
    os << "value: " << t.shaderSampledImageArrayNonUniformIndexingNative
       << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  shaderStorageBufferArrayNonUniformIndexingNative"
       << std::endl;
    // shaderStorageBufferArrayNonUniformIndexingNative -> Field -> VkBool32
    os << "value: " << t.shaderStorageBufferArrayNonUniformIndexingNative
       << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  shaderStorageImageArrayNonUniformIndexingNative" << std::endl;
    // shaderStorageImageArrayNonUniformIndexingNative -> Field -> VkBool32
    os << "value: " << t.shaderStorageImageArrayNonUniformIndexingNative
       << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  shaderInputAttachmentArrayNonUniformIndexingNative"
       << std::endl;
    // shaderInputAttachmentArrayNonUniformIndexingNative -> Field -> VkBool32
    os << "value: " << t.shaderInputAttachmentArrayNonUniformIndexingNative
       << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  robustBufferAccessUpdateAfterBind" << std::endl;
    // robustBufferAccessUpdateAfterBind -> Field -> VkBool32
    os << "value: " << t.robustBufferAccessUpdateAfterBind << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  quadDivergentImplicitLod" << std::endl;
    // quadDivergentImplicitLod -> Field -> VkBool32
    os << "value: " << t.quadDivergentImplicitLod << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  maxPerStageDescriptorUpdateAfterBindSamplers" << std::endl;
    // maxPerStageDescriptorUpdateAfterBindSamplers -> Field -> uint32_t
    os << "value: " << t.maxPerStageDescriptorUpdateAfterBindSamplers
       << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  maxPerStageDescriptorUpdateAfterBindUniformBuffers"
       << std::endl;
    // maxPerStageDescriptorUpdateAfterBindUniformBuffers -> Field -> uint32_t
    os << "value: " << t.maxPerStageDescriptorUpdateAfterBindUniformBuffers
       << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  maxPerStageDescriptorUpdateAfterBindStorageBuffers"
       << std::endl;
    // maxPerStageDescriptorUpdateAfterBindStorageBuffers -> Field -> uint32_t
    os << "value: " << t.maxPerStageDescriptorUpdateAfterBindStorageBuffers
       << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  maxPerStageDescriptorUpdateAfterBindSampledImages"
       << std::endl;
    // maxPerStageDescriptorUpdateAfterBindSampledImages -> Field -> uint32_t
    os << "value: " << t.maxPerStageDescriptorUpdateAfterBindSampledImages
       << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  maxPerStageDescriptorUpdateAfterBindStorageImages"
       << std::endl;
    // maxPerStageDescriptorUpdateAfterBindStorageImages -> Field -> uint32_t
    os << "value: " << t.maxPerStageDescriptorUpdateAfterBindStorageImages
       << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  maxPerStageDescriptorUpdateAfterBindInputAttachments"
       << std::endl;
    // maxPerStageDescriptorUpdateAfterBindInputAttachments -> Field -> uint32_t
    os << "value: " << t.maxPerStageDescriptorUpdateAfterBindInputAttachments
       << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  maxPerStageUpdateAfterBindResources" << std::endl;
    // maxPerStageUpdateAfterBindResources -> Field -> uint32_t
    os << "value: " << t.maxPerStageUpdateAfterBindResources << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  maxDescriptorSetUpdateAfterBindSamplers" << std::endl;
    // maxDescriptorSetUpdateAfterBindSamplers -> Field -> uint32_t
    os << "value: " << t.maxDescriptorSetUpdateAfterBindSamplers << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  maxDescriptorSetUpdateAfterBindUniformBuffers" << std::endl;
    // maxDescriptorSetUpdateAfterBindUniformBuffers -> Field -> uint32_t
    os << "value: " << t.maxDescriptorSetUpdateAfterBindUniformBuffers
       << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  maxDescriptorSetUpdateAfterBindUniformBuffersDynamic"
       << std::endl;
    // maxDescriptorSetUpdateAfterBindUniformBuffersDynamic -> Field -> uint32_t
    os << "value: " << t.maxDescriptorSetUpdateAfterBindUniformBuffersDynamic
       << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  maxDescriptorSetUpdateAfterBindStorageBuffers" << std::endl;
    // maxDescriptorSetUpdateAfterBindStorageBuffers -> Field -> uint32_t
    os << "value: " << t.maxDescriptorSetUpdateAfterBindStorageBuffers
       << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  maxDescriptorSetUpdateAfterBindStorageBuffersDynamic"
       << std::endl;
    // maxDescriptorSetUpdateAfterBindStorageBuffersDynamic -> Field -> uint32_t
    os << "value: " << t.maxDescriptorSetUpdateAfterBindStorageBuffersDynamic
       << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  maxDescriptorSetUpdateAfterBindSampledImages" << std::endl;
    // maxDescriptorSetUpdateAfterBindSampledImages -> Field -> uint32_t
    os << "value: " << t.maxDescriptorSetUpdateAfterBindSampledImages
       << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  maxDescriptorSetUpdateAfterBindStorageImages" << std::endl;
    // maxDescriptorSetUpdateAfterBindStorageImages -> Field -> uint32_t
    os << "value: " << t.maxDescriptorSetUpdateAfterBindStorageImages
       << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  maxDescriptorSetUpdateAfterBindInputAttachments" << std::endl;
    // maxDescriptorSetUpdateAfterBindInputAttachments -> Field -> uint32_t
    os << "value: " << t.maxDescriptorSetUpdateAfterBindInputAttachments
       << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  supportedDepthResolveModes" << std::endl;
    // supportedDepthResolveModes -> Field -> VkResolveModeFlags
    os << "value: " << t.supportedDepthResolveModes << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  supportedStencilResolveModes" << std::endl;
    // supportedStencilResolveModes -> Field -> VkResolveModeFlags
    os << "value: " << t.supportedStencilResolveModes << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  independentResolveNone" << std::endl;
    // independentResolveNone -> Field -> VkBool32
    os << "value: " << t.independentResolveNone << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  independentResolve" << std::endl;
    // independentResolve -> Field -> VkBool32
    os << "value: " << t.independentResolve << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  filterMinmaxSingleComponentFormats" << std::endl;
    // filterMinmaxSingleComponentFormats -> Field -> VkBool32
    os << "value: " << t.filterMinmaxSingleComponentFormats << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  filterMinmaxImageComponentMapping" << std::endl;
    // filterMinmaxImageComponentMapping -> Field -> VkBool32
    os << "value: " << t.filterMinmaxImageComponentMapping << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  maxTimelineSemaphoreValueDifference" << std::endl;
    // maxTimelineSemaphoreValueDifference -> Field -> uint64_t
    os << "value: " << t.maxTimelineSemaphoreValueDifference << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  framebufferIntegerColorSampleCounts" << std::endl;
    // framebufferIntegerColorSampleCounts -> Field -> VkSampleCountFlags
    os << "value: " << t.framebufferIntegerColorSampleCounts << std::endl;
  }

  return os;
}

#ifdef VK_USE_PLATFORM_GGP
std::ostream& operator<<(std::ostream& os,
                         const VkStreamDescriptorSurfaceCreateInfoGGP& t) {
  ScopedOstream sos(os);
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  sType" << std::endl;
    // sType -> Field -> VkStructureType
    os << "value: " << t.sType << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  pNext" << std::endl;
    // pNext -> Field -> ConstNextPtr(void)

    // pNext
    os << "value: ";
    PrintNextPtr(os, t.pNext);
    os << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  flags" << std::endl;
    // flags -> Field -> VkStreamDescriptorSurfaceCreateFlagsGGP
    os << "value: " << t.flags << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  streamDescriptor" << std::endl;
    // streamDescriptor -> Field -> GgpStreamDescriptor
    os << "value: " << t.streamDescriptor << std::endl;
  }

  return os;
}

std::ostream& operator<<(std::ostream& os, const VkPresentFrameTokenGGP& t) {
  ScopedOstream sos(os);
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  sType" << std::endl;
    // sType -> Field -> VkStructureType
    os << "value: " << t.sType << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  pNext" << std::endl;
    // pNext -> Field -> ConstNextPtr(void)

    // pNext
    os << "value: ";
    PrintNextPtr(os, t.pNext);
    os << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  frameToken" << std::endl;
    // frameToken -> Field -> GgpFrameToken
    os << "value: " << t.frameToken << std::endl;
  }

  return os;
}

#endif  // VK_USE_PLATFORM_GGP

std::ostream& operator<<(std::ostream& os, const VkWriteDescriptorSet& t) {
  ScopedOstream sos(os);
  os << "sType: ";
  os << t.sType << std::endl;

  os << "pNext: ";
  // void

  os << "dstSet: ";
  os << t.dstSet << std::endl;

  os << "dstBinding: ";
  os << t.dstBinding << std::endl;

  os << "dstArrayElement: ";
  os << t.dstArrayElement << std::endl;

  os << "descriptorCount: ";
  os << t.descriptorCount << std::endl;

  os << "descriptorType: ";
  os << t.descriptorType << std::endl;

  switch (t.descriptorType) {
    case VK_DESCRIPTOR_TYPE_SAMPLER:
    case VK_DESCRIPTOR_TYPE_COMBINED_IMAGE_SAMPLER:
    case VK_DESCRIPTOR_TYPE_SAMPLED_IMAGE:
    case VK_DESCRIPTOR_TYPE_STORAGE_IMAGE:
      os << "pImageInfo: ";
      for (uint32_t i = 0; i < t.descriptorCount; ++i) {
        os << t.pImageInfo[i] << std::endl;
      }
      break;

    case VK_DESCRIPTOR_TYPE_UNIFORM_TEXEL_BUFFER:
    case VK_DESCRIPTOR_TYPE_STORAGE_TEXEL_BUFFER:
      os << "pTexelBufferView: ";
      for (uint32_t i = 0; i < t.descriptorCount; ++i) {
        os << t.pTexelBufferView[i] << std::endl;
      }
      break;

    case VK_DESCRIPTOR_TYPE_UNIFORM_BUFFER:
    case VK_DESCRIPTOR_TYPE_STORAGE_BUFFER:
    case VK_DESCRIPTOR_TYPE_UNIFORM_BUFFER_DYNAMIC:
    case VK_DESCRIPTOR_TYPE_STORAGE_BUFFER_DYNAMIC:
    case VK_DESCRIPTOR_TYPE_INPUT_ATTACHMENT:
      os << "pBufferInfo: ";
      for (uint32_t i = 0; i < t.descriptorCount; ++i) {
        os << t.pBufferInfo[i] << std::endl;
      }
      break;

    default:
      os << "Unknown Descriptor Type: " << t.descriptorType << std::endl;
  }

  return os;
}

//  Print out a VkStruct
std::ostream& PrintVkStruct(std::ostream& os, const VkStruct* pStruct) {
  switch (pStruct->sType) {
    case VK_STRUCTURE_TYPE_DISPLAY_MODE_CREATE_INFO_KHR:
      os << *reinterpret_cast<const VkDisplayModeCreateInfoKHR*>(pStruct);
      break;
    case VK_STRUCTURE_TYPE_DISPLAY_SURFACE_CREATE_INFO_KHR:
      os << *reinterpret_cast<const VkDisplaySurfaceCreateInfoKHR*>(pStruct);
      break;
    case VK_STRUCTURE_TYPE_DISPLAY_PRESENT_INFO_KHR:
      os << *reinterpret_cast<const VkDisplayPresentInfoKHR*>(pStruct);
      break;
    case VK_STRUCTURE_TYPE_SWAPCHAIN_CREATE_INFO_KHR:
      os << *reinterpret_cast<const VkSwapchainCreateInfoKHR*>(pStruct);
      break;
    case VK_STRUCTURE_TYPE_PRESENT_INFO_KHR:
      os << *reinterpret_cast<const VkPresentInfoKHR*>(pStruct);
      break;
    case VK_STRUCTURE_TYPE_DEBUG_REPORT_CALLBACK_CREATE_INFO_EXT:
      os << *reinterpret_cast<const VkDebugReportCallbackCreateInfoEXT*>(
          pStruct);
      break;
    case VK_STRUCTURE_TYPE_PIPELINE_RASTERIZATION_STATE_RASTERIZATION_ORDER_AMD:
      os << *reinterpret_cast<
          const VkPipelineRasterizationStateRasterizationOrderAMD*>(pStruct);
      break;
    case VK_STRUCTURE_TYPE_DEBUG_MARKER_OBJECT_NAME_INFO_EXT:
      os << *reinterpret_cast<const VkDebugMarkerObjectNameInfoEXT*>(pStruct);
      break;
    case VK_STRUCTURE_TYPE_DEBUG_MARKER_OBJECT_TAG_INFO_EXT:
      os << *reinterpret_cast<const VkDebugMarkerObjectTagInfoEXT*>(pStruct);
      break;
    case VK_STRUCTURE_TYPE_DEBUG_MARKER_MARKER_INFO_EXT:
      os << *reinterpret_cast<const VkDebugMarkerMarkerInfoEXT*>(pStruct);
      break;
    case VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_MULTI_DRAW_PROPERTIES_EXT:
      os << *reinterpret_cast<const VkPhysicalDeviceMultiDrawPropertiesEXT*>(
          pStruct);
      break;
    case VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_PUSH_DESCRIPTOR_PROPERTIES_KHR:
      os << *reinterpret_cast<
          const VkPhysicalDevicePushDescriptorPropertiesKHR*>(pStruct);
      break;
    case VK_STRUCTURE_TYPE_PRESENT_REGIONS_KHR:
      os << *reinterpret_cast<const VkPresentRegionsKHR*>(pStruct);
      break;
    case VK_STRUCTURE_TYPE_IMPORT_MEMORY_FD_INFO_KHR:
      os << *reinterpret_cast<const VkImportMemoryFdInfoKHR*>(pStruct);
      break;
    case VK_STRUCTURE_TYPE_MEMORY_FD_PROPERTIES_KHR:
      os << *reinterpret_cast<const VkMemoryFdPropertiesKHR*>(pStruct);
      break;
    case VK_STRUCTURE_TYPE_MEMORY_GET_FD_INFO_KHR:
      os << *reinterpret_cast<const VkMemoryGetFdInfoKHR*>(pStruct);
      break;
    case VK_STRUCTURE_TYPE_IMPORT_SEMAPHORE_FD_INFO_KHR:
      os << *reinterpret_cast<const VkImportSemaphoreFdInfoKHR*>(pStruct);
      break;
    case VK_STRUCTURE_TYPE_SEMAPHORE_GET_FD_INFO_KHR:
      os << *reinterpret_cast<const VkSemaphoreGetFdInfoKHR*>(pStruct);
      break;
    case VK_STRUCTURE_TYPE_IMPORT_FENCE_FD_INFO_KHR:
      os << *reinterpret_cast<const VkImportFenceFdInfoKHR*>(pStruct);
      break;
    case VK_STRUCTURE_TYPE_FENCE_GET_FD_INFO_KHR:
      os << *reinterpret_cast<const VkFenceGetFdInfoKHR*>(pStruct);
      break;
    case VK_STRUCTURE_TYPE_DEVICE_GROUP_PRESENT_CAPABILITIES_KHR:
      os << *reinterpret_cast<const VkDeviceGroupPresentCapabilitiesKHR*>(
          pStruct);
      break;
    case VK_STRUCTURE_TYPE_IMAGE_SWAPCHAIN_CREATE_INFO_KHR:
      os << *reinterpret_cast<const VkImageSwapchainCreateInfoKHR*>(pStruct);
      break;
    case VK_STRUCTURE_TYPE_BIND_IMAGE_MEMORY_SWAPCHAIN_INFO_KHR:
      os << *reinterpret_cast<const VkBindImageMemorySwapchainInfoKHR*>(
          pStruct);
      break;
    case VK_STRUCTURE_TYPE_ACQUIRE_NEXT_IMAGE_INFO_KHR:
      os << *reinterpret_cast<const VkAcquireNextImageInfoKHR*>(pStruct);
      break;
    case VK_STRUCTURE_TYPE_DEVICE_GROUP_PRESENT_INFO_KHR:
      os << *reinterpret_cast<const VkDeviceGroupPresentInfoKHR*>(pStruct);
      break;
    case VK_STRUCTURE_TYPE_DEVICE_GROUP_SWAPCHAIN_CREATE_INFO_KHR:
      os << *reinterpret_cast<const VkDeviceGroupSwapchainCreateInfoKHR*>(
          pStruct);
      break;
    case VK_STRUCTURE_TYPE_DISPLAY_NATIVE_HDR_SURFACE_CAPABILITIES_AMD:
      os << *reinterpret_cast<const VkDisplayNativeHdrSurfaceCapabilitiesAMD*>(
          pStruct);
      break;
    case VK_STRUCTURE_TYPE_SWAPCHAIN_DISPLAY_NATIVE_HDR_CREATE_INFO_AMD:
      os << *reinterpret_cast<const VkSwapchainDisplayNativeHdrCreateInfoAMD*>(
          pStruct);
      break;
    case VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SURFACE_INFO_2_KHR:
      os << *reinterpret_cast<const VkPhysicalDeviceSurfaceInfo2KHR*>(pStruct);
      break;
    case VK_STRUCTURE_TYPE_SURFACE_CAPABILITIES_2_KHR:
      os << *reinterpret_cast<const VkSurfaceCapabilities2KHR*>(pStruct);
      break;
    case VK_STRUCTURE_TYPE_SURFACE_FORMAT_2_KHR:
      os << *reinterpret_cast<const VkSurfaceFormat2KHR*>(pStruct);
      break;
    case VK_STRUCTURE_TYPE_DISPLAY_PROPERTIES_2_KHR:
      os << *reinterpret_cast<const VkDisplayProperties2KHR*>(pStruct);
      break;
    case VK_STRUCTURE_TYPE_DISPLAY_PLANE_PROPERTIES_2_KHR:
      os << *reinterpret_cast<const VkDisplayPlaneProperties2KHR*>(pStruct);
      break;
    case VK_STRUCTURE_TYPE_DISPLAY_MODE_PROPERTIES_2_KHR:
      os << *reinterpret_cast<const VkDisplayModeProperties2KHR*>(pStruct);
      break;
    case VK_STRUCTURE_TYPE_DISPLAY_PLANE_INFO_2_KHR:
      os << *reinterpret_cast<const VkDisplayPlaneInfo2KHR*>(pStruct);
      break;
    case VK_STRUCTURE_TYPE_DISPLAY_PLANE_CAPABILITIES_2_KHR:
      os << *reinterpret_cast<const VkDisplayPlaneCapabilities2KHR*>(pStruct);
      break;
    case VK_STRUCTURE_TYPE_SHARED_PRESENT_SURFACE_CAPABILITIES_KHR:
      os << *reinterpret_cast<const VkSharedPresentSurfaceCapabilitiesKHR*>(
          pStruct);
      break;
    case VK_STRUCTURE_TYPE_TEXTURE_LOD_GATHER_FORMAT_PROPERTIES_AMD:
      os << *reinterpret_cast<const VkTextureLODGatherFormatPropertiesAMD*>(
          pStruct);
      break;
    case VK_STRUCTURE_TYPE_SAMPLE_LOCATIONS_INFO_EXT:
      os << *reinterpret_cast<const VkSampleLocationsInfoEXT*>(pStruct);
      break;
    case VK_STRUCTURE_TYPE_RENDER_PASS_SAMPLE_LOCATIONS_BEGIN_INFO_EXT:
      os << *reinterpret_cast<const VkRenderPassSampleLocationsBeginInfoEXT*>(
          pStruct);
      break;
    case VK_STRUCTURE_TYPE_PIPELINE_SAMPLE_LOCATIONS_STATE_CREATE_INFO_EXT:
      os << *reinterpret_cast<
          const VkPipelineSampleLocationsStateCreateInfoEXT*>(pStruct);
      break;
    case VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SAMPLE_LOCATIONS_PROPERTIES_EXT:
      os << *reinterpret_cast<
          const VkPhysicalDeviceSampleLocationsPropertiesEXT*>(pStruct);
      break;
    case VK_STRUCTURE_TYPE_MULTISAMPLE_PROPERTIES_EXT:
      os << *reinterpret_cast<const VkMultisamplePropertiesEXT*>(pStruct);
      break;
    case VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_MULTI_DRAW_FEATURES_EXT:
      os << *reinterpret_cast<const VkPhysicalDeviceMultiDrawFeaturesEXT*>(
          pStruct);
      break;
    case VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_INLINE_UNIFORM_BLOCK_FEATURES_EXT:
      os << *reinterpret_cast<
          const VkPhysicalDeviceInlineUniformBlockFeaturesEXT*>(pStruct);
      break;
    case VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_INLINE_UNIFORM_BLOCK_PROPERTIES_EXT:
      os << *reinterpret_cast<
          const VkPhysicalDeviceInlineUniformBlockPropertiesEXT*>(pStruct);
      break;
    case VK_STRUCTURE_TYPE_WRITE_DESCRIPTOR_SET_INLINE_UNIFORM_BLOCK_EXT:
      os << *reinterpret_cast<const VkWriteDescriptorSetInlineUniformBlockEXT*>(
          pStruct);
      break;
    case VK_STRUCTURE_TYPE_DESCRIPTOR_POOL_INLINE_UNIFORM_BLOCK_CREATE_INFO_EXT:
      os << *reinterpret_cast<
          const VkDescriptorPoolInlineUniformBlockCreateInfoEXT*>(pStruct);
      break;
    case VK_STRUCTURE_TYPE_DEVICE_QUEUE_GLOBAL_PRIORITY_CREATE_INFO_EXT:
      os << *reinterpret_cast<const VkDeviceQueueGlobalPriorityCreateInfoEXT*>(
          pStruct);
      break;
    case VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_GLOBAL_PRIORITY_QUERY_FEATURES_EXT:
      os << *reinterpret_cast<
          const VkPhysicalDeviceGlobalPriorityQueryFeaturesEXT*>(pStruct);
      break;
    case VK_STRUCTURE_TYPE_QUEUE_FAMILY_GLOBAL_PRIORITY_PROPERTIES_EXT:
      os << *reinterpret_cast<const VkQueueFamilyGlobalPriorityPropertiesEXT*>(
          pStruct);
      break;
    case VK_STRUCTURE_TYPE_DEBUG_UTILS_OBJECT_NAME_INFO_EXT:
      os << *reinterpret_cast<const VkDebugUtilsObjectNameInfoEXT*>(pStruct);
      break;
    case VK_STRUCTURE_TYPE_DEBUG_UTILS_OBJECT_TAG_INFO_EXT:
      os << *reinterpret_cast<const VkDebugUtilsObjectTagInfoEXT*>(pStruct);
      break;
    case VK_STRUCTURE_TYPE_DEBUG_UTILS_LABEL_EXT:
      os << *reinterpret_cast<const VkDebugUtilsLabelEXT*>(pStruct);
      break;
    case VK_STRUCTURE_TYPE_DEBUG_UTILS_MESSENGER_CREATE_INFO_EXT:
      os << *reinterpret_cast<const VkDebugUtilsMessengerCreateInfoEXT*>(
          pStruct);
      break;
    case VK_STRUCTURE_TYPE_DEBUG_UTILS_MESSENGER_CALLBACK_DATA_EXT:
      os << *reinterpret_cast<const VkDebugUtilsMessengerCallbackDataEXT*>(
          pStruct);
      break;
    case VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_DEVICE_MEMORY_REPORT_FEATURES_EXT:
      os << *reinterpret_cast<
          const VkPhysicalDeviceDeviceMemoryReportFeaturesEXT*>(pStruct);
      break;
    case VK_STRUCTURE_TYPE_DEVICE_DEVICE_MEMORY_REPORT_CREATE_INFO_EXT:
      os << *reinterpret_cast<const VkDeviceDeviceMemoryReportCreateInfoEXT*>(
          pStruct);
      break;
    case VK_STRUCTURE_TYPE_DEVICE_MEMORY_REPORT_CALLBACK_DATA_EXT:
      os << *reinterpret_cast<const VkDeviceMemoryReportCallbackDataEXT*>(
          pStruct);
      break;
    case VK_STRUCTURE_TYPE_IMPORT_MEMORY_HOST_POINTER_INFO_EXT:
      os << *reinterpret_cast<const VkImportMemoryHostPointerInfoEXT*>(pStruct);
      break;
    case VK_STRUCTURE_TYPE_MEMORY_HOST_POINTER_PROPERTIES_EXT:
      os << *reinterpret_cast<const VkMemoryHostPointerPropertiesEXT*>(pStruct);
      break;
    case VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_EXTERNAL_MEMORY_HOST_PROPERTIES_EXT:
      os << *reinterpret_cast<
          const VkPhysicalDeviceExternalMemoryHostPropertiesEXT*>(pStruct);
      break;
    case VK_STRUCTURE_TYPE_CALIBRATED_TIMESTAMP_INFO_EXT:
      os << *reinterpret_cast<const VkCalibratedTimestampInfoEXT*>(pStruct);
      break;
    case VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SHADER_CORE_PROPERTIES_AMD:
      os << *reinterpret_cast<const VkPhysicalDeviceShaderCorePropertiesAMD*>(
          pStruct);
      break;
    case VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SHADER_CORE_PROPERTIES_2_AMD:
      os << *reinterpret_cast<const VkPhysicalDeviceShaderCoreProperties2AMD*>(
          pStruct);
      break;
    case VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_PCI_BUS_INFO_PROPERTIES_EXT:
      os << *reinterpret_cast<const VkPhysicalDevicePCIBusInfoPropertiesEXT*>(
          pStruct);
      break;
    case VK_STRUCTURE_TYPE_RAY_TRACING_SHADER_GROUP_CREATE_INFO_KHR:
      os << *reinterpret_cast<const VkRayTracingShaderGroupCreateInfoKHR*>(
          pStruct);
      break;
    case VK_STRUCTURE_TYPE_RAY_TRACING_PIPELINE_CREATE_INFO_KHR:
      os << *reinterpret_cast<const VkRayTracingPipelineCreateInfoKHR*>(
          pStruct);
      break;
    case VK_STRUCTURE_TYPE_WRITE_DESCRIPTOR_SET_ACCELERATION_STRUCTURE_KHR:
      os << *reinterpret_cast<
          const VkWriteDescriptorSetAccelerationStructureKHR*>(pStruct);
      break;
    case VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_ACCELERATION_STRUCTURE_FEATURES_KHR:
      os << *reinterpret_cast<
          const VkPhysicalDeviceAccelerationStructureFeaturesKHR*>(pStruct);
      break;
    case VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_RAY_TRACING_PIPELINE_FEATURES_KHR:
      os << *reinterpret_cast<
          const VkPhysicalDeviceRayTracingPipelineFeaturesKHR*>(pStruct);
      break;
    case VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_RAY_QUERY_FEATURES_KHR:
      os << *reinterpret_cast<const VkPhysicalDeviceRayQueryFeaturesKHR*>(
          pStruct);
      break;
    case VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_ACCELERATION_STRUCTURE_PROPERTIES_KHR:
      os << *reinterpret_cast<
          const VkPhysicalDeviceAccelerationStructurePropertiesKHR*>(pStruct);
      break;
    case VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_RAY_TRACING_PIPELINE_PROPERTIES_KHR:
      os << *reinterpret_cast<
          const VkPhysicalDeviceRayTracingPipelinePropertiesKHR*>(pStruct);
      break;
    case VK_STRUCTURE_TYPE_DRM_FORMAT_MODIFIER_PROPERTIES_LIST_EXT:
      os << *reinterpret_cast<const VkDrmFormatModifierPropertiesListEXT*>(
          pStruct);
      break;
    case VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_IMAGE_DRM_FORMAT_MODIFIER_INFO_EXT:
      os << *reinterpret_cast<
          const VkPhysicalDeviceImageDrmFormatModifierInfoEXT*>(pStruct);
      break;
    case VK_STRUCTURE_TYPE_IMAGE_DRM_FORMAT_MODIFIER_LIST_CREATE_INFO_EXT:
      os << *reinterpret_cast<const VkImageDrmFormatModifierListCreateInfoEXT*>(
          pStruct);
      break;
    case VK_STRUCTURE_TYPE_IMAGE_DRM_FORMAT_MODIFIER_EXPLICIT_CREATE_INFO_EXT:
      os << *reinterpret_cast<
          const VkImageDrmFormatModifierExplicitCreateInfoEXT*>(pStruct);
      break;
    case VK_STRUCTURE_TYPE_IMAGE_DRM_FORMAT_MODIFIER_PROPERTIES_EXT:
      os << *reinterpret_cast<const VkImageDrmFormatModifierPropertiesEXT*>(
          pStruct);
      break;
    case VK_STRUCTURE_TYPE_DEVICE_MEMORY_OVERALLOCATION_CREATE_INFO_AMD:
      os << *reinterpret_cast<const VkDeviceMemoryOverallocationCreateInfoAMD*>(
          pStruct);
      break;
    case VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_FRAGMENT_DENSITY_MAP_FEATURES_EXT:
      os << *reinterpret_cast<
          const VkPhysicalDeviceFragmentDensityMapFeaturesEXT*>(pStruct);
      break;
    case VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_FRAGMENT_DENSITY_MAP_2_FEATURES_EXT:
      os << *reinterpret_cast<
          const VkPhysicalDeviceFragmentDensityMap2FeaturesEXT*>(pStruct);
      break;
    case VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_FRAGMENT_DENSITY_MAP_PROPERTIES_EXT:
      os << *reinterpret_cast<
          const VkPhysicalDeviceFragmentDensityMapPropertiesEXT*>(pStruct);
      break;
    case VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_FRAGMENT_DENSITY_MAP_2_PROPERTIES_EXT:
      os << *reinterpret_cast<
          const VkPhysicalDeviceFragmentDensityMap2PropertiesEXT*>(pStruct);
      break;
    case VK_STRUCTURE_TYPE_RENDER_PASS_FRAGMENT_DENSITY_MAP_CREATE_INFO_EXT:
      os << *reinterpret_cast<
          const VkRenderPassFragmentDensityMapCreateInfoEXT*>(pStruct);
      break;
    case VK_STRUCTURE_TYPE_SURFACE_PROTECTED_CAPABILITIES_KHR:
      os << *reinterpret_cast<const VkSurfaceProtectedCapabilitiesKHR*>(
          pStruct);
      break;
    case VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_DEPTH_CLIP_ENABLE_FEATURES_EXT:
      os << *reinterpret_cast<
          const VkPhysicalDeviceDepthClipEnableFeaturesEXT*>(pStruct);
      break;
    case VK_STRUCTURE_TYPE_PIPELINE_RASTERIZATION_DEPTH_CLIP_STATE_CREATE_INFO_EXT:
      os << *reinterpret_cast<
          const VkPipelineRasterizationDepthClipStateCreateInfoEXT*>(pStruct);
      break;
    case VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_MEMORY_BUDGET_PROPERTIES_EXT:
      os << *reinterpret_cast<const VkPhysicalDeviceMemoryBudgetPropertiesEXT*>(
          pStruct);
      break;
    case VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_MEMORY_PRIORITY_FEATURES_EXT:
      os << *reinterpret_cast<const VkPhysicalDeviceMemoryPriorityFeaturesEXT*>(
          pStruct);
      break;
    case VK_STRUCTURE_TYPE_MEMORY_PRIORITY_ALLOCATE_INFO_EXT:
      os << *reinterpret_cast<const VkMemoryPriorityAllocateInfoEXT*>(pStruct);
      break;
    case VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_YCBCR_IMAGE_ARRAYS_FEATURES_EXT:
      os << *reinterpret_cast<
          const VkPhysicalDeviceYcbcrImageArraysFeaturesEXT*>(pStruct);
      break;
    case VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_PERFORMANCE_QUERY_FEATURES_KHR:
      os << *reinterpret_cast<
          const VkPhysicalDevicePerformanceQueryFeaturesKHR*>(pStruct);
      break;
    case VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_PERFORMANCE_QUERY_PROPERTIES_KHR:
      os << *reinterpret_cast<
          const VkPhysicalDevicePerformanceQueryPropertiesKHR*>(pStruct);
      break;
    case VK_STRUCTURE_TYPE_PERFORMANCE_COUNTER_KHR:
      os << *reinterpret_cast<const VkPerformanceCounterKHR*>(pStruct);
      break;
    case VK_STRUCTURE_TYPE_PERFORMANCE_COUNTER_DESCRIPTION_KHR:
      os << *reinterpret_cast<const VkPerformanceCounterDescriptionKHR*>(
          pStruct);
      break;
    case VK_STRUCTURE_TYPE_QUERY_POOL_PERFORMANCE_CREATE_INFO_KHR:
      os << *reinterpret_cast<const VkQueryPoolPerformanceCreateInfoKHR*>(
          pStruct);
      break;
    case VK_STRUCTURE_TYPE_ACQUIRE_PROFILING_LOCK_INFO_KHR:
      os << *reinterpret_cast<const VkAcquireProfilingLockInfoKHR*>(pStruct);
      break;
    case VK_STRUCTURE_TYPE_PERFORMANCE_QUERY_SUBMIT_INFO_KHR:
      os << *reinterpret_cast<const VkPerformanceQuerySubmitInfoKHR*>(pStruct);
      break;
    case VK_STRUCTURE_TYPE_HEADLESS_SURFACE_CREATE_INFO_EXT:
      os << *reinterpret_cast<const VkHeadlessSurfaceCreateInfoEXT*>(pStruct);
      break;
    case VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SHADER_CLOCK_FEATURES_KHR:
      os << *reinterpret_cast<const VkPhysicalDeviceShaderClockFeaturesKHR*>(
          pStruct);
      break;
    case VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_INDEX_TYPE_UINT8_FEATURES_EXT:
      os << *reinterpret_cast<const VkPhysicalDeviceIndexTypeUint8FeaturesEXT*>(
          pStruct);
      break;
    case VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_FRAGMENT_SHADER_INTERLOCK_FEATURES_EXT:
      os << *reinterpret_cast<
          const VkPhysicalDeviceFragmentShaderInterlockFeaturesEXT*>(pStruct);
      break;
    case VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_PIPELINE_EXECUTABLE_PROPERTIES_FEATURES_KHR:
      os << *reinterpret_cast<
          const VkPhysicalDevicePipelineExecutablePropertiesFeaturesKHR*>(
          pStruct);
      break;
    case VK_STRUCTURE_TYPE_PIPELINE_INFO_KHR:
      os << *reinterpret_cast<const VkPipelineInfoKHR*>(pStruct);
      break;
    case VK_STRUCTURE_TYPE_PIPELINE_EXECUTABLE_PROPERTIES_KHR:
      os << *reinterpret_cast<const VkPipelineExecutablePropertiesKHR*>(
          pStruct);
      break;
    case VK_STRUCTURE_TYPE_PIPELINE_EXECUTABLE_INFO_KHR:
      os << *reinterpret_cast<const VkPipelineExecutableInfoKHR*>(pStruct);
      break;
    case VK_STRUCTURE_TYPE_PIPELINE_EXECUTABLE_STATISTIC_KHR:
      os << *reinterpret_cast<const VkPipelineExecutableStatisticKHR*>(pStruct);
      break;
    case VK_STRUCTURE_TYPE_PIPELINE_EXECUTABLE_INTERNAL_REPRESENTATION_KHR:
      os << *reinterpret_cast<
          const VkPipelineExecutableInternalRepresentationKHR*>(pStruct);
      break;
    case VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SHADER_DEMOTE_TO_HELPER_INVOCATION_FEATURES_EXT:
      os << *reinterpret_cast<
          const VkPhysicalDeviceShaderDemoteToHelperInvocationFeaturesEXT*>(
          pStruct);
      break;
    case VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_TEXEL_BUFFER_ALIGNMENT_FEATURES_EXT:
      os << *reinterpret_cast<
          const VkPhysicalDeviceTexelBufferAlignmentFeaturesEXT*>(pStruct);
      break;
    case VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_TEXEL_BUFFER_ALIGNMENT_PROPERTIES_EXT:
      os << *reinterpret_cast<
          const VkPhysicalDeviceTexelBufferAlignmentPropertiesEXT*>(pStruct);
      break;
    case VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SUBGROUP_SIZE_CONTROL_FEATURES_EXT:
      os << *reinterpret_cast<
          const VkPhysicalDeviceSubgroupSizeControlFeaturesEXT*>(pStruct);
      break;
    case VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SUBGROUP_SIZE_CONTROL_PROPERTIES_EXT:
      os << *reinterpret_cast<
          const VkPhysicalDeviceSubgroupSizeControlPropertiesEXT*>(pStruct);
      break;
    case VK_STRUCTURE_TYPE_PIPELINE_SHADER_STAGE_REQUIRED_SUBGROUP_SIZE_CREATE_INFO_EXT:
      os << *reinterpret_cast<
          const VkPipelineShaderStageRequiredSubgroupSizeCreateInfoEXT*>(
          pStruct);
      break;
    case VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_LINE_RASTERIZATION_FEATURES_EXT:
      os << *reinterpret_cast<
          const VkPhysicalDeviceLineRasterizationFeaturesEXT*>(pStruct);
      break;
    case VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_LINE_RASTERIZATION_PROPERTIES_EXT:
      os << *reinterpret_cast<
          const VkPhysicalDeviceLineRasterizationPropertiesEXT*>(pStruct);
      break;
    case VK_STRUCTURE_TYPE_PIPELINE_RASTERIZATION_LINE_STATE_CREATE_INFO_EXT:
      os << *reinterpret_cast<
          const VkPipelineRasterizationLineStateCreateInfoEXT*>(pStruct);
      break;
    case VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_PIPELINE_CREATION_CACHE_CONTROL_FEATURES_EXT:
      os << *reinterpret_cast<
          const VkPhysicalDevicePipelineCreationCacheControlFeaturesEXT*>(
          pStruct);
      break;
    case VK_STRUCTURE_TYPE_PIPELINE_COMPILER_CONTROL_CREATE_INFO_AMD:
      os << *reinterpret_cast<const VkPipelineCompilerControlCreateInfoAMD*>(
          pStruct);
      break;
    case VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_COHERENT_MEMORY_FEATURES_AMD:
      os << *reinterpret_cast<const VkPhysicalDeviceCoherentMemoryFeaturesAMD*>(
          pStruct);
      break;
    case VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_TOOL_PROPERTIES_EXT:
      os << *reinterpret_cast<const VkPhysicalDeviceToolPropertiesEXT*>(
          pStruct);
      break;
    case VK_STRUCTURE_TYPE_SAMPLER_CUSTOM_BORDER_COLOR_CREATE_INFO_EXT:
      os << *reinterpret_cast<const VkSamplerCustomBorderColorCreateInfoEXT*>(
          pStruct);
      break;
    case VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_CUSTOM_BORDER_COLOR_PROPERTIES_EXT:
      os << *reinterpret_cast<
          const VkPhysicalDeviceCustomBorderColorPropertiesEXT*>(pStruct);
      break;
    case VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_CUSTOM_BORDER_COLOR_FEATURES_EXT:
      os << *reinterpret_cast<
          const VkPhysicalDeviceCustomBorderColorFeaturesEXT*>(pStruct);
      break;
    case VK_STRUCTURE_TYPE_ACCELERATION_STRUCTURE_GEOMETRY_TRIANGLES_DATA_KHR:
      os << *reinterpret_cast<
          const VkAccelerationStructureGeometryTrianglesDataKHR*>(pStruct);
      break;
    case VK_STRUCTURE_TYPE_ACCELERATION_STRUCTURE_GEOMETRY_AABBS_DATA_KHR:
      os << *reinterpret_cast<
          const VkAccelerationStructureGeometryAabbsDataKHR*>(pStruct);
      break;
    case VK_STRUCTURE_TYPE_ACCELERATION_STRUCTURE_GEOMETRY_INSTANCES_DATA_KHR:
      os << *reinterpret_cast<
          const VkAccelerationStructureGeometryInstancesDataKHR*>(pStruct);
      break;
    case VK_STRUCTURE_TYPE_ACCELERATION_STRUCTURE_GEOMETRY_KHR:
      os << *reinterpret_cast<const VkAccelerationStructureGeometryKHR*>(
          pStruct);
      break;
    case VK_STRUCTURE_TYPE_ACCELERATION_STRUCTURE_BUILD_GEOMETRY_INFO_KHR:
      os << *reinterpret_cast<
          const VkAccelerationStructureBuildGeometryInfoKHR*>(pStruct);
      break;
    case VK_STRUCTURE_TYPE_ACCELERATION_STRUCTURE_CREATE_INFO_KHR:
      os << *reinterpret_cast<const VkAccelerationStructureCreateInfoKHR*>(
          pStruct);
      break;
    case VK_STRUCTURE_TYPE_ACCELERATION_STRUCTURE_DEVICE_ADDRESS_INFO_KHR:
      os << *reinterpret_cast<
          const VkAccelerationStructureDeviceAddressInfoKHR*>(pStruct);
      break;
    case VK_STRUCTURE_TYPE_ACCELERATION_STRUCTURE_VERSION_INFO_KHR:
      os << *reinterpret_cast<const VkAccelerationStructureVersionInfoKHR*>(
          pStruct);
      break;
    case VK_STRUCTURE_TYPE_COPY_ACCELERATION_STRUCTURE_INFO_KHR:
      os << *reinterpret_cast<const VkCopyAccelerationStructureInfoKHR*>(
          pStruct);
      break;
    case VK_STRUCTURE_TYPE_COPY_ACCELERATION_STRUCTURE_TO_MEMORY_INFO_KHR:
      os << *reinterpret_cast<
          const VkCopyAccelerationStructureToMemoryInfoKHR*>(pStruct);
      break;
    case VK_STRUCTURE_TYPE_COPY_MEMORY_TO_ACCELERATION_STRUCTURE_INFO_KHR:
      os << *reinterpret_cast<
          const VkCopyMemoryToAccelerationStructureInfoKHR*>(pStruct);
      break;
    case VK_STRUCTURE_TYPE_RAY_TRACING_PIPELINE_INTERFACE_CREATE_INFO_KHR:
      os << *reinterpret_cast<
          const VkRayTracingPipelineInterfaceCreateInfoKHR*>(pStruct);
      break;
    case VK_STRUCTURE_TYPE_PIPELINE_LIBRARY_CREATE_INFO_KHR:
      os << *reinterpret_cast<const VkPipelineLibraryCreateInfoKHR*>(pStruct);
      break;
    case VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_EXTENDED_DYNAMIC_STATE_FEATURES_EXT:
      os << *reinterpret_cast<
          const VkPhysicalDeviceExtendedDynamicStateFeaturesEXT*>(pStruct);
      break;
    case VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_EXTENDED_DYNAMIC_STATE_2_FEATURES_EXT:
      os << *reinterpret_cast<
          const VkPhysicalDeviceExtendedDynamicState2FeaturesEXT*>(pStruct);
      break;
    case VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_ZERO_INITIALIZE_WORKGROUP_MEMORY_FEATURES_KHR:
      os << *reinterpret_cast<
          const VkPhysicalDeviceZeroInitializeWorkgroupMemoryFeaturesKHR*>(
          pStruct);
      break;
    case VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SHADER_SUBGROUP_UNIFORM_CONTROL_FLOW_FEATURES_KHR:
      os << *reinterpret_cast<
          const VkPhysicalDeviceShaderSubgroupUniformControlFlowFeaturesKHR*>(
          pStruct);
      break;
    case VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_ROBUSTNESS_2_FEATURES_EXT:
      os << *reinterpret_cast<const VkPhysicalDeviceRobustness2FeaturesEXT*>(
          pStruct);
      break;
    case VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_ROBUSTNESS_2_PROPERTIES_EXT:
      os << *reinterpret_cast<const VkPhysicalDeviceRobustness2PropertiesEXT*>(
          pStruct);
      break;
    case VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_IMAGE_ROBUSTNESS_FEATURES_EXT:
      os << *reinterpret_cast<
          const VkPhysicalDeviceImageRobustnessFeaturesEXT*>(pStruct);
      break;
    case VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_WORKGROUP_MEMORY_EXPLICIT_LAYOUT_FEATURES_KHR:
      os << *reinterpret_cast<
          const VkPhysicalDeviceWorkgroupMemoryExplicitLayoutFeaturesKHR*>(
          pStruct);
      break;
    case VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_4444_FORMATS_FEATURES_EXT:
      os << *reinterpret_cast<const VkPhysicalDevice4444FormatsFeaturesEXT*>(
          pStruct);
      break;
    case VK_STRUCTURE_TYPE_BUFFER_COPY_2_KHR:
      os << *reinterpret_cast<const VkBufferCopy2KHR*>(pStruct);
      break;
    case VK_STRUCTURE_TYPE_IMAGE_COPY_2_KHR:
      os << *reinterpret_cast<const VkImageCopy2KHR*>(pStruct);
      break;
    case VK_STRUCTURE_TYPE_IMAGE_BLIT_2_KHR:
      os << *reinterpret_cast<const VkImageBlit2KHR*>(pStruct);
      break;
    case VK_STRUCTURE_TYPE_BUFFER_IMAGE_COPY_2_KHR:
      os << *reinterpret_cast<const VkBufferImageCopy2KHR*>(pStruct);
      break;
    case VK_STRUCTURE_TYPE_IMAGE_RESOLVE_2_KHR:
      os << *reinterpret_cast<const VkImageResolve2KHR*>(pStruct);
      break;
    case VK_STRUCTURE_TYPE_COPY_BUFFER_INFO_2_KHR:
      os << *reinterpret_cast<const VkCopyBufferInfo2KHR*>(pStruct);
      break;
    case VK_STRUCTURE_TYPE_COPY_IMAGE_INFO_2_KHR:
      os << *reinterpret_cast<const VkCopyImageInfo2KHR*>(pStruct);
      break;
    case VK_STRUCTURE_TYPE_BLIT_IMAGE_INFO_2_KHR:
      os << *reinterpret_cast<const VkBlitImageInfo2KHR*>(pStruct);
      break;
    case VK_STRUCTURE_TYPE_COPY_BUFFER_TO_IMAGE_INFO_2_KHR:
      os << *reinterpret_cast<const VkCopyBufferToImageInfo2KHR*>(pStruct);
      break;
    case VK_STRUCTURE_TYPE_COPY_IMAGE_TO_BUFFER_INFO_2_KHR:
      os << *reinterpret_cast<const VkCopyImageToBufferInfo2KHR*>(pStruct);
      break;
    case VK_STRUCTURE_TYPE_RESOLVE_IMAGE_INFO_2_KHR:
      os << *reinterpret_cast<const VkResolveImageInfo2KHR*>(pStruct);
      break;
    case VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SHADER_IMAGE_ATOMIC_INT64_FEATURES_EXT:
      os << *reinterpret_cast<
          const VkPhysicalDeviceShaderImageAtomicInt64FeaturesEXT*>(pStruct);
      break;
    case VK_STRUCTURE_TYPE_FRAGMENT_SHADING_RATE_ATTACHMENT_INFO_KHR:
      os << *reinterpret_cast<const VkFragmentShadingRateAttachmentInfoKHR*>(
          pStruct);
      break;
    case VK_STRUCTURE_TYPE_PIPELINE_FRAGMENT_SHADING_RATE_STATE_CREATE_INFO_KHR:
      os << *reinterpret_cast<
          const VkPipelineFragmentShadingRateStateCreateInfoKHR*>(pStruct);
      break;
    case VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_FRAGMENT_SHADING_RATE_FEATURES_KHR:
      os << *reinterpret_cast<
          const VkPhysicalDeviceFragmentShadingRateFeaturesKHR*>(pStruct);
      break;
    case VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_FRAGMENT_SHADING_RATE_PROPERTIES_KHR:
      os << *reinterpret_cast<
          const VkPhysicalDeviceFragmentShadingRatePropertiesKHR*>(pStruct);
      break;
    case VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_FRAGMENT_SHADING_RATE_KHR:
      os << *reinterpret_cast<const VkPhysicalDeviceFragmentShadingRateKHR*>(
          pStruct);
      break;
    case VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SHADER_TERMINATE_INVOCATION_FEATURES_KHR:
      os << *reinterpret_cast<
          const VkPhysicalDeviceShaderTerminateInvocationFeaturesKHR*>(pStruct);
      break;
    case VK_STRUCTURE_TYPE_ACCELERATION_STRUCTURE_BUILD_SIZES_INFO_KHR:
      os << *reinterpret_cast<const VkAccelerationStructureBuildSizesInfoKHR*>(
          pStruct);
      break;
    case VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_VERTEX_INPUT_DYNAMIC_STATE_FEATURES_EXT:
      os << *reinterpret_cast<
          const VkPhysicalDeviceVertexInputDynamicStateFeaturesEXT*>(pStruct);
      break;
    case VK_STRUCTURE_TYPE_VERTEX_INPUT_BINDING_DESCRIPTION_2_EXT:
      os << *reinterpret_cast<const VkVertexInputBindingDescription2EXT*>(
          pStruct);
      break;
    case VK_STRUCTURE_TYPE_VERTEX_INPUT_ATTRIBUTE_DESCRIPTION_2_EXT:
      os << *reinterpret_cast<const VkVertexInputAttributeDescription2EXT*>(
          pStruct);
      break;
    case VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_COLOR_WRITE_ENABLE_FEATURES_EXT:
      os << *reinterpret_cast<
          const VkPhysicalDeviceColorWriteEnableFeaturesEXT*>(pStruct);
      break;
    case VK_STRUCTURE_TYPE_PIPELINE_COLOR_WRITE_CREATE_INFO_EXT:
      os << *reinterpret_cast<const VkPipelineColorWriteCreateInfoEXT*>(
          pStruct);
      break;
    case VK_STRUCTURE_TYPE_MEMORY_BARRIER_2_KHR:
      os << *reinterpret_cast<const VkMemoryBarrier2KHR*>(pStruct);
      break;
    case VK_STRUCTURE_TYPE_IMAGE_MEMORY_BARRIER_2_KHR:
      os << *reinterpret_cast<const VkImageMemoryBarrier2KHR*>(pStruct);
      break;
    case VK_STRUCTURE_TYPE_BUFFER_MEMORY_BARRIER_2_KHR:
      os << *reinterpret_cast<const VkBufferMemoryBarrier2KHR*>(pStruct);
      break;
    case VK_STRUCTURE_TYPE_DEPENDENCY_INFO_KHR:
      os << *reinterpret_cast<const VkDependencyInfoKHR*>(pStruct);
      break;
    case VK_STRUCTURE_TYPE_SEMAPHORE_SUBMIT_INFO_KHR:
      os << *reinterpret_cast<const VkSemaphoreSubmitInfoKHR*>(pStruct);
      break;
    case VK_STRUCTURE_TYPE_COMMAND_BUFFER_SUBMIT_INFO_KHR:
      os << *reinterpret_cast<const VkCommandBufferSubmitInfoKHR*>(pStruct);
      break;
    case VK_STRUCTURE_TYPE_SUBMIT_INFO_2_KHR:
      os << *reinterpret_cast<const VkSubmitInfo2KHR*>(pStruct);
      break;
    case VK_STRUCTURE_TYPE_QUEUE_FAMILY_CHECKPOINT_PROPERTIES_2_NV:
      os << *reinterpret_cast<const VkQueueFamilyCheckpointProperties2NV*>(
          pStruct);
      break;
    case VK_STRUCTURE_TYPE_CHECKPOINT_DATA_2_NV:
      os << *reinterpret_cast<const VkCheckpointData2NV*>(pStruct);
      break;
    case VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SYNCHRONIZATION_2_FEATURES_KHR:
      os << *reinterpret_cast<
          const VkPhysicalDeviceSynchronization2FeaturesKHR*>(pStruct);
      break;
    case VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_YCBCR_2_PLANE_444_FORMATS_FEATURES_EXT:
      os << *reinterpret_cast<
          const VkPhysicalDeviceYcbcr2Plane444FormatsFeaturesEXT*>(pStruct);
      break;
    case VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_PROVOKING_VERTEX_FEATURES_EXT:
      os << *reinterpret_cast<
          const VkPhysicalDeviceProvokingVertexFeaturesEXT*>(pStruct);
      break;
    case VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_PROVOKING_VERTEX_PROPERTIES_EXT:
      os << *reinterpret_cast<
          const VkPhysicalDeviceProvokingVertexPropertiesEXT*>(pStruct);
      break;
    case VK_STRUCTURE_TYPE_PIPELINE_RASTERIZATION_PROVOKING_VERTEX_STATE_CREATE_INFO_EXT:
      os << *reinterpret_cast<
          const VkPipelineRasterizationProvokingVertexStateCreateInfoEXT*>(
          pStruct);
      break;
    case VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_DRM_PROPERTIES_EXT:
      os << *reinterpret_cast<const VkPhysicalDeviceDrmPropertiesEXT*>(pStruct);
      break;
      os << *reinterpret_cast<const VkBaseOutStructure*>(pStruct);
      break;
      os << *reinterpret_cast<const VkBaseInStructure*>(pStruct);
      break;
    case VK_STRUCTURE_TYPE_APPLICATION_INFO:
      os << *reinterpret_cast<const VkApplicationInfo*>(pStruct);
      break;
    case VK_STRUCTURE_TYPE_DEVICE_QUEUE_CREATE_INFO:
      os << *reinterpret_cast<const VkDeviceQueueCreateInfo*>(pStruct);
      break;
    case VK_STRUCTURE_TYPE_DEVICE_CREATE_INFO:
      os << *reinterpret_cast<const VkDeviceCreateInfo*>(pStruct);
      break;
    case VK_STRUCTURE_TYPE_INSTANCE_CREATE_INFO:
      os << *reinterpret_cast<const VkInstanceCreateInfo*>(pStruct);
      break;
    case VK_STRUCTURE_TYPE_MEMORY_ALLOCATE_INFO:
      os << *reinterpret_cast<const VkMemoryAllocateInfo*>(pStruct);
      break;
    case VK_STRUCTURE_TYPE_MAPPED_MEMORY_RANGE:
      os << *reinterpret_cast<const VkMappedMemoryRange*>(pStruct);
      break;
    case VK_STRUCTURE_TYPE_WRITE_DESCRIPTOR_SET:
      os << *reinterpret_cast<const VkWriteDescriptorSet*>(pStruct);
      break;
    case VK_STRUCTURE_TYPE_COPY_DESCRIPTOR_SET:
      os << *reinterpret_cast<const VkCopyDescriptorSet*>(pStruct);
      break;
    case VK_STRUCTURE_TYPE_BUFFER_CREATE_INFO:
      os << *reinterpret_cast<const VkBufferCreateInfo*>(pStruct);
      break;
    case VK_STRUCTURE_TYPE_BUFFER_VIEW_CREATE_INFO:
      os << *reinterpret_cast<const VkBufferViewCreateInfo*>(pStruct);
      break;
    case VK_STRUCTURE_TYPE_MEMORY_BARRIER:
      os << *reinterpret_cast<const VkMemoryBarrier*>(pStruct);
      break;
    case VK_STRUCTURE_TYPE_BUFFER_MEMORY_BARRIER:
      os << *reinterpret_cast<const VkBufferMemoryBarrier*>(pStruct);
      break;
    case VK_STRUCTURE_TYPE_IMAGE_MEMORY_BARRIER:
      os << *reinterpret_cast<const VkImageMemoryBarrier*>(pStruct);
      break;
    case VK_STRUCTURE_TYPE_IMAGE_CREATE_INFO:
      os << *reinterpret_cast<const VkImageCreateInfo*>(pStruct);
      break;
    case VK_STRUCTURE_TYPE_IMAGE_VIEW_CREATE_INFO:
      os << *reinterpret_cast<const VkImageViewCreateInfo*>(pStruct);
      break;
    case VK_STRUCTURE_TYPE_BIND_SPARSE_INFO:
      os << *reinterpret_cast<const VkBindSparseInfo*>(pStruct);
      break;
    case VK_STRUCTURE_TYPE_SHADER_MODULE_CREATE_INFO:
      os << *reinterpret_cast<const VkShaderModuleCreateInfo*>(pStruct);
      break;
    case VK_STRUCTURE_TYPE_DESCRIPTOR_SET_LAYOUT_CREATE_INFO:
      os << *reinterpret_cast<const VkDescriptorSetLayoutCreateInfo*>(pStruct);
      break;
    case VK_STRUCTURE_TYPE_DESCRIPTOR_POOL_CREATE_INFO:
      os << *reinterpret_cast<const VkDescriptorPoolCreateInfo*>(pStruct);
      break;
    case VK_STRUCTURE_TYPE_DESCRIPTOR_SET_ALLOCATE_INFO:
      os << *reinterpret_cast<const VkDescriptorSetAllocateInfo*>(pStruct);
      break;
    case VK_STRUCTURE_TYPE_PIPELINE_SHADER_STAGE_CREATE_INFO:
      os << *reinterpret_cast<const VkPipelineShaderStageCreateInfo*>(pStruct);
      break;
    case VK_STRUCTURE_TYPE_COMPUTE_PIPELINE_CREATE_INFO:
      os << *reinterpret_cast<const VkComputePipelineCreateInfo*>(pStruct);
      break;
    case VK_STRUCTURE_TYPE_PIPELINE_VERTEX_INPUT_STATE_CREATE_INFO:
      os << *reinterpret_cast<const VkPipelineVertexInputStateCreateInfo*>(
          pStruct);
      break;
    case VK_STRUCTURE_TYPE_PIPELINE_INPUT_ASSEMBLY_STATE_CREATE_INFO:
      os << *reinterpret_cast<const VkPipelineInputAssemblyStateCreateInfo*>(
          pStruct);
      break;
    case VK_STRUCTURE_TYPE_PIPELINE_TESSELLATION_STATE_CREATE_INFO:
      os << *reinterpret_cast<const VkPipelineTessellationStateCreateInfo*>(
          pStruct);
      break;
    case VK_STRUCTURE_TYPE_PIPELINE_VIEWPORT_STATE_CREATE_INFO:
      os << *reinterpret_cast<const VkPipelineViewportStateCreateInfo*>(
          pStruct);
      break;
    case VK_STRUCTURE_TYPE_PIPELINE_RASTERIZATION_STATE_CREATE_INFO:
      os << *reinterpret_cast<const VkPipelineRasterizationStateCreateInfo*>(
          pStruct);
      break;
    case VK_STRUCTURE_TYPE_PIPELINE_MULTISAMPLE_STATE_CREATE_INFO:
      os << *reinterpret_cast<const VkPipelineMultisampleStateCreateInfo*>(
          pStruct);
      break;
    case VK_STRUCTURE_TYPE_PIPELINE_COLOR_BLEND_STATE_CREATE_INFO:
      os << *reinterpret_cast<const VkPipelineColorBlendStateCreateInfo*>(
          pStruct);
      break;
    case VK_STRUCTURE_TYPE_PIPELINE_DYNAMIC_STATE_CREATE_INFO:
      os << *reinterpret_cast<const VkPipelineDynamicStateCreateInfo*>(pStruct);
      break;
    case VK_STRUCTURE_TYPE_PIPELINE_DEPTH_STENCIL_STATE_CREATE_INFO:
      os << *reinterpret_cast<const VkPipelineDepthStencilStateCreateInfo*>(
          pStruct);
      break;
    case VK_STRUCTURE_TYPE_GRAPHICS_PIPELINE_CREATE_INFO:
      os << *reinterpret_cast<const VkGraphicsPipelineCreateInfo*>(pStruct);
      break;
    case VK_STRUCTURE_TYPE_PIPELINE_CACHE_CREATE_INFO:
      os << *reinterpret_cast<const VkPipelineCacheCreateInfo*>(pStruct);
      break;
    case VK_STRUCTURE_TYPE_PIPELINE_LAYOUT_CREATE_INFO:
      os << *reinterpret_cast<const VkPipelineLayoutCreateInfo*>(pStruct);
      break;
    case VK_STRUCTURE_TYPE_SAMPLER_CREATE_INFO:
      os << *reinterpret_cast<const VkSamplerCreateInfo*>(pStruct);
      break;
    case VK_STRUCTURE_TYPE_COMMAND_POOL_CREATE_INFO:
      os << *reinterpret_cast<const VkCommandPoolCreateInfo*>(pStruct);
      break;
    case VK_STRUCTURE_TYPE_COMMAND_BUFFER_ALLOCATE_INFO:
      os << *reinterpret_cast<const VkCommandBufferAllocateInfo*>(pStruct);
      break;
    case VK_STRUCTURE_TYPE_COMMAND_BUFFER_INHERITANCE_INFO:
      os << *reinterpret_cast<const VkCommandBufferInheritanceInfo*>(pStruct);
      break;
    case VK_STRUCTURE_TYPE_COMMAND_BUFFER_BEGIN_INFO:
      os << *reinterpret_cast<const VkCommandBufferBeginInfo*>(pStruct);
      break;
    case VK_STRUCTURE_TYPE_RENDER_PASS_BEGIN_INFO:
      os << *reinterpret_cast<const VkRenderPassBeginInfo*>(pStruct);
      break;
    case VK_STRUCTURE_TYPE_RENDER_PASS_CREATE_INFO:
      os << *reinterpret_cast<const VkRenderPassCreateInfo*>(pStruct);
      break;
    case VK_STRUCTURE_TYPE_EVENT_CREATE_INFO:
      os << *reinterpret_cast<const VkEventCreateInfo*>(pStruct);
      break;
    case VK_STRUCTURE_TYPE_FENCE_CREATE_INFO:
      os << *reinterpret_cast<const VkFenceCreateInfo*>(pStruct);
      break;
    case VK_STRUCTURE_TYPE_SEMAPHORE_CREATE_INFO:
      os << *reinterpret_cast<const VkSemaphoreCreateInfo*>(pStruct);
      break;
    case VK_STRUCTURE_TYPE_QUERY_POOL_CREATE_INFO:
      os << *reinterpret_cast<const VkQueryPoolCreateInfo*>(pStruct);
      break;
    case VK_STRUCTURE_TYPE_FRAMEBUFFER_CREATE_INFO:
      os << *reinterpret_cast<const VkFramebufferCreateInfo*>(pStruct);
      break;
    case VK_STRUCTURE_TYPE_SUBMIT_INFO:
      os << *reinterpret_cast<const VkSubmitInfo*>(pStruct);
      break;
    case VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_FEATURES_2:
      os << *reinterpret_cast<const VkPhysicalDeviceFeatures2*>(pStruct);
      break;
    case VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_PROPERTIES_2:
      os << *reinterpret_cast<const VkPhysicalDeviceProperties2*>(pStruct);
      break;
    case VK_STRUCTURE_TYPE_FORMAT_PROPERTIES_2:
      os << *reinterpret_cast<const VkFormatProperties2*>(pStruct);
      break;
    case VK_STRUCTURE_TYPE_IMAGE_FORMAT_PROPERTIES_2:
      os << *reinterpret_cast<const VkImageFormatProperties2*>(pStruct);
      break;
    case VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_IMAGE_FORMAT_INFO_2:
      os << *reinterpret_cast<const VkPhysicalDeviceImageFormatInfo2*>(pStruct);
      break;
    case VK_STRUCTURE_TYPE_QUEUE_FAMILY_PROPERTIES_2:
      os << *reinterpret_cast<const VkQueueFamilyProperties2*>(pStruct);
      break;
    case VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_MEMORY_PROPERTIES_2:
      os << *reinterpret_cast<const VkPhysicalDeviceMemoryProperties2*>(
          pStruct);
      break;
    case VK_STRUCTURE_TYPE_SPARSE_IMAGE_FORMAT_PROPERTIES_2:
      os << *reinterpret_cast<const VkSparseImageFormatProperties2*>(pStruct);
      break;
    case VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SPARSE_IMAGE_FORMAT_INFO_2:
      os << *reinterpret_cast<const VkPhysicalDeviceSparseImageFormatInfo2*>(
          pStruct);
      break;
    case VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_DRIVER_PROPERTIES:
      os << *reinterpret_cast<const VkPhysicalDeviceDriverProperties*>(pStruct);
      break;
    case VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_VARIABLE_POINTERS_FEATURES:
      os << *reinterpret_cast<const VkPhysicalDeviceVariablePointersFeatures*>(
          pStruct);
      break;
    case VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_EXTERNAL_IMAGE_FORMAT_INFO:
      os << *reinterpret_cast<const VkPhysicalDeviceExternalImageFormatInfo*>(
          pStruct);
      break;
    case VK_STRUCTURE_TYPE_EXTERNAL_IMAGE_FORMAT_PROPERTIES:
      os << *reinterpret_cast<const VkExternalImageFormatProperties*>(pStruct);
      break;
    case VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_EXTERNAL_BUFFER_INFO:
      os << *reinterpret_cast<const VkPhysicalDeviceExternalBufferInfo*>(
          pStruct);
      break;
    case VK_STRUCTURE_TYPE_EXTERNAL_BUFFER_PROPERTIES:
      os << *reinterpret_cast<const VkExternalBufferProperties*>(pStruct);
      break;
    case VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_ID_PROPERTIES:
      os << *reinterpret_cast<const VkPhysicalDeviceIDProperties*>(pStruct);
      break;
    case VK_STRUCTURE_TYPE_EXTERNAL_MEMORY_IMAGE_CREATE_INFO:
      os << *reinterpret_cast<const VkExternalMemoryImageCreateInfo*>(pStruct);
      break;
    case VK_STRUCTURE_TYPE_EXTERNAL_MEMORY_BUFFER_CREATE_INFO:
      os << *reinterpret_cast<const VkExternalMemoryBufferCreateInfo*>(pStruct);
      break;
    case VK_STRUCTURE_TYPE_EXPORT_MEMORY_ALLOCATE_INFO:
      os << *reinterpret_cast<const VkExportMemoryAllocateInfo*>(pStruct);
      break;
    case VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_EXTERNAL_SEMAPHORE_INFO:
      os << *reinterpret_cast<const VkPhysicalDeviceExternalSemaphoreInfo*>(
          pStruct);
      break;
    case VK_STRUCTURE_TYPE_EXTERNAL_SEMAPHORE_PROPERTIES:
      os << *reinterpret_cast<const VkExternalSemaphoreProperties*>(pStruct);
      break;
    case VK_STRUCTURE_TYPE_EXPORT_SEMAPHORE_CREATE_INFO:
      os << *reinterpret_cast<const VkExportSemaphoreCreateInfo*>(pStruct);
      break;
    case VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_EXTERNAL_FENCE_INFO:
      os << *reinterpret_cast<const VkPhysicalDeviceExternalFenceInfo*>(
          pStruct);
      break;
    case VK_STRUCTURE_TYPE_EXTERNAL_FENCE_PROPERTIES:
      os << *reinterpret_cast<const VkExternalFenceProperties*>(pStruct);
      break;
    case VK_STRUCTURE_TYPE_EXPORT_FENCE_CREATE_INFO:
      os << *reinterpret_cast<const VkExportFenceCreateInfo*>(pStruct);
      break;
    case VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_MULTIVIEW_FEATURES:
      os << *reinterpret_cast<const VkPhysicalDeviceMultiviewFeatures*>(
          pStruct);
      break;
    case VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_MULTIVIEW_PROPERTIES:
      os << *reinterpret_cast<const VkPhysicalDeviceMultiviewProperties*>(
          pStruct);
      break;
    case VK_STRUCTURE_TYPE_RENDER_PASS_MULTIVIEW_CREATE_INFO:
      os << *reinterpret_cast<const VkRenderPassMultiviewCreateInfo*>(pStruct);
      break;
    case VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_GROUP_PROPERTIES:
      os << *reinterpret_cast<const VkPhysicalDeviceGroupProperties*>(pStruct);
      break;
    case VK_STRUCTURE_TYPE_MEMORY_ALLOCATE_FLAGS_INFO:
      os << *reinterpret_cast<const VkMemoryAllocateFlagsInfo*>(pStruct);
      break;
    case VK_STRUCTURE_TYPE_BIND_BUFFER_MEMORY_INFO:
      os << *reinterpret_cast<const VkBindBufferMemoryInfo*>(pStruct);
      break;
    case VK_STRUCTURE_TYPE_BIND_BUFFER_MEMORY_DEVICE_GROUP_INFO:
      os << *reinterpret_cast<const VkBindBufferMemoryDeviceGroupInfo*>(
          pStruct);
      break;
    case VK_STRUCTURE_TYPE_BIND_IMAGE_MEMORY_INFO:
      os << *reinterpret_cast<const VkBindImageMemoryInfo*>(pStruct);
      break;
    case VK_STRUCTURE_TYPE_BIND_IMAGE_MEMORY_DEVICE_GROUP_INFO:
      os << *reinterpret_cast<const VkBindImageMemoryDeviceGroupInfo*>(pStruct);
      break;
    case VK_STRUCTURE_TYPE_DEVICE_GROUP_RENDER_PASS_BEGIN_INFO:
      os << *reinterpret_cast<const VkDeviceGroupRenderPassBeginInfo*>(pStruct);
      break;
    case VK_STRUCTURE_TYPE_DEVICE_GROUP_COMMAND_BUFFER_BEGIN_INFO:
      os << *reinterpret_cast<const VkDeviceGroupCommandBufferBeginInfo*>(
          pStruct);
      break;
    case VK_STRUCTURE_TYPE_DEVICE_GROUP_SUBMIT_INFO:
      os << *reinterpret_cast<const VkDeviceGroupSubmitInfo*>(pStruct);
      break;
    case VK_STRUCTURE_TYPE_DEVICE_GROUP_BIND_SPARSE_INFO:
      os << *reinterpret_cast<const VkDeviceGroupBindSparseInfo*>(pStruct);
      break;
    case VK_STRUCTURE_TYPE_DEVICE_GROUP_DEVICE_CREATE_INFO:
      os << *reinterpret_cast<const VkDeviceGroupDeviceCreateInfo*>(pStruct);
      break;
    case VK_STRUCTURE_TYPE_DESCRIPTOR_UPDATE_TEMPLATE_CREATE_INFO:
      os << *reinterpret_cast<const VkDescriptorUpdateTemplateCreateInfo*>(
          pStruct);
      break;
    case VK_STRUCTURE_TYPE_RENDER_PASS_INPUT_ATTACHMENT_ASPECT_CREATE_INFO:
      os << *reinterpret_cast<
          const VkRenderPassInputAttachmentAspectCreateInfo*>(pStruct);
      break;
    case VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_16BIT_STORAGE_FEATURES:
      os << *reinterpret_cast<const VkPhysicalDevice16BitStorageFeatures*>(
          pStruct);
      break;
    case VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SUBGROUP_PROPERTIES:
      os << *reinterpret_cast<const VkPhysicalDeviceSubgroupProperties*>(
          pStruct);
      break;
    case VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SHADER_SUBGROUP_EXTENDED_TYPES_FEATURES:
      os << *reinterpret_cast<
          const VkPhysicalDeviceShaderSubgroupExtendedTypesFeatures*>(pStruct);
      break;
    case VK_STRUCTURE_TYPE_BUFFER_MEMORY_REQUIREMENTS_INFO_2:
      os << *reinterpret_cast<const VkBufferMemoryRequirementsInfo2*>(pStruct);
      break;
    case VK_STRUCTURE_TYPE_IMAGE_MEMORY_REQUIREMENTS_INFO_2:
      os << *reinterpret_cast<const VkImageMemoryRequirementsInfo2*>(pStruct);
      break;
    case VK_STRUCTURE_TYPE_IMAGE_SPARSE_MEMORY_REQUIREMENTS_INFO_2:
      os << *reinterpret_cast<const VkImageSparseMemoryRequirementsInfo2*>(
          pStruct);
      break;
    case VK_STRUCTURE_TYPE_MEMORY_REQUIREMENTS_2:
      os << *reinterpret_cast<const VkMemoryRequirements2*>(pStruct);
      break;
    case VK_STRUCTURE_TYPE_SPARSE_IMAGE_MEMORY_REQUIREMENTS_2:
      os << *reinterpret_cast<const VkSparseImageMemoryRequirements2*>(pStruct);
      break;
    case VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_POINT_CLIPPING_PROPERTIES:
      os << *reinterpret_cast<const VkPhysicalDevicePointClippingProperties*>(
          pStruct);
      break;
    case VK_STRUCTURE_TYPE_MEMORY_DEDICATED_REQUIREMENTS:
      os << *reinterpret_cast<const VkMemoryDedicatedRequirements*>(pStruct);
      break;
    case VK_STRUCTURE_TYPE_MEMORY_DEDICATED_ALLOCATE_INFO:
      os << *reinterpret_cast<const VkMemoryDedicatedAllocateInfo*>(pStruct);
      break;
    case VK_STRUCTURE_TYPE_IMAGE_VIEW_USAGE_CREATE_INFO:
      os << *reinterpret_cast<const VkImageViewUsageCreateInfo*>(pStruct);
      break;
    case VK_STRUCTURE_TYPE_PIPELINE_TESSELLATION_DOMAIN_ORIGIN_STATE_CREATE_INFO:
      os << *reinterpret_cast<
          const VkPipelineTessellationDomainOriginStateCreateInfo*>(pStruct);
      break;
    case VK_STRUCTURE_TYPE_SAMPLER_YCBCR_CONVERSION_INFO:
      os << *reinterpret_cast<const VkSamplerYcbcrConversionInfo*>(pStruct);
      break;
    case VK_STRUCTURE_TYPE_SAMPLER_YCBCR_CONVERSION_CREATE_INFO:
      os << *reinterpret_cast<const VkSamplerYcbcrConversionCreateInfo*>(
          pStruct);
      break;
    case VK_STRUCTURE_TYPE_BIND_IMAGE_PLANE_MEMORY_INFO:
      os << *reinterpret_cast<const VkBindImagePlaneMemoryInfo*>(pStruct);
      break;
    case VK_STRUCTURE_TYPE_IMAGE_PLANE_MEMORY_REQUIREMENTS_INFO:
      os << *reinterpret_cast<const VkImagePlaneMemoryRequirementsInfo*>(
          pStruct);
      break;
    case VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SAMPLER_YCBCR_CONVERSION_FEATURES:
      os << *reinterpret_cast<
          const VkPhysicalDeviceSamplerYcbcrConversionFeatures*>(pStruct);
      break;
    case VK_STRUCTURE_TYPE_SAMPLER_YCBCR_CONVERSION_IMAGE_FORMAT_PROPERTIES:
      os << *reinterpret_cast<
          const VkSamplerYcbcrConversionImageFormatProperties*>(pStruct);
      break;
    case VK_STRUCTURE_TYPE_PROTECTED_SUBMIT_INFO:
      os << *reinterpret_cast<const VkProtectedSubmitInfo*>(pStruct);
      break;
    case VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_PROTECTED_MEMORY_FEATURES:
      os << *reinterpret_cast<const VkPhysicalDeviceProtectedMemoryFeatures*>(
          pStruct);
      break;
    case VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_PROTECTED_MEMORY_PROPERTIES:
      os << *reinterpret_cast<const VkPhysicalDeviceProtectedMemoryProperties*>(
          pStruct);
      break;
    case VK_STRUCTURE_TYPE_DEVICE_QUEUE_INFO_2:
      os << *reinterpret_cast<const VkDeviceQueueInfo2*>(pStruct);
      break;
    case VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SAMPLER_FILTER_MINMAX_PROPERTIES:
      os << *reinterpret_cast<
          const VkPhysicalDeviceSamplerFilterMinmaxProperties*>(pStruct);
      break;
    case VK_STRUCTURE_TYPE_SAMPLER_REDUCTION_MODE_CREATE_INFO:
      os << *reinterpret_cast<const VkSamplerReductionModeCreateInfo*>(pStruct);
      break;
    case VK_STRUCTURE_TYPE_IMAGE_FORMAT_LIST_CREATE_INFO:
      os << *reinterpret_cast<const VkImageFormatListCreateInfo*>(pStruct);
      break;
    case VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_MAINTENANCE_3_PROPERTIES:
      os << *reinterpret_cast<const VkPhysicalDeviceMaintenance3Properties*>(
          pStruct);
      break;
    case VK_STRUCTURE_TYPE_DESCRIPTOR_SET_LAYOUT_SUPPORT:
      os << *reinterpret_cast<const VkDescriptorSetLayoutSupport*>(pStruct);
      break;
    case VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SHADER_DRAW_PARAMETERS_FEATURES:
      os << *reinterpret_cast<
          const VkPhysicalDeviceShaderDrawParametersFeatures*>(pStruct);
      break;
    case VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SHADER_FLOAT16_INT8_FEATURES:
      os << *reinterpret_cast<const VkPhysicalDeviceShaderFloat16Int8Features*>(
          pStruct);
      break;
    case VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_FLOAT_CONTROLS_PROPERTIES:
      os << *reinterpret_cast<const VkPhysicalDeviceFloatControlsProperties*>(
          pStruct);
      break;
    case VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_HOST_QUERY_RESET_FEATURES:
      os << *reinterpret_cast<const VkPhysicalDeviceHostQueryResetFeatures*>(
          pStruct);
      break;
    case VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_DESCRIPTOR_INDEXING_FEATURES:
      os << *reinterpret_cast<
          const VkPhysicalDeviceDescriptorIndexingFeatures*>(pStruct);
      break;
    case VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_DESCRIPTOR_INDEXING_PROPERTIES:
      os << *reinterpret_cast<
          const VkPhysicalDeviceDescriptorIndexingProperties*>(pStruct);
      break;
    case VK_STRUCTURE_TYPE_DESCRIPTOR_SET_LAYOUT_BINDING_FLAGS_CREATE_INFO:
      os << *reinterpret_cast<
          const VkDescriptorSetLayoutBindingFlagsCreateInfo*>(pStruct);
      break;
    case VK_STRUCTURE_TYPE_DESCRIPTOR_SET_VARIABLE_DESCRIPTOR_COUNT_ALLOCATE_INFO:
      os << *reinterpret_cast<
          const VkDescriptorSetVariableDescriptorCountAllocateInfo*>(pStruct);
      break;
    case VK_STRUCTURE_TYPE_DESCRIPTOR_SET_VARIABLE_DESCRIPTOR_COUNT_LAYOUT_SUPPORT:
      os << *reinterpret_cast<
          const VkDescriptorSetVariableDescriptorCountLayoutSupport*>(pStruct);
      break;
    case VK_STRUCTURE_TYPE_ATTACHMENT_DESCRIPTION_2:
      os << *reinterpret_cast<const VkAttachmentDescription2*>(pStruct);
      break;
    case VK_STRUCTURE_TYPE_ATTACHMENT_REFERENCE_2:
      os << *reinterpret_cast<const VkAttachmentReference2*>(pStruct);
      break;
    case VK_STRUCTURE_TYPE_SUBPASS_DESCRIPTION_2:
      os << *reinterpret_cast<const VkSubpassDescription2*>(pStruct);
      break;
    case VK_STRUCTURE_TYPE_SUBPASS_DEPENDENCY_2:
      os << *reinterpret_cast<const VkSubpassDependency2*>(pStruct);
      break;
    case VK_STRUCTURE_TYPE_RENDER_PASS_CREATE_INFO_2:
      os << *reinterpret_cast<const VkRenderPassCreateInfo2*>(pStruct);
      break;
    case VK_STRUCTURE_TYPE_SUBPASS_BEGIN_INFO:
      os << *reinterpret_cast<const VkSubpassBeginInfo*>(pStruct);
      break;
    case VK_STRUCTURE_TYPE_SUBPASS_END_INFO:
      os << *reinterpret_cast<const VkSubpassEndInfo*>(pStruct);
      break;
    case VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_TIMELINE_SEMAPHORE_FEATURES:
      os << *reinterpret_cast<const VkPhysicalDeviceTimelineSemaphoreFeatures*>(
          pStruct);
      break;
    case VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_TIMELINE_SEMAPHORE_PROPERTIES:
      os << *reinterpret_cast<
          const VkPhysicalDeviceTimelineSemaphoreProperties*>(pStruct);
      break;
    case VK_STRUCTURE_TYPE_SEMAPHORE_TYPE_CREATE_INFO:
      os << *reinterpret_cast<const VkSemaphoreTypeCreateInfo*>(pStruct);
      break;
    case VK_STRUCTURE_TYPE_TIMELINE_SEMAPHORE_SUBMIT_INFO:
      os << *reinterpret_cast<const VkTimelineSemaphoreSubmitInfo*>(pStruct);
      break;
    case VK_STRUCTURE_TYPE_SEMAPHORE_WAIT_INFO:
      os << *reinterpret_cast<const VkSemaphoreWaitInfo*>(pStruct);
      break;
    case VK_STRUCTURE_TYPE_SEMAPHORE_SIGNAL_INFO:
      os << *reinterpret_cast<const VkSemaphoreSignalInfo*>(pStruct);
      break;
    case VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_8BIT_STORAGE_FEATURES:
      os << *reinterpret_cast<const VkPhysicalDevice8BitStorageFeatures*>(
          pStruct);
      break;
    case VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_VULKAN_MEMORY_MODEL_FEATURES:
      os << *reinterpret_cast<const VkPhysicalDeviceVulkanMemoryModelFeatures*>(
          pStruct);
      break;
    case VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SHADER_ATOMIC_INT64_FEATURES:
      os << *reinterpret_cast<const VkPhysicalDeviceShaderAtomicInt64Features*>(
          pStruct);
      break;
    case VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_DEPTH_STENCIL_RESOLVE_PROPERTIES:
      os << *reinterpret_cast<
          const VkPhysicalDeviceDepthStencilResolveProperties*>(pStruct);
      break;
    case VK_STRUCTURE_TYPE_SUBPASS_DESCRIPTION_DEPTH_STENCIL_RESOLVE:
      os << *reinterpret_cast<const VkSubpassDescriptionDepthStencilResolve*>(
          pStruct);
      break;
    case VK_STRUCTURE_TYPE_IMAGE_STENCIL_USAGE_CREATE_INFO:
      os << *reinterpret_cast<const VkImageStencilUsageCreateInfo*>(pStruct);
      break;
    case VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SCALAR_BLOCK_LAYOUT_FEATURES:
      os << *reinterpret_cast<const VkPhysicalDeviceScalarBlockLayoutFeatures*>(
          pStruct);
      break;
    case VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_UNIFORM_BUFFER_STANDARD_LAYOUT_FEATURES:
      os << *reinterpret_cast<
          const VkPhysicalDeviceUniformBufferStandardLayoutFeatures*>(pStruct);
      break;
    case VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_BUFFER_DEVICE_ADDRESS_FEATURES:
      os << *reinterpret_cast<
          const VkPhysicalDeviceBufferDeviceAddressFeatures*>(pStruct);
      break;
    case VK_STRUCTURE_TYPE_BUFFER_DEVICE_ADDRESS_INFO:
      os << *reinterpret_cast<const VkBufferDeviceAddressInfo*>(pStruct);
      break;
    case VK_STRUCTURE_TYPE_BUFFER_OPAQUE_CAPTURE_ADDRESS_CREATE_INFO:
      os << *reinterpret_cast<const VkBufferOpaqueCaptureAddressCreateInfo*>(
          pStruct);
      break;
    case VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_IMAGELESS_FRAMEBUFFER_FEATURES:
      os << *reinterpret_cast<
          const VkPhysicalDeviceImagelessFramebufferFeatures*>(pStruct);
      break;
    case VK_STRUCTURE_TYPE_FRAMEBUFFER_ATTACHMENTS_CREATE_INFO:
      os << *reinterpret_cast<const VkFramebufferAttachmentsCreateInfo*>(
          pStruct);
      break;
    case VK_STRUCTURE_TYPE_FRAMEBUFFER_ATTACHMENT_IMAGE_INFO:
      os << *reinterpret_cast<const VkFramebufferAttachmentImageInfo*>(pStruct);
      break;
    case VK_STRUCTURE_TYPE_RENDER_PASS_ATTACHMENT_BEGIN_INFO:
      os << *reinterpret_cast<const VkRenderPassAttachmentBeginInfo*>(pStruct);
      break;
    case VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SEPARATE_DEPTH_STENCIL_LAYOUTS_FEATURES:
      os << *reinterpret_cast<
          const VkPhysicalDeviceSeparateDepthStencilLayoutsFeatures*>(pStruct);
      break;
    case VK_STRUCTURE_TYPE_ATTACHMENT_REFERENCE_STENCIL_LAYOUT:
      os << *reinterpret_cast<const VkAttachmentReferenceStencilLayout*>(
          pStruct);
      break;
    case VK_STRUCTURE_TYPE_ATTACHMENT_DESCRIPTION_STENCIL_LAYOUT:
      os << *reinterpret_cast<const VkAttachmentDescriptionStencilLayout*>(
          pStruct);
      break;
    case VK_STRUCTURE_TYPE_MEMORY_OPAQUE_CAPTURE_ADDRESS_ALLOCATE_INFO:
      os << *reinterpret_cast<const VkMemoryOpaqueCaptureAddressAllocateInfo*>(
          pStruct);
      break;
    case VK_STRUCTURE_TYPE_DEVICE_MEMORY_OPAQUE_CAPTURE_ADDRESS_INFO:
      os << *reinterpret_cast<const VkDeviceMemoryOpaqueCaptureAddressInfo*>(
          pStruct);
      break;
    case VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_VULKAN_1_1_FEATURES:
      os << *reinterpret_cast<const VkPhysicalDeviceVulkan11Features*>(pStruct);
      break;
    case VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_VULKAN_1_1_PROPERTIES:
      os << *reinterpret_cast<const VkPhysicalDeviceVulkan11Properties*>(
          pStruct);
      break;
    case VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_VULKAN_1_2_FEATURES:
      os << *reinterpret_cast<const VkPhysicalDeviceVulkan12Features*>(pStruct);
      break;
    case VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_VULKAN_1_2_PROPERTIES:
      os << *reinterpret_cast<const VkPhysicalDeviceVulkan12Properties*>(
          pStruct);
      break;

#ifdef VK_USE_PLATFORM_GGP
    case VK_STRUCTURE_TYPE_STREAM_DESCRIPTOR_SURFACE_CREATE_INFO_GGP:
      os << *reinterpret_cast<const VkStreamDescriptorSurfaceCreateInfoGGP*>(
          pStruct);
      break;
    case VK_STRUCTURE_TYPE_PRESENT_FRAME_TOKEN_GGP:
      os << *reinterpret_cast<const VkPresentFrameTokenGGP*>(pStruct);
      break;
#endif  // VK_USE_PLATFORM_GGP

    default:
      break;
  }

  return os;
}

// Define Print functions.

void CommandPrinter::PrintCmdDrawMultiEXTArgs(std::ostream& os,
                                              const CmdDrawMultiEXTArgs& args) {
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  commandBuffer" << std::endl;
    // commandBuffer -> Field -> VkCommandBuffer
    os << "value: " << args.commandBuffer << std::endl;
  }

  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  drawCount" << std::endl;
    // drawCount -> Field -> uint32_t
    os << "value: " << args.drawCount << std::endl;
  }

  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  pVertexInfo" << std::endl;
    // pVertexInfo -> Field -> ConstDynamicArray(VkMultiDrawInfoEXT)
    {
      if (args.drawCount == 0) {
        os << "value: nullptr" << std::endl;
      } else {
        os << "members:" << std::endl;
        {
          ScopedOstream soarray(os);
          os << "- # VkMultiDrawInfoEXT" << std::endl;
          for (uint32_t i = 0; i < args.drawCount; ++i) {
            ScopedOstream somember(os);
            os << "members:" << std::endl << args.pVertexInfo[i] << std::endl;
          }
        }
      }
    }
  }

  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  instanceCount" << std::endl;
    // instanceCount -> Field -> uint32_t
    os << "value: " << args.instanceCount << std::endl;
  }

  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  firstInstance" << std::endl;
    // firstInstance -> Field -> uint32_t
    os << "value: " << args.firstInstance << std::endl;
  }

  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  stride" << std::endl;
    // stride -> Field -> uint32_t
    os << "value: " << args.stride << std::endl;
  }
}

void CommandPrinter::PrintCmdDrawMultiIndexedEXTArgs(
    std::ostream& os, const CmdDrawMultiIndexedEXTArgs& args) {
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  commandBuffer" << std::endl;
    // commandBuffer -> Field -> VkCommandBuffer
    os << "value: " << args.commandBuffer << std::endl;
  }

  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  drawCount" << std::endl;
    // drawCount -> Field -> uint32_t
    os << "value: " << args.drawCount << std::endl;
  }

  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  pIndexInfo" << std::endl;
    // pIndexInfo -> Field -> ConstDynamicArray(VkMultiDrawIndexedInfoEXT)
    {
      if (args.drawCount == 0) {
        os << "value: nullptr" << std::endl;
      } else {
        os << "members:" << std::endl;
        {
          ScopedOstream soarray(os);
          os << "- # VkMultiDrawIndexedInfoEXT" << std::endl;
          for (uint32_t i = 0; i < args.drawCount; ++i) {
            ScopedOstream somember(os);
            os << "members:" << std::endl << args.pIndexInfo[i] << std::endl;
          }
        }
      }
    }
  }

  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  instanceCount" << std::endl;
    // instanceCount -> Field -> uint32_t
    os << "value: " << args.instanceCount << std::endl;
  }

  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  firstInstance" << std::endl;
    // firstInstance -> Field -> uint32_t
    os << "value: " << args.firstInstance << std::endl;
  }

  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  stride" << std::endl;
    // stride -> Field -> uint32_t
    os << "value: " << args.stride << std::endl;
  }

  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  pVertexOffset" << std::endl;
    // pVertexOffset -> Field -> ConstPointer(int32_t)
    // pointer
    if (args.pVertexOffset) {
      os << "value: " << *args.pVertexOffset << std::endl;
    } else {
      os << "value: nullptr" << std::endl;
    }
  }
}

void CommandPrinter::PrintCmdDebugMarkerBeginEXTArgs(
    std::ostream& os, const CmdDebugMarkerBeginEXTArgs& args) {
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  commandBuffer" << std::endl;
    // commandBuffer -> Field -> VkCommandBuffer
    os << "value: " << args.commandBuffer << std::endl;
  }

  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  pMarkerInfo" << std::endl;
    // pMarkerInfo -> Field -> ConstPointer(VkDebugMarkerMarkerInfoEXT)
    // pointer
    if (args.pMarkerInfo) {
      os << "members:" << std::endl << *args.pMarkerInfo << std::endl;
    } else {
      os << "value: nullptr" << std::endl;
    }
  }
}

void CommandPrinter::PrintCmdDebugMarkerEndEXTArgs(
    std::ostream& os, const CmdDebugMarkerEndEXTArgs& args) {
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  commandBuffer" << std::endl;
    // commandBuffer -> Field -> VkCommandBuffer
    os << "value: " << args.commandBuffer << std::endl;
  }
}

void CommandPrinter::PrintCmdDebugMarkerInsertEXTArgs(
    std::ostream& os, const CmdDebugMarkerInsertEXTArgs& args) {
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  commandBuffer" << std::endl;
    // commandBuffer -> Field -> VkCommandBuffer
    os << "value: " << args.commandBuffer << std::endl;
  }

  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  pMarkerInfo" << std::endl;
    // pMarkerInfo -> Field -> ConstPointer(VkDebugMarkerMarkerInfoEXT)
    // pointer
    if (args.pMarkerInfo) {
      os << "members:" << std::endl << *args.pMarkerInfo << std::endl;
    } else {
      os << "value: nullptr" << std::endl;
    }
  }
}

void CommandPrinter::PrintCmdPushDescriptorSetKHRArgs(
    std::ostream& os, const CmdPushDescriptorSetKHRArgs& args) {
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  commandBuffer" << std::endl;
    // commandBuffer -> Field -> VkCommandBuffer
    os << "value: " << args.commandBuffer << std::endl;
  }

  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  pipelineBindPoint" << std::endl;
    // pipelineBindPoint -> Field -> VkPipelineBindPoint
    os << "value: " << args.pipelineBindPoint << std::endl;
  }

  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  layout" << std::endl;
    // layout -> Field -> VkPipelineLayout
    os << "value: " << args.layout << std::endl;
  }

  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  set" << std::endl;
    // set -> Field -> uint32_t
    os << "value: " << args.set << std::endl;
  }

  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  descriptorWriteCount" << std::endl;
    // descriptorWriteCount -> Field -> uint32_t
    os << "value: " << args.descriptorWriteCount << std::endl;
  }

  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  pDescriptorWrites" << std::endl;
    // pDescriptorWrites -> Field -> ConstDynamicArray(VkWriteDescriptorSet)
    {
      if (args.descriptorWriteCount == 0) {
        os << "value: nullptr" << std::endl;
      } else {
        os << "members:" << std::endl;
        {
          ScopedOstream soarray(os);
          os << "- # VkWriteDescriptorSet" << std::endl;
          for (uint32_t i = 0; i < args.descriptorWriteCount; ++i) {
            ScopedOstream somember(os);
            os << "members:" << std::endl
               << args.pDescriptorWrites[i] << std::endl;
          }
        }
      }
    }
  }
}

void CommandPrinter::PrintCmdSetDeviceMaskArgs(
    std::ostream& os, const CmdSetDeviceMaskArgs& args) {
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  commandBuffer" << std::endl;
    // commandBuffer -> Field -> VkCommandBuffer
    os << "value: " << args.commandBuffer << std::endl;
  }

  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  deviceMask" << std::endl;
    // deviceMask -> Field -> uint32_t
    os << "value: " << args.deviceMask << std::endl;
  }
}

void CommandPrinter::PrintCmdSetDeviceMaskKHRArgs(
    std::ostream& os, const CmdSetDeviceMaskKHRArgs& args) {
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  commandBuffer" << std::endl;
    // commandBuffer -> Field -> VkCommandBuffer
    os << "value: " << args.commandBuffer << std::endl;
  }

  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  deviceMask" << std::endl;
    // deviceMask -> Field -> uint32_t
    os << "value: " << args.deviceMask << std::endl;
  }
}

void CommandPrinter::PrintCmdDispatchBaseArgs(std::ostream& os,
                                              const CmdDispatchBaseArgs& args) {
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  commandBuffer" << std::endl;
    // commandBuffer -> Field -> VkCommandBuffer
    os << "value: " << args.commandBuffer << std::endl;
  }

  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  baseGroupX" << std::endl;
    // baseGroupX -> Field -> uint32_t
    os << "value: " << args.baseGroupX << std::endl;
  }

  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  baseGroupY" << std::endl;
    // baseGroupY -> Field -> uint32_t
    os << "value: " << args.baseGroupY << std::endl;
  }

  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  baseGroupZ" << std::endl;
    // baseGroupZ -> Field -> uint32_t
    os << "value: " << args.baseGroupZ << std::endl;
  }

  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  groupCountX" << std::endl;
    // groupCountX -> Field -> uint32_t
    os << "value: " << args.groupCountX << std::endl;
  }

  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  groupCountY" << std::endl;
    // groupCountY -> Field -> uint32_t
    os << "value: " << args.groupCountY << std::endl;
  }

  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  groupCountZ" << std::endl;
    // groupCountZ -> Field -> uint32_t
    os << "value: " << args.groupCountZ << std::endl;
  }
}

void CommandPrinter::PrintCmdDispatchBaseKHRArgs(
    std::ostream& os, const CmdDispatchBaseKHRArgs& args) {
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  commandBuffer" << std::endl;
    // commandBuffer -> Field -> VkCommandBuffer
    os << "value: " << args.commandBuffer << std::endl;
  }

  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  baseGroupX" << std::endl;
    // baseGroupX -> Field -> uint32_t
    os << "value: " << args.baseGroupX << std::endl;
  }

  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  baseGroupY" << std::endl;
    // baseGroupY -> Field -> uint32_t
    os << "value: " << args.baseGroupY << std::endl;
  }

  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  baseGroupZ" << std::endl;
    // baseGroupZ -> Field -> uint32_t
    os << "value: " << args.baseGroupZ << std::endl;
  }

  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  groupCountX" << std::endl;
    // groupCountX -> Field -> uint32_t
    os << "value: " << args.groupCountX << std::endl;
  }

  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  groupCountY" << std::endl;
    // groupCountY -> Field -> uint32_t
    os << "value: " << args.groupCountY << std::endl;
  }

  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  groupCountZ" << std::endl;
    // groupCountZ -> Field -> uint32_t
    os << "value: " << args.groupCountZ << std::endl;
  }
}

void CommandPrinter::PrintCmdPushDescriptorSetWithTemplateKHRArgs(
    std::ostream& os, const CmdPushDescriptorSetWithTemplateKHRArgs& args) {
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  commandBuffer" << std::endl;
    // commandBuffer -> Field -> VkCommandBuffer
    os << "value: " << args.commandBuffer << std::endl;
  }

  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  descriptorUpdateTemplate" << std::endl;
    // descriptorUpdateTemplate -> Field -> VkDescriptorUpdateTemplate
    os << "value: " << args.descriptorUpdateTemplate << std::endl;
  }

  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  layout" << std::endl;
    // layout -> Field -> VkPipelineLayout
    os << "value: " << args.layout << std::endl;
  }

  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  set" << std::endl;
    // set -> Field -> uint32_t
    os << "value: " << args.set << std::endl;
  }

  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  pData" << std::endl;
    // pData -> Field -> ConstPointer(void)

    // void
    os << "value: NOT_AVAILABLE" << std::endl;
  }
}

void CommandPrinter::PrintCmdSetSampleLocationsEXTArgs(
    std::ostream& os, const CmdSetSampleLocationsEXTArgs& args) {
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  commandBuffer" << std::endl;
    // commandBuffer -> Field -> VkCommandBuffer
    os << "value: " << args.commandBuffer << std::endl;
  }

  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  pSampleLocationsInfo" << std::endl;
    // pSampleLocationsInfo -> Field -> ConstPointer(VkSampleLocationsInfoEXT)
    // pointer
    if (args.pSampleLocationsInfo) {
      os << "members:" << std::endl << *args.pSampleLocationsInfo << std::endl;
    } else {
      os << "value: nullptr" << std::endl;
    }
  }
}

void CommandPrinter::PrintCmdBeginDebugUtilsLabelEXTArgs(
    std::ostream& os, const CmdBeginDebugUtilsLabelEXTArgs& args) {
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  commandBuffer" << std::endl;
    // commandBuffer -> Field -> VkCommandBuffer
    os << "value: " << args.commandBuffer << std::endl;
  }

  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  pLabelInfo" << std::endl;
    // pLabelInfo -> Field -> ConstPointer(VkDebugUtilsLabelEXT)
    // pointer
    if (args.pLabelInfo) {
      os << "members:" << std::endl << *args.pLabelInfo << std::endl;
    } else {
      os << "value: nullptr" << std::endl;
    }
  }
}

void CommandPrinter::PrintCmdEndDebugUtilsLabelEXTArgs(
    std::ostream& os, const CmdEndDebugUtilsLabelEXTArgs& args) {
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  commandBuffer" << std::endl;
    // commandBuffer -> Field -> VkCommandBuffer
    os << "value: " << args.commandBuffer << std::endl;
  }
}

void CommandPrinter::PrintCmdInsertDebugUtilsLabelEXTArgs(
    std::ostream& os, const CmdInsertDebugUtilsLabelEXTArgs& args) {
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  commandBuffer" << std::endl;
    // commandBuffer -> Field -> VkCommandBuffer
    os << "value: " << args.commandBuffer << std::endl;
  }

  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  pLabelInfo" << std::endl;
    // pLabelInfo -> Field -> ConstPointer(VkDebugUtilsLabelEXT)
    // pointer
    if (args.pLabelInfo) {
      os << "members:" << std::endl << *args.pLabelInfo << std::endl;
    } else {
      os << "value: nullptr" << std::endl;
    }
  }
}

void CommandPrinter::PrintCmdWriteBufferMarkerAMDArgs(
    std::ostream& os, const CmdWriteBufferMarkerAMDArgs& args) {
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  commandBuffer" << std::endl;
    // commandBuffer -> Field -> VkCommandBuffer
    os << "value: " << args.commandBuffer << std::endl;
  }

  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  pipelineStage" << std::endl;
    // pipelineStage -> Field -> VkPipelineStageFlagBits
    os << "value: " << args.pipelineStage << std::endl;
  }

  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  dstBuffer" << std::endl;
    // dstBuffer -> Field -> VkBuffer
    os << "value: " << args.dstBuffer << std::endl;
  }

  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  dstOffset" << std::endl;
    // dstOffset -> Field -> VkDeviceSize
    os << "value: " << args.dstOffset << std::endl;
  }

  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  marker" << std::endl;
    // marker -> Field -> uint32_t
    os << "value: " << args.marker << std::endl;
  }
}

void CommandPrinter::PrintCmdBeginRenderPass2Args(
    std::ostream& os, const CmdBeginRenderPass2Args& args) {
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  commandBuffer" << std::endl;
    // commandBuffer -> Field -> VkCommandBuffer
    os << "value: " << args.commandBuffer << std::endl;
  }

  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  pRenderPassBegin" << std::endl;
    // pRenderPassBegin -> Field -> ConstPointer(VkRenderPassBeginInfo)
    // pointer
    if (args.pRenderPassBegin) {
      os << "members:" << std::endl << *args.pRenderPassBegin << std::endl;
    } else {
      os << "value: nullptr" << std::endl;
    }
  }

  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  pSubpassBeginInfo" << std::endl;
    // pSubpassBeginInfo -> Field -> ConstPointer(VkSubpassBeginInfo)
    // pointer
    if (args.pSubpassBeginInfo) {
      os << "members:" << std::endl << *args.pSubpassBeginInfo << std::endl;
    } else {
      os << "value: nullptr" << std::endl;
    }
  }
}

void CommandPrinter::PrintCmdBeginRenderPass2KHRArgs(
    std::ostream& os, const CmdBeginRenderPass2KHRArgs& args) {
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  commandBuffer" << std::endl;
    // commandBuffer -> Field -> VkCommandBuffer
    os << "value: " << args.commandBuffer << std::endl;
  }

  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  pRenderPassBegin" << std::endl;
    // pRenderPassBegin -> Field -> ConstPointer(VkRenderPassBeginInfo)
    // pointer
    if (args.pRenderPassBegin) {
      os << "members:" << std::endl << *args.pRenderPassBegin << std::endl;
    } else {
      os << "value: nullptr" << std::endl;
    }
  }

  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  pSubpassBeginInfo" << std::endl;
    // pSubpassBeginInfo -> Field -> ConstPointer(VkSubpassBeginInfo)
    // pointer
    if (args.pSubpassBeginInfo) {
      os << "members:" << std::endl << *args.pSubpassBeginInfo << std::endl;
    } else {
      os << "value: nullptr" << std::endl;
    }
  }
}

void CommandPrinter::PrintCmdNextSubpass2Args(std::ostream& os,
                                              const CmdNextSubpass2Args& args) {
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  commandBuffer" << std::endl;
    // commandBuffer -> Field -> VkCommandBuffer
    os << "value: " << args.commandBuffer << std::endl;
  }

  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  pSubpassBeginInfo" << std::endl;
    // pSubpassBeginInfo -> Field -> ConstPointer(VkSubpassBeginInfo)
    // pointer
    if (args.pSubpassBeginInfo) {
      os << "members:" << std::endl << *args.pSubpassBeginInfo << std::endl;
    } else {
      os << "value: nullptr" << std::endl;
    }
  }

  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  pSubpassEndInfo" << std::endl;
    // pSubpassEndInfo -> Field -> ConstPointer(VkSubpassEndInfo)
    // pointer
    if (args.pSubpassEndInfo) {
      os << "members:" << std::endl << *args.pSubpassEndInfo << std::endl;
    } else {
      os << "value: nullptr" << std::endl;
    }
  }
}

void CommandPrinter::PrintCmdNextSubpass2KHRArgs(
    std::ostream& os, const CmdNextSubpass2KHRArgs& args) {
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  commandBuffer" << std::endl;
    // commandBuffer -> Field -> VkCommandBuffer
    os << "value: " << args.commandBuffer << std::endl;
  }

  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  pSubpassBeginInfo" << std::endl;
    // pSubpassBeginInfo -> Field -> ConstPointer(VkSubpassBeginInfo)
    // pointer
    if (args.pSubpassBeginInfo) {
      os << "members:" << std::endl << *args.pSubpassBeginInfo << std::endl;
    } else {
      os << "value: nullptr" << std::endl;
    }
  }

  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  pSubpassEndInfo" << std::endl;
    // pSubpassEndInfo -> Field -> ConstPointer(VkSubpassEndInfo)
    // pointer
    if (args.pSubpassEndInfo) {
      os << "members:" << std::endl << *args.pSubpassEndInfo << std::endl;
    } else {
      os << "value: nullptr" << std::endl;
    }
  }
}

void CommandPrinter::PrintCmdEndRenderPass2Args(
    std::ostream& os, const CmdEndRenderPass2Args& args) {
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  commandBuffer" << std::endl;
    // commandBuffer -> Field -> VkCommandBuffer
    os << "value: " << args.commandBuffer << std::endl;
  }

  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  pSubpassEndInfo" << std::endl;
    // pSubpassEndInfo -> Field -> ConstPointer(VkSubpassEndInfo)
    // pointer
    if (args.pSubpassEndInfo) {
      os << "members:" << std::endl << *args.pSubpassEndInfo << std::endl;
    } else {
      os << "value: nullptr" << std::endl;
    }
  }
}

void CommandPrinter::PrintCmdEndRenderPass2KHRArgs(
    std::ostream& os, const CmdEndRenderPass2KHRArgs& args) {
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  commandBuffer" << std::endl;
    // commandBuffer -> Field -> VkCommandBuffer
    os << "value: " << args.commandBuffer << std::endl;
  }

  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  pSubpassEndInfo" << std::endl;
    // pSubpassEndInfo -> Field -> ConstPointer(VkSubpassEndInfo)
    // pointer
    if (args.pSubpassEndInfo) {
      os << "members:" << std::endl << *args.pSubpassEndInfo << std::endl;
    } else {
      os << "value: nullptr" << std::endl;
    }
  }
}

void CommandPrinter::PrintCmdDrawIndirectCountArgs(
    std::ostream& os, const CmdDrawIndirectCountArgs& args) {
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  commandBuffer" << std::endl;
    // commandBuffer -> Field -> VkCommandBuffer
    os << "value: " << args.commandBuffer << std::endl;
  }

  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  buffer" << std::endl;
    // buffer -> Field -> VkBuffer
    os << "value: " << args.buffer << std::endl;
  }

  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  offset" << std::endl;
    // offset -> Field -> VkDeviceSize
    os << "value: " << args.offset << std::endl;
  }

  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  countBuffer" << std::endl;
    // countBuffer -> Field -> VkBuffer
    os << "value: " << args.countBuffer << std::endl;
  }

  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  countBufferOffset" << std::endl;
    // countBufferOffset -> Field -> VkDeviceSize
    os << "value: " << args.countBufferOffset << std::endl;
  }

  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  maxDrawCount" << std::endl;
    // maxDrawCount -> Field -> uint32_t
    os << "value: " << args.maxDrawCount << std::endl;
  }

  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  stride" << std::endl;
    // stride -> Field -> uint32_t
    os << "value: " << args.stride << std::endl;
  }
}

void CommandPrinter::PrintCmdDrawIndirectCountKHRArgs(
    std::ostream& os, const CmdDrawIndirectCountKHRArgs& args) {
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  commandBuffer" << std::endl;
    // commandBuffer -> Field -> VkCommandBuffer
    os << "value: " << args.commandBuffer << std::endl;
  }

  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  buffer" << std::endl;
    // buffer -> Field -> VkBuffer
    os << "value: " << args.buffer << std::endl;
  }

  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  offset" << std::endl;
    // offset -> Field -> VkDeviceSize
    os << "value: " << args.offset << std::endl;
  }

  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  countBuffer" << std::endl;
    // countBuffer -> Field -> VkBuffer
    os << "value: " << args.countBuffer << std::endl;
  }

  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  countBufferOffset" << std::endl;
    // countBufferOffset -> Field -> VkDeviceSize
    os << "value: " << args.countBufferOffset << std::endl;
  }

  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  maxDrawCount" << std::endl;
    // maxDrawCount -> Field -> uint32_t
    os << "value: " << args.maxDrawCount << std::endl;
  }

  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  stride" << std::endl;
    // stride -> Field -> uint32_t
    os << "value: " << args.stride << std::endl;
  }
}

void CommandPrinter::PrintCmdDrawIndirectCountAMDArgs(
    std::ostream& os, const CmdDrawIndirectCountAMDArgs& args) {
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  commandBuffer" << std::endl;
    // commandBuffer -> Field -> VkCommandBuffer
    os << "value: " << args.commandBuffer << std::endl;
  }

  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  buffer" << std::endl;
    // buffer -> Field -> VkBuffer
    os << "value: " << args.buffer << std::endl;
  }

  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  offset" << std::endl;
    // offset -> Field -> VkDeviceSize
    os << "value: " << args.offset << std::endl;
  }

  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  countBuffer" << std::endl;
    // countBuffer -> Field -> VkBuffer
    os << "value: " << args.countBuffer << std::endl;
  }

  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  countBufferOffset" << std::endl;
    // countBufferOffset -> Field -> VkDeviceSize
    os << "value: " << args.countBufferOffset << std::endl;
  }

  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  maxDrawCount" << std::endl;
    // maxDrawCount -> Field -> uint32_t
    os << "value: " << args.maxDrawCount << std::endl;
  }

  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  stride" << std::endl;
    // stride -> Field -> uint32_t
    os << "value: " << args.stride << std::endl;
  }
}

void CommandPrinter::PrintCmdDrawIndexedIndirectCountArgs(
    std::ostream& os, const CmdDrawIndexedIndirectCountArgs& args) {
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  commandBuffer" << std::endl;
    // commandBuffer -> Field -> VkCommandBuffer
    os << "value: " << args.commandBuffer << std::endl;
  }

  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  buffer" << std::endl;
    // buffer -> Field -> VkBuffer
    os << "value: " << args.buffer << std::endl;
  }

  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  offset" << std::endl;
    // offset -> Field -> VkDeviceSize
    os << "value: " << args.offset << std::endl;
  }

  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  countBuffer" << std::endl;
    // countBuffer -> Field -> VkBuffer
    os << "value: " << args.countBuffer << std::endl;
  }

  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  countBufferOffset" << std::endl;
    // countBufferOffset -> Field -> VkDeviceSize
    os << "value: " << args.countBufferOffset << std::endl;
  }

  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  maxDrawCount" << std::endl;
    // maxDrawCount -> Field -> uint32_t
    os << "value: " << args.maxDrawCount << std::endl;
  }

  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  stride" << std::endl;
    // stride -> Field -> uint32_t
    os << "value: " << args.stride << std::endl;
  }
}

void CommandPrinter::PrintCmdDrawIndexedIndirectCountKHRArgs(
    std::ostream& os, const CmdDrawIndexedIndirectCountKHRArgs& args) {
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  commandBuffer" << std::endl;
    // commandBuffer -> Field -> VkCommandBuffer
    os << "value: " << args.commandBuffer << std::endl;
  }

  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  buffer" << std::endl;
    // buffer -> Field -> VkBuffer
    os << "value: " << args.buffer << std::endl;
  }

  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  offset" << std::endl;
    // offset -> Field -> VkDeviceSize
    os << "value: " << args.offset << std::endl;
  }

  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  countBuffer" << std::endl;
    // countBuffer -> Field -> VkBuffer
    os << "value: " << args.countBuffer << std::endl;
  }

  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  countBufferOffset" << std::endl;
    // countBufferOffset -> Field -> VkDeviceSize
    os << "value: " << args.countBufferOffset << std::endl;
  }

  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  maxDrawCount" << std::endl;
    // maxDrawCount -> Field -> uint32_t
    os << "value: " << args.maxDrawCount << std::endl;
  }

  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  stride" << std::endl;
    // stride -> Field -> uint32_t
    os << "value: " << args.stride << std::endl;
  }
}

void CommandPrinter::PrintCmdDrawIndexedIndirectCountAMDArgs(
    std::ostream& os, const CmdDrawIndexedIndirectCountAMDArgs& args) {
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  commandBuffer" << std::endl;
    // commandBuffer -> Field -> VkCommandBuffer
    os << "value: " << args.commandBuffer << std::endl;
  }

  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  buffer" << std::endl;
    // buffer -> Field -> VkBuffer
    os << "value: " << args.buffer << std::endl;
  }

  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  offset" << std::endl;
    // offset -> Field -> VkDeviceSize
    os << "value: " << args.offset << std::endl;
  }

  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  countBuffer" << std::endl;
    // countBuffer -> Field -> VkBuffer
    os << "value: " << args.countBuffer << std::endl;
  }

  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  countBufferOffset" << std::endl;
    // countBufferOffset -> Field -> VkDeviceSize
    os << "value: " << args.countBufferOffset << std::endl;
  }

  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  maxDrawCount" << std::endl;
    // maxDrawCount -> Field -> uint32_t
    os << "value: " << args.maxDrawCount << std::endl;
  }

  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  stride" << std::endl;
    // stride -> Field -> uint32_t
    os << "value: " << args.stride << std::endl;
  }
}

void CommandPrinter::PrintCmdCopyAccelerationStructureKHRArgs(
    std::ostream& os, const CmdCopyAccelerationStructureKHRArgs& args) {
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  commandBuffer" << std::endl;
    // commandBuffer -> Field -> VkCommandBuffer
    os << "value: " << args.commandBuffer << std::endl;
  }

  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  pInfo" << std::endl;
    // pInfo -> Field -> ConstPointer(VkCopyAccelerationStructureInfoKHR)
    // pointer
    if (args.pInfo) {
      os << "members:" << std::endl << *args.pInfo << std::endl;
    } else {
      os << "value: nullptr" << std::endl;
    }
  }
}

void CommandPrinter::PrintCmdCopyAccelerationStructureToMemoryKHRArgs(
    std::ostream& os, const CmdCopyAccelerationStructureToMemoryKHRArgs& args) {
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  commandBuffer" << std::endl;
    // commandBuffer -> Field -> VkCommandBuffer
    os << "value: " << args.commandBuffer << std::endl;
  }

  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  pInfo" << std::endl;
    // pInfo -> Field ->
    // ConstPointer(VkCopyAccelerationStructureToMemoryInfoKHR) pointer
    if (args.pInfo) {
      os << "members:" << std::endl << *args.pInfo << std::endl;
    } else {
      os << "value: nullptr" << std::endl;
    }
  }
}

void CommandPrinter::PrintCmdCopyMemoryToAccelerationStructureKHRArgs(
    std::ostream& os, const CmdCopyMemoryToAccelerationStructureKHRArgs& args) {
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  commandBuffer" << std::endl;
    // commandBuffer -> Field -> VkCommandBuffer
    os << "value: " << args.commandBuffer << std::endl;
  }

  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  pInfo" << std::endl;
    // pInfo -> Field ->
    // ConstPointer(VkCopyMemoryToAccelerationStructureInfoKHR) pointer
    if (args.pInfo) {
      os << "members:" << std::endl << *args.pInfo << std::endl;
    } else {
      os << "value: nullptr" << std::endl;
    }
  }
}

void CommandPrinter::PrintCmdWriteAccelerationStructuresPropertiesKHRArgs(
    std::ostream& os,
    const CmdWriteAccelerationStructuresPropertiesKHRArgs& args) {
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  commandBuffer" << std::endl;
    // commandBuffer -> Field -> VkCommandBuffer
    os << "value: " << args.commandBuffer << std::endl;
  }

  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  accelerationStructureCount" << std::endl;
    // accelerationStructureCount -> Field -> uint32_t
    os << "value: " << args.accelerationStructureCount << std::endl;
  }

  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  pAccelerationStructures" << std::endl;
    // pAccelerationStructures -> Field ->
    // ConstDynamicArray(VkAccelerationStructureKHR)
    {
      if (args.accelerationStructureCount == 0) {
        os << "value: nullptr" << std::endl;
      } else {
        os << "members:" << std::endl;
        {
          ScopedOstream soarray(os);
          os << "- # VkAccelerationStructureKHR" << std::endl;
          for (uint32_t i = 0; i < args.accelerationStructureCount; ++i) {
            ScopedOstream somember(os);
            os << "value: " << args.pAccelerationStructures[i] << std::endl;
          }
        }
      }
    }
  }

  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  queryType" << std::endl;
    // queryType -> Field -> VkQueryType
    os << "value: " << args.queryType << std::endl;
  }

  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  queryPool" << std::endl;
    // queryPool -> Field -> VkQueryPool
    os << "value: " << args.queryPool << std::endl;
  }

  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  firstQuery" << std::endl;
    // firstQuery -> Field -> uint32_t
    os << "value: " << args.firstQuery << std::endl;
  }
}

void CommandPrinter::PrintCmdTraceRaysKHRArgs(std::ostream& os,
                                              const CmdTraceRaysKHRArgs& args) {
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  commandBuffer" << std::endl;
    // commandBuffer -> Field -> VkCommandBuffer
    os << "value: " << args.commandBuffer << std::endl;
  }

  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  pRaygenShaderBindingTable" << std::endl;
    // pRaygenShaderBindingTable -> Field ->
    // ConstPointer(VkStridedDeviceAddressRegionKHR) pointer
    if (args.pRaygenShaderBindingTable) {
      os << "members:" << std::endl
         << *args.pRaygenShaderBindingTable << std::endl;
    } else {
      os << "value: nullptr" << std::endl;
    }
  }

  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  pMissShaderBindingTable" << std::endl;
    // pMissShaderBindingTable -> Field ->
    // ConstPointer(VkStridedDeviceAddressRegionKHR) pointer
    if (args.pMissShaderBindingTable) {
      os << "members:" << std::endl
         << *args.pMissShaderBindingTable << std::endl;
    } else {
      os << "value: nullptr" << std::endl;
    }
  }

  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  pHitShaderBindingTable" << std::endl;
    // pHitShaderBindingTable -> Field ->
    // ConstPointer(VkStridedDeviceAddressRegionKHR) pointer
    if (args.pHitShaderBindingTable) {
      os << "members:" << std::endl
         << *args.pHitShaderBindingTable << std::endl;
    } else {
      os << "value: nullptr" << std::endl;
    }
  }

  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  pCallableShaderBindingTable" << std::endl;
    // pCallableShaderBindingTable -> Field ->
    // ConstPointer(VkStridedDeviceAddressRegionKHR) pointer
    if (args.pCallableShaderBindingTable) {
      os << "members:" << std::endl
         << *args.pCallableShaderBindingTable << std::endl;
    } else {
      os << "value: nullptr" << std::endl;
    }
  }

  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  width" << std::endl;
    // width -> Field -> uint32_t
    os << "value: " << args.width << std::endl;
  }

  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  height" << std::endl;
    // height -> Field -> uint32_t
    os << "value: " << args.height << std::endl;
  }

  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  depth" << std::endl;
    // depth -> Field -> uint32_t
    os << "value: " << args.depth << std::endl;
  }
}

void CommandPrinter::PrintCmdTraceRaysIndirectKHRArgs(
    std::ostream& os, const CmdTraceRaysIndirectKHRArgs& args) {
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  commandBuffer" << std::endl;
    // commandBuffer -> Field -> VkCommandBuffer
    os << "value: " << args.commandBuffer << std::endl;
  }

  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  pRaygenShaderBindingTable" << std::endl;
    // pRaygenShaderBindingTable -> Field ->
    // ConstPointer(VkStridedDeviceAddressRegionKHR) pointer
    if (args.pRaygenShaderBindingTable) {
      os << "members:" << std::endl
         << *args.pRaygenShaderBindingTable << std::endl;
    } else {
      os << "value: nullptr" << std::endl;
    }
  }

  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  pMissShaderBindingTable" << std::endl;
    // pMissShaderBindingTable -> Field ->
    // ConstPointer(VkStridedDeviceAddressRegionKHR) pointer
    if (args.pMissShaderBindingTable) {
      os << "members:" << std::endl
         << *args.pMissShaderBindingTable << std::endl;
    } else {
      os << "value: nullptr" << std::endl;
    }
  }

  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  pHitShaderBindingTable" << std::endl;
    // pHitShaderBindingTable -> Field ->
    // ConstPointer(VkStridedDeviceAddressRegionKHR) pointer
    if (args.pHitShaderBindingTable) {
      os << "members:" << std::endl
         << *args.pHitShaderBindingTable << std::endl;
    } else {
      os << "value: nullptr" << std::endl;
    }
  }

  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  pCallableShaderBindingTable" << std::endl;
    // pCallableShaderBindingTable -> Field ->
    // ConstPointer(VkStridedDeviceAddressRegionKHR) pointer
    if (args.pCallableShaderBindingTable) {
      os << "members:" << std::endl
         << *args.pCallableShaderBindingTable << std::endl;
    } else {
      os << "value: nullptr" << std::endl;
    }
  }

  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  indirectDeviceAddress" << std::endl;
    // indirectDeviceAddress -> Field -> VkDeviceAddress
    os << "value: " << args.indirectDeviceAddress << std::endl;
  }
}

void CommandPrinter::PrintCmdSetRayTracingPipelineStackSizeKHRArgs(
    std::ostream& os, const CmdSetRayTracingPipelineStackSizeKHRArgs& args) {
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  commandBuffer" << std::endl;
    // commandBuffer -> Field -> VkCommandBuffer
    os << "value: " << args.commandBuffer << std::endl;
  }

  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  pipelineStackSize" << std::endl;
    // pipelineStackSize -> Field -> uint32_t
    os << "value: " << args.pipelineStackSize << std::endl;
  }
}

void CommandPrinter::PrintCmdSetLineStippleEXTArgs(
    std::ostream& os, const CmdSetLineStippleEXTArgs& args) {
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  commandBuffer" << std::endl;
    // commandBuffer -> Field -> VkCommandBuffer
    os << "value: " << args.commandBuffer << std::endl;
  }

  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  lineStippleFactor" << std::endl;
    // lineStippleFactor -> Field -> uint32_t
    os << "value: " << args.lineStippleFactor << std::endl;
  }

  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  lineStipplePattern" << std::endl;
    // lineStipplePattern -> Field -> uint16_t
    os << "value: " << args.lineStipplePattern << std::endl;
  }
}

void CommandPrinter::PrintCmdBuildAccelerationStructuresKHRArgs(
    std::ostream& os, const CmdBuildAccelerationStructuresKHRArgs& args) {
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  commandBuffer" << std::endl;
    // commandBuffer -> Field -> VkCommandBuffer
    os << "value: " << args.commandBuffer << std::endl;
  }

  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  infoCount" << std::endl;
    // infoCount -> Field -> uint32_t
    os << "value: " << args.infoCount << std::endl;
  }

  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  pInfos" << std::endl;
    // pInfos -> Field ->
    // ConstDynamicArray(VkAccelerationStructureBuildGeometryInfoKHR)
    {
      if (args.infoCount == 0) {
        os << "value: nullptr" << std::endl;
      } else {
        os << "members:" << std::endl;
        {
          ScopedOstream soarray(os);
          os << "- # VkAccelerationStructureBuildGeometryInfoKHR" << std::endl;
          for (uint32_t i = 0; i < args.infoCount; ++i) {
            ScopedOstream somember(os);
            os << "members:" << std::endl << args.pInfos[i] << std::endl;
          }
        }
      }
    }
  }

  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  ppBuildRangeInfos" << std::endl;
    // ppBuildRangeInfos -> Field ->
    // ConstDynamicArray(ConstPointer(VkAccelerationStructureBuildRangeInfoKHR))
    {
      if (args.infoCount == 0) {
        os << "value: nullptr" << std::endl;
      } else {
        os << "members:" << std::endl;
        {
          ScopedOstream soarray(os);
          os << "- # ConstPointer(VkAccelerationStructureBuildRangeInfoKHR)"
             << std::endl;
          for (uint32_t i = 0; i < args.infoCount; ++i) {
            ScopedOstream somember(os);
            os << "value: " << args.ppBuildRangeInfos[i] << std::endl;
          }
        }
      }
    }
  }
}

void CommandPrinter::PrintCmdBuildAccelerationStructuresIndirectKHRArgs(
    std::ostream& os,
    const CmdBuildAccelerationStructuresIndirectKHRArgs& args) {
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  commandBuffer" << std::endl;
    // commandBuffer -> Field -> VkCommandBuffer
    os << "value: " << args.commandBuffer << std::endl;
  }

  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  infoCount" << std::endl;
    // infoCount -> Field -> uint32_t
    os << "value: " << args.infoCount << std::endl;
  }

  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  pInfos" << std::endl;
    // pInfos -> Field ->
    // ConstDynamicArray(VkAccelerationStructureBuildGeometryInfoKHR)
    {
      if (args.infoCount == 0) {
        os << "value: nullptr" << std::endl;
      } else {
        os << "members:" << std::endl;
        {
          ScopedOstream soarray(os);
          os << "- # VkAccelerationStructureBuildGeometryInfoKHR" << std::endl;
          for (uint32_t i = 0; i < args.infoCount; ++i) {
            ScopedOstream somember(os);
            os << "members:" << std::endl << args.pInfos[i] << std::endl;
          }
        }
      }
    }
  }

  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  pIndirectDeviceAddresses" << std::endl;
    // pIndirectDeviceAddresses -> Field -> ConstDynamicArray(VkDeviceAddress)
    {
      if (args.infoCount == 0) {
        os << "value: nullptr" << std::endl;
      } else {
        os << "members:" << std::endl;
        {
          ScopedOstream soarray(os);
          os << "- # VkDeviceAddress" << std::endl;
          for (uint32_t i = 0; i < args.infoCount; ++i) {
            ScopedOstream somember(os);
            os << "value: " << args.pIndirectDeviceAddresses[i] << std::endl;
          }
        }
      }
    }
  }

  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  pIndirectStrides" << std::endl;
    // pIndirectStrides -> Field -> ConstDynamicArray(uint32_t)
    {
      if (args.infoCount == 0) {
        os << "value: nullptr" << std::endl;
      } else {
        os << "members:" << std::endl;
        {
          ScopedOstream soarray(os);
          os << "- # uint32_t" << std::endl;
          for (uint32_t i = 0; i < args.infoCount; ++i) {
            ScopedOstream somember(os);
            os << "value: " << args.pIndirectStrides[i] << std::endl;
          }
        }
      }
    }
  }

  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  ppMaxPrimitiveCounts" << std::endl;
    // ppMaxPrimitiveCounts -> Field ->
    // ConstDynamicArray(ConstPointer(uint32_t))
    {
      if (args.infoCount == 0) {
        os << "value: nullptr" << std::endl;
      } else {
        os << "members:" << std::endl;
        {
          ScopedOstream soarray(os);
          os << "- # ConstPointer(uint32_t)" << std::endl;
          for (uint32_t i = 0; i < args.infoCount; ++i) {
            ScopedOstream somember(os);
            os << "value: " << args.ppMaxPrimitiveCounts[i] << std::endl;
          }
        }
      }
    }
  }
}

void CommandPrinter::PrintCmdSetCullModeEXTArgs(
    std::ostream& os, const CmdSetCullModeEXTArgs& args) {
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  commandBuffer" << std::endl;
    // commandBuffer -> Field -> VkCommandBuffer
    os << "value: " << args.commandBuffer << std::endl;
  }

  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  cullMode" << std::endl;
    // cullMode -> Field -> VkCullModeFlags
    os << "value: " << args.cullMode << std::endl;
  }
}

void CommandPrinter::PrintCmdSetFrontFaceEXTArgs(
    std::ostream& os, const CmdSetFrontFaceEXTArgs& args) {
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  commandBuffer" << std::endl;
    // commandBuffer -> Field -> VkCommandBuffer
    os << "value: " << args.commandBuffer << std::endl;
  }

  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  frontFace" << std::endl;
    // frontFace -> Field -> VkFrontFace
    os << "value: " << args.frontFace << std::endl;
  }
}

void CommandPrinter::PrintCmdSetPrimitiveTopologyEXTArgs(
    std::ostream& os, const CmdSetPrimitiveTopologyEXTArgs& args) {
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  commandBuffer" << std::endl;
    // commandBuffer -> Field -> VkCommandBuffer
    os << "value: " << args.commandBuffer << std::endl;
  }

  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  primitiveTopology" << std::endl;
    // primitiveTopology -> Field -> VkPrimitiveTopology
    os << "value: " << args.primitiveTopology << std::endl;
  }
}

void CommandPrinter::PrintCmdSetViewportWithCountEXTArgs(
    std::ostream& os, const CmdSetViewportWithCountEXTArgs& args) {
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  commandBuffer" << std::endl;
    // commandBuffer -> Field -> VkCommandBuffer
    os << "value: " << args.commandBuffer << std::endl;
  }

  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  viewportCount" << std::endl;
    // viewportCount -> Field -> uint32_t
    os << "value: " << args.viewportCount << std::endl;
  }

  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  pViewports" << std::endl;
    // pViewports -> Field -> ConstDynamicArray(VkViewport)
    {
      if (args.viewportCount == 0) {
        os << "value: nullptr" << std::endl;
      } else {
        os << "members:" << std::endl;
        {
          ScopedOstream soarray(os);
          os << "- # VkViewport" << std::endl;
          for (uint32_t i = 0; i < args.viewportCount; ++i) {
            ScopedOstream somember(os);
            os << "members:" << std::endl << args.pViewports[i] << std::endl;
          }
        }
      }
    }
  }
}

void CommandPrinter::PrintCmdSetScissorWithCountEXTArgs(
    std::ostream& os, const CmdSetScissorWithCountEXTArgs& args) {
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  commandBuffer" << std::endl;
    // commandBuffer -> Field -> VkCommandBuffer
    os << "value: " << args.commandBuffer << std::endl;
  }

  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  scissorCount" << std::endl;
    // scissorCount -> Field -> uint32_t
    os << "value: " << args.scissorCount << std::endl;
  }

  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  pScissors" << std::endl;
    // pScissors -> Field -> ConstDynamicArray(VkRect2D)
    {
      if (args.scissorCount == 0) {
        os << "value: nullptr" << std::endl;
      } else {
        os << "members:" << std::endl;
        {
          ScopedOstream soarray(os);
          os << "- # VkRect2D" << std::endl;
          for (uint32_t i = 0; i < args.scissorCount; ++i) {
            ScopedOstream somember(os);
            os << "members:" << std::endl << args.pScissors[i] << std::endl;
          }
        }
      }
    }
  }
}

void CommandPrinter::PrintCmdBindVertexBuffers2EXTArgs(
    std::ostream& os, const CmdBindVertexBuffers2EXTArgs& args) {
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  commandBuffer" << std::endl;
    // commandBuffer -> Field -> VkCommandBuffer
    os << "value: " << args.commandBuffer << std::endl;
  }

  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  firstBinding" << std::endl;
    // firstBinding -> Field -> uint32_t
    os << "value: " << args.firstBinding << std::endl;
  }

  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  bindingCount" << std::endl;
    // bindingCount -> Field -> uint32_t
    os << "value: " << args.bindingCount << std::endl;
  }

  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  pBuffers" << std::endl;
    // pBuffers -> Field -> ConstDynamicArray(VkBuffer)
    {
      if (args.bindingCount == 0) {
        os << "value: nullptr" << std::endl;
      } else {
        os << "members:" << std::endl;
        {
          ScopedOstream soarray(os);
          os << "- # VkBuffer" << std::endl;
          for (uint32_t i = 0; i < args.bindingCount; ++i) {
            ScopedOstream somember(os);
            os << "value: " << args.pBuffers[i] << std::endl;
          }
        }
      }
    }
  }

  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  pOffsets" << std::endl;
    // pOffsets -> Field -> ConstDynamicArray(VkDeviceSize)
    {
      if (args.bindingCount == 0) {
        os << "value: nullptr" << std::endl;
      } else {
        os << "members:" << std::endl;
        {
          ScopedOstream soarray(os);
          os << "- # VkDeviceSize" << std::endl;
          for (uint32_t i = 0; i < args.bindingCount; ++i) {
            ScopedOstream somember(os);
            os << "value: " << args.pOffsets[i] << std::endl;
          }
        }
      }
    }
  }

  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  pSizes" << std::endl;
    // pSizes -> Field -> ConstDynamicArray(VkDeviceSize)
    {
      if (args.bindingCount == 0) {
        os << "value: nullptr" << std::endl;
      } else {
        os << "members:" << std::endl;
        {
          ScopedOstream soarray(os);
          os << "- # VkDeviceSize" << std::endl;
          for (uint32_t i = 0; i < args.bindingCount; ++i) {
            ScopedOstream somember(os);
            os << "value: " << args.pSizes[i] << std::endl;
          }
        }
      }
    }
  }

  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  pStrides" << std::endl;
    // pStrides -> Field -> ConstDynamicArray(VkDeviceSize)
    {
      if (args.bindingCount == 0) {
        os << "value: nullptr" << std::endl;
      } else {
        os << "members:" << std::endl;
        {
          ScopedOstream soarray(os);
          os << "- # VkDeviceSize" << std::endl;
          for (uint32_t i = 0; i < args.bindingCount; ++i) {
            ScopedOstream somember(os);
            os << "value: " << args.pStrides[i] << std::endl;
          }
        }
      }
    }
  }
}

void CommandPrinter::PrintCmdSetDepthTestEnableEXTArgs(
    std::ostream& os, const CmdSetDepthTestEnableEXTArgs& args) {
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  commandBuffer" << std::endl;
    // commandBuffer -> Field -> VkCommandBuffer
    os << "value: " << args.commandBuffer << std::endl;
  }

  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  depthTestEnable" << std::endl;
    // depthTestEnable -> Field -> VkBool32
    os << "value: " << args.depthTestEnable << std::endl;
  }
}

void CommandPrinter::PrintCmdSetDepthWriteEnableEXTArgs(
    std::ostream& os, const CmdSetDepthWriteEnableEXTArgs& args) {
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  commandBuffer" << std::endl;
    // commandBuffer -> Field -> VkCommandBuffer
    os << "value: " << args.commandBuffer << std::endl;
  }

  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  depthWriteEnable" << std::endl;
    // depthWriteEnable -> Field -> VkBool32
    os << "value: " << args.depthWriteEnable << std::endl;
  }
}

void CommandPrinter::PrintCmdSetDepthCompareOpEXTArgs(
    std::ostream& os, const CmdSetDepthCompareOpEXTArgs& args) {
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  commandBuffer" << std::endl;
    // commandBuffer -> Field -> VkCommandBuffer
    os << "value: " << args.commandBuffer << std::endl;
  }

  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  depthCompareOp" << std::endl;
    // depthCompareOp -> Field -> VkCompareOp
    os << "value: " << args.depthCompareOp << std::endl;
  }
}

void CommandPrinter::PrintCmdSetDepthBoundsTestEnableEXTArgs(
    std::ostream& os, const CmdSetDepthBoundsTestEnableEXTArgs& args) {
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  commandBuffer" << std::endl;
    // commandBuffer -> Field -> VkCommandBuffer
    os << "value: " << args.commandBuffer << std::endl;
  }

  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  depthBoundsTestEnable" << std::endl;
    // depthBoundsTestEnable -> Field -> VkBool32
    os << "value: " << args.depthBoundsTestEnable << std::endl;
  }
}

void CommandPrinter::PrintCmdSetStencilTestEnableEXTArgs(
    std::ostream& os, const CmdSetStencilTestEnableEXTArgs& args) {
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  commandBuffer" << std::endl;
    // commandBuffer -> Field -> VkCommandBuffer
    os << "value: " << args.commandBuffer << std::endl;
  }

  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  stencilTestEnable" << std::endl;
    // stencilTestEnable -> Field -> VkBool32
    os << "value: " << args.stencilTestEnable << std::endl;
  }
}

void CommandPrinter::PrintCmdSetStencilOpEXTArgs(
    std::ostream& os, const CmdSetStencilOpEXTArgs& args) {
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  commandBuffer" << std::endl;
    // commandBuffer -> Field -> VkCommandBuffer
    os << "value: " << args.commandBuffer << std::endl;
  }

  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  faceMask" << std::endl;
    // faceMask -> Field -> VkStencilFaceFlags
    os << "value: " << args.faceMask << std::endl;
  }

  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  failOp" << std::endl;
    // failOp -> Field -> VkStencilOp
    os << "value: " << args.failOp << std::endl;
  }

  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  passOp" << std::endl;
    // passOp -> Field -> VkStencilOp
    os << "value: " << args.passOp << std::endl;
  }

  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  depthFailOp" << std::endl;
    // depthFailOp -> Field -> VkStencilOp
    os << "value: " << args.depthFailOp << std::endl;
  }

  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  compareOp" << std::endl;
    // compareOp -> Field -> VkCompareOp
    os << "value: " << args.compareOp << std::endl;
  }
}

void CommandPrinter::PrintCmdSetPatchControlPointsEXTArgs(
    std::ostream& os, const CmdSetPatchControlPointsEXTArgs& args) {
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  commandBuffer" << std::endl;
    // commandBuffer -> Field -> VkCommandBuffer
    os << "value: " << args.commandBuffer << std::endl;
  }

  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  patchControlPoints" << std::endl;
    // patchControlPoints -> Field -> uint32_t
    os << "value: " << args.patchControlPoints << std::endl;
  }
}

void CommandPrinter::PrintCmdSetRasterizerDiscardEnableEXTArgs(
    std::ostream& os, const CmdSetRasterizerDiscardEnableEXTArgs& args) {
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  commandBuffer" << std::endl;
    // commandBuffer -> Field -> VkCommandBuffer
    os << "value: " << args.commandBuffer << std::endl;
  }

  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  rasterizerDiscardEnable" << std::endl;
    // rasterizerDiscardEnable -> Field -> VkBool32
    os << "value: " << args.rasterizerDiscardEnable << std::endl;
  }
}

void CommandPrinter::PrintCmdSetDepthBiasEnableEXTArgs(
    std::ostream& os, const CmdSetDepthBiasEnableEXTArgs& args) {
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  commandBuffer" << std::endl;
    // commandBuffer -> Field -> VkCommandBuffer
    os << "value: " << args.commandBuffer << std::endl;
  }

  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  depthBiasEnable" << std::endl;
    // depthBiasEnable -> Field -> VkBool32
    os << "value: " << args.depthBiasEnable << std::endl;
  }
}

void CommandPrinter::PrintCmdSetLogicOpEXTArgs(
    std::ostream& os, const CmdSetLogicOpEXTArgs& args) {
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  commandBuffer" << std::endl;
    // commandBuffer -> Field -> VkCommandBuffer
    os << "value: " << args.commandBuffer << std::endl;
  }

  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  logicOp" << std::endl;
    // logicOp -> Field -> VkLogicOp
    os << "value: " << args.logicOp << std::endl;
  }
}

void CommandPrinter::PrintCmdSetPrimitiveRestartEnableEXTArgs(
    std::ostream& os, const CmdSetPrimitiveRestartEnableEXTArgs& args) {
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  commandBuffer" << std::endl;
    // commandBuffer -> Field -> VkCommandBuffer
    os << "value: " << args.commandBuffer << std::endl;
  }

  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  primitiveRestartEnable" << std::endl;
    // primitiveRestartEnable -> Field -> VkBool32
    os << "value: " << args.primitiveRestartEnable << std::endl;
  }
}

void CommandPrinter::PrintCmdCopyBuffer2KHRArgs(
    std::ostream& os, const CmdCopyBuffer2KHRArgs& args) {
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  commandBuffer" << std::endl;
    // commandBuffer -> Field -> VkCommandBuffer
    os << "value: " << args.commandBuffer << std::endl;
  }

  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  pCopyBufferInfo" << std::endl;
    // pCopyBufferInfo -> Field -> ConstPointer(VkCopyBufferInfo2KHR)
    // pointer
    if (args.pCopyBufferInfo) {
      os << "members:" << std::endl << *args.pCopyBufferInfo << std::endl;
    } else {
      os << "value: nullptr" << std::endl;
    }
  }
}

void CommandPrinter::PrintCmdCopyImage2KHRArgs(
    std::ostream& os, const CmdCopyImage2KHRArgs& args) {
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  commandBuffer" << std::endl;
    // commandBuffer -> Field -> VkCommandBuffer
    os << "value: " << args.commandBuffer << std::endl;
  }

  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  pCopyImageInfo" << std::endl;
    // pCopyImageInfo -> Field -> ConstPointer(VkCopyImageInfo2KHR)
    // pointer
    if (args.pCopyImageInfo) {
      os << "members:" << std::endl << *args.pCopyImageInfo << std::endl;
    } else {
      os << "value: nullptr" << std::endl;
    }
  }
}

void CommandPrinter::PrintCmdBlitImage2KHRArgs(
    std::ostream& os, const CmdBlitImage2KHRArgs& args) {
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  commandBuffer" << std::endl;
    // commandBuffer -> Field -> VkCommandBuffer
    os << "value: " << args.commandBuffer << std::endl;
  }

  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  pBlitImageInfo" << std::endl;
    // pBlitImageInfo -> Field -> ConstPointer(VkBlitImageInfo2KHR)
    // pointer
    if (args.pBlitImageInfo) {
      os << "members:" << std::endl << *args.pBlitImageInfo << std::endl;
    } else {
      os << "value: nullptr" << std::endl;
    }
  }
}

void CommandPrinter::PrintCmdCopyBufferToImage2KHRArgs(
    std::ostream& os, const CmdCopyBufferToImage2KHRArgs& args) {
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  commandBuffer" << std::endl;
    // commandBuffer -> Field -> VkCommandBuffer
    os << "value: " << args.commandBuffer << std::endl;
  }

  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  pCopyBufferToImageInfo" << std::endl;
    // pCopyBufferToImageInfo -> Field ->
    // ConstPointer(VkCopyBufferToImageInfo2KHR) pointer
    if (args.pCopyBufferToImageInfo) {
      os << "members:" << std::endl
         << *args.pCopyBufferToImageInfo << std::endl;
    } else {
      os << "value: nullptr" << std::endl;
    }
  }
}

void CommandPrinter::PrintCmdCopyImageToBuffer2KHRArgs(
    std::ostream& os, const CmdCopyImageToBuffer2KHRArgs& args) {
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  commandBuffer" << std::endl;
    // commandBuffer -> Field -> VkCommandBuffer
    os << "value: " << args.commandBuffer << std::endl;
  }

  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  pCopyImageToBufferInfo" << std::endl;
    // pCopyImageToBufferInfo -> Field ->
    // ConstPointer(VkCopyImageToBufferInfo2KHR) pointer
    if (args.pCopyImageToBufferInfo) {
      os << "members:" << std::endl
         << *args.pCopyImageToBufferInfo << std::endl;
    } else {
      os << "value: nullptr" << std::endl;
    }
  }
}

void CommandPrinter::PrintCmdResolveImage2KHRArgs(
    std::ostream& os, const CmdResolveImage2KHRArgs& args) {
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  commandBuffer" << std::endl;
    // commandBuffer -> Field -> VkCommandBuffer
    os << "value: " << args.commandBuffer << std::endl;
  }

  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  pResolveImageInfo" << std::endl;
    // pResolveImageInfo -> Field -> ConstPointer(VkResolveImageInfo2KHR)
    // pointer
    if (args.pResolveImageInfo) {
      os << "members:" << std::endl << *args.pResolveImageInfo << std::endl;
    } else {
      os << "value: nullptr" << std::endl;
    }
  }
}

void CommandPrinter::PrintCmdSetFragmentShadingRateKHRArgs(
    std::ostream& os, const CmdSetFragmentShadingRateKHRArgs& args) {
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  commandBuffer" << std::endl;
    // commandBuffer -> Field -> VkCommandBuffer
    os << "value: " << args.commandBuffer << std::endl;
  }

  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  pFragmentSize" << std::endl;
    // pFragmentSize -> Field -> ConstPointer(VkExtent2D)
    // pointer
    if (args.pFragmentSize) {
      os << "members:" << std::endl << *args.pFragmentSize << std::endl;
    } else {
      os << "value: nullptr" << std::endl;
    }
  }

  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  combinerOps" << std::endl;
    // combinerOps -> Field ->
    // ConstFixedArray(VkFragmentShadingRateCombinerOpKHR)
    {
      if (2 == 0) {
        os << "value: nullptr" << std::endl;
      } else {
        os << "members:" << std::endl;
        {
          ScopedOstream soarray(os);
          os << "- # VkFragmentShadingRateCombinerOpKHR" << std::endl;
          for (uint32_t i = 0; i < 2; ++i) {
            ScopedOstream somember(os);
            os << "value: " << args.combinerOps[i] << std::endl;
          }
        }
      }
    }
  }
}

void CommandPrinter::PrintCmdSetVertexInputEXTArgs(
    std::ostream& os, const CmdSetVertexInputEXTArgs& args) {
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  commandBuffer" << std::endl;
    // commandBuffer -> Field -> VkCommandBuffer
    os << "value: " << args.commandBuffer << std::endl;
  }

  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  vertexBindingDescriptionCount" << std::endl;
    // vertexBindingDescriptionCount -> Field -> uint32_t
    os << "value: " << args.vertexBindingDescriptionCount << std::endl;
  }

  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  pVertexBindingDescriptions" << std::endl;
    // pVertexBindingDescriptions -> Field ->
    // ConstDynamicArray(VkVertexInputBindingDescription2EXT)
    {
      if (args.vertexBindingDescriptionCount == 0) {
        os << "value: nullptr" << std::endl;
      } else {
        os << "members:" << std::endl;
        {
          ScopedOstream soarray(os);
          os << "- # VkVertexInputBindingDescription2EXT" << std::endl;
          for (uint32_t i = 0; i < args.vertexBindingDescriptionCount; ++i) {
            ScopedOstream somember(os);
            os << "members:" << std::endl
               << args.pVertexBindingDescriptions[i] << std::endl;
          }
        }
      }
    }
  }

  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  vertexAttributeDescriptionCount" << std::endl;
    // vertexAttributeDescriptionCount -> Field -> uint32_t
    os << "value: " << args.vertexAttributeDescriptionCount << std::endl;
  }

  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  pVertexAttributeDescriptions" << std::endl;
    // pVertexAttributeDescriptions -> Field ->
    // ConstDynamicArray(VkVertexInputAttributeDescription2EXT)
    {
      if (args.vertexAttributeDescriptionCount == 0) {
        os << "value: nullptr" << std::endl;
      } else {
        os << "members:" << std::endl;
        {
          ScopedOstream soarray(os);
          os << "- # VkVertexInputAttributeDescription2EXT" << std::endl;
          for (uint32_t i = 0; i < args.vertexAttributeDescriptionCount; ++i) {
            ScopedOstream somember(os);
            os << "members:" << std::endl
               << args.pVertexAttributeDescriptions[i] << std::endl;
          }
        }
      }
    }
  }
}

void CommandPrinter::PrintCmdSetColorWriteEnableEXTArgs(
    std::ostream& os, const CmdSetColorWriteEnableEXTArgs& args) {
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  commandBuffer" << std::endl;
    // commandBuffer -> Field -> VkCommandBuffer
    os << "value: " << args.commandBuffer << std::endl;
  }

  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  attachmentCount" << std::endl;
    // attachmentCount -> Field -> uint32_t
    os << "value: " << args.attachmentCount << std::endl;
  }

  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  pColorWriteEnables" << std::endl;
    // pColorWriteEnables -> Field -> ConstDynamicArray(VkBool32)
    {
      if (args.attachmentCount == 0) {
        os << "value: nullptr" << std::endl;
      } else {
        os << "members:" << std::endl;
        {
          ScopedOstream soarray(os);
          os << "- # VkBool32" << std::endl;
          for (uint32_t i = 0; i < args.attachmentCount; ++i) {
            ScopedOstream somember(os);
            os << "value: " << args.pColorWriteEnables[i] << std::endl;
          }
        }
      }
    }
  }
}

void CommandPrinter::PrintCmdSetEvent2KHRArgs(std::ostream& os,
                                              const CmdSetEvent2KHRArgs& args) {
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  commandBuffer" << std::endl;
    // commandBuffer -> Field -> VkCommandBuffer
    os << "value: " << args.commandBuffer << std::endl;
  }

  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  event" << std::endl;
    // event -> Field -> VkEvent
    os << "value: " << args.event << std::endl;
  }

  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  pDependencyInfo" << std::endl;
    // pDependencyInfo -> Field -> ConstPointer(VkDependencyInfoKHR)
    // pointer
    if (args.pDependencyInfo) {
      os << "members:" << std::endl << *args.pDependencyInfo << std::endl;
    } else {
      os << "value: nullptr" << std::endl;
    }
  }
}

void CommandPrinter::PrintCmdResetEvent2KHRArgs(
    std::ostream& os, const CmdResetEvent2KHRArgs& args) {
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  commandBuffer" << std::endl;
    // commandBuffer -> Field -> VkCommandBuffer
    os << "value: " << args.commandBuffer << std::endl;
  }

  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  event" << std::endl;
    // event -> Field -> VkEvent
    os << "value: " << args.event << std::endl;
  }

  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  stageMask" << std::endl;
    // stageMask -> Field -> VkPipelineStageFlags2KHR
    os << "value: " << args.stageMask << std::endl;
  }
}

void CommandPrinter::PrintCmdWaitEvents2KHRArgs(
    std::ostream& os, const CmdWaitEvents2KHRArgs& args) {
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  commandBuffer" << std::endl;
    // commandBuffer -> Field -> VkCommandBuffer
    os << "value: " << args.commandBuffer << std::endl;
  }

  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  eventCount" << std::endl;
    // eventCount -> Field -> uint32_t
    os << "value: " << args.eventCount << std::endl;
  }

  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  pEvents" << std::endl;
    // pEvents -> Field -> ConstDynamicArray(VkEvent)
    {
      if (args.eventCount == 0) {
        os << "value: nullptr" << std::endl;
      } else {
        os << "members:" << std::endl;
        {
          ScopedOstream soarray(os);
          os << "- # VkEvent" << std::endl;
          for (uint32_t i = 0; i < args.eventCount; ++i) {
            ScopedOstream somember(os);
            os << "value: " << args.pEvents[i] << std::endl;
          }
        }
      }
    }
  }

  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  pDependencyInfos" << std::endl;
    // pDependencyInfos -> Field -> ConstDynamicArray(VkDependencyInfoKHR)
    {
      if (args.eventCount == 0) {
        os << "value: nullptr" << std::endl;
      } else {
        os << "members:" << std::endl;
        {
          ScopedOstream soarray(os);
          os << "- # VkDependencyInfoKHR" << std::endl;
          for (uint32_t i = 0; i < args.eventCount; ++i) {
            ScopedOstream somember(os);
            os << "members:" << std::endl
               << args.pDependencyInfos[i] << std::endl;
          }
        }
      }
    }
  }
}

void CommandPrinter::PrintCmdPipelineBarrier2KHRArgs(
    std::ostream& os, const CmdPipelineBarrier2KHRArgs& args) {
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  commandBuffer" << std::endl;
    // commandBuffer -> Field -> VkCommandBuffer
    os << "value: " << args.commandBuffer << std::endl;
  }

  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  pDependencyInfo" << std::endl;
    // pDependencyInfo -> Field -> ConstPointer(VkDependencyInfoKHR)
    // pointer
    if (args.pDependencyInfo) {
      os << "members:" << std::endl << *args.pDependencyInfo << std::endl;
    } else {
      os << "value: nullptr" << std::endl;
    }
  }
}

void CommandPrinter::PrintCmdWriteTimestamp2KHRArgs(
    std::ostream& os, const CmdWriteTimestamp2KHRArgs& args) {
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  commandBuffer" << std::endl;
    // commandBuffer -> Field -> VkCommandBuffer
    os << "value: " << args.commandBuffer << std::endl;
  }

  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  stage" << std::endl;
    // stage -> Field -> VkPipelineStageFlags2KHR
    os << "value: " << args.stage << std::endl;
  }

  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  queryPool" << std::endl;
    // queryPool -> Field -> VkQueryPool
    os << "value: " << args.queryPool << std::endl;
  }

  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  query" << std::endl;
    // query -> Field -> uint32_t
    os << "value: " << args.query << std::endl;
  }
}

void CommandPrinter::PrintCmdWriteBufferMarker2AMDArgs(
    std::ostream& os, const CmdWriteBufferMarker2AMDArgs& args) {
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  commandBuffer" << std::endl;
    // commandBuffer -> Field -> VkCommandBuffer
    os << "value: " << args.commandBuffer << std::endl;
  }

  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  stage" << std::endl;
    // stage -> Field -> VkPipelineStageFlags2KHR
    os << "value: " << args.stage << std::endl;
  }

  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  dstBuffer" << std::endl;
    // dstBuffer -> Field -> VkBuffer
    os << "value: " << args.dstBuffer << std::endl;
  }

  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  dstOffset" << std::endl;
    // dstOffset -> Field -> VkDeviceSize
    os << "value: " << args.dstOffset << std::endl;
  }

  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  marker" << std::endl;
    // marker -> Field -> uint32_t
    os << "value: " << args.marker << std::endl;
  }
}

void CommandPrinter::PrintBeginCommandBufferArgs(
    std::ostream& os, const BeginCommandBufferArgs& args) {
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  commandBuffer" << std::endl;
    // commandBuffer -> Field -> VkCommandBuffer
    os << "value: " << args.commandBuffer << std::endl;
  }

  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  pBeginInfo" << std::endl;
    // pBeginInfo -> Field -> ConstPointer(VkCommandBufferBeginInfo)
    // pointer
    if (args.pBeginInfo) {
      os << "members:" << std::endl << *args.pBeginInfo << std::endl;
    } else {
      os << "value: nullptr" << std::endl;
    }
  }
}

void CommandPrinter::PrintEndCommandBufferArgs(
    std::ostream& os, const EndCommandBufferArgs& args) {
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  commandBuffer" << std::endl;
    // commandBuffer -> Field -> VkCommandBuffer
    os << "value: " << args.commandBuffer << std::endl;
  }
}

void CommandPrinter::PrintResetCommandBufferArgs(
    std::ostream& os, const ResetCommandBufferArgs& args) {
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  commandBuffer" << std::endl;
    // commandBuffer -> Field -> VkCommandBuffer
    os << "value: " << args.commandBuffer << std::endl;
  }

  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  flags" << std::endl;
    // flags -> Field -> VkCommandBufferResetFlags
    os << "value: " << args.flags << std::endl;
  }
}

void CommandPrinter::PrintCmdBindPipelineArgs(std::ostream& os,
                                              const CmdBindPipelineArgs& args) {
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  commandBuffer" << std::endl;
    // commandBuffer -> Field -> VkCommandBuffer
    os << "value: " << args.commandBuffer << std::endl;
  }

  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  pipelineBindPoint" << std::endl;
    // pipelineBindPoint -> Field -> VkPipelineBindPoint
    os << "value: " << args.pipelineBindPoint << std::endl;
  }

  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  pipeline" << std::endl;
    // pipeline -> Field -> VkPipeline
    os << "value: " << args.pipeline << std::endl;
  }
}

void CommandPrinter::PrintCmdSetViewportArgs(std::ostream& os,
                                             const CmdSetViewportArgs& args) {
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  commandBuffer" << std::endl;
    // commandBuffer -> Field -> VkCommandBuffer
    os << "value: " << args.commandBuffer << std::endl;
  }

  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  firstViewport" << std::endl;
    // firstViewport -> Field -> uint32_t
    os << "value: " << args.firstViewport << std::endl;
  }

  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  viewportCount" << std::endl;
    // viewportCount -> Field -> uint32_t
    os << "value: " << args.viewportCount << std::endl;
  }

  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  pViewports" << std::endl;
    // pViewports -> Field -> ConstDynamicArray(VkViewport)
    {
      if (args.viewportCount == 0) {
        os << "value: nullptr" << std::endl;
      } else {
        os << "members:" << std::endl;
        {
          ScopedOstream soarray(os);
          os << "- # VkViewport" << std::endl;
          for (uint32_t i = 0; i < args.viewportCount; ++i) {
            ScopedOstream somember(os);
            os << "members:" << std::endl << args.pViewports[i] << std::endl;
          }
        }
      }
    }
  }
}

void CommandPrinter::PrintCmdSetScissorArgs(std::ostream& os,
                                            const CmdSetScissorArgs& args) {
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  commandBuffer" << std::endl;
    // commandBuffer -> Field -> VkCommandBuffer
    os << "value: " << args.commandBuffer << std::endl;
  }

  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  firstScissor" << std::endl;
    // firstScissor -> Field -> uint32_t
    os << "value: " << args.firstScissor << std::endl;
  }

  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  scissorCount" << std::endl;
    // scissorCount -> Field -> uint32_t
    os << "value: " << args.scissorCount << std::endl;
  }

  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  pScissors" << std::endl;
    // pScissors -> Field -> ConstDynamicArray(VkRect2D)
    {
      if (args.scissorCount == 0) {
        os << "value: nullptr" << std::endl;
      } else {
        os << "members:" << std::endl;
        {
          ScopedOstream soarray(os);
          os << "- # VkRect2D" << std::endl;
          for (uint32_t i = 0; i < args.scissorCount; ++i) {
            ScopedOstream somember(os);
            os << "members:" << std::endl << args.pScissors[i] << std::endl;
          }
        }
      }
    }
  }
}

void CommandPrinter::PrintCmdSetLineWidthArgs(std::ostream& os,
                                              const CmdSetLineWidthArgs& args) {
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  commandBuffer" << std::endl;
    // commandBuffer -> Field -> VkCommandBuffer
    os << "value: " << args.commandBuffer << std::endl;
  }

  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  lineWidth" << std::endl;
    // lineWidth -> Field -> float
    os << "value: " << args.lineWidth << std::endl;
  }
}

void CommandPrinter::PrintCmdSetDepthBiasArgs(std::ostream& os,
                                              const CmdSetDepthBiasArgs& args) {
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  commandBuffer" << std::endl;
    // commandBuffer -> Field -> VkCommandBuffer
    os << "value: " << args.commandBuffer << std::endl;
  }

  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  depthBiasConstantFactor" << std::endl;
    // depthBiasConstantFactor -> Field -> float
    os << "value: " << args.depthBiasConstantFactor << std::endl;
  }

  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  depthBiasClamp" << std::endl;
    // depthBiasClamp -> Field -> float
    os << "value: " << args.depthBiasClamp << std::endl;
  }

  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  depthBiasSlopeFactor" << std::endl;
    // depthBiasSlopeFactor -> Field -> float
    os << "value: " << args.depthBiasSlopeFactor << std::endl;
  }
}

void CommandPrinter::PrintCmdSetBlendConstantsArgs(
    std::ostream& os, const CmdSetBlendConstantsArgs& args) {
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  commandBuffer" << std::endl;
    // commandBuffer -> Field -> VkCommandBuffer
    os << "value: " << args.commandBuffer << std::endl;
  }

  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  blendConstants" << std::endl;
    // blendConstants -> Field -> ConstFixedArray(float)
    {
      if (4 == 0) {
        os << "value: nullptr" << std::endl;
      } else {
        os << "members:" << std::endl;
        {
          ScopedOstream soarray(os);
          os << "- # float" << std::endl;
          for (uint32_t i = 0; i < 4; ++i) {
            ScopedOstream somember(os);
            os << "value: " << args.blendConstants[i] << std::endl;
          }
        }
      }
    }
  }
}

void CommandPrinter::PrintCmdSetDepthBoundsArgs(
    std::ostream& os, const CmdSetDepthBoundsArgs& args) {
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  commandBuffer" << std::endl;
    // commandBuffer -> Field -> VkCommandBuffer
    os << "value: " << args.commandBuffer << std::endl;
  }

  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  minDepthBounds" << std::endl;
    // minDepthBounds -> Field -> float
    os << "value: " << args.minDepthBounds << std::endl;
  }

  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  maxDepthBounds" << std::endl;
    // maxDepthBounds -> Field -> float
    os << "value: " << args.maxDepthBounds << std::endl;
  }
}

void CommandPrinter::PrintCmdSetStencilCompareMaskArgs(
    std::ostream& os, const CmdSetStencilCompareMaskArgs& args) {
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  commandBuffer" << std::endl;
    // commandBuffer -> Field -> VkCommandBuffer
    os << "value: " << args.commandBuffer << std::endl;
  }

  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  faceMask" << std::endl;
    // faceMask -> Field -> VkStencilFaceFlags
    os << "value: " << args.faceMask << std::endl;
  }

  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  compareMask" << std::endl;
    // compareMask -> Field -> uint32_t
    os << "value: " << args.compareMask << std::endl;
  }
}

void CommandPrinter::PrintCmdSetStencilWriteMaskArgs(
    std::ostream& os, const CmdSetStencilWriteMaskArgs& args) {
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  commandBuffer" << std::endl;
    // commandBuffer -> Field -> VkCommandBuffer
    os << "value: " << args.commandBuffer << std::endl;
  }

  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  faceMask" << std::endl;
    // faceMask -> Field -> VkStencilFaceFlags
    os << "value: " << args.faceMask << std::endl;
  }

  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  writeMask" << std::endl;
    // writeMask -> Field -> uint32_t
    os << "value: " << args.writeMask << std::endl;
  }
}

void CommandPrinter::PrintCmdSetStencilReferenceArgs(
    std::ostream& os, const CmdSetStencilReferenceArgs& args) {
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  commandBuffer" << std::endl;
    // commandBuffer -> Field -> VkCommandBuffer
    os << "value: " << args.commandBuffer << std::endl;
  }

  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  faceMask" << std::endl;
    // faceMask -> Field -> VkStencilFaceFlags
    os << "value: " << args.faceMask << std::endl;
  }

  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  reference" << std::endl;
    // reference -> Field -> uint32_t
    os << "value: " << args.reference << std::endl;
  }
}

void CommandPrinter::PrintCmdBindDescriptorSetsArgs(
    std::ostream& os, const CmdBindDescriptorSetsArgs& args) {
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  commandBuffer" << std::endl;
    // commandBuffer -> Field -> VkCommandBuffer
    os << "value: " << args.commandBuffer << std::endl;
  }

  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  pipelineBindPoint" << std::endl;
    // pipelineBindPoint -> Field -> VkPipelineBindPoint
    os << "value: " << args.pipelineBindPoint << std::endl;
  }

  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  layout" << std::endl;
    // layout -> Field -> VkPipelineLayout
    os << "value: " << args.layout << std::endl;
  }

  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  firstSet" << std::endl;
    // firstSet -> Field -> uint32_t
    os << "value: " << args.firstSet << std::endl;
  }

  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  descriptorSetCount" << std::endl;
    // descriptorSetCount -> Field -> uint32_t
    os << "value: " << args.descriptorSetCount << std::endl;
  }

  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  pDescriptorSets" << std::endl;
    // pDescriptorSets -> Field -> ConstDynamicArray(VkDescriptorSet)
    {
      if (args.descriptorSetCount == 0) {
        os << "value: nullptr" << std::endl;
      } else {
        os << "members:" << std::endl;
        {
          ScopedOstream soarray(os);
          os << "- # VkDescriptorSet" << std::endl;
          for (uint32_t i = 0; i < args.descriptorSetCount; ++i) {
            ScopedOstream somember(os);
            os << "value: " << args.pDescriptorSets[i] << std::endl;
          }
        }
      }
    }
  }

  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  dynamicOffsetCount" << std::endl;
    // dynamicOffsetCount -> Field -> uint32_t
    os << "value: " << args.dynamicOffsetCount << std::endl;
  }

  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  pDynamicOffsets" << std::endl;
    // pDynamicOffsets -> Field -> ConstDynamicArray(uint32_t)
    {
      if (args.dynamicOffsetCount == 0) {
        os << "value: nullptr" << std::endl;
      } else {
        os << "members:" << std::endl;
        {
          ScopedOstream soarray(os);
          os << "- # uint32_t" << std::endl;
          for (uint32_t i = 0; i < args.dynamicOffsetCount; ++i) {
            ScopedOstream somember(os);
            os << "value: " << args.pDynamicOffsets[i] << std::endl;
          }
        }
      }
    }
  }
}

void CommandPrinter::PrintCmdBindIndexBufferArgs(
    std::ostream& os, const CmdBindIndexBufferArgs& args) {
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  commandBuffer" << std::endl;
    // commandBuffer -> Field -> VkCommandBuffer
    os << "value: " << args.commandBuffer << std::endl;
  }

  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  buffer" << std::endl;
    // buffer -> Field -> VkBuffer
    os << "value: " << args.buffer << std::endl;
  }

  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  offset" << std::endl;
    // offset -> Field -> VkDeviceSize
    os << "value: " << args.offset << std::endl;
  }

  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  indexType" << std::endl;
    // indexType -> Field -> VkIndexType
    os << "value: " << args.indexType << std::endl;
  }
}

void CommandPrinter::PrintCmdBindVertexBuffersArgs(
    std::ostream& os, const CmdBindVertexBuffersArgs& args) {
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  commandBuffer" << std::endl;
    // commandBuffer -> Field -> VkCommandBuffer
    os << "value: " << args.commandBuffer << std::endl;
  }

  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  firstBinding" << std::endl;
    // firstBinding -> Field -> uint32_t
    os << "value: " << args.firstBinding << std::endl;
  }

  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  bindingCount" << std::endl;
    // bindingCount -> Field -> uint32_t
    os << "value: " << args.bindingCount << std::endl;
  }

  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  pBuffers" << std::endl;
    // pBuffers -> Field -> ConstDynamicArray(VkBuffer)
    {
      if (args.bindingCount == 0) {
        os << "value: nullptr" << std::endl;
      } else {
        os << "members:" << std::endl;
        {
          ScopedOstream soarray(os);
          os << "- # VkBuffer" << std::endl;
          for (uint32_t i = 0; i < args.bindingCount; ++i) {
            ScopedOstream somember(os);
            os << "value: " << args.pBuffers[i] << std::endl;
          }
        }
      }
    }
  }

  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  pOffsets" << std::endl;
    // pOffsets -> Field -> ConstDynamicArray(VkDeviceSize)
    {
      if (args.bindingCount == 0) {
        os << "value: nullptr" << std::endl;
      } else {
        os << "members:" << std::endl;
        {
          ScopedOstream soarray(os);
          os << "- # VkDeviceSize" << std::endl;
          for (uint32_t i = 0; i < args.bindingCount; ++i) {
            ScopedOstream somember(os);
            os << "value: " << args.pOffsets[i] << std::endl;
          }
        }
      }
    }
  }
}

void CommandPrinter::PrintCmdDrawArgs(std::ostream& os,
                                      const CmdDrawArgs& args) {
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  commandBuffer" << std::endl;
    // commandBuffer -> Field -> VkCommandBuffer
    os << "value: " << args.commandBuffer << std::endl;
  }

  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  vertexCount" << std::endl;
    // vertexCount -> Field -> uint32_t
    os << "value: " << args.vertexCount << std::endl;
  }

  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  instanceCount" << std::endl;
    // instanceCount -> Field -> uint32_t
    os << "value: " << args.instanceCount << std::endl;
  }

  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  firstVertex" << std::endl;
    // firstVertex -> Field -> uint32_t
    os << "value: " << args.firstVertex << std::endl;
  }

  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  firstInstance" << std::endl;
    // firstInstance -> Field -> uint32_t
    os << "value: " << args.firstInstance << std::endl;
  }
}

void CommandPrinter::PrintCmdDrawIndexedArgs(std::ostream& os,
                                             const CmdDrawIndexedArgs& args) {
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  commandBuffer" << std::endl;
    // commandBuffer -> Field -> VkCommandBuffer
    os << "value: " << args.commandBuffer << std::endl;
  }

  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  indexCount" << std::endl;
    // indexCount -> Field -> uint32_t
    os << "value: " << args.indexCount << std::endl;
  }

  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  instanceCount" << std::endl;
    // instanceCount -> Field -> uint32_t
    os << "value: " << args.instanceCount << std::endl;
  }

  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  firstIndex" << std::endl;
    // firstIndex -> Field -> uint32_t
    os << "value: " << args.firstIndex << std::endl;
  }

  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  vertexOffset" << std::endl;
    // vertexOffset -> Field -> int32_t
    os << "value: " << args.vertexOffset << std::endl;
  }

  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  firstInstance" << std::endl;
    // firstInstance -> Field -> uint32_t
    os << "value: " << args.firstInstance << std::endl;
  }
}

void CommandPrinter::PrintCmdDrawIndirectArgs(std::ostream& os,
                                              const CmdDrawIndirectArgs& args) {
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  commandBuffer" << std::endl;
    // commandBuffer -> Field -> VkCommandBuffer
    os << "value: " << args.commandBuffer << std::endl;
  }

  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  buffer" << std::endl;
    // buffer -> Field -> VkBuffer
    os << "value: " << args.buffer << std::endl;
  }

  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  offset" << std::endl;
    // offset -> Field -> VkDeviceSize
    os << "value: " << args.offset << std::endl;
  }

  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  drawCount" << std::endl;
    // drawCount -> Field -> uint32_t
    os << "value: " << args.drawCount << std::endl;
  }

  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  stride" << std::endl;
    // stride -> Field -> uint32_t
    os << "value: " << args.stride << std::endl;
  }
}

void CommandPrinter::PrintCmdDrawIndexedIndirectArgs(
    std::ostream& os, const CmdDrawIndexedIndirectArgs& args) {
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  commandBuffer" << std::endl;
    // commandBuffer -> Field -> VkCommandBuffer
    os << "value: " << args.commandBuffer << std::endl;
  }

  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  buffer" << std::endl;
    // buffer -> Field -> VkBuffer
    os << "value: " << args.buffer << std::endl;
  }

  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  offset" << std::endl;
    // offset -> Field -> VkDeviceSize
    os << "value: " << args.offset << std::endl;
  }

  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  drawCount" << std::endl;
    // drawCount -> Field -> uint32_t
    os << "value: " << args.drawCount << std::endl;
  }

  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  stride" << std::endl;
    // stride -> Field -> uint32_t
    os << "value: " << args.stride << std::endl;
  }
}

void CommandPrinter::PrintCmdDispatchArgs(std::ostream& os,
                                          const CmdDispatchArgs& args) {
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  commandBuffer" << std::endl;
    // commandBuffer -> Field -> VkCommandBuffer
    os << "value: " << args.commandBuffer << std::endl;
  }

  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  groupCountX" << std::endl;
    // groupCountX -> Field -> uint32_t
    os << "value: " << args.groupCountX << std::endl;
  }

  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  groupCountY" << std::endl;
    // groupCountY -> Field -> uint32_t
    os << "value: " << args.groupCountY << std::endl;
  }

  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  groupCountZ" << std::endl;
    // groupCountZ -> Field -> uint32_t
    os << "value: " << args.groupCountZ << std::endl;
  }
}

void CommandPrinter::PrintCmdDispatchIndirectArgs(
    std::ostream& os, const CmdDispatchIndirectArgs& args) {
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  commandBuffer" << std::endl;
    // commandBuffer -> Field -> VkCommandBuffer
    os << "value: " << args.commandBuffer << std::endl;
  }

  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  buffer" << std::endl;
    // buffer -> Field -> VkBuffer
    os << "value: " << args.buffer << std::endl;
  }

  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  offset" << std::endl;
    // offset -> Field -> VkDeviceSize
    os << "value: " << args.offset << std::endl;
  }
}

void CommandPrinter::PrintCmdCopyBufferArgs(std::ostream& os,
                                            const CmdCopyBufferArgs& args) {
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  commandBuffer" << std::endl;
    // commandBuffer -> Field -> VkCommandBuffer
    os << "value: " << args.commandBuffer << std::endl;
  }

  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  srcBuffer" << std::endl;
    // srcBuffer -> Field -> VkBuffer
    os << "value: " << args.srcBuffer << std::endl;
  }

  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  dstBuffer" << std::endl;
    // dstBuffer -> Field -> VkBuffer
    os << "value: " << args.dstBuffer << std::endl;
  }

  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  regionCount" << std::endl;
    // regionCount -> Field -> uint32_t
    os << "value: " << args.regionCount << std::endl;
  }

  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  pRegions" << std::endl;
    // pRegions -> Field -> ConstDynamicArray(VkBufferCopy)
    {
      if (args.regionCount == 0) {
        os << "value: nullptr" << std::endl;
      } else {
        os << "members:" << std::endl;
        {
          ScopedOstream soarray(os);
          os << "- # VkBufferCopy" << std::endl;
          for (uint32_t i = 0; i < args.regionCount; ++i) {
            ScopedOstream somember(os);
            os << "members:" << std::endl << args.pRegions[i] << std::endl;
          }
        }
      }
    }
  }
}

void CommandPrinter::PrintCmdCopyImageArgs(std::ostream& os,
                                           const CmdCopyImageArgs& args) {
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  commandBuffer" << std::endl;
    // commandBuffer -> Field -> VkCommandBuffer
    os << "value: " << args.commandBuffer << std::endl;
  }

  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  srcImage" << std::endl;
    // srcImage -> Field -> VkImage
    os << "value: " << args.srcImage << std::endl;
  }

  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  srcImageLayout" << std::endl;
    // srcImageLayout -> Field -> VkImageLayout
    os << "value: " << args.srcImageLayout << std::endl;
  }

  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  dstImage" << std::endl;
    // dstImage -> Field -> VkImage
    os << "value: " << args.dstImage << std::endl;
  }

  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  dstImageLayout" << std::endl;
    // dstImageLayout -> Field -> VkImageLayout
    os << "value: " << args.dstImageLayout << std::endl;
  }

  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  regionCount" << std::endl;
    // regionCount -> Field -> uint32_t
    os << "value: " << args.regionCount << std::endl;
  }

  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  pRegions" << std::endl;
    // pRegions -> Field -> ConstDynamicArray(VkImageCopy)
    {
      if (args.regionCount == 0) {
        os << "value: nullptr" << std::endl;
      } else {
        os << "members:" << std::endl;
        {
          ScopedOstream soarray(os);
          os << "- # VkImageCopy" << std::endl;
          for (uint32_t i = 0; i < args.regionCount; ++i) {
            ScopedOstream somember(os);
            os << "members:" << std::endl << args.pRegions[i] << std::endl;
          }
        }
      }
    }
  }
}

void CommandPrinter::PrintCmdBlitImageArgs(std::ostream& os,
                                           const CmdBlitImageArgs& args) {
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  commandBuffer" << std::endl;
    // commandBuffer -> Field -> VkCommandBuffer
    os << "value: " << args.commandBuffer << std::endl;
  }

  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  srcImage" << std::endl;
    // srcImage -> Field -> VkImage
    os << "value: " << args.srcImage << std::endl;
  }

  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  srcImageLayout" << std::endl;
    // srcImageLayout -> Field -> VkImageLayout
    os << "value: " << args.srcImageLayout << std::endl;
  }

  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  dstImage" << std::endl;
    // dstImage -> Field -> VkImage
    os << "value: " << args.dstImage << std::endl;
  }

  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  dstImageLayout" << std::endl;
    // dstImageLayout -> Field -> VkImageLayout
    os << "value: " << args.dstImageLayout << std::endl;
  }

  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  regionCount" << std::endl;
    // regionCount -> Field -> uint32_t
    os << "value: " << args.regionCount << std::endl;
  }

  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  pRegions" << std::endl;
    // pRegions -> Field -> ConstDynamicArray(VkImageBlit)
    {
      if (args.regionCount == 0) {
        os << "value: nullptr" << std::endl;
      } else {
        os << "members:" << std::endl;
        {
          ScopedOstream soarray(os);
          os << "- # VkImageBlit" << std::endl;
          for (uint32_t i = 0; i < args.regionCount; ++i) {
            ScopedOstream somember(os);
            os << "members:" << std::endl << args.pRegions[i] << std::endl;
          }
        }
      }
    }
  }

  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  filter" << std::endl;
    // filter -> Field -> VkFilter
    os << "value: " << args.filter << std::endl;
  }
}

void CommandPrinter::PrintCmdCopyBufferToImageArgs(
    std::ostream& os, const CmdCopyBufferToImageArgs& args) {
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  commandBuffer" << std::endl;
    // commandBuffer -> Field -> VkCommandBuffer
    os << "value: " << args.commandBuffer << std::endl;
  }

  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  srcBuffer" << std::endl;
    // srcBuffer -> Field -> VkBuffer
    os << "value: " << args.srcBuffer << std::endl;
  }

  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  dstImage" << std::endl;
    // dstImage -> Field -> VkImage
    os << "value: " << args.dstImage << std::endl;
  }

  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  dstImageLayout" << std::endl;
    // dstImageLayout -> Field -> VkImageLayout
    os << "value: " << args.dstImageLayout << std::endl;
  }

  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  regionCount" << std::endl;
    // regionCount -> Field -> uint32_t
    os << "value: " << args.regionCount << std::endl;
  }

  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  pRegions" << std::endl;
    // pRegions -> Field -> ConstDynamicArray(VkBufferImageCopy)
    {
      if (args.regionCount == 0) {
        os << "value: nullptr" << std::endl;
      } else {
        os << "members:" << std::endl;
        {
          ScopedOstream soarray(os);
          os << "- # VkBufferImageCopy" << std::endl;
          for (uint32_t i = 0; i < args.regionCount; ++i) {
            ScopedOstream somember(os);
            os << "members:" << std::endl << args.pRegions[i] << std::endl;
          }
        }
      }
    }
  }
}

void CommandPrinter::PrintCmdCopyImageToBufferArgs(
    std::ostream& os, const CmdCopyImageToBufferArgs& args) {
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  commandBuffer" << std::endl;
    // commandBuffer -> Field -> VkCommandBuffer
    os << "value: " << args.commandBuffer << std::endl;
  }

  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  srcImage" << std::endl;
    // srcImage -> Field -> VkImage
    os << "value: " << args.srcImage << std::endl;
  }

  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  srcImageLayout" << std::endl;
    // srcImageLayout -> Field -> VkImageLayout
    os << "value: " << args.srcImageLayout << std::endl;
  }

  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  dstBuffer" << std::endl;
    // dstBuffer -> Field -> VkBuffer
    os << "value: " << args.dstBuffer << std::endl;
  }

  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  regionCount" << std::endl;
    // regionCount -> Field -> uint32_t
    os << "value: " << args.regionCount << std::endl;
  }

  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  pRegions" << std::endl;
    // pRegions -> Field -> ConstDynamicArray(VkBufferImageCopy)
    {
      if (args.regionCount == 0) {
        os << "value: nullptr" << std::endl;
      } else {
        os << "members:" << std::endl;
        {
          ScopedOstream soarray(os);
          os << "- # VkBufferImageCopy" << std::endl;
          for (uint32_t i = 0; i < args.regionCount; ++i) {
            ScopedOstream somember(os);
            os << "members:" << std::endl << args.pRegions[i] << std::endl;
          }
        }
      }
    }
  }
}

void CommandPrinter::PrintCmdUpdateBufferArgs(std::ostream& os,
                                              const CmdUpdateBufferArgs& args) {
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  commandBuffer" << std::endl;
    // commandBuffer -> Field -> VkCommandBuffer
    os << "value: " << args.commandBuffer << std::endl;
  }

  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  dstBuffer" << std::endl;
    // dstBuffer -> Field -> VkBuffer
    os << "value: " << args.dstBuffer << std::endl;
  }

  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  dstOffset" << std::endl;
    // dstOffset -> Field -> VkDeviceSize
    os << "value: " << args.dstOffset << std::endl;
  }

  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  dataSize" << std::endl;
    // dataSize -> Field -> VkDeviceSize
    os << "value: " << args.dataSize << std::endl;
  }

  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  pData" << std::endl;
    // pData -> Field -> ConstDynamicArray(void)
    {
      if (args.dataSize == 0) {
        os << "value: nullptr" << std::endl;
      } else {
        os << std::hex;
        os << "members:" << std::endl;
        {
          ScopedOstream soarray(os);
          const uint8_t* p = (const uint8_t*)args.pData;
          for (uint32_t i = 0; i < args.dataSize; ++i) {
            os << "- 0x" << p[i] << std::endl;
          }
        }
        os << std::dec;
      }
    }
  }
}

void CommandPrinter::PrintCmdFillBufferArgs(std::ostream& os,
                                            const CmdFillBufferArgs& args) {
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  commandBuffer" << std::endl;
    // commandBuffer -> Field -> VkCommandBuffer
    os << "value: " << args.commandBuffer << std::endl;
  }

  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  dstBuffer" << std::endl;
    // dstBuffer -> Field -> VkBuffer
    os << "value: " << args.dstBuffer << std::endl;
  }

  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  dstOffset" << std::endl;
    // dstOffset -> Field -> VkDeviceSize
    os << "value: " << args.dstOffset << std::endl;
  }

  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  size" << std::endl;
    // size -> Field -> VkDeviceSize
    os << "value: " << args.size << std::endl;
  }

  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  data" << std::endl;
    // data -> Field -> uint32_t
    os << "value: " << args.data << std::endl;
  }
}

void CommandPrinter::PrintCmdClearColorImageArgs(
    std::ostream& os, const CmdClearColorImageArgs& args) {
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  commandBuffer" << std::endl;
    // commandBuffer -> Field -> VkCommandBuffer
    os << "value: " << args.commandBuffer << std::endl;
  }

  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  image" << std::endl;
    // image -> Field -> VkImage
    os << "value: " << args.image << std::endl;
  }

  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  imageLayout" << std::endl;
    // imageLayout -> Field -> VkImageLayout
    os << "value: " << args.imageLayout << std::endl;
  }

  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  pColor" << std::endl;
    // pColor -> Field -> ConstPointer(VkClearColorValue)
    // pointer
    if (args.pColor) {
      os << "members:" << std::endl << *args.pColor << std::endl;
    } else {
      os << "value: nullptr" << std::endl;
    }
  }

  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  rangeCount" << std::endl;
    // rangeCount -> Field -> uint32_t
    os << "value: " << args.rangeCount << std::endl;
  }

  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  pRanges" << std::endl;
    // pRanges -> Field -> ConstDynamicArray(VkImageSubresourceRange)
    {
      if (args.rangeCount == 0) {
        os << "value: nullptr" << std::endl;
      } else {
        os << "members:" << std::endl;
        {
          ScopedOstream soarray(os);
          os << "- # VkImageSubresourceRange" << std::endl;
          for (uint32_t i = 0; i < args.rangeCount; ++i) {
            ScopedOstream somember(os);
            os << "members:" << std::endl << args.pRanges[i] << std::endl;
          }
        }
      }
    }
  }
}

void CommandPrinter::PrintCmdClearDepthStencilImageArgs(
    std::ostream& os, const CmdClearDepthStencilImageArgs& args) {
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  commandBuffer" << std::endl;
    // commandBuffer -> Field -> VkCommandBuffer
    os << "value: " << args.commandBuffer << std::endl;
  }

  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  image" << std::endl;
    // image -> Field -> VkImage
    os << "value: " << args.image << std::endl;
  }

  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  imageLayout" << std::endl;
    // imageLayout -> Field -> VkImageLayout
    os << "value: " << args.imageLayout << std::endl;
  }

  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  pDepthStencil" << std::endl;
    // pDepthStencil -> Field -> ConstPointer(VkClearDepthStencilValue)
    // pointer
    if (args.pDepthStencil) {
      os << "members:" << std::endl << *args.pDepthStencil << std::endl;
    } else {
      os << "value: nullptr" << std::endl;
    }
  }

  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  rangeCount" << std::endl;
    // rangeCount -> Field -> uint32_t
    os << "value: " << args.rangeCount << std::endl;
  }

  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  pRanges" << std::endl;
    // pRanges -> Field -> ConstDynamicArray(VkImageSubresourceRange)
    {
      if (args.rangeCount == 0) {
        os << "value: nullptr" << std::endl;
      } else {
        os << "members:" << std::endl;
        {
          ScopedOstream soarray(os);
          os << "- # VkImageSubresourceRange" << std::endl;
          for (uint32_t i = 0; i < args.rangeCount; ++i) {
            ScopedOstream somember(os);
            os << "members:" << std::endl << args.pRanges[i] << std::endl;
          }
        }
      }
    }
  }
}

void CommandPrinter::PrintCmdClearAttachmentsArgs(
    std::ostream& os, const CmdClearAttachmentsArgs& args) {
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  commandBuffer" << std::endl;
    // commandBuffer -> Field -> VkCommandBuffer
    os << "value: " << args.commandBuffer << std::endl;
  }

  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  attachmentCount" << std::endl;
    // attachmentCount -> Field -> uint32_t
    os << "value: " << args.attachmentCount << std::endl;
  }

  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  pAttachments" << std::endl;
    // pAttachments -> Field -> ConstDynamicArray(VkClearAttachment)
    {
      if (args.attachmentCount == 0) {
        os << "value: nullptr" << std::endl;
      } else {
        os << "members:" << std::endl;
        {
          ScopedOstream soarray(os);
          os << "- # VkClearAttachment" << std::endl;
          for (uint32_t i = 0; i < args.attachmentCount; ++i) {
            ScopedOstream somember(os);
            os << "members:" << std::endl << args.pAttachments[i] << std::endl;
          }
        }
      }
    }
  }

  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  rectCount" << std::endl;
    // rectCount -> Field -> uint32_t
    os << "value: " << args.rectCount << std::endl;
  }

  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  pRects" << std::endl;
    // pRects -> Field -> ConstDynamicArray(VkClearRect)
    {
      if (args.rectCount == 0) {
        os << "value: nullptr" << std::endl;
      } else {
        os << "members:" << std::endl;
        {
          ScopedOstream soarray(os);
          os << "- # VkClearRect" << std::endl;
          for (uint32_t i = 0; i < args.rectCount; ++i) {
            ScopedOstream somember(os);
            os << "members:" << std::endl << args.pRects[i] << std::endl;
          }
        }
      }
    }
  }
}

void CommandPrinter::PrintCmdResolveImageArgs(std::ostream& os,
                                              const CmdResolveImageArgs& args) {
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  commandBuffer" << std::endl;
    // commandBuffer -> Field -> VkCommandBuffer
    os << "value: " << args.commandBuffer << std::endl;
  }

  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  srcImage" << std::endl;
    // srcImage -> Field -> VkImage
    os << "value: " << args.srcImage << std::endl;
  }

  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  srcImageLayout" << std::endl;
    // srcImageLayout -> Field -> VkImageLayout
    os << "value: " << args.srcImageLayout << std::endl;
  }

  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  dstImage" << std::endl;
    // dstImage -> Field -> VkImage
    os << "value: " << args.dstImage << std::endl;
  }

  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  dstImageLayout" << std::endl;
    // dstImageLayout -> Field -> VkImageLayout
    os << "value: " << args.dstImageLayout << std::endl;
  }

  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  regionCount" << std::endl;
    // regionCount -> Field -> uint32_t
    os << "value: " << args.regionCount << std::endl;
  }

  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  pRegions" << std::endl;
    // pRegions -> Field -> ConstDynamicArray(VkImageResolve)
    {
      if (args.regionCount == 0) {
        os << "value: nullptr" << std::endl;
      } else {
        os << "members:" << std::endl;
        {
          ScopedOstream soarray(os);
          os << "- # VkImageResolve" << std::endl;
          for (uint32_t i = 0; i < args.regionCount; ++i) {
            ScopedOstream somember(os);
            os << "members:" << std::endl << args.pRegions[i] << std::endl;
          }
        }
      }
    }
  }
}

void CommandPrinter::PrintCmdSetEventArgs(std::ostream& os,
                                          const CmdSetEventArgs& args) {
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  commandBuffer" << std::endl;
    // commandBuffer -> Field -> VkCommandBuffer
    os << "value: " << args.commandBuffer << std::endl;
  }

  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  event" << std::endl;
    // event -> Field -> VkEvent
    os << "value: " << args.event << std::endl;
  }

  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  stageMask" << std::endl;
    // stageMask -> Field -> VkPipelineStageFlags
    os << "value: " << args.stageMask << std::endl;
  }
}

void CommandPrinter::PrintCmdResetEventArgs(std::ostream& os,
                                            const CmdResetEventArgs& args) {
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  commandBuffer" << std::endl;
    // commandBuffer -> Field -> VkCommandBuffer
    os << "value: " << args.commandBuffer << std::endl;
  }

  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  event" << std::endl;
    // event -> Field -> VkEvent
    os << "value: " << args.event << std::endl;
  }

  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  stageMask" << std::endl;
    // stageMask -> Field -> VkPipelineStageFlags
    os << "value: " << args.stageMask << std::endl;
  }
}

void CommandPrinter::PrintCmdWaitEventsArgs(std::ostream& os,
                                            const CmdWaitEventsArgs& args) {
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  commandBuffer" << std::endl;
    // commandBuffer -> Field -> VkCommandBuffer
    os << "value: " << args.commandBuffer << std::endl;
  }

  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  eventCount" << std::endl;
    // eventCount -> Field -> uint32_t
    os << "value: " << args.eventCount << std::endl;
  }

  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  pEvents" << std::endl;
    // pEvents -> Field -> ConstDynamicArray(VkEvent)
    {
      if (args.eventCount == 0) {
        os << "value: nullptr" << std::endl;
      } else {
        os << "members:" << std::endl;
        {
          ScopedOstream soarray(os);
          os << "- # VkEvent" << std::endl;
          for (uint32_t i = 0; i < args.eventCount; ++i) {
            ScopedOstream somember(os);
            os << "value: " << args.pEvents[i] << std::endl;
          }
        }
      }
    }
  }

  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  srcStageMask" << std::endl;
    // srcStageMask -> Field -> VkPipelineStageFlags
    os << "value: " << args.srcStageMask << std::endl;
  }

  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  dstStageMask" << std::endl;
    // dstStageMask -> Field -> VkPipelineStageFlags
    os << "value: " << args.dstStageMask << std::endl;
  }

  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  memoryBarrierCount" << std::endl;
    // memoryBarrierCount -> Field -> uint32_t
    os << "value: " << args.memoryBarrierCount << std::endl;
  }

  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  pMemoryBarriers" << std::endl;
    // pMemoryBarriers -> Field -> ConstDynamicArray(VkMemoryBarrier)
    {
      if (args.memoryBarrierCount == 0) {
        os << "value: nullptr" << std::endl;
      } else {
        os << "members:" << std::endl;
        {
          ScopedOstream soarray(os);
          os << "- # VkMemoryBarrier" << std::endl;
          for (uint32_t i = 0; i < args.memoryBarrierCount; ++i) {
            ScopedOstream somember(os);
            os << "members:" << std::endl
               << args.pMemoryBarriers[i] << std::endl;
          }
        }
      }
    }
  }

  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  bufferMemoryBarrierCount" << std::endl;
    // bufferMemoryBarrierCount -> Field -> uint32_t
    os << "value: " << args.bufferMemoryBarrierCount << std::endl;
  }

  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  pBufferMemoryBarriers" << std::endl;
    // pBufferMemoryBarriers -> Field ->
    // ConstDynamicArray(VkBufferMemoryBarrier)
    {
      if (args.bufferMemoryBarrierCount == 0) {
        os << "value: nullptr" << std::endl;
      } else {
        os << "members:" << std::endl;
        {
          ScopedOstream soarray(os);
          os << "- # VkBufferMemoryBarrier" << std::endl;
          for (uint32_t i = 0; i < args.bufferMemoryBarrierCount; ++i) {
            ScopedOstream somember(os);
            os << "members:" << std::endl
               << args.pBufferMemoryBarriers[i] << std::endl;
          }
        }
      }
    }
  }

  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  imageMemoryBarrierCount" << std::endl;
    // imageMemoryBarrierCount -> Field -> uint32_t
    os << "value: " << args.imageMemoryBarrierCount << std::endl;
  }

  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  pImageMemoryBarriers" << std::endl;
    // pImageMemoryBarriers -> Field -> ConstDynamicArray(VkImageMemoryBarrier)
    {
      if (args.imageMemoryBarrierCount == 0) {
        os << "value: nullptr" << std::endl;
      } else {
        os << "members:" << std::endl;
        {
          ScopedOstream soarray(os);
          os << "- # VkImageMemoryBarrier" << std::endl;
          for (uint32_t i = 0; i < args.imageMemoryBarrierCount; ++i) {
            ScopedOstream somember(os);
            os << "members:" << std::endl
               << args.pImageMemoryBarriers[i] << std::endl;
          }
        }
      }
    }
  }
}

void CommandPrinter::PrintCmdPipelineBarrierArgs(
    std::ostream& os, const CmdPipelineBarrierArgs& args) {
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  commandBuffer" << std::endl;
    // commandBuffer -> Field -> VkCommandBuffer
    os << "value: " << args.commandBuffer << std::endl;
  }

  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  srcStageMask" << std::endl;
    // srcStageMask -> Field -> VkPipelineStageFlags
    os << "value: " << args.srcStageMask << std::endl;
  }

  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  dstStageMask" << std::endl;
    // dstStageMask -> Field -> VkPipelineStageFlags
    os << "value: " << args.dstStageMask << std::endl;
  }

  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  dependencyFlags" << std::endl;
    // dependencyFlags -> Field -> VkDependencyFlags
    os << "value: " << args.dependencyFlags << std::endl;
  }

  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  memoryBarrierCount" << std::endl;
    // memoryBarrierCount -> Field -> uint32_t
    os << "value: " << args.memoryBarrierCount << std::endl;
  }

  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  pMemoryBarriers" << std::endl;
    // pMemoryBarriers -> Field -> ConstDynamicArray(VkMemoryBarrier)
    {
      if (args.memoryBarrierCount == 0) {
        os << "value: nullptr" << std::endl;
      } else {
        os << "members:" << std::endl;
        {
          ScopedOstream soarray(os);
          os << "- # VkMemoryBarrier" << std::endl;
          for (uint32_t i = 0; i < args.memoryBarrierCount; ++i) {
            ScopedOstream somember(os);
            os << "members:" << std::endl
               << args.pMemoryBarriers[i] << std::endl;
          }
        }
      }
    }
  }

  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  bufferMemoryBarrierCount" << std::endl;
    // bufferMemoryBarrierCount -> Field -> uint32_t
    os << "value: " << args.bufferMemoryBarrierCount << std::endl;
  }

  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  pBufferMemoryBarriers" << std::endl;
    // pBufferMemoryBarriers -> Field ->
    // ConstDynamicArray(VkBufferMemoryBarrier)
    {
      if (args.bufferMemoryBarrierCount == 0) {
        os << "value: nullptr" << std::endl;
      } else {
        os << "members:" << std::endl;
        {
          ScopedOstream soarray(os);
          os << "- # VkBufferMemoryBarrier" << std::endl;
          for (uint32_t i = 0; i < args.bufferMemoryBarrierCount; ++i) {
            ScopedOstream somember(os);
            os << "members:" << std::endl
               << args.pBufferMemoryBarriers[i] << std::endl;
          }
        }
      }
    }
  }

  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  imageMemoryBarrierCount" << std::endl;
    // imageMemoryBarrierCount -> Field -> uint32_t
    os << "value: " << args.imageMemoryBarrierCount << std::endl;
  }

  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  pImageMemoryBarriers" << std::endl;
    // pImageMemoryBarriers -> Field -> ConstDynamicArray(VkImageMemoryBarrier)
    {
      if (args.imageMemoryBarrierCount == 0) {
        os << "value: nullptr" << std::endl;
      } else {
        os << "members:" << std::endl;
        {
          ScopedOstream soarray(os);
          os << "- # VkImageMemoryBarrier" << std::endl;
          for (uint32_t i = 0; i < args.imageMemoryBarrierCount; ++i) {
            ScopedOstream somember(os);
            os << "members:" << std::endl
               << args.pImageMemoryBarriers[i] << std::endl;
          }
        }
      }
    }
  }
}

void CommandPrinter::PrintCmdBeginQueryArgs(std::ostream& os,
                                            const CmdBeginQueryArgs& args) {
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  commandBuffer" << std::endl;
    // commandBuffer -> Field -> VkCommandBuffer
    os << "value: " << args.commandBuffer << std::endl;
  }

  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  queryPool" << std::endl;
    // queryPool -> Field -> VkQueryPool
    os << "value: " << args.queryPool << std::endl;
  }

  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  query" << std::endl;
    // query -> Field -> uint32_t
    os << "value: " << args.query << std::endl;
  }

  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  flags" << std::endl;
    // flags -> Field -> VkQueryControlFlags
    os << "value: " << args.flags << std::endl;
  }
}

void CommandPrinter::PrintCmdEndQueryArgs(std::ostream& os,
                                          const CmdEndQueryArgs& args) {
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  commandBuffer" << std::endl;
    // commandBuffer -> Field -> VkCommandBuffer
    os << "value: " << args.commandBuffer << std::endl;
  }

  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  queryPool" << std::endl;
    // queryPool -> Field -> VkQueryPool
    os << "value: " << args.queryPool << std::endl;
  }

  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  query" << std::endl;
    // query -> Field -> uint32_t
    os << "value: " << args.query << std::endl;
  }
}

void CommandPrinter::PrintCmdResetQueryPoolArgs(
    std::ostream& os, const CmdResetQueryPoolArgs& args) {
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  commandBuffer" << std::endl;
    // commandBuffer -> Field -> VkCommandBuffer
    os << "value: " << args.commandBuffer << std::endl;
  }

  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  queryPool" << std::endl;
    // queryPool -> Field -> VkQueryPool
    os << "value: " << args.queryPool << std::endl;
  }

  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  firstQuery" << std::endl;
    // firstQuery -> Field -> uint32_t
    os << "value: " << args.firstQuery << std::endl;
  }

  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  queryCount" << std::endl;
    // queryCount -> Field -> uint32_t
    os << "value: " << args.queryCount << std::endl;
  }
}

void CommandPrinter::PrintCmdWriteTimestampArgs(
    std::ostream& os, const CmdWriteTimestampArgs& args) {
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  commandBuffer" << std::endl;
    // commandBuffer -> Field -> VkCommandBuffer
    os << "value: " << args.commandBuffer << std::endl;
  }

  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  pipelineStage" << std::endl;
    // pipelineStage -> Field -> VkPipelineStageFlagBits
    os << "value: " << args.pipelineStage << std::endl;
  }

  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  queryPool" << std::endl;
    // queryPool -> Field -> VkQueryPool
    os << "value: " << args.queryPool << std::endl;
  }

  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  query" << std::endl;
    // query -> Field -> uint32_t
    os << "value: " << args.query << std::endl;
  }
}

void CommandPrinter::PrintCmdCopyQueryPoolResultsArgs(
    std::ostream& os, const CmdCopyQueryPoolResultsArgs& args) {
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  commandBuffer" << std::endl;
    // commandBuffer -> Field -> VkCommandBuffer
    os << "value: " << args.commandBuffer << std::endl;
  }

  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  queryPool" << std::endl;
    // queryPool -> Field -> VkQueryPool
    os << "value: " << args.queryPool << std::endl;
  }

  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  firstQuery" << std::endl;
    // firstQuery -> Field -> uint32_t
    os << "value: " << args.firstQuery << std::endl;
  }

  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  queryCount" << std::endl;
    // queryCount -> Field -> uint32_t
    os << "value: " << args.queryCount << std::endl;
  }

  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  dstBuffer" << std::endl;
    // dstBuffer -> Field -> VkBuffer
    os << "value: " << args.dstBuffer << std::endl;
  }

  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  dstOffset" << std::endl;
    // dstOffset -> Field -> VkDeviceSize
    os << "value: " << args.dstOffset << std::endl;
  }

  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  stride" << std::endl;
    // stride -> Field -> VkDeviceSize
    os << "value: " << args.stride << std::endl;
  }

  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  flags" << std::endl;
    // flags -> Field -> VkQueryResultFlags
    os << "value: " << args.flags << std::endl;
  }
}

void CommandPrinter::PrintCmdPushConstantsArgs(
    std::ostream& os, const CmdPushConstantsArgs& args) {
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  commandBuffer" << std::endl;
    // commandBuffer -> Field -> VkCommandBuffer
    os << "value: " << args.commandBuffer << std::endl;
  }

  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  layout" << std::endl;
    // layout -> Field -> VkPipelineLayout
    os << "value: " << args.layout << std::endl;
  }

  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  stageFlags" << std::endl;
    // stageFlags -> Field -> VkShaderStageFlags
    os << "value: " << args.stageFlags << std::endl;
  }

  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  offset" << std::endl;
    // offset -> Field -> uint32_t
    os << "value: " << args.offset << std::endl;
  }

  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  size" << std::endl;
    // size -> Field -> uint32_t
    os << "value: " << args.size << std::endl;
  }

  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  pValues" << std::endl;
    // pValues -> Field -> ConstDynamicArray(void)
    {
      if (args.size == 0) {
        os << "value: nullptr" << std::endl;
      } else {
        os << std::hex;
        os << "members:" << std::endl;
        {
          ScopedOstream soarray(os);
          const uint8_t* p = (const uint8_t*)args.pValues;
          for (uint32_t i = 0; i < args.size; ++i) {
            os << "- 0x" << p[i] << std::endl;
          }
        }
        os << std::dec;
      }
    }
  }
}

void CommandPrinter::PrintCmdBeginRenderPassArgs(
    std::ostream& os, const CmdBeginRenderPassArgs& args) {
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  commandBuffer" << std::endl;
    // commandBuffer -> Field -> VkCommandBuffer
    os << "value: " << args.commandBuffer << std::endl;
  }

  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  pRenderPassBegin" << std::endl;
    // pRenderPassBegin -> Field -> ConstPointer(VkRenderPassBeginInfo)
    // pointer
    if (args.pRenderPassBegin) {
      os << "members:" << std::endl << *args.pRenderPassBegin << std::endl;
    } else {
      os << "value: nullptr" << std::endl;
    }
  }

  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  contents" << std::endl;
    // contents -> Field -> VkSubpassContents
    os << "value: " << args.contents << std::endl;
  }
}

void CommandPrinter::PrintCmdNextSubpassArgs(std::ostream& os,
                                             const CmdNextSubpassArgs& args) {
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  commandBuffer" << std::endl;
    // commandBuffer -> Field -> VkCommandBuffer
    os << "value: " << args.commandBuffer << std::endl;
  }

  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  contents" << std::endl;
    // contents -> Field -> VkSubpassContents
    os << "value: " << args.contents << std::endl;
  }
}

void CommandPrinter::PrintCmdEndRenderPassArgs(
    std::ostream& os, const CmdEndRenderPassArgs& args) {
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  commandBuffer" << std::endl;
    // commandBuffer -> Field -> VkCommandBuffer
    os << "value: " << args.commandBuffer << std::endl;
  }
}

void CommandPrinter::PrintCmdExecuteCommandsArgs(
    std::ostream& os, const CmdExecuteCommandsArgs& args) {
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  commandBuffer" << std::endl;
    // commandBuffer -> Field -> VkCommandBuffer
    os << "value: " << args.commandBuffer << std::endl;
  }

  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  commandBufferCount" << std::endl;
    // commandBufferCount -> Field -> uint32_t
    os << "value: " << args.commandBufferCount << std::endl;
  }

  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  pCommandBuffers" << std::endl;
    // pCommandBuffers -> Field -> ConstDynamicArray(VkCommandBuffer)
    {
      if (args.commandBufferCount == 0) {
        os << "value: nullptr" << std::endl;
      } else {
        os << "members:" << std::endl;
        {
          ScopedOstream soarray(os);
          os << "- # VkCommandBuffer" << std::endl;
          for (uint32_t i = 0; i < args.commandBufferCount; ++i) {
            ScopedOstream somember(os);
            os << "value: " << args.pCommandBuffers[i] << std::endl;
          }
        }
      }
    }
  }
}

#ifdef VK_USE_PLATFORM_GGP

#endif  // VK_USE_PLATFORM_GGP
