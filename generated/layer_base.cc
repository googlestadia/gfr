/*
 * Copyright (C) 2021 Google Inc.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 *
 * THIS FILE IS GENERATED BY VkSpecGen. DO NOT EDIT.
 */

#include <array>
#include <cassert>
#include <cstring>
#include <memory>
#include <mutex>
#include <unordered_map>
#include <vulkan/vk_layer.h>
#include <vulkan/vulkan.h>

#include "layer_base.h"

namespace GFR {

constexpr VkLayerProperties layer_properties = {
    "VK_LAYER_GOOGLE_graphics_flight_recorder",
    VK_MAKE_VERSION(1, 0, VK_HEADER_VERSION), 1,
    "Google Graphics Flight Recorder is a crash/hang debugging tool that helps "
    "determines GPU progress in a Vulkan application."};

namespace {
// Generally we expect to get the same device and instance, so we keep them
// handy
static thread_local InstanceData *last_used_instance_data = nullptr;
static thread_local DeviceData *last_used_device_data = nullptr;

std::mutex g_instance_mutex;
std::unordered_map<uintptr_t, std::unique_ptr<InstanceData>> g_instance_data;

std::mutex g_device_mutex;
std::unordered_map<uintptr_t, std::unique_ptr<DeviceData>> g_device_data;
} // namespace

uintptr_t DataKey(const void *object) { return (uintptr_t)(*(void **)object); }

InstanceData *GetInstanceLayerData(uintptr_t key) {
  if (last_used_instance_data &&
      DataKey(last_used_instance_data->instance) == key) {
    return last_used_instance_data;
  }

  std::lock_guard<std::mutex> lock(g_instance_mutex);
  last_used_instance_data = g_instance_data[key].get();
  return last_used_instance_data;
}

void FreeInstanceLayerData(uintptr_t key) {
  std::lock_guard<std::mutex> lock(g_instance_mutex);
  g_instance_data.erase(key);
  last_used_instance_data = nullptr;
}

DeviceData *GetDeviceLayerData(uintptr_t key) {
  if (last_used_device_data && DataKey(last_used_device_data->device) == key) {
    return last_used_device_data;
  }

  std::lock_guard<std::mutex> lock(g_device_mutex);
  last_used_device_data = g_device_data[key].get();
  return last_used_device_data;
}

void FreeDeviceLayerData(uintptr_t key) {
  std::lock_guard<std::mutex> lock(g_device_mutex);
  g_device_data.erase(key);
  last_used_device_data = nullptr;
}

VkStruct *FindOnChain(VkStruct *s, VkStructureType type) {
  VkStruct *n = (VkStruct *)s->pNext;
  while (n && n->sType != type) {
    n = (VkStruct *)n->pNext;
  }
  return n;
}

VkLayerInstanceCreateInfo *
GetLoaderInstanceInfo(const VkInstanceCreateInfo *create_info,
                      VkLayerFunction func_type) {
  VkStruct *n = (VkStruct *)create_info;
  while ((n = FindOnChain(n, VK_STRUCTURE_TYPE_LOADER_INSTANCE_CREATE_INFO))) {
    VkLayerInstanceCreateInfo *vci = (VkLayerInstanceCreateInfo *)n;
    if (vci->function == func_type) {
      return vci;
    }
  }
  return nullptr;
}

VkLayerDeviceCreateInfo *
GetLoaderDeviceInfo(const VkDeviceCreateInfo *create_info,
                    VkLayerFunction func_type) {
  VkStruct *n = (VkStruct *)create_info;
  while ((n = FindOnChain(n, VK_STRUCTURE_TYPE_LOADER_DEVICE_CREATE_INFO))) {
    VkLayerDeviceCreateInfo *vdi = (VkLayerDeviceCreateInfo *)n;
    if (vdi->function == func_type) {
      return vdi;
    }
  }
  return nullptr;
}

VkResult SetInstanceLoaderData(VkInstance instance, void *obj) {
  InstanceData *instance_data = GetInstanceLayerData(DataKey(instance));
  return instance_data->pfn_set_instance_loader_data(instance, obj);
}

VkResult SetDeviceLoaderData(VkDevice device, void *obj) {
  DeviceData *device_data = GetDeviceLayerData(DataKey(device));
  return device_data->pfn_set_device_loader_data(device, obj);
}

static constexpr std::array<VkExtensionProperties, 2> instance_extensions{{
    {VK_EXT_DEBUG_REPORT_EXTENSION_NAME, VK_EXT_DEBUG_REPORT_SPEC_VERSION},
    {VK_EXT_DEBUG_UTILS_EXTENSION_NAME, VK_EXT_DEBUG_UTILS_SPEC_VERSION},
}};

static constexpr std::array<VkExtensionProperties, 1> device_extensions{{
    {VK_EXT_DEBUG_MARKER_EXTENSION_NAME, VK_EXT_DEBUG_MARKER_SPEC_VERSION},
}};

// Intercept functions manage the dispatch table and call the implementation
// (layer specific) function. These are the function pointers returned by
// vkGetXxxProcAddr.

void InterceptResetQueryPool(VkDevice device, VkQueryPool queryPool,
                             uint32_t firstQuery, uint32_t queryCount) {
  auto layer_data = GetDeviceLayerData(DataKey(device));
  PFN_vkResetQueryPool pfn = layer_data->dispatch_table.ResetQueryPool;
  if (pfn) {
    pfn(device, queryPool, firstQuery, queryCount);
  }
}

void InterceptResetQueryPoolEXT(VkDevice device, VkQueryPool queryPool,
                                uint32_t firstQuery, uint32_t queryCount) {
  auto layer_data = GetDeviceLayerData(DataKey(device));
  PFN_vkResetQueryPoolEXT pfn = layer_data->dispatch_table.ResetQueryPoolEXT;
  if (pfn) {
    pfn(device, queryPool, firstQuery, queryCount);
  }
}

void InterceptCmdDrawMultiEXT(VkCommandBuffer commandBuffer, uint32_t drawCount,
                              const VkMultiDrawInfoEXT *pVertexInfo,
                              uint32_t instanceCount, uint32_t firstInstance,
                              uint32_t stride) {
  InterceptPreCmdDrawMultiEXT(commandBuffer, drawCount, pVertexInfo,
                              instanceCount, firstInstance, stride);

  auto layer_data = GetDeviceLayerData(DataKey(commandBuffer));
  PFN_vkCmdDrawMultiEXT pfn = layer_data->dispatch_table.CmdDrawMultiEXT;
  if (pfn) {
    pfn(commandBuffer, drawCount, pVertexInfo, instanceCount, firstInstance,
        stride);
  }

  InterceptPostCmdDrawMultiEXT(commandBuffer, drawCount, pVertexInfo,
                               instanceCount, firstInstance, stride);
}

void InterceptCmdDrawMultiIndexedEXT(
    VkCommandBuffer commandBuffer, uint32_t drawCount,
    const VkMultiDrawIndexedInfoEXT *pIndexInfo, uint32_t instanceCount,
    uint32_t firstInstance, uint32_t stride, const int32_t *pVertexOffset) {
  InterceptPreCmdDrawMultiIndexedEXT(commandBuffer, drawCount, pIndexInfo,
                                     instanceCount, firstInstance, stride,
                                     pVertexOffset);

  auto layer_data = GetDeviceLayerData(DataKey(commandBuffer));
  PFN_vkCmdDrawMultiIndexedEXT pfn =
      layer_data->dispatch_table.CmdDrawMultiIndexedEXT;
  if (pfn) {
    pfn(commandBuffer, drawCount, pIndexInfo, instanceCount, firstInstance,
        stride, pVertexOffset);
  }

  InterceptPostCmdDrawMultiIndexedEXT(commandBuffer, drawCount, pIndexInfo,
                                      instanceCount, firstInstance, stride,
                                      pVertexOffset);
}

VkResult InterceptGetPhysicalDeviceDisplayPropertiesKHR(
    VkPhysicalDevice physicalDevice, uint32_t *pPropertyCount,
    VkDisplayPropertiesKHR *pProperties) {
  auto layer_data = GetInstanceLayerData(DataKey(physicalDevice));
  PFN_vkGetPhysicalDeviceDisplayPropertiesKHR pfn =
      layer_data->dispatch_table.GetPhysicalDeviceDisplayPropertiesKHR;

  VkResult result = VK_SUCCESS;
  if (pfn) {

    result = pfn(physicalDevice, pPropertyCount, pProperties);
  }

  return result;
}

VkResult InterceptGetPhysicalDeviceDisplayPlanePropertiesKHR(
    VkPhysicalDevice physicalDevice, uint32_t *pPropertyCount,
    VkDisplayPlanePropertiesKHR *pProperties) {
  auto layer_data = GetInstanceLayerData(DataKey(physicalDevice));
  PFN_vkGetPhysicalDeviceDisplayPlanePropertiesKHR pfn =
      layer_data->dispatch_table.GetPhysicalDeviceDisplayPlanePropertiesKHR;

  VkResult result = VK_SUCCESS;
  if (pfn) {

    result = pfn(physicalDevice, pPropertyCount, pProperties);
  }

  return result;
}

VkResult InterceptGetDisplayPlaneSupportedDisplaysKHR(
    VkPhysicalDevice physicalDevice, uint32_t planeIndex,
    uint32_t *pDisplayCount, VkDisplayKHR *pDisplays) {
  auto layer_data = GetInstanceLayerData(DataKey(physicalDevice));
  PFN_vkGetDisplayPlaneSupportedDisplaysKHR pfn =
      layer_data->dispatch_table.GetDisplayPlaneSupportedDisplaysKHR;

  VkResult result = VK_SUCCESS;
  if (pfn) {

    result = pfn(physicalDevice, planeIndex, pDisplayCount, pDisplays);
  }

  return result;
}

VkResult InterceptGetDisplayModePropertiesKHR(
    VkPhysicalDevice physicalDevice, VkDisplayKHR display,
    uint32_t *pPropertyCount, VkDisplayModePropertiesKHR *pProperties) {
  auto layer_data = GetInstanceLayerData(DataKey(physicalDevice));
  PFN_vkGetDisplayModePropertiesKHR pfn =
      layer_data->dispatch_table.GetDisplayModePropertiesKHR;

  VkResult result = VK_SUCCESS;
  if (pfn) {

    result = pfn(physicalDevice, display, pPropertyCount, pProperties);
  }

  return result;
}

VkResult InterceptCreateDisplayModeKHR(
    VkPhysicalDevice physicalDevice, VkDisplayKHR display,
    const VkDisplayModeCreateInfoKHR *pCreateInfo,
    const VkAllocationCallbacks *pAllocator, VkDisplayModeKHR *pMode) {
  auto layer_data = GetInstanceLayerData(DataKey(physicalDevice));
  PFN_vkCreateDisplayModeKHR pfn =
      layer_data->dispatch_table.CreateDisplayModeKHR;

  VkResult result = VK_SUCCESS;
  if (pfn) {

    result = pfn(physicalDevice, display, pCreateInfo, pAllocator, pMode);
  }

  return result;
}

VkResult InterceptGetDisplayPlaneCapabilitiesKHR(
    VkPhysicalDevice physicalDevice, VkDisplayModeKHR mode, uint32_t planeIndex,
    VkDisplayPlaneCapabilitiesKHR *pCapabilities) {
  auto layer_data = GetInstanceLayerData(DataKey(physicalDevice));
  PFN_vkGetDisplayPlaneCapabilitiesKHR pfn =
      layer_data->dispatch_table.GetDisplayPlaneCapabilitiesKHR;

  VkResult result = VK_SUCCESS;
  if (pfn) {

    result = pfn(physicalDevice, mode, planeIndex, pCapabilities);
  }

  return result;
}

VkResult InterceptCreateDisplayPlaneSurfaceKHR(
    VkInstance instance, const VkDisplaySurfaceCreateInfoKHR *pCreateInfo,
    const VkAllocationCallbacks *pAllocator, VkSurfaceKHR *pSurface) {
  auto layer_data = GetInstanceLayerData(DataKey(instance));
  PFN_vkCreateDisplayPlaneSurfaceKHR pfn =
      layer_data->dispatch_table.CreateDisplayPlaneSurfaceKHR;

  VkResult result = VK_SUCCESS;
  if (pfn) {

    result = pfn(instance, pCreateInfo, pAllocator, pSurface);
  }

  return result;
}

VkResult
InterceptCreateSharedSwapchainsKHR(VkDevice device, uint32_t swapchainCount,
                                   const VkSwapchainCreateInfoKHR *pCreateInfos,
                                   const VkAllocationCallbacks *pAllocator,
                                   VkSwapchainKHR *pSwapchains) {
  auto layer_data = GetDeviceLayerData(DataKey(device));
  PFN_vkCreateSharedSwapchainsKHR pfn =
      layer_data->dispatch_table.CreateSharedSwapchainsKHR;

  VkResult result = VK_SUCCESS;
  if (pfn) {

    result = pfn(device, swapchainCount, pCreateInfos, pAllocator, pSwapchains);
  }

  return result;
}

void InterceptDestroySurfaceKHR(VkInstance instance, VkSurfaceKHR surface,
                                const VkAllocationCallbacks *pAllocator) {
  auto layer_data = GetInstanceLayerData(DataKey(instance));
  PFN_vkDestroySurfaceKHR pfn = layer_data->dispatch_table.DestroySurfaceKHR;
  if (pfn) {
    pfn(instance, surface, pAllocator);
  }
}

VkResult InterceptGetPhysicalDeviceSurfaceSupportKHR(
    VkPhysicalDevice physicalDevice, uint32_t queueFamilyIndex,
    VkSurfaceKHR surface, VkBool32 *pSupported) {
  auto layer_data = GetInstanceLayerData(DataKey(physicalDevice));
  PFN_vkGetPhysicalDeviceSurfaceSupportKHR pfn =
      layer_data->dispatch_table.GetPhysicalDeviceSurfaceSupportKHR;

  VkResult result = VK_SUCCESS;
  if (pfn) {

    result = pfn(physicalDevice, queueFamilyIndex, surface, pSupported);
  }

  return result;
}

VkResult InterceptGetPhysicalDeviceSurfaceCapabilitiesKHR(
    VkPhysicalDevice physicalDevice, VkSurfaceKHR surface,
    VkSurfaceCapabilitiesKHR *pSurfaceCapabilities) {
  auto layer_data = GetInstanceLayerData(DataKey(physicalDevice));
  PFN_vkGetPhysicalDeviceSurfaceCapabilitiesKHR pfn =
      layer_data->dispatch_table.GetPhysicalDeviceSurfaceCapabilitiesKHR;

  VkResult result = VK_SUCCESS;
  if (pfn) {

    result = pfn(physicalDevice, surface, pSurfaceCapabilities);
  }

  return result;
}

VkResult InterceptGetPhysicalDeviceSurfaceFormatsKHR(
    VkPhysicalDevice physicalDevice, VkSurfaceKHR surface,
    uint32_t *pSurfaceFormatCount, VkSurfaceFormatKHR *pSurfaceFormats) {
  auto layer_data = GetInstanceLayerData(DataKey(physicalDevice));
  PFN_vkGetPhysicalDeviceSurfaceFormatsKHR pfn =
      layer_data->dispatch_table.GetPhysicalDeviceSurfaceFormatsKHR;

  VkResult result = VK_SUCCESS;
  if (pfn) {

    result = pfn(physicalDevice, surface, pSurfaceFormatCount, pSurfaceFormats);
  }

  return result;
}

VkResult InterceptGetPhysicalDeviceSurfacePresentModesKHR(
    VkPhysicalDevice physicalDevice, VkSurfaceKHR surface,
    uint32_t *pPresentModeCount, VkPresentModeKHR *pPresentModes) {
  auto layer_data = GetInstanceLayerData(DataKey(physicalDevice));
  PFN_vkGetPhysicalDeviceSurfacePresentModesKHR pfn =
      layer_data->dispatch_table.GetPhysicalDeviceSurfacePresentModesKHR;

  VkResult result = VK_SUCCESS;
  if (pfn) {

    result = pfn(physicalDevice, surface, pPresentModeCount, pPresentModes);
  }

  return result;
}

VkResult InterceptCreateSwapchainKHR(
    VkDevice device, const VkSwapchainCreateInfoKHR *pCreateInfo,
    const VkAllocationCallbacks *pAllocator, VkSwapchainKHR *pSwapchain) {
  auto layer_data = GetDeviceLayerData(DataKey(device));
  PFN_vkCreateSwapchainKHR pfn = layer_data->dispatch_table.CreateSwapchainKHR;

  VkResult result = VK_SUCCESS;
  if (pfn) {

    result = pfn(device, pCreateInfo, pAllocator, pSwapchain);
  }

  return result;
}

void InterceptDestroySwapchainKHR(VkDevice device, VkSwapchainKHR swapchain,
                                  const VkAllocationCallbacks *pAllocator) {
  auto layer_data = GetDeviceLayerData(DataKey(device));
  PFN_vkDestroySwapchainKHR pfn =
      layer_data->dispatch_table.DestroySwapchainKHR;
  if (pfn) {
    pfn(device, swapchain, pAllocator);
  }
}

VkResult InterceptGetSwapchainImagesKHR(VkDevice device,
                                        VkSwapchainKHR swapchain,
                                        uint32_t *pSwapchainImageCount,
                                        VkImage *pSwapchainImages) {
  auto layer_data = GetDeviceLayerData(DataKey(device));
  PFN_vkGetSwapchainImagesKHR pfn =
      layer_data->dispatch_table.GetSwapchainImagesKHR;

  VkResult result = VK_SUCCESS;
  if (pfn) {

    result = pfn(device, swapchain, pSwapchainImageCount, pSwapchainImages);
  }

  return result;
}

VkResult InterceptAcquireNextImageKHR(VkDevice device, VkSwapchainKHR swapchain,
                                      uint64_t timeout, VkSemaphore semaphore,
                                      VkFence fence, uint32_t *pImageIndex) {
  auto layer_data = GetDeviceLayerData(DataKey(device));
  PFN_vkAcquireNextImageKHR pfn =
      layer_data->dispatch_table.AcquireNextImageKHR;

  VkResult result = VK_SUCCESS;
  if (pfn) {

    result = pfn(device, swapchain, timeout, semaphore, fence, pImageIndex);
  }

  result = InterceptPostAcquireNextImageKHR(
      device, swapchain, timeout, semaphore, fence, pImageIndex, result);

  return result;
}

VkResult InterceptQueuePresentKHR(VkQueue queue,
                                  const VkPresentInfoKHR *pPresentInfo) {
  auto layer_data = GetDeviceLayerData(DataKey(queue));
  PFN_vkQueuePresentKHR pfn = layer_data->dispatch_table.QueuePresentKHR;

  VkResult result = VK_SUCCESS;
  if (pfn) {

    result = pfn(queue, pPresentInfo);
  }

  result = InterceptPostQueuePresentKHR(queue, pPresentInfo, result);

  return result;
}

VkResult InterceptCreateDebugReportCallbackEXT(
    VkInstance instance, const VkDebugReportCallbackCreateInfoEXT *pCreateInfo,
    const VkAllocationCallbacks *pAllocator,
    VkDebugReportCallbackEXT *pCallback) {
  auto layer_data = GetInstanceLayerData(DataKey(instance));
  PFN_vkCreateDebugReportCallbackEXT pfn =
      layer_data->dispatch_table.CreateDebugReportCallbackEXT;

  VkResult result = VK_SUCCESS;
  if (pfn) {

    result = pfn(instance, pCreateInfo, pAllocator, pCallback);
  }

  return result;
}

void InterceptDestroyDebugReportCallbackEXT(
    VkInstance instance, VkDebugReportCallbackEXT callback,
    const VkAllocationCallbacks *pAllocator) {
  auto layer_data = GetInstanceLayerData(DataKey(instance));
  PFN_vkDestroyDebugReportCallbackEXT pfn =
      layer_data->dispatch_table.DestroyDebugReportCallbackEXT;
  if (pfn) {
    pfn(instance, callback, pAllocator);
  }
}

void InterceptDebugReportMessageEXT(VkInstance instance,
                                    VkDebugReportFlagsEXT flags,
                                    VkDebugReportObjectTypeEXT objectType,
                                    uint64_t object, size_t location,
                                    int32_t messageCode, char *pLayerPrefix,
                                    char *pMessage) {
  auto layer_data = GetInstanceLayerData(DataKey(instance));
  PFN_vkDebugReportMessageEXT pfn =
      layer_data->dispatch_table.DebugReportMessageEXT;
  if (pfn) {
    pfn(instance, flags, objectType, object, location, messageCode,
        pLayerPrefix, pMessage);
  }
}

VkResult InterceptDebugMarkerSetObjectNameEXT(
    VkDevice device, const VkDebugMarkerObjectNameInfoEXT *pNameInfo) {
  InterceptPreDebugMarkerSetObjectNameEXT(device, pNameInfo);

  auto layer_data = GetDeviceLayerData(DataKey(device));
  PFN_vkDebugMarkerSetObjectNameEXT pfn =
      layer_data->dispatch_table.DebugMarkerSetObjectNameEXT;

  VkResult result = VK_SUCCESS;
  if (pfn) {

    result = pfn(device, pNameInfo);
  }

  result = InterceptPostDebugMarkerSetObjectNameEXT(device, pNameInfo, result);

  return result;
}

VkResult InterceptDebugMarkerSetObjectTagEXT(
    VkDevice device, const VkDebugMarkerObjectTagInfoEXT *pTagInfo) {
  auto layer_data = GetDeviceLayerData(DataKey(device));
  PFN_vkDebugMarkerSetObjectTagEXT pfn =
      layer_data->dispatch_table.DebugMarkerSetObjectTagEXT;

  VkResult result = VK_SUCCESS;
  if (pfn) {

    result = pfn(device, pTagInfo);
  }

  return result;
}

void InterceptCmdDebugMarkerBeginEXT(
    VkCommandBuffer commandBuffer,
    const VkDebugMarkerMarkerInfoEXT *pMarkerInfo) {
  InterceptPreCmdDebugMarkerBeginEXT(commandBuffer, pMarkerInfo);

  auto layer_data = GetDeviceLayerData(DataKey(commandBuffer));
  PFN_vkCmdDebugMarkerBeginEXT pfn =
      layer_data->dispatch_table.CmdDebugMarkerBeginEXT;
  if (pfn) {
    pfn(commandBuffer, pMarkerInfo);
  }

  InterceptPostCmdDebugMarkerBeginEXT(commandBuffer, pMarkerInfo);
}

void InterceptCmdDebugMarkerEndEXT(VkCommandBuffer commandBuffer) {
  InterceptPreCmdDebugMarkerEndEXT(commandBuffer);

  auto layer_data = GetDeviceLayerData(DataKey(commandBuffer));
  PFN_vkCmdDebugMarkerEndEXT pfn =
      layer_data->dispatch_table.CmdDebugMarkerEndEXT;
  if (pfn) {
    pfn(commandBuffer);
  }

  InterceptPostCmdDebugMarkerEndEXT(commandBuffer);
}

void InterceptCmdDebugMarkerInsertEXT(
    VkCommandBuffer commandBuffer,
    const VkDebugMarkerMarkerInfoEXT *pMarkerInfo) {
  InterceptPreCmdDebugMarkerInsertEXT(commandBuffer, pMarkerInfo);

  auto layer_data = GetDeviceLayerData(DataKey(commandBuffer));
  PFN_vkCmdDebugMarkerInsertEXT pfn =
      layer_data->dispatch_table.CmdDebugMarkerInsertEXT;
  if (pfn) {
    pfn(commandBuffer, pMarkerInfo);
  }

  InterceptPostCmdDebugMarkerInsertEXT(commandBuffer, pMarkerInfo);
}

void InterceptGetPhysicalDeviceFeatures2(VkPhysicalDevice physicalDevice,
                                         VkPhysicalDeviceFeatures2 *pFeatures) {
  auto layer_data = GetInstanceLayerData(DataKey(physicalDevice));
  PFN_vkGetPhysicalDeviceFeatures2 pfn =
      layer_data->dispatch_table.GetPhysicalDeviceFeatures2;
  if (pfn) {
    pfn(physicalDevice, pFeatures);
  }
}

void InterceptGetPhysicalDeviceFeatures2KHR(
    VkPhysicalDevice physicalDevice, VkPhysicalDeviceFeatures2 *pFeatures) {
  auto layer_data = GetInstanceLayerData(DataKey(physicalDevice));
  PFN_vkGetPhysicalDeviceFeatures2KHR pfn =
      layer_data->dispatch_table.GetPhysicalDeviceFeatures2KHR;
  if (pfn) {
    pfn(physicalDevice, pFeatures);
  }
}

void InterceptGetPhysicalDeviceProperties2(
    VkPhysicalDevice physicalDevice, VkPhysicalDeviceProperties2 *pProperties) {
  auto layer_data = GetInstanceLayerData(DataKey(physicalDevice));
  PFN_vkGetPhysicalDeviceProperties2 pfn =
      layer_data->dispatch_table.GetPhysicalDeviceProperties2;
  if (pfn) {
    pfn(physicalDevice, pProperties);
  }
}

void InterceptGetPhysicalDeviceProperties2KHR(
    VkPhysicalDevice physicalDevice, VkPhysicalDeviceProperties2 *pProperties) {
  auto layer_data = GetInstanceLayerData(DataKey(physicalDevice));
  PFN_vkGetPhysicalDeviceProperties2KHR pfn =
      layer_data->dispatch_table.GetPhysicalDeviceProperties2KHR;
  if (pfn) {
    pfn(physicalDevice, pProperties);
  }
}

void InterceptGetPhysicalDeviceFormatProperties2(
    VkPhysicalDevice physicalDevice, VkFormat format,
    VkFormatProperties2 *pFormatProperties) {
  auto layer_data = GetInstanceLayerData(DataKey(physicalDevice));
  PFN_vkGetPhysicalDeviceFormatProperties2 pfn =
      layer_data->dispatch_table.GetPhysicalDeviceFormatProperties2;
  if (pfn) {
    pfn(physicalDevice, format, pFormatProperties);
  }
}

void InterceptGetPhysicalDeviceFormatProperties2KHR(
    VkPhysicalDevice physicalDevice, VkFormat format,
    VkFormatProperties2 *pFormatProperties) {
  auto layer_data = GetInstanceLayerData(DataKey(physicalDevice));
  PFN_vkGetPhysicalDeviceFormatProperties2KHR pfn =
      layer_data->dispatch_table.GetPhysicalDeviceFormatProperties2KHR;
  if (pfn) {
    pfn(physicalDevice, format, pFormatProperties);
  }
}

VkResult InterceptGetPhysicalDeviceImageFormatProperties2(
    VkPhysicalDevice physicalDevice,
    const VkPhysicalDeviceImageFormatInfo2 *pImageFormatInfo,
    VkImageFormatProperties2 *pImageFormatProperties) {
  auto layer_data = GetInstanceLayerData(DataKey(physicalDevice));
  PFN_vkGetPhysicalDeviceImageFormatProperties2 pfn =
      layer_data->dispatch_table.GetPhysicalDeviceImageFormatProperties2;

  VkResult result = VK_SUCCESS;
  if (pfn) {

    result = pfn(physicalDevice, pImageFormatInfo, pImageFormatProperties);
  }

  return result;
}

VkResult InterceptGetPhysicalDeviceImageFormatProperties2KHR(
    VkPhysicalDevice physicalDevice,
    const VkPhysicalDeviceImageFormatInfo2 *pImageFormatInfo,
    VkImageFormatProperties2 *pImageFormatProperties) {
  auto layer_data = GetInstanceLayerData(DataKey(physicalDevice));
  PFN_vkGetPhysicalDeviceImageFormatProperties2KHR pfn =
      layer_data->dispatch_table.GetPhysicalDeviceImageFormatProperties2KHR;

  VkResult result = VK_SUCCESS;
  if (pfn) {

    result = pfn(physicalDevice, pImageFormatInfo, pImageFormatProperties);
  }

  return result;
}

void InterceptGetPhysicalDeviceQueueFamilyProperties2(
    VkPhysicalDevice physicalDevice, uint32_t *pQueueFamilyPropertyCount,
    VkQueueFamilyProperties2 *pQueueFamilyProperties) {
  auto layer_data = GetInstanceLayerData(DataKey(physicalDevice));
  PFN_vkGetPhysicalDeviceQueueFamilyProperties2 pfn =
      layer_data->dispatch_table.GetPhysicalDeviceQueueFamilyProperties2;
  if (pfn) {
    pfn(physicalDevice, pQueueFamilyPropertyCount, pQueueFamilyProperties);
  }
}

void InterceptGetPhysicalDeviceQueueFamilyProperties2KHR(
    VkPhysicalDevice physicalDevice, uint32_t *pQueueFamilyPropertyCount,
    VkQueueFamilyProperties2 *pQueueFamilyProperties) {
  auto layer_data = GetInstanceLayerData(DataKey(physicalDevice));
  PFN_vkGetPhysicalDeviceQueueFamilyProperties2KHR pfn =
      layer_data->dispatch_table.GetPhysicalDeviceQueueFamilyProperties2KHR;
  if (pfn) {
    pfn(physicalDevice, pQueueFamilyPropertyCount, pQueueFamilyProperties);
  }
}

void InterceptGetPhysicalDeviceMemoryProperties2(
    VkPhysicalDevice physicalDevice,
    VkPhysicalDeviceMemoryProperties2 *pMemoryProperties) {
  auto layer_data = GetInstanceLayerData(DataKey(physicalDevice));
  PFN_vkGetPhysicalDeviceMemoryProperties2 pfn =
      layer_data->dispatch_table.GetPhysicalDeviceMemoryProperties2;
  if (pfn) {
    pfn(physicalDevice, pMemoryProperties);
  }
}

void InterceptGetPhysicalDeviceMemoryProperties2KHR(
    VkPhysicalDevice physicalDevice,
    VkPhysicalDeviceMemoryProperties2 *pMemoryProperties) {
  auto layer_data = GetInstanceLayerData(DataKey(physicalDevice));
  PFN_vkGetPhysicalDeviceMemoryProperties2KHR pfn =
      layer_data->dispatch_table.GetPhysicalDeviceMemoryProperties2KHR;
  if (pfn) {
    pfn(physicalDevice, pMemoryProperties);
  }
}

void InterceptGetPhysicalDeviceSparseImageFormatProperties2(
    VkPhysicalDevice physicalDevice,
    const VkPhysicalDeviceSparseImageFormatInfo2 *pFormatInfo,
    uint32_t *pPropertyCount, VkSparseImageFormatProperties2 *pProperties) {
  auto layer_data = GetInstanceLayerData(DataKey(physicalDevice));
  PFN_vkGetPhysicalDeviceSparseImageFormatProperties2 pfn =
      layer_data->dispatch_table.GetPhysicalDeviceSparseImageFormatProperties2;
  if (pfn) {
    pfn(physicalDevice, pFormatInfo, pPropertyCount, pProperties);
  }
}

void InterceptGetPhysicalDeviceSparseImageFormatProperties2KHR(
    VkPhysicalDevice physicalDevice,
    const VkPhysicalDeviceSparseImageFormatInfo2 *pFormatInfo,
    uint32_t *pPropertyCount, VkSparseImageFormatProperties2 *pProperties) {
  auto layer_data = GetInstanceLayerData(DataKey(physicalDevice));
  PFN_vkGetPhysicalDeviceSparseImageFormatProperties2KHR pfn =
      layer_data->dispatch_table
          .GetPhysicalDeviceSparseImageFormatProperties2KHR;
  if (pfn) {
    pfn(physicalDevice, pFormatInfo, pPropertyCount, pProperties);
  }
}

void InterceptCmdPushDescriptorSetKHR(
    VkCommandBuffer commandBuffer, VkPipelineBindPoint pipelineBindPoint,
    VkPipelineLayout layout, uint32_t set, uint32_t descriptorWriteCount,
    const VkWriteDescriptorSet *pDescriptorWrites) {
  InterceptPreCmdPushDescriptorSetKHR(commandBuffer, pipelineBindPoint, layout,
                                      set, descriptorWriteCount,
                                      pDescriptorWrites);

  auto layer_data = GetDeviceLayerData(DataKey(commandBuffer));
  PFN_vkCmdPushDescriptorSetKHR pfn =
      layer_data->dispatch_table.CmdPushDescriptorSetKHR;
  if (pfn) {
    pfn(commandBuffer, pipelineBindPoint, layout, set, descriptorWriteCount,
        pDescriptorWrites);
  }

  InterceptPostCmdPushDescriptorSetKHR(commandBuffer, pipelineBindPoint, layout,
                                       set, descriptorWriteCount,
                                       pDescriptorWrites);
}

void InterceptTrimCommandPool(VkDevice device, VkCommandPool commandPool,
                              VkCommandPoolTrimFlags flags) {
  auto layer_data = GetDeviceLayerData(DataKey(device));
  PFN_vkTrimCommandPool pfn = layer_data->dispatch_table.TrimCommandPool;
  if (pfn) {
    pfn(device, commandPool, flags);
  }
}

void InterceptTrimCommandPoolKHR(VkDevice device, VkCommandPool commandPool,
                                 VkCommandPoolTrimFlags flags) {
  auto layer_data = GetDeviceLayerData(DataKey(device));
  PFN_vkTrimCommandPoolKHR pfn = layer_data->dispatch_table.TrimCommandPoolKHR;
  if (pfn) {
    pfn(device, commandPool, flags);
  }
}

void InterceptGetPhysicalDeviceExternalBufferProperties(
    VkPhysicalDevice physicalDevice,
    const VkPhysicalDeviceExternalBufferInfo *pExternalBufferInfo,
    VkExternalBufferProperties *pExternalBufferProperties) {
  auto layer_data = GetInstanceLayerData(DataKey(physicalDevice));
  PFN_vkGetPhysicalDeviceExternalBufferProperties pfn =
      layer_data->dispatch_table.GetPhysicalDeviceExternalBufferProperties;
  if (pfn) {
    pfn(physicalDevice, pExternalBufferInfo, pExternalBufferProperties);
  }
}

void InterceptGetPhysicalDeviceExternalBufferPropertiesKHR(
    VkPhysicalDevice physicalDevice,
    const VkPhysicalDeviceExternalBufferInfo *pExternalBufferInfo,
    VkExternalBufferProperties *pExternalBufferProperties) {
  auto layer_data = GetInstanceLayerData(DataKey(physicalDevice));
  PFN_vkGetPhysicalDeviceExternalBufferPropertiesKHR pfn =
      layer_data->dispatch_table.GetPhysicalDeviceExternalBufferPropertiesKHR;
  if (pfn) {
    pfn(physicalDevice, pExternalBufferInfo, pExternalBufferProperties);
  }
}

VkResult InterceptGetMemoryFdKHR(VkDevice device,
                                 const VkMemoryGetFdInfoKHR *pGetFdInfo,
                                 int *pFd) {
  auto layer_data = GetDeviceLayerData(DataKey(device));
  PFN_vkGetMemoryFdKHR pfn = layer_data->dispatch_table.GetMemoryFdKHR;

  VkResult result = VK_SUCCESS;
  if (pfn) {

    result = pfn(device, pGetFdInfo, pFd);
  }

  return result;
}

VkResult InterceptGetMemoryFdPropertiesKHR(
    VkDevice device, VkExternalMemoryHandleTypeFlagBits handleType, int fd,
    VkMemoryFdPropertiesKHR *pMemoryFdProperties) {
  auto layer_data = GetDeviceLayerData(DataKey(device));
  PFN_vkGetMemoryFdPropertiesKHR pfn =
      layer_data->dispatch_table.GetMemoryFdPropertiesKHR;

  VkResult result = VK_SUCCESS;
  if (pfn) {

    result = pfn(device, handleType, fd, pMemoryFdProperties);
  }

  return result;
}

void InterceptGetPhysicalDeviceExternalSemaphoreProperties(
    VkPhysicalDevice physicalDevice,
    const VkPhysicalDeviceExternalSemaphoreInfo *pExternalSemaphoreInfo,
    VkExternalSemaphoreProperties *pExternalSemaphoreProperties) {
  auto layer_data = GetInstanceLayerData(DataKey(physicalDevice));
  PFN_vkGetPhysicalDeviceExternalSemaphoreProperties pfn =
      layer_data->dispatch_table.GetPhysicalDeviceExternalSemaphoreProperties;
  if (pfn) {
    pfn(physicalDevice, pExternalSemaphoreInfo, pExternalSemaphoreProperties);
  }
}

void InterceptGetPhysicalDeviceExternalSemaphorePropertiesKHR(
    VkPhysicalDevice physicalDevice,
    const VkPhysicalDeviceExternalSemaphoreInfo *pExternalSemaphoreInfo,
    VkExternalSemaphoreProperties *pExternalSemaphoreProperties) {
  auto layer_data = GetInstanceLayerData(DataKey(physicalDevice));
  PFN_vkGetPhysicalDeviceExternalSemaphorePropertiesKHR pfn =
      layer_data->dispatch_table
          .GetPhysicalDeviceExternalSemaphorePropertiesKHR;
  if (pfn) {
    pfn(physicalDevice, pExternalSemaphoreInfo, pExternalSemaphoreProperties);
  }
}

VkResult InterceptGetSemaphoreFdKHR(VkDevice device,
                                    const VkSemaphoreGetFdInfoKHR *pGetFdInfo,
                                    int *pFd) {
  auto layer_data = GetDeviceLayerData(DataKey(device));
  PFN_vkGetSemaphoreFdKHR pfn = layer_data->dispatch_table.GetSemaphoreFdKHR;

  VkResult result = VK_SUCCESS;
  if (pfn) {

    result = pfn(device, pGetFdInfo, pFd);
  }

  return result;
}

VkResult InterceptImportSemaphoreFdKHR(
    VkDevice device, const VkImportSemaphoreFdInfoKHR *pImportSemaphoreFdInfo) {
  auto layer_data = GetDeviceLayerData(DataKey(device));
  PFN_vkImportSemaphoreFdKHR pfn =
      layer_data->dispatch_table.ImportSemaphoreFdKHR;

  VkResult result = VK_SUCCESS;
  if (pfn) {

    result = pfn(device, pImportSemaphoreFdInfo);
  }

  return result;
}

void InterceptGetPhysicalDeviceExternalFenceProperties(
    VkPhysicalDevice physicalDevice,
    const VkPhysicalDeviceExternalFenceInfo *pExternalFenceInfo,
    VkExternalFenceProperties *pExternalFenceProperties) {
  auto layer_data = GetInstanceLayerData(DataKey(physicalDevice));
  PFN_vkGetPhysicalDeviceExternalFenceProperties pfn =
      layer_data->dispatch_table.GetPhysicalDeviceExternalFenceProperties;
  if (pfn) {
    pfn(physicalDevice, pExternalFenceInfo, pExternalFenceProperties);
  }
}

void InterceptGetPhysicalDeviceExternalFencePropertiesKHR(
    VkPhysicalDevice physicalDevice,
    const VkPhysicalDeviceExternalFenceInfo *pExternalFenceInfo,
    VkExternalFenceProperties *pExternalFenceProperties) {
  auto layer_data = GetInstanceLayerData(DataKey(physicalDevice));
  PFN_vkGetPhysicalDeviceExternalFencePropertiesKHR pfn =
      layer_data->dispatch_table.GetPhysicalDeviceExternalFencePropertiesKHR;
  if (pfn) {
    pfn(physicalDevice, pExternalFenceInfo, pExternalFenceProperties);
  }
}

VkResult InterceptGetFenceFdKHR(VkDevice device,
                                const VkFenceGetFdInfoKHR *pGetFdInfo,
                                int *pFd) {
  auto layer_data = GetDeviceLayerData(DataKey(device));
  PFN_vkGetFenceFdKHR pfn = layer_data->dispatch_table.GetFenceFdKHR;

  VkResult result = VK_SUCCESS;
  if (pfn) {

    result = pfn(device, pGetFdInfo, pFd);
  }

  return result;
}

VkResult
InterceptImportFenceFdKHR(VkDevice device,
                          const VkImportFenceFdInfoKHR *pImportFenceFdInfo) {
  auto layer_data = GetDeviceLayerData(DataKey(device));
  PFN_vkImportFenceFdKHR pfn = layer_data->dispatch_table.ImportFenceFdKHR;

  VkResult result = VK_SUCCESS;
  if (pfn) {

    result = pfn(device, pImportFenceFdInfo);
  }

  return result;
}

VkResult InterceptEnumeratePhysicalDeviceGroups(
    VkInstance instance, uint32_t *pPhysicalDeviceGroupCount,
    VkPhysicalDeviceGroupProperties *pPhysicalDeviceGroupProperties) {
  auto layer_data = GetInstanceLayerData(DataKey(instance));
  PFN_vkEnumeratePhysicalDeviceGroups pfn =
      layer_data->dispatch_table.EnumeratePhysicalDeviceGroups;

  VkResult result = VK_SUCCESS;
  if (pfn) {

    result = pfn(instance, pPhysicalDeviceGroupCount,
                 pPhysicalDeviceGroupProperties);
  }

  return result;
}

VkResult InterceptEnumeratePhysicalDeviceGroupsKHR(
    VkInstance instance, uint32_t *pPhysicalDeviceGroupCount,
    VkPhysicalDeviceGroupProperties *pPhysicalDeviceGroupProperties) {
  auto layer_data = GetInstanceLayerData(DataKey(instance));
  PFN_vkEnumeratePhysicalDeviceGroupsKHR pfn =
      layer_data->dispatch_table.EnumeratePhysicalDeviceGroupsKHR;

  VkResult result = VK_SUCCESS;
  if (pfn) {

    result = pfn(instance, pPhysicalDeviceGroupCount,
                 pPhysicalDeviceGroupProperties);
  }

  return result;
}

void InterceptGetDeviceGroupPeerMemoryFeatures(
    VkDevice device, uint32_t heapIndex, uint32_t localDeviceIndex,
    uint32_t remoteDeviceIndex, VkPeerMemoryFeatureFlags *pPeerMemoryFeatures) {
  auto layer_data = GetDeviceLayerData(DataKey(device));
  PFN_vkGetDeviceGroupPeerMemoryFeatures pfn =
      layer_data->dispatch_table.GetDeviceGroupPeerMemoryFeatures;
  if (pfn) {
    pfn(device, heapIndex, localDeviceIndex, remoteDeviceIndex,
        pPeerMemoryFeatures);
  }
}

void InterceptGetDeviceGroupPeerMemoryFeaturesKHR(
    VkDevice device, uint32_t heapIndex, uint32_t localDeviceIndex,
    uint32_t remoteDeviceIndex, VkPeerMemoryFeatureFlags *pPeerMemoryFeatures) {
  auto layer_data = GetDeviceLayerData(DataKey(device));
  PFN_vkGetDeviceGroupPeerMemoryFeaturesKHR pfn =
      layer_data->dispatch_table.GetDeviceGroupPeerMemoryFeaturesKHR;
  if (pfn) {
    pfn(device, heapIndex, localDeviceIndex, remoteDeviceIndex,
        pPeerMemoryFeatures);
  }
}

VkResult InterceptBindBufferMemory2(VkDevice device, uint32_t bindInfoCount,
                                    const VkBindBufferMemoryInfo *pBindInfos) {
  auto layer_data = GetDeviceLayerData(DataKey(device));
  PFN_vkBindBufferMemory2 pfn = layer_data->dispatch_table.BindBufferMemory2;

  VkResult result = VK_SUCCESS;
  if (pfn) {

    result = pfn(device, bindInfoCount, pBindInfos);
  }

  return result;
}

VkResult
InterceptBindBufferMemory2KHR(VkDevice device, uint32_t bindInfoCount,
                              const VkBindBufferMemoryInfo *pBindInfos) {
  auto layer_data = GetDeviceLayerData(DataKey(device));
  PFN_vkBindBufferMemory2KHR pfn =
      layer_data->dispatch_table.BindBufferMemory2KHR;

  VkResult result = VK_SUCCESS;
  if (pfn) {

    result = pfn(device, bindInfoCount, pBindInfos);
  }

  return result;
}

VkResult InterceptBindImageMemory2(VkDevice device, uint32_t bindInfoCount,
                                   const VkBindImageMemoryInfo *pBindInfos) {
  auto layer_data = GetDeviceLayerData(DataKey(device));
  PFN_vkBindImageMemory2 pfn = layer_data->dispatch_table.BindImageMemory2;

  VkResult result = VK_SUCCESS;
  if (pfn) {

    result = pfn(device, bindInfoCount, pBindInfos);
  }

  return result;
}

VkResult InterceptBindImageMemory2KHR(VkDevice device, uint32_t bindInfoCount,
                                      const VkBindImageMemoryInfo *pBindInfos) {
  auto layer_data = GetDeviceLayerData(DataKey(device));
  PFN_vkBindImageMemory2KHR pfn =
      layer_data->dispatch_table.BindImageMemory2KHR;

  VkResult result = VK_SUCCESS;
  if (pfn) {

    result = pfn(device, bindInfoCount, pBindInfos);
  }

  return result;
}

void InterceptCmdSetDeviceMask(VkCommandBuffer commandBuffer,
                               uint32_t deviceMask) {
  InterceptPreCmdSetDeviceMask(commandBuffer, deviceMask);

  auto layer_data = GetDeviceLayerData(DataKey(commandBuffer));
  PFN_vkCmdSetDeviceMask pfn = layer_data->dispatch_table.CmdSetDeviceMask;
  if (pfn) {
    pfn(commandBuffer, deviceMask);
  }

  InterceptPostCmdSetDeviceMask(commandBuffer, deviceMask);
}

void InterceptCmdSetDeviceMaskKHR(VkCommandBuffer commandBuffer,
                                  uint32_t deviceMask) {
  InterceptPreCmdSetDeviceMaskKHR(commandBuffer, deviceMask);

  auto layer_data = GetDeviceLayerData(DataKey(commandBuffer));
  PFN_vkCmdSetDeviceMaskKHR pfn =
      layer_data->dispatch_table.CmdSetDeviceMaskKHR;
  if (pfn) {
    pfn(commandBuffer, deviceMask);
  }

  InterceptPostCmdSetDeviceMaskKHR(commandBuffer, deviceMask);
}

VkResult InterceptGetDeviceGroupPresentCapabilitiesKHR(
    VkDevice device,
    VkDeviceGroupPresentCapabilitiesKHR *pDeviceGroupPresentCapabilities) {
  auto layer_data = GetDeviceLayerData(DataKey(device));
  PFN_vkGetDeviceGroupPresentCapabilitiesKHR pfn =
      layer_data->dispatch_table.GetDeviceGroupPresentCapabilitiesKHR;

  VkResult result = VK_SUCCESS;
  if (pfn) {

    result = pfn(device, pDeviceGroupPresentCapabilities);
  }

  return result;
}

VkResult InterceptGetDeviceGroupSurfacePresentModesKHR(
    VkDevice device, VkSurfaceKHR surface,
    VkDeviceGroupPresentModeFlagsKHR *pModes) {
  auto layer_data = GetDeviceLayerData(DataKey(device));
  PFN_vkGetDeviceGroupSurfacePresentModesKHR pfn =
      layer_data->dispatch_table.GetDeviceGroupSurfacePresentModesKHR;

  VkResult result = VK_SUCCESS;
  if (pfn) {

    result = pfn(device, surface, pModes);
  }

  return result;
}

VkResult
InterceptAcquireNextImage2KHR(VkDevice device,
                              const VkAcquireNextImageInfoKHR *pAcquireInfo,
                              uint32_t *pImageIndex) {
  auto layer_data = GetDeviceLayerData(DataKey(device));
  PFN_vkAcquireNextImage2KHR pfn =
      layer_data->dispatch_table.AcquireNextImage2KHR;

  VkResult result = VK_SUCCESS;
  if (pfn) {

    result = pfn(device, pAcquireInfo, pImageIndex);
  }

  return result;
}

void InterceptCmdDispatchBase(VkCommandBuffer commandBuffer,
                              uint32_t baseGroupX, uint32_t baseGroupY,
                              uint32_t baseGroupZ, uint32_t groupCountX,
                              uint32_t groupCountY, uint32_t groupCountZ) {
  InterceptPreCmdDispatchBase(commandBuffer, baseGroupX, baseGroupY, baseGroupZ,
                              groupCountX, groupCountY, groupCountZ);

  auto layer_data = GetDeviceLayerData(DataKey(commandBuffer));
  PFN_vkCmdDispatchBase pfn = layer_data->dispatch_table.CmdDispatchBase;
  if (pfn) {
    pfn(commandBuffer, baseGroupX, baseGroupY, baseGroupZ, groupCountX,
        groupCountY, groupCountZ);
  }

  InterceptPostCmdDispatchBase(commandBuffer, baseGroupX, baseGroupY,
                               baseGroupZ, groupCountX, groupCountY,
                               groupCountZ);
}

void InterceptCmdDispatchBaseKHR(VkCommandBuffer commandBuffer,
                                 uint32_t baseGroupX, uint32_t baseGroupY,
                                 uint32_t baseGroupZ, uint32_t groupCountX,
                                 uint32_t groupCountY, uint32_t groupCountZ) {
  InterceptPreCmdDispatchBaseKHR(commandBuffer, baseGroupX, baseGroupY,
                                 baseGroupZ, groupCountX, groupCountY,
                                 groupCountZ);

  auto layer_data = GetDeviceLayerData(DataKey(commandBuffer));
  PFN_vkCmdDispatchBaseKHR pfn = layer_data->dispatch_table.CmdDispatchBaseKHR;
  if (pfn) {
    pfn(commandBuffer, baseGroupX, baseGroupY, baseGroupZ, groupCountX,
        groupCountY, groupCountZ);
  }

  InterceptPostCmdDispatchBaseKHR(commandBuffer, baseGroupX, baseGroupY,
                                  baseGroupZ, groupCountX, groupCountY,
                                  groupCountZ);
}

VkResult InterceptGetPhysicalDevicePresentRectanglesKHR(
    VkPhysicalDevice physicalDevice, VkSurfaceKHR surface, uint32_t *pRectCount,
    VkRect2D *pRects) {
  auto layer_data = GetInstanceLayerData(DataKey(physicalDevice));
  PFN_vkGetPhysicalDevicePresentRectanglesKHR pfn =
      layer_data->dispatch_table.GetPhysicalDevicePresentRectanglesKHR;

  VkResult result = VK_SUCCESS;
  if (pfn) {

    result = pfn(physicalDevice, surface, pRectCount, pRects);
  }

  return result;
}

VkResult InterceptCreateDescriptorUpdateTemplate(
    VkDevice device, const VkDescriptorUpdateTemplateCreateInfo *pCreateInfo,
    const VkAllocationCallbacks *pAllocator,
    VkDescriptorUpdateTemplate *pDescriptorUpdateTemplate) {
  auto layer_data = GetDeviceLayerData(DataKey(device));
  PFN_vkCreateDescriptorUpdateTemplate pfn =
      layer_data->dispatch_table.CreateDescriptorUpdateTemplate;

  VkResult result = VK_SUCCESS;
  if (pfn) {

    result = pfn(device, pCreateInfo, pAllocator, pDescriptorUpdateTemplate);
  }

  return result;
}

VkResult InterceptCreateDescriptorUpdateTemplateKHR(
    VkDevice device, const VkDescriptorUpdateTemplateCreateInfo *pCreateInfo,
    const VkAllocationCallbacks *pAllocator,
    VkDescriptorUpdateTemplate *pDescriptorUpdateTemplate) {
  auto layer_data = GetDeviceLayerData(DataKey(device));
  PFN_vkCreateDescriptorUpdateTemplateKHR pfn =
      layer_data->dispatch_table.CreateDescriptorUpdateTemplateKHR;

  VkResult result = VK_SUCCESS;
  if (pfn) {

    result = pfn(device, pCreateInfo, pAllocator, pDescriptorUpdateTemplate);
  }

  return result;
}

void InterceptDestroyDescriptorUpdateTemplate(
    VkDevice device, VkDescriptorUpdateTemplate descriptorUpdateTemplate,
    const VkAllocationCallbacks *pAllocator) {
  auto layer_data = GetDeviceLayerData(DataKey(device));
  PFN_vkDestroyDescriptorUpdateTemplate pfn =
      layer_data->dispatch_table.DestroyDescriptorUpdateTemplate;
  if (pfn) {
    pfn(device, descriptorUpdateTemplate, pAllocator);
  }
}

void InterceptDestroyDescriptorUpdateTemplateKHR(
    VkDevice device, VkDescriptorUpdateTemplate descriptorUpdateTemplate,
    const VkAllocationCallbacks *pAllocator) {
  auto layer_data = GetDeviceLayerData(DataKey(device));
  PFN_vkDestroyDescriptorUpdateTemplateKHR pfn =
      layer_data->dispatch_table.DestroyDescriptorUpdateTemplateKHR;
  if (pfn) {
    pfn(device, descriptorUpdateTemplate, pAllocator);
  }
}

void InterceptUpdateDescriptorSetWithTemplate(
    VkDevice device, VkDescriptorSet descriptorSet,
    VkDescriptorUpdateTemplate descriptorUpdateTemplate, const void *pData) {
  auto layer_data = GetDeviceLayerData(DataKey(device));
  PFN_vkUpdateDescriptorSetWithTemplate pfn =
      layer_data->dispatch_table.UpdateDescriptorSetWithTemplate;
  if (pfn) {
    pfn(device, descriptorSet, descriptorUpdateTemplate, pData);
  }
}

void InterceptUpdateDescriptorSetWithTemplateKHR(
    VkDevice device, VkDescriptorSet descriptorSet,
    VkDescriptorUpdateTemplate descriptorUpdateTemplate, const void *pData) {
  auto layer_data = GetDeviceLayerData(DataKey(device));
  PFN_vkUpdateDescriptorSetWithTemplateKHR pfn =
      layer_data->dispatch_table.UpdateDescriptorSetWithTemplateKHR;
  if (pfn) {
    pfn(device, descriptorSet, descriptorUpdateTemplate, pData);
  }
}

void InterceptCmdPushDescriptorSetWithTemplateKHR(
    VkCommandBuffer commandBuffer,
    VkDescriptorUpdateTemplate descriptorUpdateTemplate,
    VkPipelineLayout layout, uint32_t set, const void *pData) {
  InterceptPreCmdPushDescriptorSetWithTemplateKHR(
      commandBuffer, descriptorUpdateTemplate, layout, set, pData);

  auto layer_data = GetDeviceLayerData(DataKey(commandBuffer));
  PFN_vkCmdPushDescriptorSetWithTemplateKHR pfn =
      layer_data->dispatch_table.CmdPushDescriptorSetWithTemplateKHR;
  if (pfn) {
    pfn(commandBuffer, descriptorUpdateTemplate, layout, set, pData);
  }

  InterceptPostCmdPushDescriptorSetWithTemplateKHR(
      commandBuffer, descriptorUpdateTemplate, layout, set, pData);
}

VkResult InterceptGetSwapchainStatusKHR(VkDevice device,
                                        VkSwapchainKHR swapchain) {
  auto layer_data = GetDeviceLayerData(DataKey(device));
  PFN_vkGetSwapchainStatusKHR pfn =
      layer_data->dispatch_table.GetSwapchainStatusKHR;

  VkResult result = VK_SUCCESS;
  if (pfn) {

    result = pfn(device, swapchain);
  }

  return result;
}

void InterceptCmdSetSampleLocationsEXT(
    VkCommandBuffer commandBuffer,
    const VkSampleLocationsInfoEXT *pSampleLocationsInfo) {
  InterceptPreCmdSetSampleLocationsEXT(commandBuffer, pSampleLocationsInfo);

  auto layer_data = GetDeviceLayerData(DataKey(commandBuffer));
  PFN_vkCmdSetSampleLocationsEXT pfn =
      layer_data->dispatch_table.CmdSetSampleLocationsEXT;
  if (pfn) {
    pfn(commandBuffer, pSampleLocationsInfo);
  }

  InterceptPostCmdSetSampleLocationsEXT(commandBuffer, pSampleLocationsInfo);
}

void InterceptGetPhysicalDeviceMultisamplePropertiesEXT(
    VkPhysicalDevice physicalDevice, VkSampleCountFlagBits samples,
    VkMultisamplePropertiesEXT *pMultisampleProperties) {
  auto layer_data = GetInstanceLayerData(DataKey(physicalDevice));
  PFN_vkGetPhysicalDeviceMultisamplePropertiesEXT pfn =
      layer_data->dispatch_table.GetPhysicalDeviceMultisamplePropertiesEXT;
  if (pfn) {
    pfn(physicalDevice, samples, pMultisampleProperties);
  }
}

VkResult InterceptGetPhysicalDeviceSurfaceCapabilities2KHR(
    VkPhysicalDevice physicalDevice,
    const VkPhysicalDeviceSurfaceInfo2KHR *pSurfaceInfo,
    VkSurfaceCapabilities2KHR *pSurfaceCapabilities) {
  auto layer_data = GetInstanceLayerData(DataKey(physicalDevice));
  PFN_vkGetPhysicalDeviceSurfaceCapabilities2KHR pfn =
      layer_data->dispatch_table.GetPhysicalDeviceSurfaceCapabilities2KHR;

  VkResult result = VK_SUCCESS;
  if (pfn) {

    result = pfn(physicalDevice, pSurfaceInfo, pSurfaceCapabilities);
  }

  return result;
}

VkResult InterceptGetPhysicalDeviceSurfaceFormats2KHR(
    VkPhysicalDevice physicalDevice,
    const VkPhysicalDeviceSurfaceInfo2KHR *pSurfaceInfo,
    uint32_t *pSurfaceFormatCount, VkSurfaceFormat2KHR *pSurfaceFormats) {
  auto layer_data = GetInstanceLayerData(DataKey(physicalDevice));
  PFN_vkGetPhysicalDeviceSurfaceFormats2KHR pfn =
      layer_data->dispatch_table.GetPhysicalDeviceSurfaceFormats2KHR;

  VkResult result = VK_SUCCESS;
  if (pfn) {

    result =
        pfn(physicalDevice, pSurfaceInfo, pSurfaceFormatCount, pSurfaceFormats);
  }

  return result;
}

VkResult InterceptGetPhysicalDeviceDisplayProperties2KHR(
    VkPhysicalDevice physicalDevice, uint32_t *pPropertyCount,
    VkDisplayProperties2KHR *pProperties) {
  auto layer_data = GetInstanceLayerData(DataKey(physicalDevice));
  PFN_vkGetPhysicalDeviceDisplayProperties2KHR pfn =
      layer_data->dispatch_table.GetPhysicalDeviceDisplayProperties2KHR;

  VkResult result = VK_SUCCESS;
  if (pfn) {

    result = pfn(physicalDevice, pPropertyCount, pProperties);
  }

  return result;
}

VkResult InterceptGetPhysicalDeviceDisplayPlaneProperties2KHR(
    VkPhysicalDevice physicalDevice, uint32_t *pPropertyCount,
    VkDisplayPlaneProperties2KHR *pProperties) {
  auto layer_data = GetInstanceLayerData(DataKey(physicalDevice));
  PFN_vkGetPhysicalDeviceDisplayPlaneProperties2KHR pfn =
      layer_data->dispatch_table.GetPhysicalDeviceDisplayPlaneProperties2KHR;

  VkResult result = VK_SUCCESS;
  if (pfn) {

    result = pfn(physicalDevice, pPropertyCount, pProperties);
  }

  return result;
}

VkResult InterceptGetDisplayModeProperties2KHR(
    VkPhysicalDevice physicalDevice, VkDisplayKHR display,
    uint32_t *pPropertyCount, VkDisplayModeProperties2KHR *pProperties) {
  auto layer_data = GetInstanceLayerData(DataKey(physicalDevice));
  PFN_vkGetDisplayModeProperties2KHR pfn =
      layer_data->dispatch_table.GetDisplayModeProperties2KHR;

  VkResult result = VK_SUCCESS;
  if (pfn) {

    result = pfn(physicalDevice, display, pPropertyCount, pProperties);
  }

  return result;
}

VkResult InterceptGetDisplayPlaneCapabilities2KHR(
    VkPhysicalDevice physicalDevice,
    const VkDisplayPlaneInfo2KHR *pDisplayPlaneInfo,
    VkDisplayPlaneCapabilities2KHR *pCapabilities) {
  auto layer_data = GetInstanceLayerData(DataKey(physicalDevice));
  PFN_vkGetDisplayPlaneCapabilities2KHR pfn =
      layer_data->dispatch_table.GetDisplayPlaneCapabilities2KHR;

  VkResult result = VK_SUCCESS;
  if (pfn) {

    result = pfn(physicalDevice, pDisplayPlaneInfo, pCapabilities);
  }

  return result;
}

void InterceptGetBufferMemoryRequirements2(
    VkDevice device, const VkBufferMemoryRequirementsInfo2 *pInfo,
    VkMemoryRequirements2 *pMemoryRequirements) {
  auto layer_data = GetDeviceLayerData(DataKey(device));
  PFN_vkGetBufferMemoryRequirements2 pfn =
      layer_data->dispatch_table.GetBufferMemoryRequirements2;
  if (pfn) {
    pfn(device, pInfo, pMemoryRequirements);
  }
}

void InterceptGetBufferMemoryRequirements2KHR(
    VkDevice device, const VkBufferMemoryRequirementsInfo2 *pInfo,
    VkMemoryRequirements2 *pMemoryRequirements) {
  auto layer_data = GetDeviceLayerData(DataKey(device));
  PFN_vkGetBufferMemoryRequirements2KHR pfn =
      layer_data->dispatch_table.GetBufferMemoryRequirements2KHR;
  if (pfn) {
    pfn(device, pInfo, pMemoryRequirements);
  }
}

void InterceptGetImageMemoryRequirements2(
    VkDevice device, const VkImageMemoryRequirementsInfo2 *pInfo,
    VkMemoryRequirements2 *pMemoryRequirements) {
  auto layer_data = GetDeviceLayerData(DataKey(device));
  PFN_vkGetImageMemoryRequirements2 pfn =
      layer_data->dispatch_table.GetImageMemoryRequirements2;
  if (pfn) {
    pfn(device, pInfo, pMemoryRequirements);
  }
}

void InterceptGetImageMemoryRequirements2KHR(
    VkDevice device, const VkImageMemoryRequirementsInfo2 *pInfo,
    VkMemoryRequirements2 *pMemoryRequirements) {
  auto layer_data = GetDeviceLayerData(DataKey(device));
  PFN_vkGetImageMemoryRequirements2KHR pfn =
      layer_data->dispatch_table.GetImageMemoryRequirements2KHR;
  if (pfn) {
    pfn(device, pInfo, pMemoryRequirements);
  }
}

void InterceptGetImageSparseMemoryRequirements2(
    VkDevice device, const VkImageSparseMemoryRequirementsInfo2 *pInfo,
    uint32_t *pSparseMemoryRequirementCount,
    VkSparseImageMemoryRequirements2 *pSparseMemoryRequirements) {
  auto layer_data = GetDeviceLayerData(DataKey(device));
  PFN_vkGetImageSparseMemoryRequirements2 pfn =
      layer_data->dispatch_table.GetImageSparseMemoryRequirements2;
  if (pfn) {
    pfn(device, pInfo, pSparseMemoryRequirementCount,
        pSparseMemoryRequirements);
  }
}

void InterceptGetImageSparseMemoryRequirements2KHR(
    VkDevice device, const VkImageSparseMemoryRequirementsInfo2 *pInfo,
    uint32_t *pSparseMemoryRequirementCount,
    VkSparseImageMemoryRequirements2 *pSparseMemoryRequirements) {
  auto layer_data = GetDeviceLayerData(DataKey(device));
  PFN_vkGetImageSparseMemoryRequirements2KHR pfn =
      layer_data->dispatch_table.GetImageSparseMemoryRequirements2KHR;
  if (pfn) {
    pfn(device, pInfo, pSparseMemoryRequirementCount,
        pSparseMemoryRequirements);
  }
}

VkResult InterceptCreateSamplerYcbcrConversion(
    VkDevice device, const VkSamplerYcbcrConversionCreateInfo *pCreateInfo,
    const VkAllocationCallbacks *pAllocator,
    VkSamplerYcbcrConversion *pYcbcrConversion) {
  auto layer_data = GetDeviceLayerData(DataKey(device));
  PFN_vkCreateSamplerYcbcrConversion pfn =
      layer_data->dispatch_table.CreateSamplerYcbcrConversion;

  VkResult result = VK_SUCCESS;
  if (pfn) {

    result = pfn(device, pCreateInfo, pAllocator, pYcbcrConversion);
  }

  return result;
}

VkResult InterceptCreateSamplerYcbcrConversionKHR(
    VkDevice device, const VkSamplerYcbcrConversionCreateInfo *pCreateInfo,
    const VkAllocationCallbacks *pAllocator,
    VkSamplerYcbcrConversion *pYcbcrConversion) {
  auto layer_data = GetDeviceLayerData(DataKey(device));
  PFN_vkCreateSamplerYcbcrConversionKHR pfn =
      layer_data->dispatch_table.CreateSamplerYcbcrConversionKHR;

  VkResult result = VK_SUCCESS;
  if (pfn) {

    result = pfn(device, pCreateInfo, pAllocator, pYcbcrConversion);
  }

  return result;
}

void InterceptDestroySamplerYcbcrConversion(
    VkDevice device, VkSamplerYcbcrConversion ycbcrConversion,
    const VkAllocationCallbacks *pAllocator) {
  auto layer_data = GetDeviceLayerData(DataKey(device));
  PFN_vkDestroySamplerYcbcrConversion pfn =
      layer_data->dispatch_table.DestroySamplerYcbcrConversion;
  if (pfn) {
    pfn(device, ycbcrConversion, pAllocator);
  }
}

void InterceptDestroySamplerYcbcrConversionKHR(
    VkDevice device, VkSamplerYcbcrConversion ycbcrConversion,
    const VkAllocationCallbacks *pAllocator) {
  auto layer_data = GetDeviceLayerData(DataKey(device));
  PFN_vkDestroySamplerYcbcrConversionKHR pfn =
      layer_data->dispatch_table.DestroySamplerYcbcrConversionKHR;
  if (pfn) {
    pfn(device, ycbcrConversion, pAllocator);
  }
}

void InterceptGetDescriptorSetLayoutSupport(
    VkDevice device, const VkDescriptorSetLayoutCreateInfo *pCreateInfo,
    VkDescriptorSetLayoutSupport *pSupport) {
  auto layer_data = GetDeviceLayerData(DataKey(device));
  PFN_vkGetDescriptorSetLayoutSupport pfn =
      layer_data->dispatch_table.GetDescriptorSetLayoutSupport;
  if (pfn) {
    pfn(device, pCreateInfo, pSupport);
  }
}

void InterceptGetDescriptorSetLayoutSupportKHR(
    VkDevice device, const VkDescriptorSetLayoutCreateInfo *pCreateInfo,
    VkDescriptorSetLayoutSupport *pSupport) {
  auto layer_data = GetDeviceLayerData(DataKey(device));
  PFN_vkGetDescriptorSetLayoutSupportKHR pfn =
      layer_data->dispatch_table.GetDescriptorSetLayoutSupportKHR;
  if (pfn) {
    pfn(device, pCreateInfo, pSupport);
  }
}

VkResult InterceptGetShaderInfoAMD(VkDevice device, VkPipeline pipeline,
                                   VkShaderStageFlagBits shaderStage,
                                   VkShaderInfoTypeAMD infoType,
                                   size_t *pInfoSize, void *pInfo) {
  auto layer_data = GetDeviceLayerData(DataKey(device));
  PFN_vkGetShaderInfoAMD pfn = layer_data->dispatch_table.GetShaderInfoAMD;

  VkResult result = VK_SUCCESS;
  if (pfn) {

    result = pfn(device, pipeline, shaderStage, infoType, pInfoSize, pInfo);
  }

  return result;
}

void InterceptSetLocalDimmingAMD(VkDevice device, VkSwapchainKHR swapChain,
                                 VkBool32 localDimmingEnable) {
  auto layer_data = GetDeviceLayerData(DataKey(device));
  PFN_vkSetLocalDimmingAMD pfn = layer_data->dispatch_table.SetLocalDimmingAMD;
  if (pfn) {
    pfn(device, swapChain, localDimmingEnable);
  }
}

VkResult InterceptGetPhysicalDeviceCalibrateableTimeDomainsEXT(
    VkPhysicalDevice physicalDevice, uint32_t *pTimeDomainCount,
    VkTimeDomainEXT *pTimeDomains) {
  auto layer_data = GetInstanceLayerData(DataKey(physicalDevice));
  PFN_vkGetPhysicalDeviceCalibrateableTimeDomainsEXT pfn =
      layer_data->dispatch_table.GetPhysicalDeviceCalibrateableTimeDomainsEXT;

  VkResult result = VK_SUCCESS;
  if (pfn) {

    result = pfn(physicalDevice, pTimeDomainCount, pTimeDomains);
  }

  return result;
}

VkResult InterceptGetCalibratedTimestampsEXT(
    VkDevice device, uint32_t timestampCount,
    const VkCalibratedTimestampInfoEXT *pTimestampInfos, uint64_t *pTimestamps,
    uint64_t *pMaxDeviation) {
  auto layer_data = GetDeviceLayerData(DataKey(device));
  PFN_vkGetCalibratedTimestampsEXT pfn =
      layer_data->dispatch_table.GetCalibratedTimestampsEXT;

  VkResult result = VK_SUCCESS;
  if (pfn) {

    result = pfn(device, timestampCount, pTimestampInfos, pTimestamps,
                 pMaxDeviation);
  }

  return result;
}

VkResult InterceptSetDebugUtilsObjectNameEXT(
    VkDevice device, const VkDebugUtilsObjectNameInfoEXT *pNameInfo) {
  InterceptPreSetDebugUtilsObjectNameEXT(device, pNameInfo);

  auto layer_data = GetDeviceLayerData(DataKey(device));
  PFN_vkSetDebugUtilsObjectNameEXT pfn =
      layer_data->dispatch_table.SetDebugUtilsObjectNameEXT;

  VkResult result = VK_SUCCESS;
  if (pfn) {

    result = pfn(device, pNameInfo);
  }

  result = InterceptPostSetDebugUtilsObjectNameEXT(device, pNameInfo, result);

  return result;
}

VkResult InterceptSetDebugUtilsObjectTagEXT(
    VkDevice device, const VkDebugUtilsObjectTagInfoEXT *pTagInfo) {
  auto layer_data = GetDeviceLayerData(DataKey(device));
  PFN_vkSetDebugUtilsObjectTagEXT pfn =
      layer_data->dispatch_table.SetDebugUtilsObjectTagEXT;

  VkResult result = VK_SUCCESS;
  if (pfn) {

    result = pfn(device, pTagInfo);
  }

  return result;
}

void InterceptQueueBeginDebugUtilsLabelEXT(
    VkQueue queue, const VkDebugUtilsLabelEXT *pLabelInfo) {
  auto layer_data = GetDeviceLayerData(DataKey(queue));
  PFN_vkQueueBeginDebugUtilsLabelEXT pfn =
      layer_data->dispatch_table.QueueBeginDebugUtilsLabelEXT;
  if (pfn) {
    pfn(queue, pLabelInfo);
  }
}

void InterceptQueueEndDebugUtilsLabelEXT(VkQueue queue) {
  auto layer_data = GetDeviceLayerData(DataKey(queue));
  PFN_vkQueueEndDebugUtilsLabelEXT pfn =
      layer_data->dispatch_table.QueueEndDebugUtilsLabelEXT;
  if (pfn) {
    pfn(queue);
  }
}

void InterceptQueueInsertDebugUtilsLabelEXT(
    VkQueue queue, const VkDebugUtilsLabelEXT *pLabelInfo) {
  auto layer_data = GetDeviceLayerData(DataKey(queue));
  PFN_vkQueueInsertDebugUtilsLabelEXT pfn =
      layer_data->dispatch_table.QueueInsertDebugUtilsLabelEXT;
  if (pfn) {
    pfn(queue, pLabelInfo);
  }
}

void InterceptCmdBeginDebugUtilsLabelEXT(
    VkCommandBuffer commandBuffer, const VkDebugUtilsLabelEXT *pLabelInfo) {
  InterceptPreCmdBeginDebugUtilsLabelEXT(commandBuffer, pLabelInfo);

  auto layer_data = GetDeviceLayerData(DataKey(commandBuffer));
  PFN_vkCmdBeginDebugUtilsLabelEXT pfn =
      layer_data->dispatch_table.CmdBeginDebugUtilsLabelEXT;
  if (pfn) {
    pfn(commandBuffer, pLabelInfo);
  }

  InterceptPostCmdBeginDebugUtilsLabelEXT(commandBuffer, pLabelInfo);
}

void InterceptCmdEndDebugUtilsLabelEXT(VkCommandBuffer commandBuffer) {
  InterceptPreCmdEndDebugUtilsLabelEXT(commandBuffer);

  auto layer_data = GetDeviceLayerData(DataKey(commandBuffer));
  PFN_vkCmdEndDebugUtilsLabelEXT pfn =
      layer_data->dispatch_table.CmdEndDebugUtilsLabelEXT;
  if (pfn) {
    pfn(commandBuffer);
  }

  InterceptPostCmdEndDebugUtilsLabelEXT(commandBuffer);
}

void InterceptCmdInsertDebugUtilsLabelEXT(
    VkCommandBuffer commandBuffer, const VkDebugUtilsLabelEXT *pLabelInfo) {
  InterceptPreCmdInsertDebugUtilsLabelEXT(commandBuffer, pLabelInfo);

  auto layer_data = GetDeviceLayerData(DataKey(commandBuffer));
  PFN_vkCmdInsertDebugUtilsLabelEXT pfn =
      layer_data->dispatch_table.CmdInsertDebugUtilsLabelEXT;
  if (pfn) {
    pfn(commandBuffer, pLabelInfo);
  }

  InterceptPostCmdInsertDebugUtilsLabelEXT(commandBuffer, pLabelInfo);
}

VkResult InterceptCreateDebugUtilsMessengerEXT(
    VkInstance instance, const VkDebugUtilsMessengerCreateInfoEXT *pCreateInfo,
    const VkAllocationCallbacks *pAllocator,
    VkDebugUtilsMessengerEXT *pMessenger) {
  auto layer_data = GetInstanceLayerData(DataKey(instance));
  PFN_vkCreateDebugUtilsMessengerEXT pfn =
      layer_data->dispatch_table.CreateDebugUtilsMessengerEXT;

  VkResult result = VK_SUCCESS;
  if (pfn) {

    result = pfn(instance, pCreateInfo, pAllocator, pMessenger);
  }

  return result;
}

void InterceptDestroyDebugUtilsMessengerEXT(
    VkInstance instance, VkDebugUtilsMessengerEXT messenger,
    const VkAllocationCallbacks *pAllocator) {
  auto layer_data = GetInstanceLayerData(DataKey(instance));
  PFN_vkDestroyDebugUtilsMessengerEXT pfn =
      layer_data->dispatch_table.DestroyDebugUtilsMessengerEXT;
  if (pfn) {
    pfn(instance, messenger, pAllocator);
  }
}

void InterceptSubmitDebugUtilsMessageEXT(
    VkInstance instance, VkDebugUtilsMessageSeverityFlagBitsEXT messageSeverity,
    VkDebugUtilsMessageTypeFlagsEXT messageTypes,
    const VkDebugUtilsMessengerCallbackDataEXT *pCallbackData) {
  auto layer_data = GetInstanceLayerData(DataKey(instance));
  PFN_vkSubmitDebugUtilsMessageEXT pfn =
      layer_data->dispatch_table.SubmitDebugUtilsMessageEXT;
  if (pfn) {
    pfn(instance, messageSeverity, messageTypes, pCallbackData);
  }
}

VkResult InterceptGetMemoryHostPointerPropertiesEXT(
    VkDevice device, VkExternalMemoryHandleTypeFlagBits handleType,
    const void *pHostPointer,
    VkMemoryHostPointerPropertiesEXT *pMemoryHostPointerProperties) {
  auto layer_data = GetDeviceLayerData(DataKey(device));
  PFN_vkGetMemoryHostPointerPropertiesEXT pfn =
      layer_data->dispatch_table.GetMemoryHostPointerPropertiesEXT;

  VkResult result = VK_SUCCESS;
  if (pfn) {

    result =
        pfn(device, handleType, pHostPointer, pMemoryHostPointerProperties);
  }

  return result;
}

void InterceptCmdWriteBufferMarkerAMD(VkCommandBuffer commandBuffer,
                                      VkPipelineStageFlagBits pipelineStage,
                                      VkBuffer dstBuffer,
                                      VkDeviceSize dstOffset, uint32_t marker) {
  InterceptPreCmdWriteBufferMarkerAMD(commandBuffer, pipelineStage, dstBuffer,
                                      dstOffset, marker);

  auto layer_data = GetDeviceLayerData(DataKey(commandBuffer));
  PFN_vkCmdWriteBufferMarkerAMD pfn =
      layer_data->dispatch_table.CmdWriteBufferMarkerAMD;
  if (pfn) {
    pfn(commandBuffer, pipelineStage, dstBuffer, dstOffset, marker);
  }

  InterceptPostCmdWriteBufferMarkerAMD(commandBuffer, pipelineStage, dstBuffer,
                                       dstOffset, marker);
}

VkResult InterceptCreateRenderPass2(VkDevice device,
                                    const VkRenderPassCreateInfo2 *pCreateInfo,
                                    const VkAllocationCallbacks *pAllocator,
                                    VkRenderPass *pRenderPass) {
  auto layer_data = GetDeviceLayerData(DataKey(device));
  PFN_vkCreateRenderPass2 pfn = layer_data->dispatch_table.CreateRenderPass2;

  VkResult result = VK_SUCCESS;
  if (pfn) {

    result = pfn(device, pCreateInfo, pAllocator, pRenderPass);
  }

  return result;
}

VkResult InterceptCreateRenderPass2KHR(
    VkDevice device, const VkRenderPassCreateInfo2 *pCreateInfo,
    const VkAllocationCallbacks *pAllocator, VkRenderPass *pRenderPass) {
  auto layer_data = GetDeviceLayerData(DataKey(device));
  PFN_vkCreateRenderPass2KHR pfn =
      layer_data->dispatch_table.CreateRenderPass2KHR;

  VkResult result = VK_SUCCESS;
  if (pfn) {

    result = pfn(device, pCreateInfo, pAllocator, pRenderPass);
  }

  return result;
}

void InterceptCmdBeginRenderPass2(VkCommandBuffer commandBuffer,
                                  const VkRenderPassBeginInfo *pRenderPassBegin,
                                  const VkSubpassBeginInfo *pSubpassBeginInfo) {
  InterceptPreCmdBeginRenderPass2(commandBuffer, pRenderPassBegin,
                                  pSubpassBeginInfo);

  auto layer_data = GetDeviceLayerData(DataKey(commandBuffer));
  PFN_vkCmdBeginRenderPass2 pfn =
      layer_data->dispatch_table.CmdBeginRenderPass2;
  if (pfn) {
    pfn(commandBuffer, pRenderPassBegin, pSubpassBeginInfo);
  }

  InterceptPostCmdBeginRenderPass2(commandBuffer, pRenderPassBegin,
                                   pSubpassBeginInfo);
}

void InterceptCmdBeginRenderPass2KHR(
    VkCommandBuffer commandBuffer,
    const VkRenderPassBeginInfo *pRenderPassBegin,
    const VkSubpassBeginInfo *pSubpassBeginInfo) {
  InterceptPreCmdBeginRenderPass2KHR(commandBuffer, pRenderPassBegin,
                                     pSubpassBeginInfo);

  auto layer_data = GetDeviceLayerData(DataKey(commandBuffer));
  PFN_vkCmdBeginRenderPass2KHR pfn =
      layer_data->dispatch_table.CmdBeginRenderPass2KHR;
  if (pfn) {
    pfn(commandBuffer, pRenderPassBegin, pSubpassBeginInfo);
  }

  InterceptPostCmdBeginRenderPass2KHR(commandBuffer, pRenderPassBegin,
                                      pSubpassBeginInfo);
}

void InterceptCmdNextSubpass2(VkCommandBuffer commandBuffer,
                              const VkSubpassBeginInfo *pSubpassBeginInfo,
                              const VkSubpassEndInfo *pSubpassEndInfo) {
  InterceptPreCmdNextSubpass2(commandBuffer, pSubpassBeginInfo,
                              pSubpassEndInfo);

  auto layer_data = GetDeviceLayerData(DataKey(commandBuffer));
  PFN_vkCmdNextSubpass2 pfn = layer_data->dispatch_table.CmdNextSubpass2;
  if (pfn) {
    pfn(commandBuffer, pSubpassBeginInfo, pSubpassEndInfo);
  }

  InterceptPostCmdNextSubpass2(commandBuffer, pSubpassBeginInfo,
                               pSubpassEndInfo);
}

void InterceptCmdNextSubpass2KHR(VkCommandBuffer commandBuffer,
                                 const VkSubpassBeginInfo *pSubpassBeginInfo,
                                 const VkSubpassEndInfo *pSubpassEndInfo) {
  InterceptPreCmdNextSubpass2KHR(commandBuffer, pSubpassBeginInfo,
                                 pSubpassEndInfo);

  auto layer_data = GetDeviceLayerData(DataKey(commandBuffer));
  PFN_vkCmdNextSubpass2KHR pfn = layer_data->dispatch_table.CmdNextSubpass2KHR;
  if (pfn) {
    pfn(commandBuffer, pSubpassBeginInfo, pSubpassEndInfo);
  }

  InterceptPostCmdNextSubpass2KHR(commandBuffer, pSubpassBeginInfo,
                                  pSubpassEndInfo);
}

void InterceptCmdEndRenderPass2(VkCommandBuffer commandBuffer,
                                const VkSubpassEndInfo *pSubpassEndInfo) {
  InterceptPreCmdEndRenderPass2(commandBuffer, pSubpassEndInfo);

  auto layer_data = GetDeviceLayerData(DataKey(commandBuffer));
  PFN_vkCmdEndRenderPass2 pfn = layer_data->dispatch_table.CmdEndRenderPass2;
  if (pfn) {
    pfn(commandBuffer, pSubpassEndInfo);
  }

  InterceptPostCmdEndRenderPass2(commandBuffer, pSubpassEndInfo);
}

void InterceptCmdEndRenderPass2KHR(VkCommandBuffer commandBuffer,
                                   const VkSubpassEndInfo *pSubpassEndInfo) {
  InterceptPreCmdEndRenderPass2KHR(commandBuffer, pSubpassEndInfo);

  auto layer_data = GetDeviceLayerData(DataKey(commandBuffer));
  PFN_vkCmdEndRenderPass2KHR pfn =
      layer_data->dispatch_table.CmdEndRenderPass2KHR;
  if (pfn) {
    pfn(commandBuffer, pSubpassEndInfo);
  }

  InterceptPostCmdEndRenderPass2KHR(commandBuffer, pSubpassEndInfo);
}

VkResult InterceptGetSemaphoreCounterValue(VkDevice device,
                                           VkSemaphore semaphore,
                                           uint64_t *pValue) {
  auto layer_data = GetDeviceLayerData(DataKey(device));
  PFN_vkGetSemaphoreCounterValue pfn =
      layer_data->dispatch_table.GetSemaphoreCounterValue;

  VkResult result = VK_SUCCESS;
  if (pfn) {

    result = pfn(device, semaphore, pValue);
  }

  return result;
}

VkResult InterceptGetSemaphoreCounterValueKHR(VkDevice device,
                                              VkSemaphore semaphore,
                                              uint64_t *pValue) {
  auto layer_data = GetDeviceLayerData(DataKey(device));
  PFN_vkGetSemaphoreCounterValueKHR pfn =
      layer_data->dispatch_table.GetSemaphoreCounterValueKHR;

  VkResult result = VK_SUCCESS;
  if (pfn) {

    result = pfn(device, semaphore, pValue);
  }

  result = InterceptPostGetSemaphoreCounterValueKHR(device, semaphore, pValue,
                                                    result);

  return result;
}

VkResult InterceptWaitSemaphores(VkDevice device,
                                 const VkSemaphoreWaitInfo *pWaitInfo,
                                 uint64_t timeout) {
  auto layer_data = GetDeviceLayerData(DataKey(device));
  PFN_vkWaitSemaphores pfn = layer_data->dispatch_table.WaitSemaphores;

  VkResult result = VK_SUCCESS;
  if (pfn) {

    result = pfn(device, pWaitInfo, timeout);
  }

  return result;
}

VkResult InterceptWaitSemaphoresKHR(VkDevice device,
                                    const VkSemaphoreWaitInfo *pWaitInfo,
                                    uint64_t timeout) {
  InterceptPreWaitSemaphoresKHR(device, pWaitInfo, timeout);

  auto layer_data = GetDeviceLayerData(DataKey(device));
  PFN_vkWaitSemaphoresKHR pfn = layer_data->dispatch_table.WaitSemaphoresKHR;

  VkResult result = VK_SUCCESS;
  if (pfn) {

    result = pfn(device, pWaitInfo, timeout);
  }

  result = InterceptPostWaitSemaphoresKHR(device, pWaitInfo, timeout, result);

  return result;
}

VkResult InterceptSignalSemaphore(VkDevice device,
                                  const VkSemaphoreSignalInfo *pSignalInfo) {
  auto layer_data = GetDeviceLayerData(DataKey(device));
  PFN_vkSignalSemaphore pfn = layer_data->dispatch_table.SignalSemaphore;

  VkResult result = VK_SUCCESS;
  if (pfn) {

    result = pfn(device, pSignalInfo);
  }

  return result;
}

VkResult InterceptSignalSemaphoreKHR(VkDevice device,
                                     const VkSemaphoreSignalInfo *pSignalInfo) {
  auto layer_data = GetDeviceLayerData(DataKey(device));
  PFN_vkSignalSemaphoreKHR pfn = layer_data->dispatch_table.SignalSemaphoreKHR;

  VkResult result = VK_SUCCESS;
  if (pfn) {

    result = pfn(device, pSignalInfo);
  }

  result = InterceptPostSignalSemaphoreKHR(device, pSignalInfo, result);

  return result;
}

void InterceptCmdDrawIndirectCount(VkCommandBuffer commandBuffer,
                                   VkBuffer buffer, VkDeviceSize offset,
                                   VkBuffer countBuffer,
                                   VkDeviceSize countBufferOffset,
                                   uint32_t maxDrawCount, uint32_t stride) {
  InterceptPreCmdDrawIndirectCount(commandBuffer, buffer, offset, countBuffer,
                                   countBufferOffset, maxDrawCount, stride);

  auto layer_data = GetDeviceLayerData(DataKey(commandBuffer));
  PFN_vkCmdDrawIndirectCount pfn =
      layer_data->dispatch_table.CmdDrawIndirectCount;
  if (pfn) {
    pfn(commandBuffer, buffer, offset, countBuffer, countBufferOffset,
        maxDrawCount, stride);
  }

  InterceptPostCmdDrawIndirectCount(commandBuffer, buffer, offset, countBuffer,
                                    countBufferOffset, maxDrawCount, stride);
}

void InterceptCmdDrawIndirectCountKHR(VkCommandBuffer commandBuffer,
                                      VkBuffer buffer, VkDeviceSize offset,
                                      VkBuffer countBuffer,
                                      VkDeviceSize countBufferOffset,
                                      uint32_t maxDrawCount, uint32_t stride) {
  InterceptPreCmdDrawIndirectCountKHR(commandBuffer, buffer, offset,
                                      countBuffer, countBufferOffset,
                                      maxDrawCount, stride);

  auto layer_data = GetDeviceLayerData(DataKey(commandBuffer));
  PFN_vkCmdDrawIndirectCountKHR pfn =
      layer_data->dispatch_table.CmdDrawIndirectCountKHR;
  if (pfn) {
    pfn(commandBuffer, buffer, offset, countBuffer, countBufferOffset,
        maxDrawCount, stride);
  }

  InterceptPostCmdDrawIndirectCountKHR(commandBuffer, buffer, offset,
                                       countBuffer, countBufferOffset,
                                       maxDrawCount, stride);
}

void InterceptCmdDrawIndirectCountAMD(VkCommandBuffer commandBuffer,
                                      VkBuffer buffer, VkDeviceSize offset,
                                      VkBuffer countBuffer,
                                      VkDeviceSize countBufferOffset,
                                      uint32_t maxDrawCount, uint32_t stride) {
  InterceptPreCmdDrawIndirectCountAMD(commandBuffer, buffer, offset,
                                      countBuffer, countBufferOffset,
                                      maxDrawCount, stride);

  auto layer_data = GetDeviceLayerData(DataKey(commandBuffer));
  PFN_vkCmdDrawIndirectCountAMD pfn =
      layer_data->dispatch_table.CmdDrawIndirectCountAMD;
  if (pfn) {
    pfn(commandBuffer, buffer, offset, countBuffer, countBufferOffset,
        maxDrawCount, stride);
  }

  InterceptPostCmdDrawIndirectCountAMD(commandBuffer, buffer, offset,
                                       countBuffer, countBufferOffset,
                                       maxDrawCount, stride);
}

void InterceptCmdDrawIndexedIndirectCount(VkCommandBuffer commandBuffer,
                                          VkBuffer buffer, VkDeviceSize offset,
                                          VkBuffer countBuffer,
                                          VkDeviceSize countBufferOffset,
                                          uint32_t maxDrawCount,
                                          uint32_t stride) {
  InterceptPreCmdDrawIndexedIndirectCount(commandBuffer, buffer, offset,
                                          countBuffer, countBufferOffset,
                                          maxDrawCount, stride);

  auto layer_data = GetDeviceLayerData(DataKey(commandBuffer));
  PFN_vkCmdDrawIndexedIndirectCount pfn =
      layer_data->dispatch_table.CmdDrawIndexedIndirectCount;
  if (pfn) {
    pfn(commandBuffer, buffer, offset, countBuffer, countBufferOffset,
        maxDrawCount, stride);
  }

  InterceptPostCmdDrawIndexedIndirectCount(commandBuffer, buffer, offset,
                                           countBuffer, countBufferOffset,
                                           maxDrawCount, stride);
}

void InterceptCmdDrawIndexedIndirectCountKHR(
    VkCommandBuffer commandBuffer, VkBuffer buffer, VkDeviceSize offset,
    VkBuffer countBuffer, VkDeviceSize countBufferOffset, uint32_t maxDrawCount,
    uint32_t stride) {
  InterceptPreCmdDrawIndexedIndirectCountKHR(commandBuffer, buffer, offset,
                                             countBuffer, countBufferOffset,
                                             maxDrawCount, stride);

  auto layer_data = GetDeviceLayerData(DataKey(commandBuffer));
  PFN_vkCmdDrawIndexedIndirectCountKHR pfn =
      layer_data->dispatch_table.CmdDrawIndexedIndirectCountKHR;
  if (pfn) {
    pfn(commandBuffer, buffer, offset, countBuffer, countBufferOffset,
        maxDrawCount, stride);
  }

  InterceptPostCmdDrawIndexedIndirectCountKHR(commandBuffer, buffer, offset,
                                              countBuffer, countBufferOffset,
                                              maxDrawCount, stride);
}

void InterceptCmdDrawIndexedIndirectCountAMD(
    VkCommandBuffer commandBuffer, VkBuffer buffer, VkDeviceSize offset,
    VkBuffer countBuffer, VkDeviceSize countBufferOffset, uint32_t maxDrawCount,
    uint32_t stride) {
  InterceptPreCmdDrawIndexedIndirectCountAMD(commandBuffer, buffer, offset,
                                             countBuffer, countBufferOffset,
                                             maxDrawCount, stride);

  auto layer_data = GetDeviceLayerData(DataKey(commandBuffer));
  PFN_vkCmdDrawIndexedIndirectCountAMD pfn =
      layer_data->dispatch_table.CmdDrawIndexedIndirectCountAMD;
  if (pfn) {
    pfn(commandBuffer, buffer, offset, countBuffer, countBufferOffset,
        maxDrawCount, stride);
  }

  InterceptPostCmdDrawIndexedIndirectCountAMD(commandBuffer, buffer, offset,
                                              countBuffer, countBufferOffset,
                                              maxDrawCount, stride);
}

void InterceptDestroyAccelerationStructureKHR(
    VkDevice device, VkAccelerationStructureKHR accelerationStructure,
    const VkAllocationCallbacks *pAllocator) {
  auto layer_data = GetDeviceLayerData(DataKey(device));
  PFN_vkDestroyAccelerationStructureKHR pfn =
      layer_data->dispatch_table.DestroyAccelerationStructureKHR;
  if (pfn) {
    pfn(device, accelerationStructure, pAllocator);
  }
}

void InterceptCmdCopyAccelerationStructureKHR(
    VkCommandBuffer commandBuffer,
    const VkCopyAccelerationStructureInfoKHR *pInfo) {
  InterceptPreCmdCopyAccelerationStructureKHR(commandBuffer, pInfo);

  auto layer_data = GetDeviceLayerData(DataKey(commandBuffer));
  PFN_vkCmdCopyAccelerationStructureKHR pfn =
      layer_data->dispatch_table.CmdCopyAccelerationStructureKHR;
  if (pfn) {
    pfn(commandBuffer, pInfo);
  }

  InterceptPostCmdCopyAccelerationStructureKHR(commandBuffer, pInfo);
}

VkResult InterceptCopyAccelerationStructureKHR(
    VkDevice device, VkDeferredOperationKHR deferredOperation,
    const VkCopyAccelerationStructureInfoKHR *pInfo) {
  auto layer_data = GetDeviceLayerData(DataKey(device));
  PFN_vkCopyAccelerationStructureKHR pfn =
      layer_data->dispatch_table.CopyAccelerationStructureKHR;

  VkResult result = VK_SUCCESS;
  if (pfn) {

    result = pfn(device, deferredOperation, pInfo);
  }

  return result;
}

void InterceptCmdCopyAccelerationStructureToMemoryKHR(
    VkCommandBuffer commandBuffer,
    const VkCopyAccelerationStructureToMemoryInfoKHR *pInfo) {
  InterceptPreCmdCopyAccelerationStructureToMemoryKHR(commandBuffer, pInfo);

  auto layer_data = GetDeviceLayerData(DataKey(commandBuffer));
  PFN_vkCmdCopyAccelerationStructureToMemoryKHR pfn =
      layer_data->dispatch_table.CmdCopyAccelerationStructureToMemoryKHR;
  if (pfn) {
    pfn(commandBuffer, pInfo);
  }

  InterceptPostCmdCopyAccelerationStructureToMemoryKHR(commandBuffer, pInfo);
}

VkResult InterceptCopyAccelerationStructureToMemoryKHR(
    VkDevice device, VkDeferredOperationKHR deferredOperation,
    const VkCopyAccelerationStructureToMemoryInfoKHR *pInfo) {
  auto layer_data = GetDeviceLayerData(DataKey(device));
  PFN_vkCopyAccelerationStructureToMemoryKHR pfn =
      layer_data->dispatch_table.CopyAccelerationStructureToMemoryKHR;

  VkResult result = VK_SUCCESS;
  if (pfn) {

    result = pfn(device, deferredOperation, pInfo);
  }

  return result;
}

void InterceptCmdCopyMemoryToAccelerationStructureKHR(
    VkCommandBuffer commandBuffer,
    const VkCopyMemoryToAccelerationStructureInfoKHR *pInfo) {
  InterceptPreCmdCopyMemoryToAccelerationStructureKHR(commandBuffer, pInfo);

  auto layer_data = GetDeviceLayerData(DataKey(commandBuffer));
  PFN_vkCmdCopyMemoryToAccelerationStructureKHR pfn =
      layer_data->dispatch_table.CmdCopyMemoryToAccelerationStructureKHR;
  if (pfn) {
    pfn(commandBuffer, pInfo);
  }

  InterceptPostCmdCopyMemoryToAccelerationStructureKHR(commandBuffer, pInfo);
}

VkResult InterceptCopyMemoryToAccelerationStructureKHR(
    VkDevice device, VkDeferredOperationKHR deferredOperation,
    const VkCopyMemoryToAccelerationStructureInfoKHR *pInfo) {
  auto layer_data = GetDeviceLayerData(DataKey(device));
  PFN_vkCopyMemoryToAccelerationStructureKHR pfn =
      layer_data->dispatch_table.CopyMemoryToAccelerationStructureKHR;

  VkResult result = VK_SUCCESS;
  if (pfn) {

    result = pfn(device, deferredOperation, pInfo);
  }

  return result;
}

void InterceptCmdWriteAccelerationStructuresPropertiesKHR(
    VkCommandBuffer commandBuffer, uint32_t accelerationStructureCount,
    const VkAccelerationStructureKHR *pAccelerationStructures,
    VkQueryType queryType, VkQueryPool queryPool, uint32_t firstQuery) {
  InterceptPreCmdWriteAccelerationStructuresPropertiesKHR(
      commandBuffer, accelerationStructureCount, pAccelerationStructures,
      queryType, queryPool, firstQuery);

  auto layer_data = GetDeviceLayerData(DataKey(commandBuffer));
  PFN_vkCmdWriteAccelerationStructuresPropertiesKHR pfn =
      layer_data->dispatch_table.CmdWriteAccelerationStructuresPropertiesKHR;
  if (pfn) {
    pfn(commandBuffer, accelerationStructureCount, pAccelerationStructures,
        queryType, queryPool, firstQuery);
  }

  InterceptPostCmdWriteAccelerationStructuresPropertiesKHR(
      commandBuffer, accelerationStructureCount, pAccelerationStructures,
      queryType, queryPool, firstQuery);
}

VkResult InterceptWriteAccelerationStructuresPropertiesKHR(
    VkDevice device, uint32_t accelerationStructureCount,
    const VkAccelerationStructureKHR *pAccelerationStructures,
    VkQueryType queryType, size_t dataSize, void *pData, size_t stride) {
  auto layer_data = GetDeviceLayerData(DataKey(device));
  PFN_vkWriteAccelerationStructuresPropertiesKHR pfn =
      layer_data->dispatch_table.WriteAccelerationStructuresPropertiesKHR;

  VkResult result = VK_SUCCESS;
  if (pfn) {

    result = pfn(device, accelerationStructureCount, pAccelerationStructures,
                 queryType, dataSize, pData, stride);
  }

  return result;
}

void InterceptCmdTraceRaysKHR(
    VkCommandBuffer commandBuffer,
    const VkStridedDeviceAddressRegionKHR *pRaygenShaderBindingTable,
    const VkStridedDeviceAddressRegionKHR *pMissShaderBindingTable,
    const VkStridedDeviceAddressRegionKHR *pHitShaderBindingTable,
    const VkStridedDeviceAddressRegionKHR *pCallableShaderBindingTable,
    uint32_t width, uint32_t height, uint32_t depth) {
  InterceptPreCmdTraceRaysKHR(commandBuffer, pRaygenShaderBindingTable,
                              pMissShaderBindingTable, pHitShaderBindingTable,
                              pCallableShaderBindingTable, width, height,
                              depth);

  auto layer_data = GetDeviceLayerData(DataKey(commandBuffer));
  PFN_vkCmdTraceRaysKHR pfn = layer_data->dispatch_table.CmdTraceRaysKHR;
  if (pfn) {
    pfn(commandBuffer, pRaygenShaderBindingTable, pMissShaderBindingTable,
        pHitShaderBindingTable, pCallableShaderBindingTable, width, height,
        depth);
  }

  InterceptPostCmdTraceRaysKHR(commandBuffer, pRaygenShaderBindingTable,
                               pMissShaderBindingTable, pHitShaderBindingTable,
                               pCallableShaderBindingTable, width, height,
                               depth);
}

VkResult InterceptGetRayTracingShaderGroupHandlesKHR(
    VkDevice device, VkPipeline pipeline, uint32_t firstGroup,
    uint32_t groupCount, size_t dataSize, void *pData) {
  auto layer_data = GetDeviceLayerData(DataKey(device));
  PFN_vkGetRayTracingShaderGroupHandlesKHR pfn =
      layer_data->dispatch_table.GetRayTracingShaderGroupHandlesKHR;

  VkResult result = VK_SUCCESS;
  if (pfn) {

    result = pfn(device, pipeline, firstGroup, groupCount, dataSize, pData);
  }

  return result;
}

VkResult InterceptGetRayTracingShaderGroupHandlesNV(
    VkDevice device, VkPipeline pipeline, uint32_t firstGroup,
    uint32_t groupCount, size_t dataSize, void *pData) {
  auto layer_data = GetDeviceLayerData(DataKey(device));
  PFN_vkGetRayTracingShaderGroupHandlesNV pfn =
      layer_data->dispatch_table.GetRayTracingShaderGroupHandlesNV;

  VkResult result = VK_SUCCESS;
  if (pfn) {

    result = pfn(device, pipeline, firstGroup, groupCount, dataSize, pData);
  }

  return result;
}

VkResult InterceptGetRayTracingCaptureReplayShaderGroupHandlesKHR(
    VkDevice device, VkPipeline pipeline, uint32_t firstGroup,
    uint32_t groupCount, size_t dataSize, void *pData) {
  auto layer_data = GetDeviceLayerData(DataKey(device));
  PFN_vkGetRayTracingCaptureReplayShaderGroupHandlesKHR pfn =
      layer_data->dispatch_table
          .GetRayTracingCaptureReplayShaderGroupHandlesKHR;

  VkResult result = VK_SUCCESS;
  if (pfn) {

    result = pfn(device, pipeline, firstGroup, groupCount, dataSize, pData);
  }

  return result;
}

VkResult InterceptCreateRayTracingPipelinesKHR(
    VkDevice device, VkDeferredOperationKHR deferredOperation,
    VkPipelineCache pipelineCache, uint32_t createInfoCount,
    const VkRayTracingPipelineCreateInfoKHR *pCreateInfos,
    const VkAllocationCallbacks *pAllocator, VkPipeline *pPipelines) {
  auto layer_data = GetDeviceLayerData(DataKey(device));
  PFN_vkCreateRayTracingPipelinesKHR pfn =
      layer_data->dispatch_table.CreateRayTracingPipelinesKHR;

  VkResult result = VK_SUCCESS;
  if (pfn) {

    result = pfn(device, deferredOperation, pipelineCache, createInfoCount,
                 pCreateInfos, pAllocator, pPipelines);
  }

  return result;
}

void InterceptCmdTraceRaysIndirectKHR(
    VkCommandBuffer commandBuffer,
    const VkStridedDeviceAddressRegionKHR *pRaygenShaderBindingTable,
    const VkStridedDeviceAddressRegionKHR *pMissShaderBindingTable,
    const VkStridedDeviceAddressRegionKHR *pHitShaderBindingTable,
    const VkStridedDeviceAddressRegionKHR *pCallableShaderBindingTable,
    VkDeviceAddress indirectDeviceAddress) {
  InterceptPreCmdTraceRaysIndirectKHR(
      commandBuffer, pRaygenShaderBindingTable, pMissShaderBindingTable,
      pHitShaderBindingTable, pCallableShaderBindingTable,
      indirectDeviceAddress);

  auto layer_data = GetDeviceLayerData(DataKey(commandBuffer));
  PFN_vkCmdTraceRaysIndirectKHR pfn =
      layer_data->dispatch_table.CmdTraceRaysIndirectKHR;
  if (pfn) {
    pfn(commandBuffer, pRaygenShaderBindingTable, pMissShaderBindingTable,
        pHitShaderBindingTable, pCallableShaderBindingTable,
        indirectDeviceAddress);
  }

  InterceptPostCmdTraceRaysIndirectKHR(
      commandBuffer, pRaygenShaderBindingTable, pMissShaderBindingTable,
      pHitShaderBindingTable, pCallableShaderBindingTable,
      indirectDeviceAddress);
}

void InterceptGetDeviceAccelerationStructureCompatibilityKHR(
    VkDevice device, const VkAccelerationStructureVersionInfoKHR *pVersionInfo,
    VkAccelerationStructureCompatibilityKHR *pCompatibility) {
  auto layer_data = GetDeviceLayerData(DataKey(device));
  PFN_vkGetDeviceAccelerationStructureCompatibilityKHR pfn =
      layer_data->dispatch_table.GetDeviceAccelerationStructureCompatibilityKHR;
  if (pfn) {
    pfn(device, pVersionInfo, pCompatibility);
  }
}

VkDeviceSize InterceptGetRayTracingShaderGroupStackSizeKHR(
    VkDevice device, VkPipeline pipeline, uint32_t group,
    VkShaderGroupShaderKHR groupShader) {
  auto layer_data = GetDeviceLayerData(DataKey(device));
  PFN_vkGetRayTracingShaderGroupStackSizeKHR pfn =
      layer_data->dispatch_table.GetRayTracingShaderGroupStackSizeKHR;

  VkDeviceSize result = 0;
  if (pfn) {

    result = pfn(device, pipeline, group, groupShader);
  }

  return result;
}

void InterceptCmdSetRayTracingPipelineStackSizeKHR(
    VkCommandBuffer commandBuffer, uint32_t pipelineStackSize) {
  InterceptPreCmdSetRayTracingPipelineStackSizeKHR(commandBuffer,
                                                   pipelineStackSize);

  auto layer_data = GetDeviceLayerData(DataKey(commandBuffer));
  PFN_vkCmdSetRayTracingPipelineStackSizeKHR pfn =
      layer_data->dispatch_table.CmdSetRayTracingPipelineStackSizeKHR;
  if (pfn) {
    pfn(commandBuffer, pipelineStackSize);
  }

  InterceptPostCmdSetRayTracingPipelineStackSizeKHR(commandBuffer,
                                                    pipelineStackSize);
}

VkResult InterceptEnumeratePhysicalDeviceQueueFamilyPerformanceQueryCountersKHR(
    VkPhysicalDevice physicalDevice, uint32_t queueFamilyIndex,
    uint32_t *pCounterCount, VkPerformanceCounterKHR *pCounters,
    VkPerformanceCounterDescriptionKHR *pCounterDescriptions) {
  auto layer_data = GetInstanceLayerData(DataKey(physicalDevice));
  PFN_vkEnumeratePhysicalDeviceQueueFamilyPerformanceQueryCountersKHR pfn =
      layer_data->dispatch_table
          .EnumeratePhysicalDeviceQueueFamilyPerformanceQueryCountersKHR;

  VkResult result = VK_SUCCESS;
  if (pfn) {

    result = pfn(physicalDevice, queueFamilyIndex, pCounterCount, pCounters,
                 pCounterDescriptions);
  }

  return result;
}

void InterceptGetPhysicalDeviceQueueFamilyPerformanceQueryPassesKHR(
    VkPhysicalDevice physicalDevice,
    const VkQueryPoolPerformanceCreateInfoKHR *pPerformanceQueryCreateInfo,
    uint32_t *pNumPasses) {
  auto layer_data = GetInstanceLayerData(DataKey(physicalDevice));
  PFN_vkGetPhysicalDeviceQueueFamilyPerformanceQueryPassesKHR pfn =
      layer_data->dispatch_table
          .GetPhysicalDeviceQueueFamilyPerformanceQueryPassesKHR;
  if (pfn) {
    pfn(physicalDevice, pPerformanceQueryCreateInfo, pNumPasses);
  }
}

VkResult
InterceptAcquireProfilingLockKHR(VkDevice device,
                                 const VkAcquireProfilingLockInfoKHR *pInfo) {
  auto layer_data = GetDeviceLayerData(DataKey(device));
  PFN_vkAcquireProfilingLockKHR pfn =
      layer_data->dispatch_table.AcquireProfilingLockKHR;

  VkResult result = VK_SUCCESS;
  if (pfn) {

    result = pfn(device, pInfo);
  }

  return result;
}

void InterceptReleaseProfilingLockKHR(VkDevice device) {
  auto layer_data = GetDeviceLayerData(DataKey(device));
  PFN_vkReleaseProfilingLockKHR pfn =
      layer_data->dispatch_table.ReleaseProfilingLockKHR;
  if (pfn) {
    pfn(device);
  }
}

VkResult InterceptGetImageDrmFormatModifierPropertiesEXT(
    VkDevice device, VkImage image,
    VkImageDrmFormatModifierPropertiesEXT *pProperties) {
  auto layer_data = GetDeviceLayerData(DataKey(device));
  PFN_vkGetImageDrmFormatModifierPropertiesEXT pfn =
      layer_data->dispatch_table.GetImageDrmFormatModifierPropertiesEXT;

  VkResult result = VK_SUCCESS;
  if (pfn) {

    result = pfn(device, image, pProperties);
  }

  return result;
}

uint64_t
InterceptGetBufferOpaqueCaptureAddress(VkDevice device,
                                       const VkBufferDeviceAddressInfo *pInfo) {
  auto layer_data = GetDeviceLayerData(DataKey(device));
  PFN_vkGetBufferOpaqueCaptureAddress pfn =
      layer_data->dispatch_table.GetBufferOpaqueCaptureAddress;

  uint64_t result = 0;
  if (pfn) {

    result = pfn(device, pInfo);
  }

  return result;
}

uint64_t InterceptGetBufferOpaqueCaptureAddressKHR(
    VkDevice device, const VkBufferDeviceAddressInfo *pInfo) {
  auto layer_data = GetDeviceLayerData(DataKey(device));
  PFN_vkGetBufferOpaqueCaptureAddressKHR pfn =
      layer_data->dispatch_table.GetBufferOpaqueCaptureAddressKHR;

  uint64_t result = 0;
  if (pfn) {

    result = pfn(device, pInfo);
  }

  return result;
}

VkDeviceAddress
InterceptGetBufferDeviceAddress(VkDevice device,
                                const VkBufferDeviceAddressInfo *pInfo) {
  auto layer_data = GetDeviceLayerData(DataKey(device));
  PFN_vkGetBufferDeviceAddress pfn =
      layer_data->dispatch_table.GetBufferDeviceAddress;

  VkDeviceAddress result = 0;
  if (pfn) {

    result = pfn(device, pInfo);
  }

  return result;
}

VkDeviceAddress
InterceptGetBufferDeviceAddressKHR(VkDevice device,
                                   const VkBufferDeviceAddressInfo *pInfo) {
  auto layer_data = GetDeviceLayerData(DataKey(device));
  PFN_vkGetBufferDeviceAddressKHR pfn =
      layer_data->dispatch_table.GetBufferDeviceAddressKHR;

  VkDeviceAddress result = 0;
  if (pfn) {

    result = pfn(device, pInfo);
  }

  return result;
}

VkDeviceAddress
InterceptGetBufferDeviceAddressEXT(VkDevice device,
                                   const VkBufferDeviceAddressInfo *pInfo) {
  auto layer_data = GetDeviceLayerData(DataKey(device));
  PFN_vkGetBufferDeviceAddressEXT pfn =
      layer_data->dispatch_table.GetBufferDeviceAddressEXT;

  VkDeviceAddress result = 0;
  if (pfn) {

    result = pfn(device, pInfo);
  }

  return result;
}

VkResult InterceptCreateHeadlessSurfaceEXT(
    VkInstance instance, const VkHeadlessSurfaceCreateInfoEXT *pCreateInfo,
    const VkAllocationCallbacks *pAllocator, VkSurfaceKHR *pSurface) {
  auto layer_data = GetInstanceLayerData(DataKey(instance));
  PFN_vkCreateHeadlessSurfaceEXT pfn =
      layer_data->dispatch_table.CreateHeadlessSurfaceEXT;

  VkResult result = VK_SUCCESS;
  if (pfn) {

    result = pfn(instance, pCreateInfo, pAllocator, pSurface);
  }

  return result;
}

uint64_t InterceptGetDeviceMemoryOpaqueCaptureAddress(
    VkDevice device, const VkDeviceMemoryOpaqueCaptureAddressInfo *pInfo) {
  auto layer_data = GetDeviceLayerData(DataKey(device));
  PFN_vkGetDeviceMemoryOpaqueCaptureAddress pfn =
      layer_data->dispatch_table.GetDeviceMemoryOpaqueCaptureAddress;

  uint64_t result = 0;
  if (pfn) {

    result = pfn(device, pInfo);
  }

  return result;
}

uint64_t InterceptGetDeviceMemoryOpaqueCaptureAddressKHR(
    VkDevice device, const VkDeviceMemoryOpaqueCaptureAddressInfo *pInfo) {
  auto layer_data = GetDeviceLayerData(DataKey(device));
  PFN_vkGetDeviceMemoryOpaqueCaptureAddressKHR pfn =
      layer_data->dispatch_table.GetDeviceMemoryOpaqueCaptureAddressKHR;

  uint64_t result = 0;
  if (pfn) {

    result = pfn(device, pInfo);
  }

  return result;
}

VkResult InterceptGetPipelineExecutablePropertiesKHR(
    VkDevice device, const VkPipelineInfoKHR *pPipelineInfo,
    uint32_t *pExecutableCount,
    VkPipelineExecutablePropertiesKHR *pProperties) {
  auto layer_data = GetDeviceLayerData(DataKey(device));
  PFN_vkGetPipelineExecutablePropertiesKHR pfn =
      layer_data->dispatch_table.GetPipelineExecutablePropertiesKHR;

  VkResult result = VK_SUCCESS;
  if (pfn) {

    result = pfn(device, pPipelineInfo, pExecutableCount, pProperties);
  }

  return result;
}

VkResult InterceptGetPipelineExecutableStatisticsKHR(
    VkDevice device, const VkPipelineExecutableInfoKHR *pExecutableInfo,
    uint32_t *pStatisticCount, VkPipelineExecutableStatisticKHR *pStatistics) {
  auto layer_data = GetDeviceLayerData(DataKey(device));
  PFN_vkGetPipelineExecutableStatisticsKHR pfn =
      layer_data->dispatch_table.GetPipelineExecutableStatisticsKHR;

  VkResult result = VK_SUCCESS;
  if (pfn) {

    result = pfn(device, pExecutableInfo, pStatisticCount, pStatistics);
  }

  return result;
}

VkResult InterceptGetPipelineExecutableInternalRepresentationsKHR(
    VkDevice device, const VkPipelineExecutableInfoKHR *pExecutableInfo,
    uint32_t *pInternalRepresentationCount,
    VkPipelineExecutableInternalRepresentationKHR *pInternalRepresentations) {
  auto layer_data = GetDeviceLayerData(DataKey(device));
  PFN_vkGetPipelineExecutableInternalRepresentationsKHR pfn =
      layer_data->dispatch_table
          .GetPipelineExecutableInternalRepresentationsKHR;

  VkResult result = VK_SUCCESS;
  if (pfn) {

    result = pfn(device, pExecutableInfo, pInternalRepresentationCount,
                 pInternalRepresentations);
  }

  return result;
}

void InterceptCmdSetLineStippleEXT(VkCommandBuffer commandBuffer,
                                   uint32_t lineStippleFactor,
                                   uint16_t lineStipplePattern) {
  InterceptPreCmdSetLineStippleEXT(commandBuffer, lineStippleFactor,
                                   lineStipplePattern);

  auto layer_data = GetDeviceLayerData(DataKey(commandBuffer));
  PFN_vkCmdSetLineStippleEXT pfn =
      layer_data->dispatch_table.CmdSetLineStippleEXT;
  if (pfn) {
    pfn(commandBuffer, lineStippleFactor, lineStipplePattern);
  }

  InterceptPostCmdSetLineStippleEXT(commandBuffer, lineStippleFactor,
                                    lineStipplePattern);
}

VkResult InterceptGetPhysicalDeviceToolPropertiesEXT(
    VkPhysicalDevice physicalDevice, uint32_t *pToolCount,
    VkPhysicalDeviceToolPropertiesEXT *pToolProperties) {
  auto layer_data = GetInstanceLayerData(DataKey(physicalDevice));
  PFN_vkGetPhysicalDeviceToolPropertiesEXT pfn =
      layer_data->dispatch_table.GetPhysicalDeviceToolPropertiesEXT;

  VkResult result = VK_SUCCESS;
  if (pfn) {

    result = pfn(physicalDevice, pToolCount, pToolProperties);
  }

  return result;
}

VkResult InterceptCreateAccelerationStructureKHR(
    VkDevice device, const VkAccelerationStructureCreateInfoKHR *pCreateInfo,
    const VkAllocationCallbacks *pAllocator,
    VkAccelerationStructureKHR *pAccelerationStructure) {
  auto layer_data = GetDeviceLayerData(DataKey(device));
  PFN_vkCreateAccelerationStructureKHR pfn =
      layer_data->dispatch_table.CreateAccelerationStructureKHR;

  VkResult result = VK_SUCCESS;
  if (pfn) {

    result = pfn(device, pCreateInfo, pAllocator, pAccelerationStructure);
  }

  return result;
}

void InterceptCmdBuildAccelerationStructuresKHR(
    VkCommandBuffer commandBuffer, uint32_t infoCount,
    const VkAccelerationStructureBuildGeometryInfoKHR *pInfos,
    const VkAccelerationStructureBuildRangeInfoKHR **ppBuildRangeInfos) {
  InterceptPreCmdBuildAccelerationStructuresKHR(commandBuffer, infoCount,
                                                pInfos, ppBuildRangeInfos);

  auto layer_data = GetDeviceLayerData(DataKey(commandBuffer));
  PFN_vkCmdBuildAccelerationStructuresKHR pfn =
      layer_data->dispatch_table.CmdBuildAccelerationStructuresKHR;
  if (pfn) {
    pfn(commandBuffer, infoCount, pInfos, ppBuildRangeInfos);
  }

  InterceptPostCmdBuildAccelerationStructuresKHR(commandBuffer, infoCount,
                                                 pInfos, ppBuildRangeInfos);
}

void InterceptCmdBuildAccelerationStructuresIndirectKHR(
    VkCommandBuffer commandBuffer, uint32_t infoCount,
    const VkAccelerationStructureBuildGeometryInfoKHR *pInfos,
    const VkDeviceAddress *pIndirectDeviceAddresses,
    const uint32_t *pIndirectStrides, const uint32_t **ppMaxPrimitiveCounts) {
  InterceptPreCmdBuildAccelerationStructuresIndirectKHR(
      commandBuffer, infoCount, pInfos, pIndirectDeviceAddresses,
      pIndirectStrides, ppMaxPrimitiveCounts);

  auto layer_data = GetDeviceLayerData(DataKey(commandBuffer));
  PFN_vkCmdBuildAccelerationStructuresIndirectKHR pfn =
      layer_data->dispatch_table.CmdBuildAccelerationStructuresIndirectKHR;
  if (pfn) {
    pfn(commandBuffer, infoCount, pInfos, pIndirectDeviceAddresses,
        pIndirectStrides, ppMaxPrimitiveCounts);
  }

  InterceptPostCmdBuildAccelerationStructuresIndirectKHR(
      commandBuffer, infoCount, pInfos, pIndirectDeviceAddresses,
      pIndirectStrides, ppMaxPrimitiveCounts);
}

VkResult InterceptBuildAccelerationStructuresKHR(
    VkDevice device, VkDeferredOperationKHR deferredOperation,
    uint32_t infoCount,
    const VkAccelerationStructureBuildGeometryInfoKHR *pInfos,
    const VkAccelerationStructureBuildRangeInfoKHR **ppBuildRangeInfos) {
  auto layer_data = GetDeviceLayerData(DataKey(device));
  PFN_vkBuildAccelerationStructuresKHR pfn =
      layer_data->dispatch_table.BuildAccelerationStructuresKHR;

  VkResult result = VK_SUCCESS;
  if (pfn) {

    result =
        pfn(device, deferredOperation, infoCount, pInfos, ppBuildRangeInfos);
  }

  return result;
}

VkDeviceAddress InterceptGetAccelerationStructureDeviceAddressKHR(
    VkDevice device, const VkAccelerationStructureDeviceAddressInfoKHR *pInfo) {
  auto layer_data = GetDeviceLayerData(DataKey(device));
  PFN_vkGetAccelerationStructureDeviceAddressKHR pfn =
      layer_data->dispatch_table.GetAccelerationStructureDeviceAddressKHR;

  VkDeviceAddress result = 0;
  if (pfn) {

    result = pfn(device, pInfo);
  }

  return result;
}

VkResult InterceptCreateDeferredOperationKHR(
    VkDevice device, const VkAllocationCallbacks *pAllocator,
    VkDeferredOperationKHR *pDeferredOperation) {
  auto layer_data = GetDeviceLayerData(DataKey(device));
  PFN_vkCreateDeferredOperationKHR pfn =
      layer_data->dispatch_table.CreateDeferredOperationKHR;

  VkResult result = VK_SUCCESS;
  if (pfn) {

    result = pfn(device, pAllocator, pDeferredOperation);
  }

  return result;
}

void InterceptDestroyDeferredOperationKHR(
    VkDevice device, VkDeferredOperationKHR operation,
    const VkAllocationCallbacks *pAllocator) {
  auto layer_data = GetDeviceLayerData(DataKey(device));
  PFN_vkDestroyDeferredOperationKHR pfn =
      layer_data->dispatch_table.DestroyDeferredOperationKHR;
  if (pfn) {
    pfn(device, operation, pAllocator);
  }
}

uint32_t InterceptGetDeferredOperationMaxConcurrencyKHR(
    VkDevice device, VkDeferredOperationKHR operation) {
  auto layer_data = GetDeviceLayerData(DataKey(device));
  PFN_vkGetDeferredOperationMaxConcurrencyKHR pfn =
      layer_data->dispatch_table.GetDeferredOperationMaxConcurrencyKHR;

  uint32_t result = 0;
  if (pfn) {

    result = pfn(device, operation);
  }

  return result;
}

VkResult
InterceptGetDeferredOperationResultKHR(VkDevice device,
                                       VkDeferredOperationKHR operation) {
  auto layer_data = GetDeviceLayerData(DataKey(device));
  PFN_vkGetDeferredOperationResultKHR pfn =
      layer_data->dispatch_table.GetDeferredOperationResultKHR;

  VkResult result = VK_SUCCESS;
  if (pfn) {

    result = pfn(device, operation);
  }

  return result;
}

VkResult InterceptDeferredOperationJoinKHR(VkDevice device,
                                           VkDeferredOperationKHR operation) {
  auto layer_data = GetDeviceLayerData(DataKey(device));
  PFN_vkDeferredOperationJoinKHR pfn =
      layer_data->dispatch_table.DeferredOperationJoinKHR;

  VkResult result = VK_SUCCESS;
  if (pfn) {

    result = pfn(device, operation);
  }

  return result;
}

void InterceptCmdSetCullModeEXT(VkCommandBuffer commandBuffer,
                                VkCullModeFlags cullMode) {
  InterceptPreCmdSetCullModeEXT(commandBuffer, cullMode);

  auto layer_data = GetDeviceLayerData(DataKey(commandBuffer));
  PFN_vkCmdSetCullModeEXT pfn = layer_data->dispatch_table.CmdSetCullModeEXT;
  if (pfn) {
    pfn(commandBuffer, cullMode);
  }

  InterceptPostCmdSetCullModeEXT(commandBuffer, cullMode);
}

void InterceptCmdSetFrontFaceEXT(VkCommandBuffer commandBuffer,
                                 VkFrontFace frontFace) {
  InterceptPreCmdSetFrontFaceEXT(commandBuffer, frontFace);

  auto layer_data = GetDeviceLayerData(DataKey(commandBuffer));
  PFN_vkCmdSetFrontFaceEXT pfn = layer_data->dispatch_table.CmdSetFrontFaceEXT;
  if (pfn) {
    pfn(commandBuffer, frontFace);
  }

  InterceptPostCmdSetFrontFaceEXT(commandBuffer, frontFace);
}

void InterceptCmdSetPrimitiveTopologyEXT(
    VkCommandBuffer commandBuffer, VkPrimitiveTopology primitiveTopology) {
  InterceptPreCmdSetPrimitiveTopologyEXT(commandBuffer, primitiveTopology);

  auto layer_data = GetDeviceLayerData(DataKey(commandBuffer));
  PFN_vkCmdSetPrimitiveTopologyEXT pfn =
      layer_data->dispatch_table.CmdSetPrimitiveTopologyEXT;
  if (pfn) {
    pfn(commandBuffer, primitiveTopology);
  }

  InterceptPostCmdSetPrimitiveTopologyEXT(commandBuffer, primitiveTopology);
}

void InterceptCmdSetViewportWithCountEXT(VkCommandBuffer commandBuffer,
                                         uint32_t viewportCount,
                                         const VkViewport *pViewports) {
  InterceptPreCmdSetViewportWithCountEXT(commandBuffer, viewportCount,
                                         pViewports);

  auto layer_data = GetDeviceLayerData(DataKey(commandBuffer));
  PFN_vkCmdSetViewportWithCountEXT pfn =
      layer_data->dispatch_table.CmdSetViewportWithCountEXT;
  if (pfn) {
    pfn(commandBuffer, viewportCount, pViewports);
  }

  InterceptPostCmdSetViewportWithCountEXT(commandBuffer, viewportCount,
                                          pViewports);
}

void InterceptCmdSetScissorWithCountEXT(VkCommandBuffer commandBuffer,
                                        uint32_t scissorCount,
                                        const VkRect2D *pScissors) {
  InterceptPreCmdSetScissorWithCountEXT(commandBuffer, scissorCount, pScissors);

  auto layer_data = GetDeviceLayerData(DataKey(commandBuffer));
  PFN_vkCmdSetScissorWithCountEXT pfn =
      layer_data->dispatch_table.CmdSetScissorWithCountEXT;
  if (pfn) {
    pfn(commandBuffer, scissorCount, pScissors);
  }

  InterceptPostCmdSetScissorWithCountEXT(commandBuffer, scissorCount,
                                         pScissors);
}

void InterceptCmdBindVertexBuffers2EXT(
    VkCommandBuffer commandBuffer, uint32_t firstBinding, uint32_t bindingCount,
    const VkBuffer *pBuffers, const VkDeviceSize *pOffsets,
    const VkDeviceSize *pSizes, const VkDeviceSize *pStrides) {
  InterceptPreCmdBindVertexBuffers2EXT(commandBuffer, firstBinding,
                                       bindingCount, pBuffers, pOffsets, pSizes,
                                       pStrides);

  auto layer_data = GetDeviceLayerData(DataKey(commandBuffer));
  PFN_vkCmdBindVertexBuffers2EXT pfn =
      layer_data->dispatch_table.CmdBindVertexBuffers2EXT;
  if (pfn) {
    pfn(commandBuffer, firstBinding, bindingCount, pBuffers, pOffsets, pSizes,
        pStrides);
  }

  InterceptPostCmdBindVertexBuffers2EXT(commandBuffer, firstBinding,
                                        bindingCount, pBuffers, pOffsets,
                                        pSizes, pStrides);
}

void InterceptCmdSetDepthTestEnableEXT(VkCommandBuffer commandBuffer,
                                       VkBool32 depthTestEnable) {
  InterceptPreCmdSetDepthTestEnableEXT(commandBuffer, depthTestEnable);

  auto layer_data = GetDeviceLayerData(DataKey(commandBuffer));
  PFN_vkCmdSetDepthTestEnableEXT pfn =
      layer_data->dispatch_table.CmdSetDepthTestEnableEXT;
  if (pfn) {
    pfn(commandBuffer, depthTestEnable);
  }

  InterceptPostCmdSetDepthTestEnableEXT(commandBuffer, depthTestEnable);
}

void InterceptCmdSetDepthWriteEnableEXT(VkCommandBuffer commandBuffer,
                                        VkBool32 depthWriteEnable) {
  InterceptPreCmdSetDepthWriteEnableEXT(commandBuffer, depthWriteEnable);

  auto layer_data = GetDeviceLayerData(DataKey(commandBuffer));
  PFN_vkCmdSetDepthWriteEnableEXT pfn =
      layer_data->dispatch_table.CmdSetDepthWriteEnableEXT;
  if (pfn) {
    pfn(commandBuffer, depthWriteEnable);
  }

  InterceptPostCmdSetDepthWriteEnableEXT(commandBuffer, depthWriteEnable);
}

void InterceptCmdSetDepthCompareOpEXT(VkCommandBuffer commandBuffer,
                                      VkCompareOp depthCompareOp) {
  InterceptPreCmdSetDepthCompareOpEXT(commandBuffer, depthCompareOp);

  auto layer_data = GetDeviceLayerData(DataKey(commandBuffer));
  PFN_vkCmdSetDepthCompareOpEXT pfn =
      layer_data->dispatch_table.CmdSetDepthCompareOpEXT;
  if (pfn) {
    pfn(commandBuffer, depthCompareOp);
  }

  InterceptPostCmdSetDepthCompareOpEXT(commandBuffer, depthCompareOp);
}

void InterceptCmdSetDepthBoundsTestEnableEXT(VkCommandBuffer commandBuffer,
                                             VkBool32 depthBoundsTestEnable) {
  InterceptPreCmdSetDepthBoundsTestEnableEXT(commandBuffer,
                                             depthBoundsTestEnable);

  auto layer_data = GetDeviceLayerData(DataKey(commandBuffer));
  PFN_vkCmdSetDepthBoundsTestEnableEXT pfn =
      layer_data->dispatch_table.CmdSetDepthBoundsTestEnableEXT;
  if (pfn) {
    pfn(commandBuffer, depthBoundsTestEnable);
  }

  InterceptPostCmdSetDepthBoundsTestEnableEXT(commandBuffer,
                                              depthBoundsTestEnable);
}

void InterceptCmdSetStencilTestEnableEXT(VkCommandBuffer commandBuffer,
                                         VkBool32 stencilTestEnable) {
  InterceptPreCmdSetStencilTestEnableEXT(commandBuffer, stencilTestEnable);

  auto layer_data = GetDeviceLayerData(DataKey(commandBuffer));
  PFN_vkCmdSetStencilTestEnableEXT pfn =
      layer_data->dispatch_table.CmdSetStencilTestEnableEXT;
  if (pfn) {
    pfn(commandBuffer, stencilTestEnable);
  }

  InterceptPostCmdSetStencilTestEnableEXT(commandBuffer, stencilTestEnable);
}

void InterceptCmdSetStencilOpEXT(VkCommandBuffer commandBuffer,
                                 VkStencilFaceFlags faceMask,
                                 VkStencilOp failOp, VkStencilOp passOp,
                                 VkStencilOp depthFailOp,
                                 VkCompareOp compareOp) {
  InterceptPreCmdSetStencilOpEXT(commandBuffer, faceMask, failOp, passOp,
                                 depthFailOp, compareOp);

  auto layer_data = GetDeviceLayerData(DataKey(commandBuffer));
  PFN_vkCmdSetStencilOpEXT pfn = layer_data->dispatch_table.CmdSetStencilOpEXT;
  if (pfn) {
    pfn(commandBuffer, faceMask, failOp, passOp, depthFailOp, compareOp);
  }

  InterceptPostCmdSetStencilOpEXT(commandBuffer, faceMask, failOp, passOp,
                                  depthFailOp, compareOp);
}

void InterceptCmdSetPatchControlPointsEXT(VkCommandBuffer commandBuffer,
                                          uint32_t patchControlPoints) {
  InterceptPreCmdSetPatchControlPointsEXT(commandBuffer, patchControlPoints);

  auto layer_data = GetDeviceLayerData(DataKey(commandBuffer));
  PFN_vkCmdSetPatchControlPointsEXT pfn =
      layer_data->dispatch_table.CmdSetPatchControlPointsEXT;
  if (pfn) {
    pfn(commandBuffer, patchControlPoints);
  }

  InterceptPostCmdSetPatchControlPointsEXT(commandBuffer, patchControlPoints);
}

void InterceptCmdSetRasterizerDiscardEnableEXT(
    VkCommandBuffer commandBuffer, VkBool32 rasterizerDiscardEnable) {
  InterceptPreCmdSetRasterizerDiscardEnableEXT(commandBuffer,
                                               rasterizerDiscardEnable);

  auto layer_data = GetDeviceLayerData(DataKey(commandBuffer));
  PFN_vkCmdSetRasterizerDiscardEnableEXT pfn =
      layer_data->dispatch_table.CmdSetRasterizerDiscardEnableEXT;
  if (pfn) {
    pfn(commandBuffer, rasterizerDiscardEnable);
  }

  InterceptPostCmdSetRasterizerDiscardEnableEXT(commandBuffer,
                                                rasterizerDiscardEnable);
}

void InterceptCmdSetDepthBiasEnableEXT(VkCommandBuffer commandBuffer,
                                       VkBool32 depthBiasEnable) {
  InterceptPreCmdSetDepthBiasEnableEXT(commandBuffer, depthBiasEnable);

  auto layer_data = GetDeviceLayerData(DataKey(commandBuffer));
  PFN_vkCmdSetDepthBiasEnableEXT pfn =
      layer_data->dispatch_table.CmdSetDepthBiasEnableEXT;
  if (pfn) {
    pfn(commandBuffer, depthBiasEnable);
  }

  InterceptPostCmdSetDepthBiasEnableEXT(commandBuffer, depthBiasEnable);
}

void InterceptCmdSetLogicOpEXT(VkCommandBuffer commandBuffer,
                               VkLogicOp logicOp) {
  InterceptPreCmdSetLogicOpEXT(commandBuffer, logicOp);

  auto layer_data = GetDeviceLayerData(DataKey(commandBuffer));
  PFN_vkCmdSetLogicOpEXT pfn = layer_data->dispatch_table.CmdSetLogicOpEXT;
  if (pfn) {
    pfn(commandBuffer, logicOp);
  }

  InterceptPostCmdSetLogicOpEXT(commandBuffer, logicOp);
}

void InterceptCmdSetPrimitiveRestartEnableEXT(VkCommandBuffer commandBuffer,
                                              VkBool32 primitiveRestartEnable) {
  InterceptPreCmdSetPrimitiveRestartEnableEXT(commandBuffer,
                                              primitiveRestartEnable);

  auto layer_data = GetDeviceLayerData(DataKey(commandBuffer));
  PFN_vkCmdSetPrimitiveRestartEnableEXT pfn =
      layer_data->dispatch_table.CmdSetPrimitiveRestartEnableEXT;
  if (pfn) {
    pfn(commandBuffer, primitiveRestartEnable);
  }

  InterceptPostCmdSetPrimitiveRestartEnableEXT(commandBuffer,
                                               primitiveRestartEnable);
}

void InterceptCmdCopyBuffer2KHR(VkCommandBuffer commandBuffer,
                                const VkCopyBufferInfo2KHR *pCopyBufferInfo) {
  InterceptPreCmdCopyBuffer2KHR(commandBuffer, pCopyBufferInfo);

  auto layer_data = GetDeviceLayerData(DataKey(commandBuffer));
  PFN_vkCmdCopyBuffer2KHR pfn = layer_data->dispatch_table.CmdCopyBuffer2KHR;
  if (pfn) {
    pfn(commandBuffer, pCopyBufferInfo);
  }

  InterceptPostCmdCopyBuffer2KHR(commandBuffer, pCopyBufferInfo);
}

void InterceptCmdCopyImage2KHR(VkCommandBuffer commandBuffer,
                               const VkCopyImageInfo2KHR *pCopyImageInfo) {
  InterceptPreCmdCopyImage2KHR(commandBuffer, pCopyImageInfo);

  auto layer_data = GetDeviceLayerData(DataKey(commandBuffer));
  PFN_vkCmdCopyImage2KHR pfn = layer_data->dispatch_table.CmdCopyImage2KHR;
  if (pfn) {
    pfn(commandBuffer, pCopyImageInfo);
  }

  InterceptPostCmdCopyImage2KHR(commandBuffer, pCopyImageInfo);
}

void InterceptCmdBlitImage2KHR(VkCommandBuffer commandBuffer,
                               const VkBlitImageInfo2KHR *pBlitImageInfo) {
  InterceptPreCmdBlitImage2KHR(commandBuffer, pBlitImageInfo);

  auto layer_data = GetDeviceLayerData(DataKey(commandBuffer));
  PFN_vkCmdBlitImage2KHR pfn = layer_data->dispatch_table.CmdBlitImage2KHR;
  if (pfn) {
    pfn(commandBuffer, pBlitImageInfo);
  }

  InterceptPostCmdBlitImage2KHR(commandBuffer, pBlitImageInfo);
}

void InterceptCmdCopyBufferToImage2KHR(
    VkCommandBuffer commandBuffer,
    const VkCopyBufferToImageInfo2KHR *pCopyBufferToImageInfo) {
  InterceptPreCmdCopyBufferToImage2KHR(commandBuffer, pCopyBufferToImageInfo);

  auto layer_data = GetDeviceLayerData(DataKey(commandBuffer));
  PFN_vkCmdCopyBufferToImage2KHR pfn =
      layer_data->dispatch_table.CmdCopyBufferToImage2KHR;
  if (pfn) {
    pfn(commandBuffer, pCopyBufferToImageInfo);
  }

  InterceptPostCmdCopyBufferToImage2KHR(commandBuffer, pCopyBufferToImageInfo);
}

void InterceptCmdCopyImageToBuffer2KHR(
    VkCommandBuffer commandBuffer,
    const VkCopyImageToBufferInfo2KHR *pCopyImageToBufferInfo) {
  InterceptPreCmdCopyImageToBuffer2KHR(commandBuffer, pCopyImageToBufferInfo);

  auto layer_data = GetDeviceLayerData(DataKey(commandBuffer));
  PFN_vkCmdCopyImageToBuffer2KHR pfn =
      layer_data->dispatch_table.CmdCopyImageToBuffer2KHR;
  if (pfn) {
    pfn(commandBuffer, pCopyImageToBufferInfo);
  }

  InterceptPostCmdCopyImageToBuffer2KHR(commandBuffer, pCopyImageToBufferInfo);
}

void InterceptCmdResolveImage2KHR(
    VkCommandBuffer commandBuffer,
    const VkResolveImageInfo2KHR *pResolveImageInfo) {
  InterceptPreCmdResolveImage2KHR(commandBuffer, pResolveImageInfo);

  auto layer_data = GetDeviceLayerData(DataKey(commandBuffer));
  PFN_vkCmdResolveImage2KHR pfn =
      layer_data->dispatch_table.CmdResolveImage2KHR;
  if (pfn) {
    pfn(commandBuffer, pResolveImageInfo);
  }

  InterceptPostCmdResolveImage2KHR(commandBuffer, pResolveImageInfo);
}

void InterceptCmdSetFragmentShadingRateKHR(
    VkCommandBuffer commandBuffer, const VkExtent2D *pFragmentSize,
    const VkFragmentShadingRateCombinerOpKHR combinerOps[2]) {
  InterceptPreCmdSetFragmentShadingRateKHR(commandBuffer, pFragmentSize,
                                           combinerOps);

  auto layer_data = GetDeviceLayerData(DataKey(commandBuffer));
  PFN_vkCmdSetFragmentShadingRateKHR pfn =
      layer_data->dispatch_table.CmdSetFragmentShadingRateKHR;
  if (pfn) {
    pfn(commandBuffer, pFragmentSize, combinerOps);
  }

  InterceptPostCmdSetFragmentShadingRateKHR(commandBuffer, pFragmentSize,
                                            combinerOps);
}

VkResult InterceptGetPhysicalDeviceFragmentShadingRatesKHR(
    VkPhysicalDevice physicalDevice, uint32_t *pFragmentShadingRateCount,
    VkPhysicalDeviceFragmentShadingRateKHR *pFragmentShadingRates) {
  auto layer_data = GetInstanceLayerData(DataKey(physicalDevice));
  PFN_vkGetPhysicalDeviceFragmentShadingRatesKHR pfn =
      layer_data->dispatch_table.GetPhysicalDeviceFragmentShadingRatesKHR;

  VkResult result = VK_SUCCESS;
  if (pfn) {

    result =
        pfn(physicalDevice, pFragmentShadingRateCount, pFragmentShadingRates);
  }

  return result;
}

void InterceptGetAccelerationStructureBuildSizesKHR(
    VkDevice device, VkAccelerationStructureBuildTypeKHR buildType,
    const VkAccelerationStructureBuildGeometryInfoKHR *pBuildInfo,
    const uint32_t *pMaxPrimitiveCounts,
    VkAccelerationStructureBuildSizesInfoKHR *pSizeInfo) {
  auto layer_data = GetDeviceLayerData(DataKey(device));
  PFN_vkGetAccelerationStructureBuildSizesKHR pfn =
      layer_data->dispatch_table.GetAccelerationStructureBuildSizesKHR;
  if (pfn) {
    pfn(device, buildType, pBuildInfo, pMaxPrimitiveCounts, pSizeInfo);
  }
}

void InterceptCmdSetVertexInputEXT(
    VkCommandBuffer commandBuffer, uint32_t vertexBindingDescriptionCount,
    const VkVertexInputBindingDescription2EXT *pVertexBindingDescriptions,
    uint32_t vertexAttributeDescriptionCount,
    const VkVertexInputAttributeDescription2EXT *pVertexAttributeDescriptions) {
  InterceptPreCmdSetVertexInputEXT(
      commandBuffer, vertexBindingDescriptionCount, pVertexBindingDescriptions,
      vertexAttributeDescriptionCount, pVertexAttributeDescriptions);

  auto layer_data = GetDeviceLayerData(DataKey(commandBuffer));
  PFN_vkCmdSetVertexInputEXT pfn =
      layer_data->dispatch_table.CmdSetVertexInputEXT;
  if (pfn) {
    pfn(commandBuffer, vertexBindingDescriptionCount,
        pVertexBindingDescriptions, vertexAttributeDescriptionCount,
        pVertexAttributeDescriptions);
  }

  InterceptPostCmdSetVertexInputEXT(
      commandBuffer, vertexBindingDescriptionCount, pVertexBindingDescriptions,
      vertexAttributeDescriptionCount, pVertexAttributeDescriptions);
}

void InterceptCmdSetColorWriteEnableEXT(VkCommandBuffer commandBuffer,
                                        uint32_t attachmentCount,
                                        const VkBool32 *pColorWriteEnables) {
  InterceptPreCmdSetColorWriteEnableEXT(commandBuffer, attachmentCount,
                                        pColorWriteEnables);

  auto layer_data = GetDeviceLayerData(DataKey(commandBuffer));
  PFN_vkCmdSetColorWriteEnableEXT pfn =
      layer_data->dispatch_table.CmdSetColorWriteEnableEXT;
  if (pfn) {
    pfn(commandBuffer, attachmentCount, pColorWriteEnables);
  }

  InterceptPostCmdSetColorWriteEnableEXT(commandBuffer, attachmentCount,
                                         pColorWriteEnables);
}

void InterceptCmdSetEvent2KHR(VkCommandBuffer commandBuffer, VkEvent event,
                              const VkDependencyInfoKHR *pDependencyInfo) {
  InterceptPreCmdSetEvent2KHR(commandBuffer, event, pDependencyInfo);

  auto layer_data = GetDeviceLayerData(DataKey(commandBuffer));
  PFN_vkCmdSetEvent2KHR pfn = layer_data->dispatch_table.CmdSetEvent2KHR;
  if (pfn) {
    pfn(commandBuffer, event, pDependencyInfo);
  }

  InterceptPostCmdSetEvent2KHR(commandBuffer, event, pDependencyInfo);
}

void InterceptCmdResetEvent2KHR(VkCommandBuffer commandBuffer, VkEvent event,
                                VkPipelineStageFlags2KHR stageMask) {
  InterceptPreCmdResetEvent2KHR(commandBuffer, event, stageMask);

  auto layer_data = GetDeviceLayerData(DataKey(commandBuffer));
  PFN_vkCmdResetEvent2KHR pfn = layer_data->dispatch_table.CmdResetEvent2KHR;
  if (pfn) {
    pfn(commandBuffer, event, stageMask);
  }

  InterceptPostCmdResetEvent2KHR(commandBuffer, event, stageMask);
}

void InterceptCmdWaitEvents2KHR(VkCommandBuffer commandBuffer,
                                uint32_t eventCount, const VkEvent *pEvents,
                                const VkDependencyInfoKHR *pDependencyInfos) {
  InterceptPreCmdWaitEvents2KHR(commandBuffer, eventCount, pEvents,
                                pDependencyInfos);

  auto layer_data = GetDeviceLayerData(DataKey(commandBuffer));
  PFN_vkCmdWaitEvents2KHR pfn = layer_data->dispatch_table.CmdWaitEvents2KHR;
  if (pfn) {
    pfn(commandBuffer, eventCount, pEvents, pDependencyInfos);
  }

  InterceptPostCmdWaitEvents2KHR(commandBuffer, eventCount, pEvents,
                                 pDependencyInfos);
}

void InterceptCmdPipelineBarrier2KHR(
    VkCommandBuffer commandBuffer, const VkDependencyInfoKHR *pDependencyInfo) {
  InterceptPreCmdPipelineBarrier2KHR(commandBuffer, pDependencyInfo);

  auto layer_data = GetDeviceLayerData(DataKey(commandBuffer));
  PFN_vkCmdPipelineBarrier2KHR pfn =
      layer_data->dispatch_table.CmdPipelineBarrier2KHR;
  if (pfn) {
    pfn(commandBuffer, pDependencyInfo);
  }

  InterceptPostCmdPipelineBarrier2KHR(commandBuffer, pDependencyInfo);
}

VkResult InterceptQueueSubmit2KHR(VkQueue queue, uint32_t submitCount,
                                  const VkSubmitInfo2KHR *pSubmits,
                                  VkFence fence) {
  auto layer_data = GetDeviceLayerData(DataKey(queue));
  PFN_vkQueueSubmit2KHR pfn = layer_data->dispatch_table.QueueSubmit2KHR;

  VkResult result = VK_SUCCESS;
  if (pfn) {

    result = pfn(queue, submitCount, pSubmits, fence);
  }

  return result;
}

void InterceptCmdWriteTimestamp2KHR(VkCommandBuffer commandBuffer,
                                    VkPipelineStageFlags2KHR stage,
                                    VkQueryPool queryPool, uint32_t query) {
  InterceptPreCmdWriteTimestamp2KHR(commandBuffer, stage, queryPool, query);

  auto layer_data = GetDeviceLayerData(DataKey(commandBuffer));
  PFN_vkCmdWriteTimestamp2KHR pfn =
      layer_data->dispatch_table.CmdWriteTimestamp2KHR;
  if (pfn) {
    pfn(commandBuffer, stage, queryPool, query);
  }

  InterceptPostCmdWriteTimestamp2KHR(commandBuffer, stage, queryPool, query);
}

void InterceptCmdWriteBufferMarker2AMD(VkCommandBuffer commandBuffer,
                                       VkPipelineStageFlags2KHR stage,
                                       VkBuffer dstBuffer,
                                       VkDeviceSize dstOffset,
                                       uint32_t marker) {
  InterceptPreCmdWriteBufferMarker2AMD(commandBuffer, stage, dstBuffer,
                                       dstOffset, marker);

  auto layer_data = GetDeviceLayerData(DataKey(commandBuffer));
  PFN_vkCmdWriteBufferMarker2AMD pfn =
      layer_data->dispatch_table.CmdWriteBufferMarker2AMD;
  if (pfn) {
    pfn(commandBuffer, stage, dstBuffer, dstOffset, marker);
  }

  InterceptPostCmdWriteBufferMarker2AMD(commandBuffer, stage, dstBuffer,
                                        dstOffset, marker);
}

void InterceptGetQueueCheckpointData2NV(VkQueue queue,
                                        uint32_t *pCheckpointDataCount,
                                        VkCheckpointData2NV *pCheckpointData) {
  auto layer_data = GetDeviceLayerData(DataKey(queue));
  PFN_vkGetQueueCheckpointData2NV pfn =
      layer_data->dispatch_table.GetQueueCheckpointData2NV;
  if (pfn) {
    pfn(queue, pCheckpointDataCount, pCheckpointData);
  }
}

VkResult InterceptAcquireDrmDisplayEXT(VkPhysicalDevice physicalDevice,
                                       int32_t drmFd, VkDisplayKHR display) {
  auto layer_data = GetInstanceLayerData(DataKey(physicalDevice));
  PFN_vkAcquireDrmDisplayEXT pfn =
      layer_data->dispatch_table.AcquireDrmDisplayEXT;

  VkResult result = VK_SUCCESS;
  if (pfn) {

    result = pfn(physicalDevice, drmFd, display);
  }

  return result;
}

VkResult InterceptGetDrmDisplayEXT(VkPhysicalDevice physicalDevice,
                                   int32_t drmFd, uint32_t connectorId,
                                   VkDisplayKHR *display) {
  auto layer_data = GetInstanceLayerData(DataKey(physicalDevice));
  PFN_vkGetDrmDisplayEXT pfn = layer_data->dispatch_table.GetDrmDisplayEXT;

  VkResult result = VK_SUCCESS;
  if (pfn) {

    result = pfn(physicalDevice, drmFd, connectorId, display);
  }

  return result;
}

VkResult InterceptEnumeratePhysicalDevices(VkInstance instance,
                                           uint32_t *pPhysicalDeviceCount,
                                           VkPhysicalDevice *pPhysicalDevices) {
  auto layer_data = GetInstanceLayerData(DataKey(instance));
  PFN_vkEnumeratePhysicalDevices pfn =
      layer_data->dispatch_table.EnumeratePhysicalDevices;

  VkResult result = VK_SUCCESS;
  if (pfn) {

    result = pfn(instance, pPhysicalDeviceCount, pPhysicalDevices);
  }

  return result;
}

PFN_vkVoidFunction InterceptGetDeviceProcAddr(VkDevice device, char *pName) {
  auto layer_data = GetDeviceLayerData(DataKey(device));
  PFN_vkGetDeviceProcAddr pfn = layer_data->dispatch_table.GetDeviceProcAddr;

  PFN_vkVoidFunction result = nullptr;
  if (pfn) {

    result = pfn(device, pName);
  }

  return result;
}

PFN_vkVoidFunction InterceptGetInstanceProcAddr(VkInstance instance,
                                                char *pName) {
  auto layer_data = GetInstanceLayerData(DataKey(instance));
  PFN_vkGetInstanceProcAddr pfn =
      layer_data->dispatch_table.GetInstanceProcAddr;

  PFN_vkVoidFunction result = nullptr;
  if (pfn) {

    result = pfn(instance, pName);
  }

  return result;
}

void InterceptGetPhysicalDeviceProperties(
    VkPhysicalDevice physicalDevice, VkPhysicalDeviceProperties *pProperties) {
  auto layer_data = GetInstanceLayerData(DataKey(physicalDevice));
  PFN_vkGetPhysicalDeviceProperties pfn =
      layer_data->dispatch_table.GetPhysicalDeviceProperties;
  if (pfn) {
    pfn(physicalDevice, pProperties);
  }
}

void InterceptGetPhysicalDeviceQueueFamilyProperties(
    VkPhysicalDevice physicalDevice, uint32_t *pQueueFamilyPropertyCount,
    VkQueueFamilyProperties *pQueueFamilyProperties) {
  auto layer_data = GetInstanceLayerData(DataKey(physicalDevice));
  PFN_vkGetPhysicalDeviceQueueFamilyProperties pfn =
      layer_data->dispatch_table.GetPhysicalDeviceQueueFamilyProperties;
  if (pfn) {
    pfn(physicalDevice, pQueueFamilyPropertyCount, pQueueFamilyProperties);
  }
}

void InterceptGetPhysicalDeviceMemoryProperties(
    VkPhysicalDevice physicalDevice,
    VkPhysicalDeviceMemoryProperties *pMemoryProperties) {
  auto layer_data = GetInstanceLayerData(DataKey(physicalDevice));
  PFN_vkGetPhysicalDeviceMemoryProperties pfn =
      layer_data->dispatch_table.GetPhysicalDeviceMemoryProperties;
  if (pfn) {
    pfn(physicalDevice, pMemoryProperties);
  }
}

void InterceptGetPhysicalDeviceFeatures(VkPhysicalDevice physicalDevice,
                                        VkPhysicalDeviceFeatures *pFeatures) {
  auto layer_data = GetInstanceLayerData(DataKey(physicalDevice));
  PFN_vkGetPhysicalDeviceFeatures pfn =
      layer_data->dispatch_table.GetPhysicalDeviceFeatures;
  if (pfn) {
    pfn(physicalDevice, pFeatures);
  }
}

void InterceptGetPhysicalDeviceFormatProperties(
    VkPhysicalDevice physicalDevice, VkFormat format,
    VkFormatProperties *pFormatProperties) {
  auto layer_data = GetInstanceLayerData(DataKey(physicalDevice));
  PFN_vkGetPhysicalDeviceFormatProperties pfn =
      layer_data->dispatch_table.GetPhysicalDeviceFormatProperties;
  if (pfn) {
    pfn(physicalDevice, format, pFormatProperties);
  }
}

VkResult InterceptGetPhysicalDeviceImageFormatProperties(
    VkPhysicalDevice physicalDevice, VkFormat format, VkImageType type,
    VkImageTiling tiling, VkImageUsageFlags usage, VkImageCreateFlags flags,
    VkImageFormatProperties *pImageFormatProperties) {
  auto layer_data = GetInstanceLayerData(DataKey(physicalDevice));
  PFN_vkGetPhysicalDeviceImageFormatProperties pfn =
      layer_data->dispatch_table.GetPhysicalDeviceImageFormatProperties;

  VkResult result = VK_SUCCESS;
  if (pfn) {

    result = pfn(physicalDevice, format, type, tiling, usage, flags,
                 pImageFormatProperties);
  }

  return result;
}

VkResult InterceptEnumerateInstanceVersion(uint32_t *pApiVersion) {
  auto layer_data = GetDeviceLayerData(DataKey(pApiVersion));
  PFN_vkEnumerateInstanceVersion pfn =
      layer_data->dispatch_table.EnumerateInstanceVersion;

  VkResult result = VK_SUCCESS;
  if (pfn) {

    result = pfn(pApiVersion);
  }

  return result;
}

void InterceptGetDeviceQueue(VkDevice device, uint32_t queueFamilyIndex,
                             uint32_t queueIndex, VkQueue *pQueue) {
  auto layer_data = GetDeviceLayerData(DataKey(device));
  PFN_vkGetDeviceQueue pfn = layer_data->dispatch_table.GetDeviceQueue;
  if (pfn) {
    pfn(device, queueFamilyIndex, queueIndex, pQueue);
  }

  InterceptPostGetDeviceQueue(device, queueFamilyIndex, queueIndex, pQueue);
}

VkResult InterceptQueueSubmit(VkQueue queue, uint32_t submitCount,
                              const VkSubmitInfo *pSubmits, VkFence fence) {
  InterceptPreQueueSubmit(queue, submitCount, pSubmits, fence);

  auto layer_data = GetDeviceLayerData(DataKey(queue));
  PFN_vkQueueSubmit pfn = layer_data->dispatch_table.QueueSubmit;

  VkResult result = VK_SUCCESS;
  if (pfn) {

    result = QueueSubmit(pfn, queue, submitCount, pSubmits, fence);
  }

  result =
      InterceptPostQueueSubmit(queue, submitCount, pSubmits, fence, result);

  return result;
}

VkResult InterceptQueueWaitIdle(VkQueue queue) {
  auto layer_data = GetDeviceLayerData(DataKey(queue));
  PFN_vkQueueWaitIdle pfn = layer_data->dispatch_table.QueueWaitIdle;

  VkResult result = VK_SUCCESS;
  if (pfn) {

    result = pfn(queue);
  }

  result = InterceptPostQueueWaitIdle(queue, result);

  return result;
}

VkResult InterceptDeviceWaitIdle(VkDevice device) {
  auto layer_data = GetDeviceLayerData(DataKey(device));
  PFN_vkDeviceWaitIdle pfn = layer_data->dispatch_table.DeviceWaitIdle;

  VkResult result = VK_SUCCESS;
  if (pfn) {

    result = pfn(device);
  }

  result = InterceptPostDeviceWaitIdle(device, result);

  return result;
}

VkResult InterceptAllocateMemory(VkDevice device,
                                 const VkMemoryAllocateInfo *pAllocateInfo,
                                 const VkAllocationCallbacks *pAllocator,
                                 VkDeviceMemory *pMemory) {
  auto layer_data = GetDeviceLayerData(DataKey(device));
  PFN_vkAllocateMemory pfn = layer_data->dispatch_table.AllocateMemory;

  VkResult result = VK_SUCCESS;
  if (pfn) {

    result = pfn(device, pAllocateInfo, pAllocator, pMemory);
  }

  return result;
}

void InterceptFreeMemory(VkDevice device, VkDeviceMemory memory,
                         const VkAllocationCallbacks *pAllocator) {
  auto layer_data = GetDeviceLayerData(DataKey(device));
  PFN_vkFreeMemory pfn = layer_data->dispatch_table.FreeMemory;
  if (pfn) {
    pfn(device, memory, pAllocator);
  }
}

VkResult InterceptMapMemory(VkDevice device, VkDeviceMemory memory,
                            VkDeviceSize offset, VkDeviceSize size,
                            VkMemoryMapFlags flags, void **ppData) {
  auto layer_data = GetDeviceLayerData(DataKey(device));
  PFN_vkMapMemory pfn = layer_data->dispatch_table.MapMemory;

  VkResult result = VK_SUCCESS;
  if (pfn) {

    result = pfn(device, memory, offset, size, flags, ppData);
  }

  return result;
}

void InterceptUnmapMemory(VkDevice device, VkDeviceMemory memory) {
  auto layer_data = GetDeviceLayerData(DataKey(device));
  PFN_vkUnmapMemory pfn = layer_data->dispatch_table.UnmapMemory;
  if (pfn) {
    pfn(device, memory);
  }
}

VkResult
InterceptFlushMappedMemoryRanges(VkDevice device, uint32_t memoryRangeCount,
                                 const VkMappedMemoryRange *pMemoryRanges) {
  auto layer_data = GetDeviceLayerData(DataKey(device));
  PFN_vkFlushMappedMemoryRanges pfn =
      layer_data->dispatch_table.FlushMappedMemoryRanges;

  VkResult result = VK_SUCCESS;
  if (pfn) {

    result = pfn(device, memoryRangeCount, pMemoryRanges);
  }

  return result;
}

VkResult InterceptInvalidateMappedMemoryRanges(
    VkDevice device, uint32_t memoryRangeCount,
    const VkMappedMemoryRange *pMemoryRanges) {
  auto layer_data = GetDeviceLayerData(DataKey(device));
  PFN_vkInvalidateMappedMemoryRanges pfn =
      layer_data->dispatch_table.InvalidateMappedMemoryRanges;

  VkResult result = VK_SUCCESS;
  if (pfn) {

    result = pfn(device, memoryRangeCount, pMemoryRanges);
  }

  return result;
}

void InterceptGetDeviceMemoryCommitment(VkDevice device, VkDeviceMemory memory,
                                        VkDeviceSize *pCommittedMemoryInBytes) {
  auto layer_data = GetDeviceLayerData(DataKey(device));
  PFN_vkGetDeviceMemoryCommitment pfn =
      layer_data->dispatch_table.GetDeviceMemoryCommitment;
  if (pfn) {
    pfn(device, memory, pCommittedMemoryInBytes);
  }
}

void InterceptGetBufferMemoryRequirements(
    VkDevice device, VkBuffer buffer,
    VkMemoryRequirements *pMemoryRequirements) {
  auto layer_data = GetDeviceLayerData(DataKey(device));
  PFN_vkGetBufferMemoryRequirements pfn =
      layer_data->dispatch_table.GetBufferMemoryRequirements;
  if (pfn) {
    pfn(device, buffer, pMemoryRequirements);
  }
}

VkResult InterceptBindBufferMemory(VkDevice device, VkBuffer buffer,
                                   VkDeviceMemory memory,
                                   VkDeviceSize memoryOffset) {
  auto layer_data = GetDeviceLayerData(DataKey(device));
  PFN_vkBindBufferMemory pfn = layer_data->dispatch_table.BindBufferMemory;

  VkResult result = VK_SUCCESS;
  if (pfn) {

    result = pfn(device, buffer, memory, memoryOffset);
  }

  return result;
}

void InterceptGetImageMemoryRequirements(
    VkDevice device, VkImage image, VkMemoryRequirements *pMemoryRequirements) {
  auto layer_data = GetDeviceLayerData(DataKey(device));
  PFN_vkGetImageMemoryRequirements pfn =
      layer_data->dispatch_table.GetImageMemoryRequirements;
  if (pfn) {
    pfn(device, image, pMemoryRequirements);
  }
}

VkResult InterceptBindImageMemory(VkDevice device, VkImage image,
                                  VkDeviceMemory memory,
                                  VkDeviceSize memoryOffset) {
  auto layer_data = GetDeviceLayerData(DataKey(device));
  PFN_vkBindImageMemory pfn = layer_data->dispatch_table.BindImageMemory;

  VkResult result = VK_SUCCESS;
  if (pfn) {

    result = pfn(device, image, memory, memoryOffset);
  }

  return result;
}

void InterceptGetImageSparseMemoryRequirements(
    VkDevice device, VkImage image, uint32_t *pSparseMemoryRequirementCount,
    VkSparseImageMemoryRequirements *pSparseMemoryRequirements) {
  auto layer_data = GetDeviceLayerData(DataKey(device));
  PFN_vkGetImageSparseMemoryRequirements pfn =
      layer_data->dispatch_table.GetImageSparseMemoryRequirements;
  if (pfn) {
    pfn(device, image, pSparseMemoryRequirementCount,
        pSparseMemoryRequirements);
  }
}

void InterceptGetPhysicalDeviceSparseImageFormatProperties(
    VkPhysicalDevice physicalDevice, VkFormat format, VkImageType type,
    VkSampleCountFlagBits samples, VkImageUsageFlags usage,
    VkImageTiling tiling, uint32_t *pPropertyCount,
    VkSparseImageFormatProperties *pProperties) {
  auto layer_data = GetInstanceLayerData(DataKey(physicalDevice));
  PFN_vkGetPhysicalDeviceSparseImageFormatProperties pfn =
      layer_data->dispatch_table.GetPhysicalDeviceSparseImageFormatProperties;
  if (pfn) {
    pfn(physicalDevice, format, type, samples, usage, tiling, pPropertyCount,
        pProperties);
  }
}

VkResult InterceptQueueBindSparse(VkQueue queue, uint32_t bindInfoCount,
                                  const VkBindSparseInfo *pBindInfo,
                                  VkFence fence) {
  auto layer_data = GetDeviceLayerData(DataKey(queue));
  PFN_vkQueueBindSparse pfn = layer_data->dispatch_table.QueueBindSparse;

  VkResult result = VK_SUCCESS;
  if (pfn) {

    result = QueueBindSparse(pfn, queue, bindInfoCount, pBindInfo, fence);
  }

  result = InterceptPostQueueBindSparse(queue, bindInfoCount, pBindInfo, fence,
                                        result);

  return result;
}

VkResult InterceptCreateFence(VkDevice device,
                              const VkFenceCreateInfo *pCreateInfo,
                              const VkAllocationCallbacks *pAllocator,
                              VkFence *pFence) {
  auto layer_data = GetDeviceLayerData(DataKey(device));
  PFN_vkCreateFence pfn = layer_data->dispatch_table.CreateFence;

  VkResult result = VK_SUCCESS;
  if (pfn) {

    result = pfn(device, pCreateInfo, pAllocator, pFence);
  }

  return result;
}

void InterceptDestroyFence(VkDevice device, VkFence fence,
                           const VkAllocationCallbacks *pAllocator) {
  auto layer_data = GetDeviceLayerData(DataKey(device));
  PFN_vkDestroyFence pfn = layer_data->dispatch_table.DestroyFence;
  if (pfn) {
    pfn(device, fence, pAllocator);
  }
}

VkResult InterceptResetFences(VkDevice device, uint32_t fenceCount,
                              const VkFence *pFences) {
  auto layer_data = GetDeviceLayerData(DataKey(device));
  PFN_vkResetFences pfn = layer_data->dispatch_table.ResetFences;

  VkResult result = VK_SUCCESS;
  if (pfn) {

    result = pfn(device, fenceCount, pFences);
  }

  return result;
}

VkResult InterceptGetFenceStatus(VkDevice device, VkFence fence) {
  auto layer_data = GetDeviceLayerData(DataKey(device));
  PFN_vkGetFenceStatus pfn = layer_data->dispatch_table.GetFenceStatus;

  VkResult result = VK_SUCCESS;
  if (pfn) {

    result = pfn(device, fence);
  }

  result = InterceptPostGetFenceStatus(device, fence, result);

  return result;
}

VkResult InterceptWaitForFences(VkDevice device, uint32_t fenceCount,
                                const VkFence *pFences, VkBool32 waitAll,
                                uint64_t timeout) {
  auto layer_data = GetDeviceLayerData(DataKey(device));
  PFN_vkWaitForFences pfn = layer_data->dispatch_table.WaitForFences;

  VkResult result = VK_SUCCESS;
  if (pfn) {

    result = pfn(device, fenceCount, pFences, waitAll, timeout);
  }

  result = InterceptPostWaitForFences(device, fenceCount, pFences, waitAll,
                                      timeout, result);

  return result;
}

VkResult InterceptCreateSemaphore(VkDevice device,
                                  const VkSemaphoreCreateInfo *pCreateInfo,
                                  const VkAllocationCallbacks *pAllocator,
                                  VkSemaphore *pSemaphore) {
  auto layer_data = GetDeviceLayerData(DataKey(device));
  PFN_vkCreateSemaphore pfn = layer_data->dispatch_table.CreateSemaphore;

  VkResult result = VK_SUCCESS;
  if (pfn) {

    result = pfn(device, pCreateInfo, pAllocator, pSemaphore);
  }

  result = InterceptPostCreateSemaphore(device, pCreateInfo, pAllocator,
                                        pSemaphore, result);

  return result;
}

void InterceptDestroySemaphore(VkDevice device, VkSemaphore semaphore,
                               const VkAllocationCallbacks *pAllocator) {
  auto layer_data = GetDeviceLayerData(DataKey(device));
  PFN_vkDestroySemaphore pfn = layer_data->dispatch_table.DestroySemaphore;
  if (pfn) {
    pfn(device, semaphore, pAllocator);
  }

  InterceptPostDestroySemaphore(device, semaphore, pAllocator);
}

VkResult InterceptCreateEvent(VkDevice device,
                              const VkEventCreateInfo *pCreateInfo,
                              const VkAllocationCallbacks *pAllocator,
                              VkEvent *pEvent) {
  auto layer_data = GetDeviceLayerData(DataKey(device));
  PFN_vkCreateEvent pfn = layer_data->dispatch_table.CreateEvent;

  VkResult result = VK_SUCCESS;
  if (pfn) {

    result = pfn(device, pCreateInfo, pAllocator, pEvent);
  }

  return result;
}

void InterceptDestroyEvent(VkDevice device, VkEvent event,
                           const VkAllocationCallbacks *pAllocator) {
  auto layer_data = GetDeviceLayerData(DataKey(device));
  PFN_vkDestroyEvent pfn = layer_data->dispatch_table.DestroyEvent;
  if (pfn) {
    pfn(device, event, pAllocator);
  }
}

VkResult InterceptGetEventStatus(VkDevice device, VkEvent event) {
  auto layer_data = GetDeviceLayerData(DataKey(device));
  PFN_vkGetEventStatus pfn = layer_data->dispatch_table.GetEventStatus;

  VkResult result = VK_SUCCESS;
  if (pfn) {

    result = pfn(device, event);
  }

  return result;
}

VkResult InterceptSetEvent(VkDevice device, VkEvent event) {
  auto layer_data = GetDeviceLayerData(DataKey(device));
  PFN_vkSetEvent pfn = layer_data->dispatch_table.SetEvent;

  VkResult result = VK_SUCCESS;
  if (pfn) {

    result = pfn(device, event);
  }

  return result;
}

VkResult InterceptResetEvent(VkDevice device, VkEvent event) {
  auto layer_data = GetDeviceLayerData(DataKey(device));
  PFN_vkResetEvent pfn = layer_data->dispatch_table.ResetEvent;

  VkResult result = VK_SUCCESS;
  if (pfn) {

    result = pfn(device, event);
  }

  return result;
}

VkResult InterceptCreateQueryPool(VkDevice device,
                                  const VkQueryPoolCreateInfo *pCreateInfo,
                                  const VkAllocationCallbacks *pAllocator,
                                  VkQueryPool *pQueryPool) {
  auto layer_data = GetDeviceLayerData(DataKey(device));
  PFN_vkCreateQueryPool pfn = layer_data->dispatch_table.CreateQueryPool;

  VkResult result = VK_SUCCESS;
  if (pfn) {

    result = pfn(device, pCreateInfo, pAllocator, pQueryPool);
  }

  return result;
}

void InterceptDestroyQueryPool(VkDevice device, VkQueryPool queryPool,
                               const VkAllocationCallbacks *pAllocator) {
  auto layer_data = GetDeviceLayerData(DataKey(device));
  PFN_vkDestroyQueryPool pfn = layer_data->dispatch_table.DestroyQueryPool;
  if (pfn) {
    pfn(device, queryPool, pAllocator);
  }
}

VkResult InterceptGetQueryPoolResults(VkDevice device, VkQueryPool queryPool,
                                      uint32_t firstQuery, uint32_t queryCount,
                                      size_t dataSize, void *pData,
                                      VkDeviceSize stride,
                                      VkQueryResultFlags flags) {
  auto layer_data = GetDeviceLayerData(DataKey(device));
  PFN_vkGetQueryPoolResults pfn =
      layer_data->dispatch_table.GetQueryPoolResults;

  VkResult result = VK_SUCCESS;
  if (pfn) {

    result = pfn(device, queryPool, firstQuery, queryCount, dataSize, pData,
                 stride, flags);
  }

  result = InterceptPostGetQueryPoolResults(device, queryPool, firstQuery,
                                            queryCount, dataSize, pData, stride,
                                            flags, result);

  return result;
}

VkResult InterceptCreateBuffer(VkDevice device,
                               const VkBufferCreateInfo *pCreateInfo,
                               const VkAllocationCallbacks *pAllocator,
                               VkBuffer *pBuffer) {
  auto layer_data = GetDeviceLayerData(DataKey(device));
  PFN_vkCreateBuffer pfn = layer_data->dispatch_table.CreateBuffer;

  VkResult result = VK_SUCCESS;
  if (pfn) {

    result = pfn(device, pCreateInfo, pAllocator, pBuffer);
  }

  return result;
}

void InterceptDestroyBuffer(VkDevice device, VkBuffer buffer,
                            const VkAllocationCallbacks *pAllocator) {
  auto layer_data = GetDeviceLayerData(DataKey(device));
  PFN_vkDestroyBuffer pfn = layer_data->dispatch_table.DestroyBuffer;
  if (pfn) {
    pfn(device, buffer, pAllocator);
  }
}

VkResult InterceptCreateBufferView(VkDevice device,
                                   const VkBufferViewCreateInfo *pCreateInfo,
                                   const VkAllocationCallbacks *pAllocator,
                                   VkBufferView *pView) {
  auto layer_data = GetDeviceLayerData(DataKey(device));
  PFN_vkCreateBufferView pfn = layer_data->dispatch_table.CreateBufferView;

  VkResult result = VK_SUCCESS;
  if (pfn) {

    result = pfn(device, pCreateInfo, pAllocator, pView);
  }

  return result;
}

void InterceptDestroyBufferView(VkDevice device, VkBufferView bufferView,
                                const VkAllocationCallbacks *pAllocator) {
  auto layer_data = GetDeviceLayerData(DataKey(device));
  PFN_vkDestroyBufferView pfn = layer_data->dispatch_table.DestroyBufferView;
  if (pfn) {
    pfn(device, bufferView, pAllocator);
  }
}

VkResult InterceptCreateImage(VkDevice device,
                              const VkImageCreateInfo *pCreateInfo,
                              const VkAllocationCallbacks *pAllocator,
                              VkImage *pImage) {
  auto layer_data = GetDeviceLayerData(DataKey(device));
  PFN_vkCreateImage pfn = layer_data->dispatch_table.CreateImage;

  VkResult result = VK_SUCCESS;
  if (pfn) {

    result = pfn(device, pCreateInfo, pAllocator, pImage);
  }

  return result;
}

void InterceptDestroyImage(VkDevice device, VkImage image,
                           const VkAllocationCallbacks *pAllocator) {
  auto layer_data = GetDeviceLayerData(DataKey(device));
  PFN_vkDestroyImage pfn = layer_data->dispatch_table.DestroyImage;
  if (pfn) {
    pfn(device, image, pAllocator);
  }
}

void InterceptGetImageSubresourceLayout(VkDevice device, VkImage image,
                                        const VkImageSubresource *pSubresource,
                                        VkSubresourceLayout *pLayout) {
  auto layer_data = GetDeviceLayerData(DataKey(device));
  PFN_vkGetImageSubresourceLayout pfn =
      layer_data->dispatch_table.GetImageSubresourceLayout;
  if (pfn) {
    pfn(device, image, pSubresource, pLayout);
  }
}

VkResult InterceptCreateImageView(VkDevice device,
                                  const VkImageViewCreateInfo *pCreateInfo,
                                  const VkAllocationCallbacks *pAllocator,
                                  VkImageView *pView) {
  auto layer_data = GetDeviceLayerData(DataKey(device));
  PFN_vkCreateImageView pfn = layer_data->dispatch_table.CreateImageView;

  VkResult result = VK_SUCCESS;
  if (pfn) {

    result = pfn(device, pCreateInfo, pAllocator, pView);
  }

  return result;
}

void InterceptDestroyImageView(VkDevice device, VkImageView imageView,
                               const VkAllocationCallbacks *pAllocator) {
  auto layer_data = GetDeviceLayerData(DataKey(device));
  PFN_vkDestroyImageView pfn = layer_data->dispatch_table.DestroyImageView;
  if (pfn) {
    pfn(device, imageView, pAllocator);
  }
}

VkResult InterceptCreateShaderModule(
    VkDevice device, const VkShaderModuleCreateInfo *pCreateInfo,
    const VkAllocationCallbacks *pAllocator, VkShaderModule *pShaderModule) {
  auto layer_data = GetDeviceLayerData(DataKey(device));
  PFN_vkCreateShaderModule pfn = layer_data->dispatch_table.CreateShaderModule;

  VkResult result = VK_SUCCESS;
  if (pfn) {

    result = pfn(device, pCreateInfo, pAllocator, pShaderModule);
  }

  result = InterceptPostCreateShaderModule(device, pCreateInfo, pAllocator,
                                           pShaderModule, result);

  return result;
}

void InterceptDestroyShaderModule(VkDevice device, VkShaderModule shaderModule,
                                  const VkAllocationCallbacks *pAllocator) {
  auto layer_data = GetDeviceLayerData(DataKey(device));
  PFN_vkDestroyShaderModule pfn =
      layer_data->dispatch_table.DestroyShaderModule;
  if (pfn) {
    pfn(device, shaderModule, pAllocator);
  }

  InterceptPostDestroyShaderModule(device, shaderModule, pAllocator);
}

VkResult InterceptCreatePipelineCache(
    VkDevice device, const VkPipelineCacheCreateInfo *pCreateInfo,
    const VkAllocationCallbacks *pAllocator, VkPipelineCache *pPipelineCache) {
  auto layer_data = GetDeviceLayerData(DataKey(device));
  PFN_vkCreatePipelineCache pfn =
      layer_data->dispatch_table.CreatePipelineCache;

  VkResult result = VK_SUCCESS;
  if (pfn) {

    result = pfn(device, pCreateInfo, pAllocator, pPipelineCache);
  }

  return result;
}

void InterceptDestroyPipelineCache(VkDevice device,
                                   VkPipelineCache pipelineCache,
                                   const VkAllocationCallbacks *pAllocator) {
  auto layer_data = GetDeviceLayerData(DataKey(device));
  PFN_vkDestroyPipelineCache pfn =
      layer_data->dispatch_table.DestroyPipelineCache;
  if (pfn) {
    pfn(device, pipelineCache, pAllocator);
  }
}

VkResult InterceptGetPipelineCacheData(VkDevice device,
                                       VkPipelineCache pipelineCache,
                                       size_t *pDataSize, void *pData) {
  auto layer_data = GetDeviceLayerData(DataKey(device));
  PFN_vkGetPipelineCacheData pfn =
      layer_data->dispatch_table.GetPipelineCacheData;

  VkResult result = VK_SUCCESS;
  if (pfn) {

    result = pfn(device, pipelineCache, pDataSize, pData);
  }

  return result;
}

VkResult InterceptMergePipelineCaches(VkDevice device, VkPipelineCache dstCache,
                                      uint32_t srcCacheCount,
                                      const VkPipelineCache *pSrcCaches) {
  auto layer_data = GetDeviceLayerData(DataKey(device));
  PFN_vkMergePipelineCaches pfn =
      layer_data->dispatch_table.MergePipelineCaches;

  VkResult result = VK_SUCCESS;
  if (pfn) {

    result = pfn(device, dstCache, srcCacheCount, pSrcCaches);
  }

  return result;
}

VkResult InterceptCreateGraphicsPipelines(
    VkDevice device, VkPipelineCache pipelineCache, uint32_t createInfoCount,
    const VkGraphicsPipelineCreateInfo *pCreateInfos,
    const VkAllocationCallbacks *pAllocator, VkPipeline *pPipelines) {
  auto layer_data = GetDeviceLayerData(DataKey(device));
  PFN_vkCreateGraphicsPipelines pfn =
      layer_data->dispatch_table.CreateGraphicsPipelines;

  VkResult result = VK_SUCCESS;
  if (pfn) {

    result = pfn(device, pipelineCache, createInfoCount, pCreateInfos,
                 pAllocator, pPipelines);
  }

  result = InterceptPostCreateGraphicsPipelines(device, pipelineCache,
                                                createInfoCount, pCreateInfos,
                                                pAllocator, pPipelines, result);

  return result;
}

VkResult InterceptCreateComputePipelines(
    VkDevice device, VkPipelineCache pipelineCache, uint32_t createInfoCount,
    const VkComputePipelineCreateInfo *pCreateInfos,
    const VkAllocationCallbacks *pAllocator, VkPipeline *pPipelines) {
  auto layer_data = GetDeviceLayerData(DataKey(device));
  PFN_vkCreateComputePipelines pfn =
      layer_data->dispatch_table.CreateComputePipelines;

  VkResult result = VK_SUCCESS;
  if (pfn) {

    result = pfn(device, pipelineCache, createInfoCount, pCreateInfos,
                 pAllocator, pPipelines);
  }

  result = InterceptPostCreateComputePipelines(device, pipelineCache,
                                               createInfoCount, pCreateInfos,
                                               pAllocator, pPipelines, result);

  return result;
}

void InterceptDestroyPipeline(VkDevice device, VkPipeline pipeline,
                              const VkAllocationCallbacks *pAllocator) {
  auto layer_data = GetDeviceLayerData(DataKey(device));
  PFN_vkDestroyPipeline pfn = layer_data->dispatch_table.DestroyPipeline;
  if (pfn) {
    pfn(device, pipeline, pAllocator);
  }

  InterceptPostDestroyPipeline(device, pipeline, pAllocator);
}

VkResult
InterceptCreatePipelineLayout(VkDevice device,
                              const VkPipelineLayoutCreateInfo *pCreateInfo,
                              const VkAllocationCallbacks *pAllocator,
                              VkPipelineLayout *pPipelineLayout) {
  auto layer_data = GetDeviceLayerData(DataKey(device));
  PFN_vkCreatePipelineLayout pfn =
      layer_data->dispatch_table.CreatePipelineLayout;

  VkResult result = VK_SUCCESS;
  if (pfn) {

    result = pfn(device, pCreateInfo, pAllocator, pPipelineLayout);
  }

  return result;
}

void InterceptDestroyPipelineLayout(VkDevice device,
                                    VkPipelineLayout pipelineLayout,
                                    const VkAllocationCallbacks *pAllocator) {
  auto layer_data = GetDeviceLayerData(DataKey(device));
  PFN_vkDestroyPipelineLayout pfn =
      layer_data->dispatch_table.DestroyPipelineLayout;
  if (pfn) {
    pfn(device, pipelineLayout, pAllocator);
  }
}

VkResult InterceptCreateSampler(VkDevice device,
                                const VkSamplerCreateInfo *pCreateInfo,
                                const VkAllocationCallbacks *pAllocator,
                                VkSampler *pSampler) {
  auto layer_data = GetDeviceLayerData(DataKey(device));
  PFN_vkCreateSampler pfn = layer_data->dispatch_table.CreateSampler;

  VkResult result = VK_SUCCESS;
  if (pfn) {

    result = pfn(device, pCreateInfo, pAllocator, pSampler);
  }

  return result;
}

void InterceptDestroySampler(VkDevice device, VkSampler sampler,
                             const VkAllocationCallbacks *pAllocator) {
  auto layer_data = GetDeviceLayerData(DataKey(device));
  PFN_vkDestroySampler pfn = layer_data->dispatch_table.DestroySampler;
  if (pfn) {
    pfn(device, sampler, pAllocator);
  }
}

VkResult InterceptCreateDescriptorSetLayout(
    VkDevice device, const VkDescriptorSetLayoutCreateInfo *pCreateInfo,
    const VkAllocationCallbacks *pAllocator,
    VkDescriptorSetLayout *pSetLayout) {
  auto layer_data = GetDeviceLayerData(DataKey(device));
  PFN_vkCreateDescriptorSetLayout pfn =
      layer_data->dispatch_table.CreateDescriptorSetLayout;

  VkResult result = VK_SUCCESS;
  if (pfn) {

    result = pfn(device, pCreateInfo, pAllocator, pSetLayout);
  }

  return result;
}

void InterceptDestroyDescriptorSetLayout(
    VkDevice device, VkDescriptorSetLayout descriptorSetLayout,
    const VkAllocationCallbacks *pAllocator) {
  auto layer_data = GetDeviceLayerData(DataKey(device));
  PFN_vkDestroyDescriptorSetLayout pfn =
      layer_data->dispatch_table.DestroyDescriptorSetLayout;
  if (pfn) {
    pfn(device, descriptorSetLayout, pAllocator);
  }
}

VkResult
InterceptCreateDescriptorPool(VkDevice device,
                              const VkDescriptorPoolCreateInfo *pCreateInfo,
                              const VkAllocationCallbacks *pAllocator,
                              VkDescriptorPool *pDescriptorPool) {
  auto layer_data = GetDeviceLayerData(DataKey(device));
  PFN_vkCreateDescriptorPool pfn =
      layer_data->dispatch_table.CreateDescriptorPool;

  VkResult result = VK_SUCCESS;
  if (pfn) {

    result = pfn(device, pCreateInfo, pAllocator, pDescriptorPool);
  }

  return result;
}

void InterceptDestroyDescriptorPool(VkDevice device,
                                    VkDescriptorPool descriptorPool,
                                    const VkAllocationCallbacks *pAllocator) {
  auto layer_data = GetDeviceLayerData(DataKey(device));
  PFN_vkDestroyDescriptorPool pfn =
      layer_data->dispatch_table.DestroyDescriptorPool;
  if (pfn) {
    pfn(device, descriptorPool, pAllocator);
  }
}

VkResult InterceptResetDescriptorPool(VkDevice device,
                                      VkDescriptorPool descriptorPool,
                                      VkDescriptorPoolResetFlags flags) {
  auto layer_data = GetDeviceLayerData(DataKey(device));
  PFN_vkResetDescriptorPool pfn =
      layer_data->dispatch_table.ResetDescriptorPool;

  VkResult result = VK_SUCCESS;
  if (pfn) {

    result = pfn(device, descriptorPool, flags);
  }

  return result;
}

VkResult InterceptAllocateDescriptorSets(
    VkDevice device, const VkDescriptorSetAllocateInfo *pAllocateInfo,
    VkDescriptorSet *pDescriptorSets) {
  auto layer_data = GetDeviceLayerData(DataKey(device));
  PFN_vkAllocateDescriptorSets pfn =
      layer_data->dispatch_table.AllocateDescriptorSets;

  VkResult result = VK_SUCCESS;
  if (pfn) {

    result = pfn(device, pAllocateInfo, pDescriptorSets);
  }

  return result;
}

VkResult InterceptFreeDescriptorSets(VkDevice device,
                                     VkDescriptorPool descriptorPool,
                                     uint32_t descriptorSetCount,
                                     const VkDescriptorSet *pDescriptorSets) {
  auto layer_data = GetDeviceLayerData(DataKey(device));
  PFN_vkFreeDescriptorSets pfn = layer_data->dispatch_table.FreeDescriptorSets;

  VkResult result = VK_SUCCESS;
  if (pfn) {

    result = pfn(device, descriptorPool, descriptorSetCount, pDescriptorSets);
  }

  return result;
}

void InterceptUpdateDescriptorSets(
    VkDevice device, uint32_t descriptorWriteCount,
    const VkWriteDescriptorSet *pDescriptorWrites, uint32_t descriptorCopyCount,
    const VkCopyDescriptorSet *pDescriptorCopies) {
  auto layer_data = GetDeviceLayerData(DataKey(device));
  PFN_vkUpdateDescriptorSets pfn =
      layer_data->dispatch_table.UpdateDescriptorSets;
  if (pfn) {
    pfn(device, descriptorWriteCount, pDescriptorWrites, descriptorCopyCount,
        pDescriptorCopies);
  }
}

VkResult InterceptCreateFramebuffer(VkDevice device,
                                    const VkFramebufferCreateInfo *pCreateInfo,
                                    const VkAllocationCallbacks *pAllocator,
                                    VkFramebuffer *pFramebuffer) {
  auto layer_data = GetDeviceLayerData(DataKey(device));
  PFN_vkCreateFramebuffer pfn = layer_data->dispatch_table.CreateFramebuffer;

  VkResult result = VK_SUCCESS;
  if (pfn) {

    result = pfn(device, pCreateInfo, pAllocator, pFramebuffer);
  }

  return result;
}

void InterceptDestroyFramebuffer(VkDevice device, VkFramebuffer framebuffer,
                                 const VkAllocationCallbacks *pAllocator) {
  auto layer_data = GetDeviceLayerData(DataKey(device));
  PFN_vkDestroyFramebuffer pfn = layer_data->dispatch_table.DestroyFramebuffer;
  if (pfn) {
    pfn(device, framebuffer, pAllocator);
  }
}

VkResult InterceptCreateRenderPass(VkDevice device,
                                   const VkRenderPassCreateInfo *pCreateInfo,
                                   const VkAllocationCallbacks *pAllocator,
                                   VkRenderPass *pRenderPass) {
  auto layer_data = GetDeviceLayerData(DataKey(device));
  PFN_vkCreateRenderPass pfn = layer_data->dispatch_table.CreateRenderPass;

  VkResult result = VK_SUCCESS;
  if (pfn) {

    result = pfn(device, pCreateInfo, pAllocator, pRenderPass);
  }

  return result;
}

void InterceptDestroyRenderPass(VkDevice device, VkRenderPass renderPass,
                                const VkAllocationCallbacks *pAllocator) {
  auto layer_data = GetDeviceLayerData(DataKey(device));
  PFN_vkDestroyRenderPass pfn = layer_data->dispatch_table.DestroyRenderPass;
  if (pfn) {
    pfn(device, renderPass, pAllocator);
  }
}

void InterceptGetRenderAreaGranularity(VkDevice device, VkRenderPass renderPass,
                                       VkExtent2D *pGranularity) {
  auto layer_data = GetDeviceLayerData(DataKey(device));
  PFN_vkGetRenderAreaGranularity pfn =
      layer_data->dispatch_table.GetRenderAreaGranularity;
  if (pfn) {
    pfn(device, renderPass, pGranularity);
  }
}

VkResult InterceptCreateCommandPool(VkDevice device,
                                    const VkCommandPoolCreateInfo *pCreateInfo,
                                    const VkAllocationCallbacks *pAllocator,
                                    VkCommandPool *pCommandPool) {
  auto layer_data = GetDeviceLayerData(DataKey(device));
  PFN_vkCreateCommandPool pfn = layer_data->dispatch_table.CreateCommandPool;

  VkResult result = VK_SUCCESS;
  if (pfn) {

    result = pfn(device, pCreateInfo, pAllocator, pCommandPool);
  }

  result = InterceptPostCreateCommandPool(device, pCreateInfo, pAllocator,
                                          pCommandPool, result);

  return result;
}

void InterceptDestroyCommandPool(VkDevice device, VkCommandPool commandPool,
                                 const VkAllocationCallbacks *pAllocator) {
  InterceptPreDestroyCommandPool(device, commandPool, pAllocator);

  auto layer_data = GetDeviceLayerData(DataKey(device));
  PFN_vkDestroyCommandPool pfn = layer_data->dispatch_table.DestroyCommandPool;
  if (pfn) {
    pfn(device, commandPool, pAllocator);
  }

  InterceptPostDestroyCommandPool(device, commandPool, pAllocator);
}

VkResult InterceptResetCommandPool(VkDevice device, VkCommandPool commandPool,
                                   VkCommandPoolResetFlags flags) {
  InterceptPreResetCommandPool(device, commandPool, flags);

  auto layer_data = GetDeviceLayerData(DataKey(device));
  PFN_vkResetCommandPool pfn = layer_data->dispatch_table.ResetCommandPool;

  VkResult result = VK_SUCCESS;
  if (pfn) {

    result = pfn(device, commandPool, flags);
  }

  result = InterceptPostResetCommandPool(device, commandPool, flags, result);

  return result;
}

VkResult InterceptAllocateCommandBuffers(
    VkDevice device, const VkCommandBufferAllocateInfo *pAllocateInfo,
    VkCommandBuffer *pCommandBuffers) {
  auto layer_data = GetDeviceLayerData(DataKey(device));
  PFN_vkAllocateCommandBuffers pfn =
      layer_data->dispatch_table.AllocateCommandBuffers;

  VkResult result = VK_SUCCESS;
  if (pfn) {

    result = pfn(device, pAllocateInfo, pCommandBuffers);
  }

  result = InterceptPostAllocateCommandBuffers(device, pAllocateInfo,
                                               pCommandBuffers, result);

  return result;
}

void InterceptFreeCommandBuffers(VkDevice device, VkCommandPool commandPool,
                                 uint32_t commandBufferCount,
                                 const VkCommandBuffer *pCommandBuffers) {
  auto layer_data = GetDeviceLayerData(DataKey(device));
  PFN_vkFreeCommandBuffers pfn = layer_data->dispatch_table.FreeCommandBuffers;
  if (pfn) {
    pfn(device, commandPool, commandBufferCount, pCommandBuffers);
  }

  InterceptPostFreeCommandBuffers(device, commandPool, commandBufferCount,
                                  pCommandBuffers);
}

VkResult
InterceptBeginCommandBuffer(VkCommandBuffer commandBuffer,
                            const VkCommandBufferBeginInfo *pBeginInfo) {
  InterceptPreBeginCommandBuffer(commandBuffer, pBeginInfo);

  auto layer_data = GetDeviceLayerData(DataKey(commandBuffer));
  PFN_vkBeginCommandBuffer pfn = layer_data->dispatch_table.BeginCommandBuffer;

  VkResult result = VK_SUCCESS;
  if (pfn) {

    result = pfn(commandBuffer, pBeginInfo);
  }

  result = InterceptPostBeginCommandBuffer(commandBuffer, pBeginInfo, result);

  return result;
}

VkResult InterceptEndCommandBuffer(VkCommandBuffer commandBuffer) {
  InterceptPreEndCommandBuffer(commandBuffer);

  auto layer_data = GetDeviceLayerData(DataKey(commandBuffer));
  PFN_vkEndCommandBuffer pfn = layer_data->dispatch_table.EndCommandBuffer;

  VkResult result = VK_SUCCESS;
  if (pfn) {

    result = pfn(commandBuffer);
  }

  result = InterceptPostEndCommandBuffer(commandBuffer, result);

  return result;
}

VkResult InterceptResetCommandBuffer(VkCommandBuffer commandBuffer,
                                     VkCommandBufferResetFlags flags) {
  InterceptPreResetCommandBuffer(commandBuffer, flags);

  auto layer_data = GetDeviceLayerData(DataKey(commandBuffer));
  PFN_vkResetCommandBuffer pfn = layer_data->dispatch_table.ResetCommandBuffer;

  VkResult result = VK_SUCCESS;
  if (pfn) {

    result = pfn(commandBuffer, flags);
  }

  result = InterceptPostResetCommandBuffer(commandBuffer, flags, result);

  return result;
}

void InterceptCmdBindPipeline(VkCommandBuffer commandBuffer,
                              VkPipelineBindPoint pipelineBindPoint,
                              VkPipeline pipeline) {
  InterceptPreCmdBindPipeline(commandBuffer, pipelineBindPoint, pipeline);

  auto layer_data = GetDeviceLayerData(DataKey(commandBuffer));
  PFN_vkCmdBindPipeline pfn = layer_data->dispatch_table.CmdBindPipeline;
  if (pfn) {
    pfn(commandBuffer, pipelineBindPoint, pipeline);
  }

  InterceptPostCmdBindPipeline(commandBuffer, pipelineBindPoint, pipeline);
}

void InterceptCmdSetViewport(VkCommandBuffer commandBuffer,
                             uint32_t firstViewport, uint32_t viewportCount,
                             const VkViewport *pViewports) {
  InterceptPreCmdSetViewport(commandBuffer, firstViewport, viewportCount,
                             pViewports);

  auto layer_data = GetDeviceLayerData(DataKey(commandBuffer));
  PFN_vkCmdSetViewport pfn = layer_data->dispatch_table.CmdSetViewport;
  if (pfn) {
    pfn(commandBuffer, firstViewport, viewportCount, pViewports);
  }

  InterceptPostCmdSetViewport(commandBuffer, firstViewport, viewportCount,
                              pViewports);
}

void InterceptCmdSetScissor(VkCommandBuffer commandBuffer,
                            uint32_t firstScissor, uint32_t scissorCount,
                            const VkRect2D *pScissors) {
  InterceptPreCmdSetScissor(commandBuffer, firstScissor, scissorCount,
                            pScissors);

  auto layer_data = GetDeviceLayerData(DataKey(commandBuffer));
  PFN_vkCmdSetScissor pfn = layer_data->dispatch_table.CmdSetScissor;
  if (pfn) {
    pfn(commandBuffer, firstScissor, scissorCount, pScissors);
  }

  InterceptPostCmdSetScissor(commandBuffer, firstScissor, scissorCount,
                             pScissors);
}

void InterceptCmdSetLineWidth(VkCommandBuffer commandBuffer, float lineWidth) {
  InterceptPreCmdSetLineWidth(commandBuffer, lineWidth);

  auto layer_data = GetDeviceLayerData(DataKey(commandBuffer));
  PFN_vkCmdSetLineWidth pfn = layer_data->dispatch_table.CmdSetLineWidth;
  if (pfn) {
    pfn(commandBuffer, lineWidth);
  }

  InterceptPostCmdSetLineWidth(commandBuffer, lineWidth);
}

void InterceptCmdSetDepthBias(VkCommandBuffer commandBuffer,
                              float depthBiasConstantFactor,
                              float depthBiasClamp,
                              float depthBiasSlopeFactor) {
  InterceptPreCmdSetDepthBias(commandBuffer, depthBiasConstantFactor,
                              depthBiasClamp, depthBiasSlopeFactor);

  auto layer_data = GetDeviceLayerData(DataKey(commandBuffer));
  PFN_vkCmdSetDepthBias pfn = layer_data->dispatch_table.CmdSetDepthBias;
  if (pfn) {
    pfn(commandBuffer, depthBiasConstantFactor, depthBiasClamp,
        depthBiasSlopeFactor);
  }

  InterceptPostCmdSetDepthBias(commandBuffer, depthBiasConstantFactor,
                               depthBiasClamp, depthBiasSlopeFactor);
}

void InterceptCmdSetBlendConstants(VkCommandBuffer commandBuffer,
                                   const float blendConstants[4]) {
  InterceptPreCmdSetBlendConstants(commandBuffer, blendConstants);

  auto layer_data = GetDeviceLayerData(DataKey(commandBuffer));
  PFN_vkCmdSetBlendConstants pfn =
      layer_data->dispatch_table.CmdSetBlendConstants;
  if (pfn) {
    pfn(commandBuffer, blendConstants);
  }

  InterceptPostCmdSetBlendConstants(commandBuffer, blendConstants);
}

void InterceptCmdSetDepthBounds(VkCommandBuffer commandBuffer,
                                float minDepthBounds, float maxDepthBounds) {
  InterceptPreCmdSetDepthBounds(commandBuffer, minDepthBounds, maxDepthBounds);

  auto layer_data = GetDeviceLayerData(DataKey(commandBuffer));
  PFN_vkCmdSetDepthBounds pfn = layer_data->dispatch_table.CmdSetDepthBounds;
  if (pfn) {
    pfn(commandBuffer, minDepthBounds, maxDepthBounds);
  }

  InterceptPostCmdSetDepthBounds(commandBuffer, minDepthBounds, maxDepthBounds);
}

void InterceptCmdSetStencilCompareMask(VkCommandBuffer commandBuffer,
                                       VkStencilFaceFlags faceMask,
                                       uint32_t compareMask) {
  InterceptPreCmdSetStencilCompareMask(commandBuffer, faceMask, compareMask);

  auto layer_data = GetDeviceLayerData(DataKey(commandBuffer));
  PFN_vkCmdSetStencilCompareMask pfn =
      layer_data->dispatch_table.CmdSetStencilCompareMask;
  if (pfn) {
    pfn(commandBuffer, faceMask, compareMask);
  }

  InterceptPostCmdSetStencilCompareMask(commandBuffer, faceMask, compareMask);
}

void InterceptCmdSetStencilWriteMask(VkCommandBuffer commandBuffer,
                                     VkStencilFaceFlags faceMask,
                                     uint32_t writeMask) {
  InterceptPreCmdSetStencilWriteMask(commandBuffer, faceMask, writeMask);

  auto layer_data = GetDeviceLayerData(DataKey(commandBuffer));
  PFN_vkCmdSetStencilWriteMask pfn =
      layer_data->dispatch_table.CmdSetStencilWriteMask;
  if (pfn) {
    pfn(commandBuffer, faceMask, writeMask);
  }

  InterceptPostCmdSetStencilWriteMask(commandBuffer, faceMask, writeMask);
}

void InterceptCmdSetStencilReference(VkCommandBuffer commandBuffer,
                                     VkStencilFaceFlags faceMask,
                                     uint32_t reference) {
  InterceptPreCmdSetStencilReference(commandBuffer, faceMask, reference);

  auto layer_data = GetDeviceLayerData(DataKey(commandBuffer));
  PFN_vkCmdSetStencilReference pfn =
      layer_data->dispatch_table.CmdSetStencilReference;
  if (pfn) {
    pfn(commandBuffer, faceMask, reference);
  }

  InterceptPostCmdSetStencilReference(commandBuffer, faceMask, reference);
}

void InterceptCmdBindDescriptorSets(VkCommandBuffer commandBuffer,
                                    VkPipelineBindPoint pipelineBindPoint,
                                    VkPipelineLayout layout, uint32_t firstSet,
                                    uint32_t descriptorSetCount,
                                    const VkDescriptorSet *pDescriptorSets,
                                    uint32_t dynamicOffsetCount,
                                    const uint32_t *pDynamicOffsets) {
  InterceptPreCmdBindDescriptorSets(
      commandBuffer, pipelineBindPoint, layout, firstSet, descriptorSetCount,
      pDescriptorSets, dynamicOffsetCount, pDynamicOffsets);

  auto layer_data = GetDeviceLayerData(DataKey(commandBuffer));
  PFN_vkCmdBindDescriptorSets pfn =
      layer_data->dispatch_table.CmdBindDescriptorSets;
  if (pfn) {
    pfn(commandBuffer, pipelineBindPoint, layout, firstSet, descriptorSetCount,
        pDescriptorSets, dynamicOffsetCount, pDynamicOffsets);
  }

  InterceptPostCmdBindDescriptorSets(
      commandBuffer, pipelineBindPoint, layout, firstSet, descriptorSetCount,
      pDescriptorSets, dynamicOffsetCount, pDynamicOffsets);
}

void InterceptCmdBindIndexBuffer(VkCommandBuffer commandBuffer, VkBuffer buffer,
                                 VkDeviceSize offset, VkIndexType indexType) {
  InterceptPreCmdBindIndexBuffer(commandBuffer, buffer, offset, indexType);

  auto layer_data = GetDeviceLayerData(DataKey(commandBuffer));
  PFN_vkCmdBindIndexBuffer pfn = layer_data->dispatch_table.CmdBindIndexBuffer;
  if (pfn) {
    pfn(commandBuffer, buffer, offset, indexType);
  }

  InterceptPostCmdBindIndexBuffer(commandBuffer, buffer, offset, indexType);
}

void InterceptCmdBindVertexBuffers(VkCommandBuffer commandBuffer,
                                   uint32_t firstBinding, uint32_t bindingCount,
                                   const VkBuffer *pBuffers,
                                   const VkDeviceSize *pOffsets) {
  InterceptPreCmdBindVertexBuffers(commandBuffer, firstBinding, bindingCount,
                                   pBuffers, pOffsets);

  auto layer_data = GetDeviceLayerData(DataKey(commandBuffer));
  PFN_vkCmdBindVertexBuffers pfn =
      layer_data->dispatch_table.CmdBindVertexBuffers;
  if (pfn) {
    pfn(commandBuffer, firstBinding, bindingCount, pBuffers, pOffsets);
  }

  InterceptPostCmdBindVertexBuffers(commandBuffer, firstBinding, bindingCount,
                                    pBuffers, pOffsets);
}

void InterceptCmdDraw(VkCommandBuffer commandBuffer, uint32_t vertexCount,
                      uint32_t instanceCount, uint32_t firstVertex,
                      uint32_t firstInstance) {
  InterceptPreCmdDraw(commandBuffer, vertexCount, instanceCount, firstVertex,
                      firstInstance);

  auto layer_data = GetDeviceLayerData(DataKey(commandBuffer));
  PFN_vkCmdDraw pfn = layer_data->dispatch_table.CmdDraw;
  if (pfn) {
    pfn(commandBuffer, vertexCount, instanceCount, firstVertex, firstInstance);
  }

  InterceptPostCmdDraw(commandBuffer, vertexCount, instanceCount, firstVertex,
                       firstInstance);
}

void InterceptCmdDrawIndexed(VkCommandBuffer commandBuffer, uint32_t indexCount,
                             uint32_t instanceCount, uint32_t firstIndex,
                             int32_t vertexOffset, uint32_t firstInstance) {
  InterceptPreCmdDrawIndexed(commandBuffer, indexCount, instanceCount,
                             firstIndex, vertexOffset, firstInstance);

  auto layer_data = GetDeviceLayerData(DataKey(commandBuffer));
  PFN_vkCmdDrawIndexed pfn = layer_data->dispatch_table.CmdDrawIndexed;
  if (pfn) {
    pfn(commandBuffer, indexCount, instanceCount, firstIndex, vertexOffset,
        firstInstance);
  }

  InterceptPostCmdDrawIndexed(commandBuffer, indexCount, instanceCount,
                              firstIndex, vertexOffset, firstInstance);
}

void InterceptCmdDrawIndirect(VkCommandBuffer commandBuffer, VkBuffer buffer,
                              VkDeviceSize offset, uint32_t drawCount,
                              uint32_t stride) {
  InterceptPreCmdDrawIndirect(commandBuffer, buffer, offset, drawCount, stride);

  auto layer_data = GetDeviceLayerData(DataKey(commandBuffer));
  PFN_vkCmdDrawIndirect pfn = layer_data->dispatch_table.CmdDrawIndirect;
  if (pfn) {
    pfn(commandBuffer, buffer, offset, drawCount, stride);
  }

  InterceptPostCmdDrawIndirect(commandBuffer, buffer, offset, drawCount,
                               stride);
}

void InterceptCmdDrawIndexedIndirect(VkCommandBuffer commandBuffer,
                                     VkBuffer buffer, VkDeviceSize offset,
                                     uint32_t drawCount, uint32_t stride) {
  InterceptPreCmdDrawIndexedIndirect(commandBuffer, buffer, offset, drawCount,
                                     stride);

  auto layer_data = GetDeviceLayerData(DataKey(commandBuffer));
  PFN_vkCmdDrawIndexedIndirect pfn =
      layer_data->dispatch_table.CmdDrawIndexedIndirect;
  if (pfn) {
    pfn(commandBuffer, buffer, offset, drawCount, stride);
  }

  InterceptPostCmdDrawIndexedIndirect(commandBuffer, buffer, offset, drawCount,
                                      stride);
}

void InterceptCmdDispatch(VkCommandBuffer commandBuffer, uint32_t groupCountX,
                          uint32_t groupCountY, uint32_t groupCountZ) {
  InterceptPreCmdDispatch(commandBuffer, groupCountX, groupCountY, groupCountZ);

  auto layer_data = GetDeviceLayerData(DataKey(commandBuffer));
  PFN_vkCmdDispatch pfn = layer_data->dispatch_table.CmdDispatch;
  if (pfn) {
    pfn(commandBuffer, groupCountX, groupCountY, groupCountZ);
  }

  InterceptPostCmdDispatch(commandBuffer, groupCountX, groupCountY,
                           groupCountZ);
}

void InterceptCmdDispatchIndirect(VkCommandBuffer commandBuffer,
                                  VkBuffer buffer, VkDeviceSize offset) {
  InterceptPreCmdDispatchIndirect(commandBuffer, buffer, offset);

  auto layer_data = GetDeviceLayerData(DataKey(commandBuffer));
  PFN_vkCmdDispatchIndirect pfn =
      layer_data->dispatch_table.CmdDispatchIndirect;
  if (pfn) {
    pfn(commandBuffer, buffer, offset);
  }

  InterceptPostCmdDispatchIndirect(commandBuffer, buffer, offset);
}

void InterceptCmdCopyBuffer(VkCommandBuffer commandBuffer, VkBuffer srcBuffer,
                            VkBuffer dstBuffer, uint32_t regionCount,
                            const VkBufferCopy *pRegions) {
  InterceptPreCmdCopyBuffer(commandBuffer, srcBuffer, dstBuffer, regionCount,
                            pRegions);

  auto layer_data = GetDeviceLayerData(DataKey(commandBuffer));
  PFN_vkCmdCopyBuffer pfn = layer_data->dispatch_table.CmdCopyBuffer;
  if (pfn) {
    pfn(commandBuffer, srcBuffer, dstBuffer, regionCount, pRegions);
  }

  InterceptPostCmdCopyBuffer(commandBuffer, srcBuffer, dstBuffer, regionCount,
                             pRegions);
}

void InterceptCmdCopyImage(VkCommandBuffer commandBuffer, VkImage srcImage,
                           VkImageLayout srcImageLayout, VkImage dstImage,
                           VkImageLayout dstImageLayout, uint32_t regionCount,
                           const VkImageCopy *pRegions) {
  InterceptPreCmdCopyImage(commandBuffer, srcImage, srcImageLayout, dstImage,
                           dstImageLayout, regionCount, pRegions);

  auto layer_data = GetDeviceLayerData(DataKey(commandBuffer));
  PFN_vkCmdCopyImage pfn = layer_data->dispatch_table.CmdCopyImage;
  if (pfn) {
    pfn(commandBuffer, srcImage, srcImageLayout, dstImage, dstImageLayout,
        regionCount, pRegions);
  }

  InterceptPostCmdCopyImage(commandBuffer, srcImage, srcImageLayout, dstImage,
                            dstImageLayout, regionCount, pRegions);
}

void InterceptCmdBlitImage(VkCommandBuffer commandBuffer, VkImage srcImage,
                           VkImageLayout srcImageLayout, VkImage dstImage,
                           VkImageLayout dstImageLayout, uint32_t regionCount,
                           const VkImageBlit *pRegions, VkFilter filter) {
  InterceptPreCmdBlitImage(commandBuffer, srcImage, srcImageLayout, dstImage,
                           dstImageLayout, regionCount, pRegions, filter);

  auto layer_data = GetDeviceLayerData(DataKey(commandBuffer));
  PFN_vkCmdBlitImage pfn = layer_data->dispatch_table.CmdBlitImage;
  if (pfn) {
    pfn(commandBuffer, srcImage, srcImageLayout, dstImage, dstImageLayout,
        regionCount, pRegions, filter);
  }

  InterceptPostCmdBlitImage(commandBuffer, srcImage, srcImageLayout, dstImage,
                            dstImageLayout, regionCount, pRegions, filter);
}

void InterceptCmdCopyBufferToImage(VkCommandBuffer commandBuffer,
                                   VkBuffer srcBuffer, VkImage dstImage,
                                   VkImageLayout dstImageLayout,
                                   uint32_t regionCount,
                                   const VkBufferImageCopy *pRegions) {
  InterceptPreCmdCopyBufferToImage(commandBuffer, srcBuffer, dstImage,
                                   dstImageLayout, regionCount, pRegions);

  auto layer_data = GetDeviceLayerData(DataKey(commandBuffer));
  PFN_vkCmdCopyBufferToImage pfn =
      layer_data->dispatch_table.CmdCopyBufferToImage;
  if (pfn) {
    pfn(commandBuffer, srcBuffer, dstImage, dstImageLayout, regionCount,
        pRegions);
  }

  InterceptPostCmdCopyBufferToImage(commandBuffer, srcBuffer, dstImage,
                                    dstImageLayout, regionCount, pRegions);
}

void InterceptCmdCopyImageToBuffer(VkCommandBuffer commandBuffer,
                                   VkImage srcImage,
                                   VkImageLayout srcImageLayout,
                                   VkBuffer dstBuffer, uint32_t regionCount,
                                   const VkBufferImageCopy *pRegions) {
  InterceptPreCmdCopyImageToBuffer(commandBuffer, srcImage, srcImageLayout,
                                   dstBuffer, regionCount, pRegions);

  auto layer_data = GetDeviceLayerData(DataKey(commandBuffer));
  PFN_vkCmdCopyImageToBuffer pfn =
      layer_data->dispatch_table.CmdCopyImageToBuffer;
  if (pfn) {
    pfn(commandBuffer, srcImage, srcImageLayout, dstBuffer, regionCount,
        pRegions);
  }

  InterceptPostCmdCopyImageToBuffer(commandBuffer, srcImage, srcImageLayout,
                                    dstBuffer, regionCount, pRegions);
}

void InterceptCmdUpdateBuffer(VkCommandBuffer commandBuffer, VkBuffer dstBuffer,
                              VkDeviceSize dstOffset, VkDeviceSize dataSize,
                              const void *pData) {
  InterceptPreCmdUpdateBuffer(commandBuffer, dstBuffer, dstOffset, dataSize,
                              pData);

  auto layer_data = GetDeviceLayerData(DataKey(commandBuffer));
  PFN_vkCmdUpdateBuffer pfn = layer_data->dispatch_table.CmdUpdateBuffer;
  if (pfn) {
    pfn(commandBuffer, dstBuffer, dstOffset, dataSize, pData);
  }

  InterceptPostCmdUpdateBuffer(commandBuffer, dstBuffer, dstOffset, dataSize,
                               pData);
}

void InterceptCmdFillBuffer(VkCommandBuffer commandBuffer, VkBuffer dstBuffer,
                            VkDeviceSize dstOffset, VkDeviceSize size,
                            uint32_t data) {
  InterceptPreCmdFillBuffer(commandBuffer, dstBuffer, dstOffset, size, data);

  auto layer_data = GetDeviceLayerData(DataKey(commandBuffer));
  PFN_vkCmdFillBuffer pfn = layer_data->dispatch_table.CmdFillBuffer;
  if (pfn) {
    pfn(commandBuffer, dstBuffer, dstOffset, size, data);
  }

  InterceptPostCmdFillBuffer(commandBuffer, dstBuffer, dstOffset, size, data);
}

void InterceptCmdClearColorImage(VkCommandBuffer commandBuffer, VkImage image,
                                 VkImageLayout imageLayout,
                                 const VkClearColorValue *pColor,
                                 uint32_t rangeCount,
                                 const VkImageSubresourceRange *pRanges) {
  InterceptPreCmdClearColorImage(commandBuffer, image, imageLayout, pColor,
                                 rangeCount, pRanges);

  auto layer_data = GetDeviceLayerData(DataKey(commandBuffer));
  PFN_vkCmdClearColorImage pfn = layer_data->dispatch_table.CmdClearColorImage;
  if (pfn) {
    pfn(commandBuffer, image, imageLayout, pColor, rangeCount, pRanges);
  }

  InterceptPostCmdClearColorImage(commandBuffer, image, imageLayout, pColor,
                                  rangeCount, pRanges);
}

void InterceptCmdClearDepthStencilImage(
    VkCommandBuffer commandBuffer, VkImage image, VkImageLayout imageLayout,
    const VkClearDepthStencilValue *pDepthStencil, uint32_t rangeCount,
    const VkImageSubresourceRange *pRanges) {
  InterceptPreCmdClearDepthStencilImage(commandBuffer, image, imageLayout,
                                        pDepthStencil, rangeCount, pRanges);

  auto layer_data = GetDeviceLayerData(DataKey(commandBuffer));
  PFN_vkCmdClearDepthStencilImage pfn =
      layer_data->dispatch_table.CmdClearDepthStencilImage;
  if (pfn) {
    pfn(commandBuffer, image, imageLayout, pDepthStencil, rangeCount, pRanges);
  }

  InterceptPostCmdClearDepthStencilImage(commandBuffer, image, imageLayout,
                                         pDepthStencil, rangeCount, pRanges);
}

void InterceptCmdClearAttachments(VkCommandBuffer commandBuffer,
                                  uint32_t attachmentCount,
                                  const VkClearAttachment *pAttachments,
                                  uint32_t rectCount,
                                  const VkClearRect *pRects) {
  InterceptPreCmdClearAttachments(commandBuffer, attachmentCount, pAttachments,
                                  rectCount, pRects);

  auto layer_data = GetDeviceLayerData(DataKey(commandBuffer));
  PFN_vkCmdClearAttachments pfn =
      layer_data->dispatch_table.CmdClearAttachments;
  if (pfn) {
    pfn(commandBuffer, attachmentCount, pAttachments, rectCount, pRects);
  }

  InterceptPostCmdClearAttachments(commandBuffer, attachmentCount, pAttachments,
                                   rectCount, pRects);
}

void InterceptCmdResolveImage(VkCommandBuffer commandBuffer, VkImage srcImage,
                              VkImageLayout srcImageLayout, VkImage dstImage,
                              VkImageLayout dstImageLayout,
                              uint32_t regionCount,
                              const VkImageResolve *pRegions) {
  InterceptPreCmdResolveImage(commandBuffer, srcImage, srcImageLayout, dstImage,
                              dstImageLayout, regionCount, pRegions);

  auto layer_data = GetDeviceLayerData(DataKey(commandBuffer));
  PFN_vkCmdResolveImage pfn = layer_data->dispatch_table.CmdResolveImage;
  if (pfn) {
    pfn(commandBuffer, srcImage, srcImageLayout, dstImage, dstImageLayout,
        regionCount, pRegions);
  }

  InterceptPostCmdResolveImage(commandBuffer, srcImage, srcImageLayout,
                               dstImage, dstImageLayout, regionCount, pRegions);
}

void InterceptCmdSetEvent(VkCommandBuffer commandBuffer, VkEvent event,
                          VkPipelineStageFlags stageMask) {
  InterceptPreCmdSetEvent(commandBuffer, event, stageMask);

  auto layer_data = GetDeviceLayerData(DataKey(commandBuffer));
  PFN_vkCmdSetEvent pfn = layer_data->dispatch_table.CmdSetEvent;
  if (pfn) {
    pfn(commandBuffer, event, stageMask);
  }

  InterceptPostCmdSetEvent(commandBuffer, event, stageMask);
}

void InterceptCmdResetEvent(VkCommandBuffer commandBuffer, VkEvent event,
                            VkPipelineStageFlags stageMask) {
  InterceptPreCmdResetEvent(commandBuffer, event, stageMask);

  auto layer_data = GetDeviceLayerData(DataKey(commandBuffer));
  PFN_vkCmdResetEvent pfn = layer_data->dispatch_table.CmdResetEvent;
  if (pfn) {
    pfn(commandBuffer, event, stageMask);
  }

  InterceptPostCmdResetEvent(commandBuffer, event, stageMask);
}

void InterceptCmdWaitEvents(VkCommandBuffer commandBuffer, uint32_t eventCount,
                            const VkEvent *pEvents,
                            VkPipelineStageFlags srcStageMask,
                            VkPipelineStageFlags dstStageMask,
                            uint32_t memoryBarrierCount,
                            const VkMemoryBarrier *pMemoryBarriers,
                            uint32_t bufferMemoryBarrierCount,
                            const VkBufferMemoryBarrier *pBufferMemoryBarriers,
                            uint32_t imageMemoryBarrierCount,
                            const VkImageMemoryBarrier *pImageMemoryBarriers) {
  InterceptPreCmdWaitEvents(commandBuffer, eventCount, pEvents, srcStageMask,
                            dstStageMask, memoryBarrierCount, pMemoryBarriers,
                            bufferMemoryBarrierCount, pBufferMemoryBarriers,
                            imageMemoryBarrierCount, pImageMemoryBarriers);

  auto layer_data = GetDeviceLayerData(DataKey(commandBuffer));
  PFN_vkCmdWaitEvents pfn = layer_data->dispatch_table.CmdWaitEvents;
  if (pfn) {
    pfn(commandBuffer, eventCount, pEvents, srcStageMask, dstStageMask,
        memoryBarrierCount, pMemoryBarriers, bufferMemoryBarrierCount,
        pBufferMemoryBarriers, imageMemoryBarrierCount, pImageMemoryBarriers);
  }

  InterceptPostCmdWaitEvents(commandBuffer, eventCount, pEvents, srcStageMask,
                             dstStageMask, memoryBarrierCount, pMemoryBarriers,
                             bufferMemoryBarrierCount, pBufferMemoryBarriers,
                             imageMemoryBarrierCount, pImageMemoryBarriers);
}

void InterceptCmdPipelineBarrier(
    VkCommandBuffer commandBuffer, VkPipelineStageFlags srcStageMask,
    VkPipelineStageFlags dstStageMask, VkDependencyFlags dependencyFlags,
    uint32_t memoryBarrierCount, const VkMemoryBarrier *pMemoryBarriers,
    uint32_t bufferMemoryBarrierCount,
    const VkBufferMemoryBarrier *pBufferMemoryBarriers,
    uint32_t imageMemoryBarrierCount,
    const VkImageMemoryBarrier *pImageMemoryBarriers) {
  InterceptPreCmdPipelineBarrier(
      commandBuffer, srcStageMask, dstStageMask, dependencyFlags,
      memoryBarrierCount, pMemoryBarriers, bufferMemoryBarrierCount,
      pBufferMemoryBarriers, imageMemoryBarrierCount, pImageMemoryBarriers);

  auto layer_data = GetDeviceLayerData(DataKey(commandBuffer));
  PFN_vkCmdPipelineBarrier pfn = layer_data->dispatch_table.CmdPipelineBarrier;
  if (pfn) {
    pfn(commandBuffer, srcStageMask, dstStageMask, dependencyFlags,
        memoryBarrierCount, pMemoryBarriers, bufferMemoryBarrierCount,
        pBufferMemoryBarriers, imageMemoryBarrierCount, pImageMemoryBarriers);
  }

  InterceptPostCmdPipelineBarrier(
      commandBuffer, srcStageMask, dstStageMask, dependencyFlags,
      memoryBarrierCount, pMemoryBarriers, bufferMemoryBarrierCount,
      pBufferMemoryBarriers, imageMemoryBarrierCount, pImageMemoryBarriers);
}

void InterceptCmdBeginQuery(VkCommandBuffer commandBuffer,
                            VkQueryPool queryPool, uint32_t query,
                            VkQueryControlFlags flags) {
  InterceptPreCmdBeginQuery(commandBuffer, queryPool, query, flags);

  auto layer_data = GetDeviceLayerData(DataKey(commandBuffer));
  PFN_vkCmdBeginQuery pfn = layer_data->dispatch_table.CmdBeginQuery;
  if (pfn) {
    pfn(commandBuffer, queryPool, query, flags);
  }

  InterceptPostCmdBeginQuery(commandBuffer, queryPool, query, flags);
}

void InterceptCmdEndQuery(VkCommandBuffer commandBuffer, VkQueryPool queryPool,
                          uint32_t query) {
  InterceptPreCmdEndQuery(commandBuffer, queryPool, query);

  auto layer_data = GetDeviceLayerData(DataKey(commandBuffer));
  PFN_vkCmdEndQuery pfn = layer_data->dispatch_table.CmdEndQuery;
  if (pfn) {
    pfn(commandBuffer, queryPool, query);
  }

  InterceptPostCmdEndQuery(commandBuffer, queryPool, query);
}

void InterceptCmdResetQueryPool(VkCommandBuffer commandBuffer,
                                VkQueryPool queryPool, uint32_t firstQuery,
                                uint32_t queryCount) {
  InterceptPreCmdResetQueryPool(commandBuffer, queryPool, firstQuery,
                                queryCount);

  auto layer_data = GetDeviceLayerData(DataKey(commandBuffer));
  PFN_vkCmdResetQueryPool pfn = layer_data->dispatch_table.CmdResetQueryPool;
  if (pfn) {
    pfn(commandBuffer, queryPool, firstQuery, queryCount);
  }

  InterceptPostCmdResetQueryPool(commandBuffer, queryPool, firstQuery,
                                 queryCount);
}

void InterceptCmdWriteTimestamp(VkCommandBuffer commandBuffer,
                                VkPipelineStageFlagBits pipelineStage,
                                VkQueryPool queryPool, uint32_t query) {
  InterceptPreCmdWriteTimestamp(commandBuffer, pipelineStage, queryPool, query);

  auto layer_data = GetDeviceLayerData(DataKey(commandBuffer));
  PFN_vkCmdWriteTimestamp pfn = layer_data->dispatch_table.CmdWriteTimestamp;
  if (pfn) {
    pfn(commandBuffer, pipelineStage, queryPool, query);
  }

  InterceptPostCmdWriteTimestamp(commandBuffer, pipelineStage, queryPool,
                                 query);
}

void InterceptCmdCopyQueryPoolResults(
    VkCommandBuffer commandBuffer, VkQueryPool queryPool, uint32_t firstQuery,
    uint32_t queryCount, VkBuffer dstBuffer, VkDeviceSize dstOffset,
    VkDeviceSize stride, VkQueryResultFlags flags) {
  InterceptPreCmdCopyQueryPoolResults(commandBuffer, queryPool, firstQuery,
                                      queryCount, dstBuffer, dstOffset, stride,
                                      flags);

  auto layer_data = GetDeviceLayerData(DataKey(commandBuffer));
  PFN_vkCmdCopyQueryPoolResults pfn =
      layer_data->dispatch_table.CmdCopyQueryPoolResults;
  if (pfn) {
    pfn(commandBuffer, queryPool, firstQuery, queryCount, dstBuffer, dstOffset,
        stride, flags);
  }

  InterceptPostCmdCopyQueryPoolResults(commandBuffer, queryPool, firstQuery,
                                       queryCount, dstBuffer, dstOffset, stride,
                                       flags);
}

void InterceptCmdPushConstants(VkCommandBuffer commandBuffer,
                               VkPipelineLayout layout,
                               VkShaderStageFlags stageFlags, uint32_t offset,
                               uint32_t size, const void *pValues) {
  InterceptPreCmdPushConstants(commandBuffer, layout, stageFlags, offset, size,
                               pValues);

  auto layer_data = GetDeviceLayerData(DataKey(commandBuffer));
  PFN_vkCmdPushConstants pfn = layer_data->dispatch_table.CmdPushConstants;
  if (pfn) {
    pfn(commandBuffer, layout, stageFlags, offset, size, pValues);
  }

  InterceptPostCmdPushConstants(commandBuffer, layout, stageFlags, offset, size,
                                pValues);
}

void InterceptCmdBeginRenderPass(VkCommandBuffer commandBuffer,
                                 const VkRenderPassBeginInfo *pRenderPassBegin,
                                 VkSubpassContents contents) {
  InterceptPreCmdBeginRenderPass(commandBuffer, pRenderPassBegin, contents);

  auto layer_data = GetDeviceLayerData(DataKey(commandBuffer));
  PFN_vkCmdBeginRenderPass pfn = layer_data->dispatch_table.CmdBeginRenderPass;
  if (pfn) {
    pfn(commandBuffer, pRenderPassBegin, contents);
  }

  InterceptPostCmdBeginRenderPass(commandBuffer, pRenderPassBegin, contents);
}

void InterceptCmdNextSubpass(VkCommandBuffer commandBuffer,
                             VkSubpassContents contents) {
  InterceptPreCmdNextSubpass(commandBuffer, contents);

  auto layer_data = GetDeviceLayerData(DataKey(commandBuffer));
  PFN_vkCmdNextSubpass pfn = layer_data->dispatch_table.CmdNextSubpass;
  if (pfn) {
    pfn(commandBuffer, contents);
  }

  InterceptPostCmdNextSubpass(commandBuffer, contents);
}

void InterceptCmdEndRenderPass(VkCommandBuffer commandBuffer) {
  InterceptPreCmdEndRenderPass(commandBuffer);

  auto layer_data = GetDeviceLayerData(DataKey(commandBuffer));
  PFN_vkCmdEndRenderPass pfn = layer_data->dispatch_table.CmdEndRenderPass;
  if (pfn) {
    pfn(commandBuffer);
  }

  InterceptPostCmdEndRenderPass(commandBuffer);
}

void InterceptCmdExecuteCommands(VkCommandBuffer commandBuffer,
                                 uint32_t commandBufferCount,
                                 const VkCommandBuffer *pCommandBuffers) {
  InterceptPreCmdExecuteCommands(commandBuffer, commandBufferCount,
                                 pCommandBuffers);

  auto layer_data = GetDeviceLayerData(DataKey(commandBuffer));
  PFN_vkCmdExecuteCommands pfn = layer_data->dispatch_table.CmdExecuteCommands;
  if (pfn) {
    pfn(commandBuffer, commandBufferCount, pCommandBuffers);
  }

  InterceptPostCmdExecuteCommands(commandBuffer, commandBufferCount,
                                  pCommandBuffers);
}

void InterceptGetDeviceQueue2(VkDevice device,
                              const VkDeviceQueueInfo2 *pQueueInfo,
                              VkQueue *pQueue) {
  auto layer_data = GetDeviceLayerData(DataKey(device));
  PFN_vkGetDeviceQueue2 pfn = layer_data->dispatch_table.GetDeviceQueue2;
  if (pfn) {
    pfn(device, pQueueInfo, pQueue);
  }
}

#ifdef VK_USE_PLATFORM_GGP
VkResult InterceptCreateStreamDescriptorSurfaceGGP(
    VkInstance instance,
    const VkStreamDescriptorSurfaceCreateInfoGGP *pCreateInfo,
    const VkAllocationCallbacks *pAllocator, VkSurfaceKHR *pSurface) {
  auto layer_data = GetInstanceLayerData(DataKey(instance));
  PFN_vkCreateStreamDescriptorSurfaceGGP pfn =
      layer_data->dispatch_table.CreateStreamDescriptorSurfaceGGP;

  VkResult result = VK_SUCCESS;
  if (pfn) {

    result = pfn(instance, pCreateInfo, pAllocator, pSurface);
  }

  return result;
}

#endif // VK_USE_PLATFORM_GGP

VKAPI_ATTR PFN_vkVoidFunction VKAPI_CALL
PassInstanceProcDownTheChain(VkInstance inst, const char *func) {
  // Get the instance data.
  auto id = GetInstanceLayerData(DataKey(inst));
  // Pass down the instance proc address call through the chain.
  return (PFN_vkVoidFunction)id->pfn_next_instance_proc_addr(inst, func);
}

VKAPI_ATTR PFN_vkVoidFunction VKAPI_CALL
PassDeviceProcDownTheChain(VkDevice dev, const char *func) {
  // Get the device data.
  auto dd = GetDeviceLayerData(DataKey(dev));
  // Pass down the device proc address call through the chain.
  return (PFN_vkVoidFunction)dd->pfn_next_device_proc_addr(dev, func);
}

/*****************************************************************************/
/*                         Custom Intercept Functions                        */
/*****************************************************************************/

VKAPI_ATTR VkResult VKAPI_CALL InterceptCreateInstance(
    const VkInstanceCreateInfo *pCreateInfo,
    const VkAllocationCallbacks *pAllocator, VkInstance *pInstance) {
  // Find the create info
  VkLayerInstanceCreateInfo *layer_create_info =
      GetLoaderInstanceInfo(pCreateInfo, VK_LAYER_LINK_INFO);
  if (layer_create_info == NULL) {
    // No loader instance create info
    return VK_ERROR_INITIALIZATION_FAILED;
  }

  PFN_vkGetInstanceProcAddr pfn_get_instance_proc_addr =
      layer_create_info->u.pLayerInfo->pfnNextGetInstanceProcAddr;
  PFN_vkCreateInstance pfn_create_instance =
      (PFN_vkCreateInstance)pfn_get_instance_proc_addr(NULL,
                                                       "vkCreateInstance");
  if (pfn_create_instance == NULL)
    return VK_ERROR_INITIALIZATION_FAILED;

  // Move chain on for the next layer.
  layer_create_info->u.pLayerInfo = layer_create_info->u.pLayerInfo->pNext;

  InterceptPreCreateInstance(pCreateInfo, pAllocator, pInstance);

  const VkInstanceCreateInfo *pFinalCreateInfo =
      GetModifiedInstanceCreateInfo(pCreateInfo);

  auto result = pfn_create_instance(pFinalCreateInfo, pAllocator, pInstance);
  if (VK_SUCCESS != result) {
    return result;
  }

  auto id = std::make_unique<InstanceData>();
  id->instance = *pInstance;
  auto chain_info =
      GetLoaderInstanceInfo(pFinalCreateInfo, VK_LOADER_DATA_CALLBACK);
  id->pfn_set_instance_loader_data = chain_info->u.pfnSetInstanceLoaderData;
  id->pfn_next_instance_proc_addr = pfn_get_instance_proc_addr;
  InitInstanceDispatchTable(*pInstance, pfn_get_instance_proc_addr,
                            &id->dispatch_table);

  {
    std::lock_guard<std::mutex> lock(g_instance_mutex);
    g_instance_data[DataKey(*pInstance)] = std::move(id);
  }

  result = InterceptPostCreateInstance(pFinalCreateInfo, pAllocator, pInstance,
                                       result);

  return result;
}

VKAPI_ATTR void VKAPI_CALL InterceptDestroyInstance(
    VkInstance instance, const VkAllocationCallbacks *pAllocator) {

  auto instance_key = DataKey(instance);
  InstanceData *instance_data = GetInstanceLayerData(instance_key);
  auto pfn_destroy_instance = instance_data->dispatch_table.DestroyInstance;
  pfn_destroy_instance(instance, pAllocator);

  FreeInstanceLayerData(instance_key);
}

VkResult InterceptCreateDevice(VkPhysicalDevice gpu,
                               const VkDeviceCreateInfo *pCreateInfo,
                               const VkAllocationCallbacks *pAllocator,
                               VkDevice *pDevice) {

  VkLayerDeviceCreateInfo *layer_create_info =
      GetLoaderDeviceInfo(pCreateInfo, VK_LAYER_LINK_INFO);

  // Get the instance data.
  auto instance_data = GetInstanceLayerData(DataKey(gpu));

  // Get the proc addr pointers for this layer and update the chain for the next
  // layer.
  PFN_vkGetInstanceProcAddr pfn_next_instance_proc_addr =
      layer_create_info->u.pLayerInfo->pfnNextGetInstanceProcAddr;
  PFN_vkGetDeviceProcAddr pfn_next_device_proc_addr =
      layer_create_info->u.pLayerInfo->pfnNextGetDeviceProcAddr;
  PFN_vkCreateDevice pfn_create_device =
      (PFN_vkCreateDevice)pfn_next_instance_proc_addr(instance_data->instance,
                                                      "vkCreateDevice");
  layer_create_info->u.pLayerInfo = layer_create_info->u.pLayerInfo->pNext;

  const VkDeviceCreateInfo *pFinalCreateInfo =
      GetModifiedDeviceCreateInfo(gpu, pCreateInfo);

  VkResult result = CreateDevice(pfn_create_device, gpu, pFinalCreateInfo,
                                 pAllocator, pDevice);
  if (VK_SUCCESS != result) {
    return result;
  }

  auto dd = std::make_unique<DeviceData>();
  dd->device = *pDevice;
  auto chain_info =
      GetLoaderDeviceInfo(pFinalCreateInfo, VK_LOADER_DATA_CALLBACK);
  dd->pfn_set_device_loader_data = chain_info->u.pfnSetDeviceLoaderData;
  dd->pfn_next_device_proc_addr = pfn_next_device_proc_addr;
  InitDeviceDispatchTable(*pDevice, pfn_next_device_proc_addr,
                          &dd->dispatch_table);
  {
    std::lock_guard<std::mutex> lock(g_device_mutex);
    g_device_data[DataKey(*pDevice)] = std::move(dd);
  }

  result = InterceptPostCreateDevice(gpu, pFinalCreateInfo, pAllocator, pDevice,
                                     result);

  return result;
}

VKAPI_ATTR void VKAPI_CALL InterceptDestroyDevice(
    VkDevice device, const VkAllocationCallbacks *pAllocator) {

  auto device_key = DataKey(device);
  DeviceData *device_data = GetDeviceLayerData(device_key);
  auto pfn_destroy_device = device_data->dispatch_table.DestroyDevice;
  pfn_destroy_device(device, pAllocator);

  FreeDeviceLayerData(device_key);
}

VkResult
InterceptEnumerateInstanceLayerProperties(uint32_t *pPropertyCount,
                                          VkLayerProperties *pProperties) {

  if (nullptr == pProperties) {
    *pPropertyCount = 1;
    return VK_SUCCESS;
  }
  if (*pPropertyCount < 1) {
    return VK_INCOMPLETE;
  }
  *pProperties = layer_properties;

  VkResult result = VK_SUCCESS;

  return result;
}

VkResult InterceptEnumerateInstanceExtensionProperties(
    char *pLayerName, uint32_t *pPropertyCount,
    VkExtensionProperties *pProperties) {

  bool layer_requested =
      (nullptr == pLayerName ||
       strcmp(pLayerName, "VK_LAYER_GOOGLE_graphics_flight_recorder"));
  if (!layer_requested) {
    return VK_ERROR_LAYER_NOT_PRESENT;
  }
  if (nullptr == pProperties) {
    *pPropertyCount += 2;
    return VK_SUCCESS;
  } else if (*pPropertyCount > 0) {
    *pPropertyCount = 2;
    memcpy(pProperties, instance_extensions.data(),
           instance_extensions.size() * sizeof(VkExtensionProperties));
  }
  VkResult result = VK_SUCCESS;

  return result;
}

VkResult
InterceptEnumerateDeviceLayerProperties(VkPhysicalDevice physicalDevice,
                                        uint32_t *pPropertyCount,
                                        VkLayerProperties *pProperties) {

  if (nullptr == pProperties) {
    *pPropertyCount = 1;
    return VK_SUCCESS;
  }

  if (*pPropertyCount < 1) {
    return VK_INCOMPLETE;
  }

  *pProperties = layer_properties;
  VkResult result = VK_SUCCESS;

  return result;
}

VkResult InterceptEnumerateDeviceExtensionProperties(
    VkPhysicalDevice physicalDevice, char *pLayerName, uint32_t *pPropertyCount,
    VkExtensionProperties *pProperties) {

  // we want to append our extensions, removing duplicates.
  InstanceData *instance_data = GetInstanceLayerData(DataKey(physicalDevice));

  uint32_t num_other_extensions = 0;
  VkResult result =
      instance_data->dispatch_table.EnumerateDeviceExtensionProperties(
          physicalDevice, nullptr, &num_other_extensions, nullptr);
  if (result != VK_SUCCESS) {
    return result;
  }

  // call down to get other device properties
  std::vector<VkExtensionProperties> extensions(num_other_extensions);
  result = instance_data->dispatch_table.EnumerateDeviceExtensionProperties(
      physicalDevice, pLayerName, &num_other_extensions, &extensions[0]);

  // add our extensions if we have any and requested
  bool layer_requested =
      (nullptr == pLayerName || strcmp(pLayerName, layer_properties.layerName));

  if (result == VK_SUCCESS && layer_requested) {
    // not just our layer, we expose all our extensions
    uint32_t max_extensions = *pPropertyCount;

    // set and copy base extensions
    *pPropertyCount = num_other_extensions;

    // find our unique extensions that need to be added
    uint32_t num_additional_extensions = 0;
    auto num_device_extensions = device_extensions.size();
    std::vector<const VkExtensionProperties *> additional_extensions(
        num_device_extensions);

    for (size_t i = 0; i < num_device_extensions; ++i) {
      bool is_unique_extension = true;

      for (size_t j = 0; j < num_other_extensions; ++j) {
        if (0 == strcmp(extensions[j].extensionName,
                        device_extensions[i].extensionName)) {
          is_unique_extension = false;
          break;
        }
      }

      if (is_unique_extension) {
        additional_extensions[num_additional_extensions++] =
            &device_extensions[i];
      }
    }

    // null properties, just count total extensions
    if (nullptr == pProperties) {
      *pPropertyCount += num_additional_extensions;
    } else {
      uint32_t numExtensions = std::min(num_other_extensions, max_extensions);

      memcpy(pProperties, &extensions[0],
             numExtensions * sizeof(VkExtensionProperties));

      for (size_t i = 0;
           i < num_additional_extensions && numExtensions < max_extensions;
           ++i) {
        pProperties[numExtensions++] = *additional_extensions[i];
      }

      *pPropertyCount = numExtensions;

      // not enough space for all extensions
      if (num_other_extensions + num_additional_extensions > max_extensions) {
        result = VK_INCOMPLETE;
      }
    }
  }

  return result;
}

} // namespace GFR

extern "C" DLL_EXPORT VK_LAYER_EXPORT VKAPI_ATTR PFN_vkVoidFunction VKAPI_CALL
GFR_GetInstanceProcAddr(VkInstance inst, const char *func) {

  if (0 == strcmp(func, "vkGetPhysicalDeviceDisplayPropertiesKHR"))
    return (
        PFN_vkVoidFunction)GFR::InterceptGetPhysicalDeviceDisplayPropertiesKHR;
  if (0 == strcmp(func, "vkGetPhysicalDeviceDisplayPlanePropertiesKHR"))
    return (PFN_vkVoidFunction)
        GFR::InterceptGetPhysicalDeviceDisplayPlanePropertiesKHR;
  if (0 == strcmp(func, "vkGetDisplayPlaneSupportedDisplaysKHR"))
    return (
        PFN_vkVoidFunction)GFR::InterceptGetDisplayPlaneSupportedDisplaysKHR;
  if (0 == strcmp(func, "vkGetDisplayModePropertiesKHR"))
    return (PFN_vkVoidFunction)GFR::InterceptGetDisplayModePropertiesKHR;
  if (0 == strcmp(func, "vkCreateDisplayModeKHR"))
    return (PFN_vkVoidFunction)GFR::InterceptCreateDisplayModeKHR;
  if (0 == strcmp(func, "vkGetDisplayPlaneCapabilitiesKHR"))
    return (PFN_vkVoidFunction)GFR::InterceptGetDisplayPlaneCapabilitiesKHR;
  if (0 == strcmp(func, "vkCreateDisplayPlaneSurfaceKHR"))
    return (PFN_vkVoidFunction)GFR::InterceptCreateDisplayPlaneSurfaceKHR;
  if (0 == strcmp(func, "vkDestroySurfaceKHR"))
    return (PFN_vkVoidFunction)GFR::InterceptDestroySurfaceKHR;
  if (0 == strcmp(func, "vkGetPhysicalDeviceSurfaceSupportKHR"))
    return (PFN_vkVoidFunction)GFR::InterceptGetPhysicalDeviceSurfaceSupportKHR;
  if (0 == strcmp(func, "vkGetPhysicalDeviceSurfaceCapabilitiesKHR"))
    return (PFN_vkVoidFunction)
        GFR::InterceptGetPhysicalDeviceSurfaceCapabilitiesKHR;
  if (0 == strcmp(func, "vkGetPhysicalDeviceSurfaceFormatsKHR"))
    return (PFN_vkVoidFunction)GFR::InterceptGetPhysicalDeviceSurfaceFormatsKHR;
  if (0 == strcmp(func, "vkGetPhysicalDeviceSurfacePresentModesKHR"))
    return (PFN_vkVoidFunction)
        GFR::InterceptGetPhysicalDeviceSurfacePresentModesKHR;
  if (0 == strcmp(func, "vkCreateDebugReportCallbackEXT"))
    return (PFN_vkVoidFunction)GFR::InterceptCreateDebugReportCallbackEXT;
  if (0 == strcmp(func, "vkDestroyDebugReportCallbackEXT"))
    return (PFN_vkVoidFunction)GFR::InterceptDestroyDebugReportCallbackEXT;
  if (0 == strcmp(func, "vkDebugReportMessageEXT"))
    return (PFN_vkVoidFunction)GFR::InterceptDebugReportMessageEXT;
  if (0 == strcmp(func, "vkGetPhysicalDeviceFeatures2"))
    return (PFN_vkVoidFunction)GFR::InterceptGetPhysicalDeviceFeatures2;
  if (0 == strcmp(func, "vkGetPhysicalDeviceFeatures2KHR"))
    return (PFN_vkVoidFunction)GFR::InterceptGetPhysicalDeviceFeatures2KHR;
  if (0 == strcmp(func, "vkGetPhysicalDeviceProperties2"))
    return (PFN_vkVoidFunction)GFR::InterceptGetPhysicalDeviceProperties2;
  if (0 == strcmp(func, "vkGetPhysicalDeviceProperties2KHR"))
    return (PFN_vkVoidFunction)GFR::InterceptGetPhysicalDeviceProperties2KHR;
  if (0 == strcmp(func, "vkGetPhysicalDeviceFormatProperties2"))
    return (PFN_vkVoidFunction)GFR::InterceptGetPhysicalDeviceFormatProperties2;
  if (0 == strcmp(func, "vkGetPhysicalDeviceFormatProperties2KHR"))
    return (
        PFN_vkVoidFunction)GFR::InterceptGetPhysicalDeviceFormatProperties2KHR;
  if (0 == strcmp(func, "vkGetPhysicalDeviceImageFormatProperties2"))
    return (PFN_vkVoidFunction)
        GFR::InterceptGetPhysicalDeviceImageFormatProperties2;
  if (0 == strcmp(func, "vkGetPhysicalDeviceImageFormatProperties2KHR"))
    return (PFN_vkVoidFunction)
        GFR::InterceptGetPhysicalDeviceImageFormatProperties2KHR;
  if (0 == strcmp(func, "vkGetPhysicalDeviceQueueFamilyProperties2"))
    return (PFN_vkVoidFunction)
        GFR::InterceptGetPhysicalDeviceQueueFamilyProperties2;
  if (0 == strcmp(func, "vkGetPhysicalDeviceQueueFamilyProperties2KHR"))
    return (PFN_vkVoidFunction)
        GFR::InterceptGetPhysicalDeviceQueueFamilyProperties2KHR;
  if (0 == strcmp(func, "vkGetPhysicalDeviceMemoryProperties2"))
    return (PFN_vkVoidFunction)GFR::InterceptGetPhysicalDeviceMemoryProperties2;
  if (0 == strcmp(func, "vkGetPhysicalDeviceMemoryProperties2KHR"))
    return (
        PFN_vkVoidFunction)GFR::InterceptGetPhysicalDeviceMemoryProperties2KHR;
  if (0 == strcmp(func, "vkGetPhysicalDeviceSparseImageFormatProperties2"))
    return (PFN_vkVoidFunction)
        GFR::InterceptGetPhysicalDeviceSparseImageFormatProperties2;
  if (0 == strcmp(func, "vkGetPhysicalDeviceSparseImageFormatProperties2KHR"))
    return (PFN_vkVoidFunction)
        GFR::InterceptGetPhysicalDeviceSparseImageFormatProperties2KHR;
  if (0 == strcmp(func, "vkGetPhysicalDeviceExternalBufferProperties"))
    return (PFN_vkVoidFunction)
        GFR::InterceptGetPhysicalDeviceExternalBufferProperties;
  if (0 == strcmp(func, "vkGetPhysicalDeviceExternalBufferPropertiesKHR"))
    return (PFN_vkVoidFunction)
        GFR::InterceptGetPhysicalDeviceExternalBufferPropertiesKHR;
  if (0 == strcmp(func, "vkGetPhysicalDeviceExternalSemaphoreProperties"))
    return (PFN_vkVoidFunction)
        GFR::InterceptGetPhysicalDeviceExternalSemaphoreProperties;
  if (0 == strcmp(func, "vkGetPhysicalDeviceExternalSemaphorePropertiesKHR"))
    return (PFN_vkVoidFunction)
        GFR::InterceptGetPhysicalDeviceExternalSemaphorePropertiesKHR;
  if (0 == strcmp(func, "vkGetPhysicalDeviceExternalFenceProperties"))
    return (PFN_vkVoidFunction)
        GFR::InterceptGetPhysicalDeviceExternalFenceProperties;
  if (0 == strcmp(func, "vkGetPhysicalDeviceExternalFencePropertiesKHR"))
    return (PFN_vkVoidFunction)
        GFR::InterceptGetPhysicalDeviceExternalFencePropertiesKHR;
  if (0 == strcmp(func, "vkEnumeratePhysicalDeviceGroups"))
    return (PFN_vkVoidFunction)GFR::InterceptEnumeratePhysicalDeviceGroups;
  if (0 == strcmp(func, "vkEnumeratePhysicalDeviceGroupsKHR"))
    return (PFN_vkVoidFunction)GFR::InterceptEnumeratePhysicalDeviceGroupsKHR;
  if (0 == strcmp(func, "vkGetPhysicalDevicePresentRectanglesKHR"))
    return (
        PFN_vkVoidFunction)GFR::InterceptGetPhysicalDevicePresentRectanglesKHR;
  if (0 == strcmp(func, "vkGetPhysicalDeviceMultisamplePropertiesEXT"))
    return (PFN_vkVoidFunction)
        GFR::InterceptGetPhysicalDeviceMultisamplePropertiesEXT;
  if (0 == strcmp(func, "vkGetPhysicalDeviceSurfaceCapabilities2KHR"))
    return (PFN_vkVoidFunction)
        GFR::InterceptGetPhysicalDeviceSurfaceCapabilities2KHR;
  if (0 == strcmp(func, "vkGetPhysicalDeviceSurfaceFormats2KHR"))
    return (
        PFN_vkVoidFunction)GFR::InterceptGetPhysicalDeviceSurfaceFormats2KHR;
  if (0 == strcmp(func, "vkGetPhysicalDeviceDisplayProperties2KHR"))
    return (
        PFN_vkVoidFunction)GFR::InterceptGetPhysicalDeviceDisplayProperties2KHR;
  if (0 == strcmp(func, "vkGetPhysicalDeviceDisplayPlaneProperties2KHR"))
    return (PFN_vkVoidFunction)
        GFR::InterceptGetPhysicalDeviceDisplayPlaneProperties2KHR;
  if (0 == strcmp(func, "vkGetDisplayModeProperties2KHR"))
    return (PFN_vkVoidFunction)GFR::InterceptGetDisplayModeProperties2KHR;
  if (0 == strcmp(func, "vkGetDisplayPlaneCapabilities2KHR"))
    return (PFN_vkVoidFunction)GFR::InterceptGetDisplayPlaneCapabilities2KHR;
  if (0 == strcmp(func, "vkGetPhysicalDeviceCalibrateableTimeDomainsEXT"))
    return (PFN_vkVoidFunction)
        GFR::InterceptGetPhysicalDeviceCalibrateableTimeDomainsEXT;
  if (0 == strcmp(func, "vkCreateDebugUtilsMessengerEXT"))
    return (PFN_vkVoidFunction)GFR::InterceptCreateDebugUtilsMessengerEXT;
  if (0 == strcmp(func, "vkDestroyDebugUtilsMessengerEXT"))
    return (PFN_vkVoidFunction)GFR::InterceptDestroyDebugUtilsMessengerEXT;
  if (0 == strcmp(func, "vkSubmitDebugUtilsMessageEXT"))
    return (PFN_vkVoidFunction)GFR::InterceptSubmitDebugUtilsMessageEXT;
  if (0 ==
      strcmp(func,
             "vkEnumeratePhysicalDeviceQueueFamilyPerformanceQueryCountersKHR"))
    return (PFN_vkVoidFunction)GFR::
        InterceptEnumeratePhysicalDeviceQueueFamilyPerformanceQueryCountersKHR;
  if (0 ==
      strcmp(func, "vkGetPhysicalDeviceQueueFamilyPerformanceQueryPassesKHR"))
    return (PFN_vkVoidFunction)
        GFR::InterceptGetPhysicalDeviceQueueFamilyPerformanceQueryPassesKHR;
  if (0 == strcmp(func, "vkCreateHeadlessSurfaceEXT"))
    return (PFN_vkVoidFunction)GFR::InterceptCreateHeadlessSurfaceEXT;
  if (0 == strcmp(func, "vkGetPhysicalDeviceToolPropertiesEXT"))
    return (PFN_vkVoidFunction)GFR::InterceptGetPhysicalDeviceToolPropertiesEXT;
  if (0 == strcmp(func, "vkGetPhysicalDeviceFragmentShadingRatesKHR"))
    return (PFN_vkVoidFunction)
        GFR::InterceptGetPhysicalDeviceFragmentShadingRatesKHR;
  if (0 == strcmp(func, "vkAcquireDrmDisplayEXT"))
    return (PFN_vkVoidFunction)GFR::InterceptAcquireDrmDisplayEXT;
  if (0 == strcmp(func, "vkGetDrmDisplayEXT"))
    return (PFN_vkVoidFunction)GFR::InterceptGetDrmDisplayEXT;
  if (0 == strcmp(func, "vkCreateInstance"))
    return (PFN_vkVoidFunction)GFR::InterceptCreateInstance;
  if (0 == strcmp(func, "vkDestroyInstance"))
    return (PFN_vkVoidFunction)GFR::InterceptDestroyInstance;
  if (0 == strcmp(func, "vkEnumeratePhysicalDevices"))
    return (PFN_vkVoidFunction)GFR::InterceptEnumeratePhysicalDevices;
  if (0 == strcmp(func, "vkGetInstanceProcAddr"))
    return (PFN_vkVoidFunction)GFR::InterceptGetInstanceProcAddr;
  if (0 == strcmp(func, "vkGetPhysicalDeviceProperties"))
    return (PFN_vkVoidFunction)GFR::InterceptGetPhysicalDeviceProperties;
  if (0 == strcmp(func, "vkGetPhysicalDeviceQueueFamilyProperties"))
    return (
        PFN_vkVoidFunction)GFR::InterceptGetPhysicalDeviceQueueFamilyProperties;
  if (0 == strcmp(func, "vkGetPhysicalDeviceMemoryProperties"))
    return (PFN_vkVoidFunction)GFR::InterceptGetPhysicalDeviceMemoryProperties;
  if (0 == strcmp(func, "vkGetPhysicalDeviceFeatures"))
    return (PFN_vkVoidFunction)GFR::InterceptGetPhysicalDeviceFeatures;
  if (0 == strcmp(func, "vkGetPhysicalDeviceFormatProperties"))
    return (PFN_vkVoidFunction)GFR::InterceptGetPhysicalDeviceFormatProperties;
  if (0 == strcmp(func, "vkGetPhysicalDeviceImageFormatProperties"))
    return (
        PFN_vkVoidFunction)GFR::InterceptGetPhysicalDeviceImageFormatProperties;
  if (0 == strcmp(func, "vkCreateDevice"))
    return (PFN_vkVoidFunction)GFR::InterceptCreateDevice;
  if (0 == strcmp(func, "vkEnumerateDeviceLayerProperties"))
    return (PFN_vkVoidFunction)GFR::InterceptEnumerateDeviceLayerProperties;
  if (0 == strcmp(func, "vkEnumerateDeviceExtensionProperties"))
    return (PFN_vkVoidFunction)GFR::InterceptEnumerateDeviceExtensionProperties;
  if (0 == strcmp(func, "vkGetPhysicalDeviceSparseImageFormatProperties"))
    return (PFN_vkVoidFunction)
        GFR::InterceptGetPhysicalDeviceSparseImageFormatProperties;

#ifdef VK_USE_PLATFORM_GGP
  if (0 == strcmp(func, "vkCreateStreamDescriptorSurfaceGGP"))
    return (PFN_vkVoidFunction)GFR::InterceptCreateStreamDescriptorSurfaceGGP;

#endif // VK_USE_PLATFORM_GGP

  // List of Vulkan functions of the implemented instance extensions
  static const std::vector<std::string> instance_ext_func_names{

      "vkCreateDebugReportCallbackEXT",  "vkDestroyDebugReportCallbackEXT",
      "vkDebugReportMessageEXT",

#ifdef VK_USE_PLATFORM_GGP

#endif // VK_USE_PLATFORM_GGP

      "vkSetDebugUtilsObjectNameEXT",    "vkSetDebugUtilsObjectTagEXT",
      "vkQueueBeginDebugUtilsLabelEXT",  "vkQueueEndDebugUtilsLabelEXT",
      "vkQueueInsertDebugUtilsLabelEXT", "vkCmdBeginDebugUtilsLabelEXT",
      "vkCmdEndDebugUtilsLabelEXT",      "vkCmdInsertDebugUtilsLabelEXT",
      "vkCreateDebugUtilsMessengerEXT",  "vkDestroyDebugUtilsMessengerEXT",
      "vkSubmitDebugUtilsMessageEXT",

#ifdef VK_USE_PLATFORM_GGP

#endif // VK_USE_PLATFORM_GGP

  };
  // Check if the layer implements the function in an instance extension.
  if (std::find(instance_ext_func_names.begin(), instance_ext_func_names.end(),
                func) != instance_ext_func_names.end()) {
    return nullptr;
  }

  // If the function was not found, just pass it down the chain to support
  // unregistered extensions, such as vkSwapchainCallbackEXT.
  return (PFN_vkVoidFunction)GFR::PassInstanceProcDownTheChain(inst, func);
} // NOLINT(readability/fn_size)

extern "C" DLL_EXPORT VK_LAYER_EXPORT VKAPI_ATTR PFN_vkVoidFunction VKAPI_CALL
GFR_GetDeviceProcAddr(VkDevice dev, const char *func) {

  if (0 == strcmp(func, "vkResetQueryPool"))
    return (PFN_vkVoidFunction)GFR::InterceptResetQueryPool;
  if (0 == strcmp(func, "vkResetQueryPoolEXT"))
    return (PFN_vkVoidFunction)GFR::InterceptResetQueryPoolEXT;
  if (0 == strcmp(func, "vkCmdDrawMultiEXT"))
    return (PFN_vkVoidFunction)GFR::InterceptCmdDrawMultiEXT;
  if (0 == strcmp(func, "vkCmdDrawMultiIndexedEXT"))
    return (PFN_vkVoidFunction)GFR::InterceptCmdDrawMultiIndexedEXT;
  if (0 == strcmp(func, "vkCreateSharedSwapchainsKHR"))
    return (PFN_vkVoidFunction)GFR::InterceptCreateSharedSwapchainsKHR;
  if (0 == strcmp(func, "vkCreateSwapchainKHR"))
    return (PFN_vkVoidFunction)GFR::InterceptCreateSwapchainKHR;
  if (0 == strcmp(func, "vkDestroySwapchainKHR"))
    return (PFN_vkVoidFunction)GFR::InterceptDestroySwapchainKHR;
  if (0 == strcmp(func, "vkGetSwapchainImagesKHR"))
    return (PFN_vkVoidFunction)GFR::InterceptGetSwapchainImagesKHR;
  if (0 == strcmp(func, "vkAcquireNextImageKHR"))
    return (PFN_vkVoidFunction)GFR::InterceptAcquireNextImageKHR;
  if (0 == strcmp(func, "vkQueuePresentKHR"))
    return (PFN_vkVoidFunction)GFR::InterceptQueuePresentKHR;
  if (0 == strcmp(func, "vkDebugMarkerSetObjectNameEXT"))
    return (PFN_vkVoidFunction)GFR::InterceptDebugMarkerSetObjectNameEXT;
  if (0 == strcmp(func, "vkDebugMarkerSetObjectTagEXT"))
    return (PFN_vkVoidFunction)GFR::InterceptDebugMarkerSetObjectTagEXT;
  if (0 == strcmp(func, "vkCmdDebugMarkerBeginEXT"))
    return (PFN_vkVoidFunction)GFR::InterceptCmdDebugMarkerBeginEXT;
  if (0 == strcmp(func, "vkCmdDebugMarkerEndEXT"))
    return (PFN_vkVoidFunction)GFR::InterceptCmdDebugMarkerEndEXT;
  if (0 == strcmp(func, "vkCmdDebugMarkerInsertEXT"))
    return (PFN_vkVoidFunction)GFR::InterceptCmdDebugMarkerInsertEXT;
  if (0 == strcmp(func, "vkCmdPushDescriptorSetKHR"))
    return (PFN_vkVoidFunction)GFR::InterceptCmdPushDescriptorSetKHR;
  if (0 == strcmp(func, "vkTrimCommandPool"))
    return (PFN_vkVoidFunction)GFR::InterceptTrimCommandPool;
  if (0 == strcmp(func, "vkTrimCommandPoolKHR"))
    return (PFN_vkVoidFunction)GFR::InterceptTrimCommandPoolKHR;
  if (0 == strcmp(func, "vkGetMemoryFdKHR"))
    return (PFN_vkVoidFunction)GFR::InterceptGetMemoryFdKHR;
  if (0 == strcmp(func, "vkGetMemoryFdPropertiesKHR"))
    return (PFN_vkVoidFunction)GFR::InterceptGetMemoryFdPropertiesKHR;
  if (0 == strcmp(func, "vkGetSemaphoreFdKHR"))
    return (PFN_vkVoidFunction)GFR::InterceptGetSemaphoreFdKHR;
  if (0 == strcmp(func, "vkImportSemaphoreFdKHR"))
    return (PFN_vkVoidFunction)GFR::InterceptImportSemaphoreFdKHR;
  if (0 == strcmp(func, "vkGetFenceFdKHR"))
    return (PFN_vkVoidFunction)GFR::InterceptGetFenceFdKHR;
  if (0 == strcmp(func, "vkImportFenceFdKHR"))
    return (PFN_vkVoidFunction)GFR::InterceptImportFenceFdKHR;
  if (0 == strcmp(func, "vkGetDeviceGroupPeerMemoryFeatures"))
    return (PFN_vkVoidFunction)GFR::InterceptGetDeviceGroupPeerMemoryFeatures;
  if (0 == strcmp(func, "vkGetDeviceGroupPeerMemoryFeaturesKHR"))
    return (
        PFN_vkVoidFunction)GFR::InterceptGetDeviceGroupPeerMemoryFeaturesKHR;
  if (0 == strcmp(func, "vkBindBufferMemory2"))
    return (PFN_vkVoidFunction)GFR::InterceptBindBufferMemory2;
  if (0 == strcmp(func, "vkBindBufferMemory2KHR"))
    return (PFN_vkVoidFunction)GFR::InterceptBindBufferMemory2KHR;
  if (0 == strcmp(func, "vkBindImageMemory2"))
    return (PFN_vkVoidFunction)GFR::InterceptBindImageMemory2;
  if (0 == strcmp(func, "vkBindImageMemory2KHR"))
    return (PFN_vkVoidFunction)GFR::InterceptBindImageMemory2KHR;
  if (0 == strcmp(func, "vkCmdSetDeviceMask"))
    return (PFN_vkVoidFunction)GFR::InterceptCmdSetDeviceMask;
  if (0 == strcmp(func, "vkCmdSetDeviceMaskKHR"))
    return (PFN_vkVoidFunction)GFR::InterceptCmdSetDeviceMaskKHR;
  if (0 == strcmp(func, "vkGetDeviceGroupPresentCapabilitiesKHR"))
    return (
        PFN_vkVoidFunction)GFR::InterceptGetDeviceGroupPresentCapabilitiesKHR;
  if (0 == strcmp(func, "vkGetDeviceGroupSurfacePresentModesKHR"))
    return (
        PFN_vkVoidFunction)GFR::InterceptGetDeviceGroupSurfacePresentModesKHR;
  if (0 == strcmp(func, "vkAcquireNextImage2KHR"))
    return (PFN_vkVoidFunction)GFR::InterceptAcquireNextImage2KHR;
  if (0 == strcmp(func, "vkCmdDispatchBase"))
    return (PFN_vkVoidFunction)GFR::InterceptCmdDispatchBase;
  if (0 == strcmp(func, "vkCmdDispatchBaseKHR"))
    return (PFN_vkVoidFunction)GFR::InterceptCmdDispatchBaseKHR;
  if (0 == strcmp(func, "vkCreateDescriptorUpdateTemplate"))
    return (PFN_vkVoidFunction)GFR::InterceptCreateDescriptorUpdateTemplate;
  if (0 == strcmp(func, "vkCreateDescriptorUpdateTemplateKHR"))
    return (PFN_vkVoidFunction)GFR::InterceptCreateDescriptorUpdateTemplateKHR;
  if (0 == strcmp(func, "vkDestroyDescriptorUpdateTemplate"))
    return (PFN_vkVoidFunction)GFR::InterceptDestroyDescriptorUpdateTemplate;
  if (0 == strcmp(func, "vkDestroyDescriptorUpdateTemplateKHR"))
    return (PFN_vkVoidFunction)GFR::InterceptDestroyDescriptorUpdateTemplateKHR;
  if (0 == strcmp(func, "vkUpdateDescriptorSetWithTemplate"))
    return (PFN_vkVoidFunction)GFR::InterceptUpdateDescriptorSetWithTemplate;
  if (0 == strcmp(func, "vkUpdateDescriptorSetWithTemplateKHR"))
    return (PFN_vkVoidFunction)GFR::InterceptUpdateDescriptorSetWithTemplateKHR;
  if (0 == strcmp(func, "vkCmdPushDescriptorSetWithTemplateKHR"))
    return (
        PFN_vkVoidFunction)GFR::InterceptCmdPushDescriptorSetWithTemplateKHR;
  if (0 == strcmp(func, "vkGetSwapchainStatusKHR"))
    return (PFN_vkVoidFunction)GFR::InterceptGetSwapchainStatusKHR;
  if (0 == strcmp(func, "vkCmdSetSampleLocationsEXT"))
    return (PFN_vkVoidFunction)GFR::InterceptCmdSetSampleLocationsEXT;
  if (0 == strcmp(func, "vkGetBufferMemoryRequirements2"))
    return (PFN_vkVoidFunction)GFR::InterceptGetBufferMemoryRequirements2;
  if (0 == strcmp(func, "vkGetBufferMemoryRequirements2KHR"))
    return (PFN_vkVoidFunction)GFR::InterceptGetBufferMemoryRequirements2KHR;
  if (0 == strcmp(func, "vkGetImageMemoryRequirements2"))
    return (PFN_vkVoidFunction)GFR::InterceptGetImageMemoryRequirements2;
  if (0 == strcmp(func, "vkGetImageMemoryRequirements2KHR"))
    return (PFN_vkVoidFunction)GFR::InterceptGetImageMemoryRequirements2KHR;
  if (0 == strcmp(func, "vkGetImageSparseMemoryRequirements2"))
    return (PFN_vkVoidFunction)GFR::InterceptGetImageSparseMemoryRequirements2;
  if (0 == strcmp(func, "vkGetImageSparseMemoryRequirements2KHR"))
    return (
        PFN_vkVoidFunction)GFR::InterceptGetImageSparseMemoryRequirements2KHR;
  if (0 == strcmp(func, "vkCreateSamplerYcbcrConversion"))
    return (PFN_vkVoidFunction)GFR::InterceptCreateSamplerYcbcrConversion;
  if (0 == strcmp(func, "vkCreateSamplerYcbcrConversionKHR"))
    return (PFN_vkVoidFunction)GFR::InterceptCreateSamplerYcbcrConversionKHR;
  if (0 == strcmp(func, "vkDestroySamplerYcbcrConversion"))
    return (PFN_vkVoidFunction)GFR::InterceptDestroySamplerYcbcrConversion;
  if (0 == strcmp(func, "vkDestroySamplerYcbcrConversionKHR"))
    return (PFN_vkVoidFunction)GFR::InterceptDestroySamplerYcbcrConversionKHR;
  if (0 == strcmp(func, "vkGetDescriptorSetLayoutSupport"))
    return (PFN_vkVoidFunction)GFR::InterceptGetDescriptorSetLayoutSupport;
  if (0 == strcmp(func, "vkGetDescriptorSetLayoutSupportKHR"))
    return (PFN_vkVoidFunction)GFR::InterceptGetDescriptorSetLayoutSupportKHR;
  if (0 == strcmp(func, "vkGetShaderInfoAMD"))
    return (PFN_vkVoidFunction)GFR::InterceptGetShaderInfoAMD;
  if (0 == strcmp(func, "vkSetLocalDimmingAMD"))
    return (PFN_vkVoidFunction)GFR::InterceptSetLocalDimmingAMD;
  if (0 == strcmp(func, "vkGetCalibratedTimestampsEXT"))
    return (PFN_vkVoidFunction)GFR::InterceptGetCalibratedTimestampsEXT;
  if (0 == strcmp(func, "vkSetDebugUtilsObjectNameEXT"))
    return (PFN_vkVoidFunction)GFR::InterceptSetDebugUtilsObjectNameEXT;
  if (0 == strcmp(func, "vkSetDebugUtilsObjectTagEXT"))
    return (PFN_vkVoidFunction)GFR::InterceptSetDebugUtilsObjectTagEXT;
  if (0 == strcmp(func, "vkQueueBeginDebugUtilsLabelEXT"))
    return (PFN_vkVoidFunction)GFR::InterceptQueueBeginDebugUtilsLabelEXT;
  if (0 == strcmp(func, "vkQueueEndDebugUtilsLabelEXT"))
    return (PFN_vkVoidFunction)GFR::InterceptQueueEndDebugUtilsLabelEXT;
  if (0 == strcmp(func, "vkQueueInsertDebugUtilsLabelEXT"))
    return (PFN_vkVoidFunction)GFR::InterceptQueueInsertDebugUtilsLabelEXT;
  if (0 == strcmp(func, "vkCmdBeginDebugUtilsLabelEXT"))
    return (PFN_vkVoidFunction)GFR::InterceptCmdBeginDebugUtilsLabelEXT;
  if (0 == strcmp(func, "vkCmdEndDebugUtilsLabelEXT"))
    return (PFN_vkVoidFunction)GFR::InterceptCmdEndDebugUtilsLabelEXT;
  if (0 == strcmp(func, "vkCmdInsertDebugUtilsLabelEXT"))
    return (PFN_vkVoidFunction)GFR::InterceptCmdInsertDebugUtilsLabelEXT;
  if (0 == strcmp(func, "vkGetMemoryHostPointerPropertiesEXT"))
    return (PFN_vkVoidFunction)GFR::InterceptGetMemoryHostPointerPropertiesEXT;
  if (0 == strcmp(func, "vkCmdWriteBufferMarkerAMD"))
    return (PFN_vkVoidFunction)GFR::InterceptCmdWriteBufferMarkerAMD;
  if (0 == strcmp(func, "vkCreateRenderPass2"))
    return (PFN_vkVoidFunction)GFR::InterceptCreateRenderPass2;
  if (0 == strcmp(func, "vkCreateRenderPass2KHR"))
    return (PFN_vkVoidFunction)GFR::InterceptCreateRenderPass2KHR;
  if (0 == strcmp(func, "vkCmdBeginRenderPass2"))
    return (PFN_vkVoidFunction)GFR::InterceptCmdBeginRenderPass2;
  if (0 == strcmp(func, "vkCmdBeginRenderPass2KHR"))
    return (PFN_vkVoidFunction)GFR::InterceptCmdBeginRenderPass2KHR;
  if (0 == strcmp(func, "vkCmdNextSubpass2"))
    return (PFN_vkVoidFunction)GFR::InterceptCmdNextSubpass2;
  if (0 == strcmp(func, "vkCmdNextSubpass2KHR"))
    return (PFN_vkVoidFunction)GFR::InterceptCmdNextSubpass2KHR;
  if (0 == strcmp(func, "vkCmdEndRenderPass2"))
    return (PFN_vkVoidFunction)GFR::InterceptCmdEndRenderPass2;
  if (0 == strcmp(func, "vkCmdEndRenderPass2KHR"))
    return (PFN_vkVoidFunction)GFR::InterceptCmdEndRenderPass2KHR;
  if (0 == strcmp(func, "vkGetSemaphoreCounterValue"))
    return (PFN_vkVoidFunction)GFR::InterceptGetSemaphoreCounterValue;
  if (0 == strcmp(func, "vkGetSemaphoreCounterValueKHR"))
    return (PFN_vkVoidFunction)GFR::InterceptGetSemaphoreCounterValueKHR;
  if (0 == strcmp(func, "vkWaitSemaphores"))
    return (PFN_vkVoidFunction)GFR::InterceptWaitSemaphores;
  if (0 == strcmp(func, "vkWaitSemaphoresKHR"))
    return (PFN_vkVoidFunction)GFR::InterceptWaitSemaphoresKHR;
  if (0 == strcmp(func, "vkSignalSemaphore"))
    return (PFN_vkVoidFunction)GFR::InterceptSignalSemaphore;
  if (0 == strcmp(func, "vkSignalSemaphoreKHR"))
    return (PFN_vkVoidFunction)GFR::InterceptSignalSemaphoreKHR;
  if (0 == strcmp(func, "vkCmdDrawIndirectCount"))
    return (PFN_vkVoidFunction)GFR::InterceptCmdDrawIndirectCount;
  if (0 == strcmp(func, "vkCmdDrawIndirectCountKHR"))
    return (PFN_vkVoidFunction)GFR::InterceptCmdDrawIndirectCountKHR;
  if (0 == strcmp(func, "vkCmdDrawIndirectCountAMD"))
    return (PFN_vkVoidFunction)GFR::InterceptCmdDrawIndirectCountAMD;
  if (0 == strcmp(func, "vkCmdDrawIndexedIndirectCount"))
    return (PFN_vkVoidFunction)GFR::InterceptCmdDrawIndexedIndirectCount;
  if (0 == strcmp(func, "vkCmdDrawIndexedIndirectCountKHR"))
    return (PFN_vkVoidFunction)GFR::InterceptCmdDrawIndexedIndirectCountKHR;
  if (0 == strcmp(func, "vkCmdDrawIndexedIndirectCountAMD"))
    return (PFN_vkVoidFunction)GFR::InterceptCmdDrawIndexedIndirectCountAMD;
  if (0 == strcmp(func, "vkDestroyAccelerationStructureKHR"))
    return (PFN_vkVoidFunction)GFR::InterceptDestroyAccelerationStructureKHR;
  if (0 == strcmp(func, "vkCmdCopyAccelerationStructureKHR"))
    return (PFN_vkVoidFunction)GFR::InterceptCmdCopyAccelerationStructureKHR;
  if (0 == strcmp(func, "vkCopyAccelerationStructureKHR"))
    return (PFN_vkVoidFunction)GFR::InterceptCopyAccelerationStructureKHR;
  if (0 == strcmp(func, "vkCmdCopyAccelerationStructureToMemoryKHR"))
    return (PFN_vkVoidFunction)
        GFR::InterceptCmdCopyAccelerationStructureToMemoryKHR;
  if (0 == strcmp(func, "vkCopyAccelerationStructureToMemoryKHR"))
    return (
        PFN_vkVoidFunction)GFR::InterceptCopyAccelerationStructureToMemoryKHR;
  if (0 == strcmp(func, "vkCmdCopyMemoryToAccelerationStructureKHR"))
    return (PFN_vkVoidFunction)
        GFR::InterceptCmdCopyMemoryToAccelerationStructureKHR;
  if (0 == strcmp(func, "vkCopyMemoryToAccelerationStructureKHR"))
    return (
        PFN_vkVoidFunction)GFR::InterceptCopyMemoryToAccelerationStructureKHR;
  if (0 == strcmp(func, "vkCmdWriteAccelerationStructuresPropertiesKHR"))
    return (PFN_vkVoidFunction)
        GFR::InterceptCmdWriteAccelerationStructuresPropertiesKHR;
  if (0 == strcmp(func, "vkWriteAccelerationStructuresPropertiesKHR"))
    return (PFN_vkVoidFunction)
        GFR::InterceptWriteAccelerationStructuresPropertiesKHR;
  if (0 == strcmp(func, "vkCmdTraceRaysKHR"))
    return (PFN_vkVoidFunction)GFR::InterceptCmdTraceRaysKHR;
  if (0 == strcmp(func, "vkGetRayTracingShaderGroupHandlesKHR"))
    return (PFN_vkVoidFunction)GFR::InterceptGetRayTracingShaderGroupHandlesKHR;
  if (0 == strcmp(func, "vkGetRayTracingShaderGroupHandlesNV"))
    return (PFN_vkVoidFunction)GFR::InterceptGetRayTracingShaderGroupHandlesNV;
  if (0 == strcmp(func, "vkGetRayTracingCaptureReplayShaderGroupHandlesKHR"))
    return (PFN_vkVoidFunction)
        GFR::InterceptGetRayTracingCaptureReplayShaderGroupHandlesKHR;
  if (0 == strcmp(func, "vkCreateRayTracingPipelinesKHR"))
    return (PFN_vkVoidFunction)GFR::InterceptCreateRayTracingPipelinesKHR;
  if (0 == strcmp(func, "vkCmdTraceRaysIndirectKHR"))
    return (PFN_vkVoidFunction)GFR::InterceptCmdTraceRaysIndirectKHR;
  if (0 == strcmp(func, "vkGetDeviceAccelerationStructureCompatibilityKHR"))
    return (PFN_vkVoidFunction)
        GFR::InterceptGetDeviceAccelerationStructureCompatibilityKHR;
  if (0 == strcmp(func, "vkGetRayTracingShaderGroupStackSizeKHR"))
    return (
        PFN_vkVoidFunction)GFR::InterceptGetRayTracingShaderGroupStackSizeKHR;
  if (0 == strcmp(func, "vkCmdSetRayTracingPipelineStackSizeKHR"))
    return (
        PFN_vkVoidFunction)GFR::InterceptCmdSetRayTracingPipelineStackSizeKHR;
  if (0 == strcmp(func, "vkAcquireProfilingLockKHR"))
    return (PFN_vkVoidFunction)GFR::InterceptAcquireProfilingLockKHR;
  if (0 == strcmp(func, "vkReleaseProfilingLockKHR"))
    return (PFN_vkVoidFunction)GFR::InterceptReleaseProfilingLockKHR;
  if (0 == strcmp(func, "vkGetImageDrmFormatModifierPropertiesEXT"))
    return (
        PFN_vkVoidFunction)GFR::InterceptGetImageDrmFormatModifierPropertiesEXT;
  if (0 == strcmp(func, "vkGetBufferOpaqueCaptureAddress"))
    return (PFN_vkVoidFunction)GFR::InterceptGetBufferOpaqueCaptureAddress;
  if (0 == strcmp(func, "vkGetBufferOpaqueCaptureAddressKHR"))
    return (PFN_vkVoidFunction)GFR::InterceptGetBufferOpaqueCaptureAddressKHR;
  if (0 == strcmp(func, "vkGetBufferDeviceAddress"))
    return (PFN_vkVoidFunction)GFR::InterceptGetBufferDeviceAddress;
  if (0 == strcmp(func, "vkGetBufferDeviceAddressKHR"))
    return (PFN_vkVoidFunction)GFR::InterceptGetBufferDeviceAddressKHR;
  if (0 == strcmp(func, "vkGetBufferDeviceAddressEXT"))
    return (PFN_vkVoidFunction)GFR::InterceptGetBufferDeviceAddressEXT;
  if (0 == strcmp(func, "vkGetDeviceMemoryOpaqueCaptureAddress"))
    return (
        PFN_vkVoidFunction)GFR::InterceptGetDeviceMemoryOpaqueCaptureAddress;
  if (0 == strcmp(func, "vkGetDeviceMemoryOpaqueCaptureAddressKHR"))
    return (
        PFN_vkVoidFunction)GFR::InterceptGetDeviceMemoryOpaqueCaptureAddressKHR;
  if (0 == strcmp(func, "vkGetPipelineExecutablePropertiesKHR"))
    return (PFN_vkVoidFunction)GFR::InterceptGetPipelineExecutablePropertiesKHR;
  if (0 == strcmp(func, "vkGetPipelineExecutableStatisticsKHR"))
    return (PFN_vkVoidFunction)GFR::InterceptGetPipelineExecutableStatisticsKHR;
  if (0 == strcmp(func, "vkGetPipelineExecutableInternalRepresentationsKHR"))
    return (PFN_vkVoidFunction)
        GFR::InterceptGetPipelineExecutableInternalRepresentationsKHR;
  if (0 == strcmp(func, "vkCmdSetLineStippleEXT"))
    return (PFN_vkVoidFunction)GFR::InterceptCmdSetLineStippleEXT;
  if (0 == strcmp(func, "vkCreateAccelerationStructureKHR"))
    return (PFN_vkVoidFunction)GFR::InterceptCreateAccelerationStructureKHR;
  if (0 == strcmp(func, "vkCmdBuildAccelerationStructuresKHR"))
    return (PFN_vkVoidFunction)GFR::InterceptCmdBuildAccelerationStructuresKHR;
  if (0 == strcmp(func, "vkCmdBuildAccelerationStructuresIndirectKHR"))
    return (PFN_vkVoidFunction)
        GFR::InterceptCmdBuildAccelerationStructuresIndirectKHR;
  if (0 == strcmp(func, "vkBuildAccelerationStructuresKHR"))
    return (PFN_vkVoidFunction)GFR::InterceptBuildAccelerationStructuresKHR;
  if (0 == strcmp(func, "vkGetAccelerationStructureDeviceAddressKHR"))
    return (PFN_vkVoidFunction)
        GFR::InterceptGetAccelerationStructureDeviceAddressKHR;
  if (0 == strcmp(func, "vkCreateDeferredOperationKHR"))
    return (PFN_vkVoidFunction)GFR::InterceptCreateDeferredOperationKHR;
  if (0 == strcmp(func, "vkDestroyDeferredOperationKHR"))
    return (PFN_vkVoidFunction)GFR::InterceptDestroyDeferredOperationKHR;
  if (0 == strcmp(func, "vkGetDeferredOperationMaxConcurrencyKHR"))
    return (
        PFN_vkVoidFunction)GFR::InterceptGetDeferredOperationMaxConcurrencyKHR;
  if (0 == strcmp(func, "vkGetDeferredOperationResultKHR"))
    return (PFN_vkVoidFunction)GFR::InterceptGetDeferredOperationResultKHR;
  if (0 == strcmp(func, "vkDeferredOperationJoinKHR"))
    return (PFN_vkVoidFunction)GFR::InterceptDeferredOperationJoinKHR;
  if (0 == strcmp(func, "vkCmdSetCullModeEXT"))
    return (PFN_vkVoidFunction)GFR::InterceptCmdSetCullModeEXT;
  if (0 == strcmp(func, "vkCmdSetFrontFaceEXT"))
    return (PFN_vkVoidFunction)GFR::InterceptCmdSetFrontFaceEXT;
  if (0 == strcmp(func, "vkCmdSetPrimitiveTopologyEXT"))
    return (PFN_vkVoidFunction)GFR::InterceptCmdSetPrimitiveTopologyEXT;
  if (0 == strcmp(func, "vkCmdSetViewportWithCountEXT"))
    return (PFN_vkVoidFunction)GFR::InterceptCmdSetViewportWithCountEXT;
  if (0 == strcmp(func, "vkCmdSetScissorWithCountEXT"))
    return (PFN_vkVoidFunction)GFR::InterceptCmdSetScissorWithCountEXT;
  if (0 == strcmp(func, "vkCmdBindVertexBuffers2EXT"))
    return (PFN_vkVoidFunction)GFR::InterceptCmdBindVertexBuffers2EXT;
  if (0 == strcmp(func, "vkCmdSetDepthTestEnableEXT"))
    return (PFN_vkVoidFunction)GFR::InterceptCmdSetDepthTestEnableEXT;
  if (0 == strcmp(func, "vkCmdSetDepthWriteEnableEXT"))
    return (PFN_vkVoidFunction)GFR::InterceptCmdSetDepthWriteEnableEXT;
  if (0 == strcmp(func, "vkCmdSetDepthCompareOpEXT"))
    return (PFN_vkVoidFunction)GFR::InterceptCmdSetDepthCompareOpEXT;
  if (0 == strcmp(func, "vkCmdSetDepthBoundsTestEnableEXT"))
    return (PFN_vkVoidFunction)GFR::InterceptCmdSetDepthBoundsTestEnableEXT;
  if (0 == strcmp(func, "vkCmdSetStencilTestEnableEXT"))
    return (PFN_vkVoidFunction)GFR::InterceptCmdSetStencilTestEnableEXT;
  if (0 == strcmp(func, "vkCmdSetStencilOpEXT"))
    return (PFN_vkVoidFunction)GFR::InterceptCmdSetStencilOpEXT;
  if (0 == strcmp(func, "vkCmdSetPatchControlPointsEXT"))
    return (PFN_vkVoidFunction)GFR::InterceptCmdSetPatchControlPointsEXT;
  if (0 == strcmp(func, "vkCmdSetRasterizerDiscardEnableEXT"))
    return (PFN_vkVoidFunction)GFR::InterceptCmdSetRasterizerDiscardEnableEXT;
  if (0 == strcmp(func, "vkCmdSetDepthBiasEnableEXT"))
    return (PFN_vkVoidFunction)GFR::InterceptCmdSetDepthBiasEnableEXT;
  if (0 == strcmp(func, "vkCmdSetLogicOpEXT"))
    return (PFN_vkVoidFunction)GFR::InterceptCmdSetLogicOpEXT;
  if (0 == strcmp(func, "vkCmdSetPrimitiveRestartEnableEXT"))
    return (PFN_vkVoidFunction)GFR::InterceptCmdSetPrimitiveRestartEnableEXT;
  if (0 == strcmp(func, "vkCmdCopyBuffer2KHR"))
    return (PFN_vkVoidFunction)GFR::InterceptCmdCopyBuffer2KHR;
  if (0 == strcmp(func, "vkCmdCopyImage2KHR"))
    return (PFN_vkVoidFunction)GFR::InterceptCmdCopyImage2KHR;
  if (0 == strcmp(func, "vkCmdBlitImage2KHR"))
    return (PFN_vkVoidFunction)GFR::InterceptCmdBlitImage2KHR;
  if (0 == strcmp(func, "vkCmdCopyBufferToImage2KHR"))
    return (PFN_vkVoidFunction)GFR::InterceptCmdCopyBufferToImage2KHR;
  if (0 == strcmp(func, "vkCmdCopyImageToBuffer2KHR"))
    return (PFN_vkVoidFunction)GFR::InterceptCmdCopyImageToBuffer2KHR;
  if (0 == strcmp(func, "vkCmdResolveImage2KHR"))
    return (PFN_vkVoidFunction)GFR::InterceptCmdResolveImage2KHR;
  if (0 == strcmp(func, "vkCmdSetFragmentShadingRateKHR"))
    return (PFN_vkVoidFunction)GFR::InterceptCmdSetFragmentShadingRateKHR;
  if (0 == strcmp(func, "vkGetAccelerationStructureBuildSizesKHR"))
    return (
        PFN_vkVoidFunction)GFR::InterceptGetAccelerationStructureBuildSizesKHR;
  if (0 == strcmp(func, "vkCmdSetVertexInputEXT"))
    return (PFN_vkVoidFunction)GFR::InterceptCmdSetVertexInputEXT;
  if (0 == strcmp(func, "vkCmdSetColorWriteEnableEXT"))
    return (PFN_vkVoidFunction)GFR::InterceptCmdSetColorWriteEnableEXT;
  if (0 == strcmp(func, "vkCmdSetEvent2KHR"))
    return (PFN_vkVoidFunction)GFR::InterceptCmdSetEvent2KHR;
  if (0 == strcmp(func, "vkCmdResetEvent2KHR"))
    return (PFN_vkVoidFunction)GFR::InterceptCmdResetEvent2KHR;
  if (0 == strcmp(func, "vkCmdWaitEvents2KHR"))
    return (PFN_vkVoidFunction)GFR::InterceptCmdWaitEvents2KHR;
  if (0 == strcmp(func, "vkCmdPipelineBarrier2KHR"))
    return (PFN_vkVoidFunction)GFR::InterceptCmdPipelineBarrier2KHR;
  if (0 == strcmp(func, "vkQueueSubmit2KHR"))
    return (PFN_vkVoidFunction)GFR::InterceptQueueSubmit2KHR;
  if (0 == strcmp(func, "vkCmdWriteTimestamp2KHR"))
    return (PFN_vkVoidFunction)GFR::InterceptCmdWriteTimestamp2KHR;
  if (0 == strcmp(func, "vkCmdWriteBufferMarker2AMD"))
    return (PFN_vkVoidFunction)GFR::InterceptCmdWriteBufferMarker2AMD;
  if (0 == strcmp(func, "vkGetQueueCheckpointData2NV"))
    return (PFN_vkVoidFunction)GFR::InterceptGetQueueCheckpointData2NV;
  if (0 == strcmp(func, "vkGetDeviceProcAddr"))
    return (PFN_vkVoidFunction)GFR::InterceptGetDeviceProcAddr;
  if (0 == strcmp(func, "vkDestroyDevice"))
    return (PFN_vkVoidFunction)GFR::InterceptDestroyDevice;
  if (0 == strcmp(func, "vkEnumerateInstanceVersion"))
    return (PFN_vkVoidFunction)GFR::InterceptEnumerateInstanceVersion;
  if (0 == strcmp(func, "vkEnumerateInstanceLayerProperties"))
    return (PFN_vkVoidFunction)GFR::InterceptEnumerateInstanceLayerProperties;
  if (0 == strcmp(func, "vkEnumerateInstanceExtensionProperties"))
    return (
        PFN_vkVoidFunction)GFR::InterceptEnumerateInstanceExtensionProperties;
  if (0 == strcmp(func, "vkGetDeviceQueue"))
    return (PFN_vkVoidFunction)GFR::InterceptGetDeviceQueue;
  if (0 == strcmp(func, "vkQueueSubmit"))
    return (PFN_vkVoidFunction)GFR::InterceptQueueSubmit;
  if (0 == strcmp(func, "vkQueueWaitIdle"))
    return (PFN_vkVoidFunction)GFR::InterceptQueueWaitIdle;
  if (0 == strcmp(func, "vkDeviceWaitIdle"))
    return (PFN_vkVoidFunction)GFR::InterceptDeviceWaitIdle;
  if (0 == strcmp(func, "vkAllocateMemory"))
    return (PFN_vkVoidFunction)GFR::InterceptAllocateMemory;
  if (0 == strcmp(func, "vkFreeMemory"))
    return (PFN_vkVoidFunction)GFR::InterceptFreeMemory;
  if (0 == strcmp(func, "vkMapMemory"))
    return (PFN_vkVoidFunction)GFR::InterceptMapMemory;
  if (0 == strcmp(func, "vkUnmapMemory"))
    return (PFN_vkVoidFunction)GFR::InterceptUnmapMemory;
  if (0 == strcmp(func, "vkFlushMappedMemoryRanges"))
    return (PFN_vkVoidFunction)GFR::InterceptFlushMappedMemoryRanges;
  if (0 == strcmp(func, "vkInvalidateMappedMemoryRanges"))
    return (PFN_vkVoidFunction)GFR::InterceptInvalidateMappedMemoryRanges;
  if (0 == strcmp(func, "vkGetDeviceMemoryCommitment"))
    return (PFN_vkVoidFunction)GFR::InterceptGetDeviceMemoryCommitment;
  if (0 == strcmp(func, "vkGetBufferMemoryRequirements"))
    return (PFN_vkVoidFunction)GFR::InterceptGetBufferMemoryRequirements;
  if (0 == strcmp(func, "vkBindBufferMemory"))
    return (PFN_vkVoidFunction)GFR::InterceptBindBufferMemory;
  if (0 == strcmp(func, "vkGetImageMemoryRequirements"))
    return (PFN_vkVoidFunction)GFR::InterceptGetImageMemoryRequirements;
  if (0 == strcmp(func, "vkBindImageMemory"))
    return (PFN_vkVoidFunction)GFR::InterceptBindImageMemory;
  if (0 == strcmp(func, "vkGetImageSparseMemoryRequirements"))
    return (PFN_vkVoidFunction)GFR::InterceptGetImageSparseMemoryRequirements;
  if (0 == strcmp(func, "vkQueueBindSparse"))
    return (PFN_vkVoidFunction)GFR::InterceptQueueBindSparse;
  if (0 == strcmp(func, "vkCreateFence"))
    return (PFN_vkVoidFunction)GFR::InterceptCreateFence;
  if (0 == strcmp(func, "vkDestroyFence"))
    return (PFN_vkVoidFunction)GFR::InterceptDestroyFence;
  if (0 == strcmp(func, "vkResetFences"))
    return (PFN_vkVoidFunction)GFR::InterceptResetFences;
  if (0 == strcmp(func, "vkGetFenceStatus"))
    return (PFN_vkVoidFunction)GFR::InterceptGetFenceStatus;
  if (0 == strcmp(func, "vkWaitForFences"))
    return (PFN_vkVoidFunction)GFR::InterceptWaitForFences;
  if (0 == strcmp(func, "vkCreateSemaphore"))
    return (PFN_vkVoidFunction)GFR::InterceptCreateSemaphore;
  if (0 == strcmp(func, "vkDestroySemaphore"))
    return (PFN_vkVoidFunction)GFR::InterceptDestroySemaphore;
  if (0 == strcmp(func, "vkCreateEvent"))
    return (PFN_vkVoidFunction)GFR::InterceptCreateEvent;
  if (0 == strcmp(func, "vkDestroyEvent"))
    return (PFN_vkVoidFunction)GFR::InterceptDestroyEvent;
  if (0 == strcmp(func, "vkGetEventStatus"))
    return (PFN_vkVoidFunction)GFR::InterceptGetEventStatus;
  if (0 == strcmp(func, "vkSetEvent"))
    return (PFN_vkVoidFunction)GFR::InterceptSetEvent;
  if (0 == strcmp(func, "vkResetEvent"))
    return (PFN_vkVoidFunction)GFR::InterceptResetEvent;
  if (0 == strcmp(func, "vkCreateQueryPool"))
    return (PFN_vkVoidFunction)GFR::InterceptCreateQueryPool;
  if (0 == strcmp(func, "vkDestroyQueryPool"))
    return (PFN_vkVoidFunction)GFR::InterceptDestroyQueryPool;
  if (0 == strcmp(func, "vkGetQueryPoolResults"))
    return (PFN_vkVoidFunction)GFR::InterceptGetQueryPoolResults;
  if (0 == strcmp(func, "vkCreateBuffer"))
    return (PFN_vkVoidFunction)GFR::InterceptCreateBuffer;
  if (0 == strcmp(func, "vkDestroyBuffer"))
    return (PFN_vkVoidFunction)GFR::InterceptDestroyBuffer;
  if (0 == strcmp(func, "vkCreateBufferView"))
    return (PFN_vkVoidFunction)GFR::InterceptCreateBufferView;
  if (0 == strcmp(func, "vkDestroyBufferView"))
    return (PFN_vkVoidFunction)GFR::InterceptDestroyBufferView;
  if (0 == strcmp(func, "vkCreateImage"))
    return (PFN_vkVoidFunction)GFR::InterceptCreateImage;
  if (0 == strcmp(func, "vkDestroyImage"))
    return (PFN_vkVoidFunction)GFR::InterceptDestroyImage;
  if (0 == strcmp(func, "vkGetImageSubresourceLayout"))
    return (PFN_vkVoidFunction)GFR::InterceptGetImageSubresourceLayout;
  if (0 == strcmp(func, "vkCreateImageView"))
    return (PFN_vkVoidFunction)GFR::InterceptCreateImageView;
  if (0 == strcmp(func, "vkDestroyImageView"))
    return (PFN_vkVoidFunction)GFR::InterceptDestroyImageView;
  if (0 == strcmp(func, "vkCreateShaderModule"))
    return (PFN_vkVoidFunction)GFR::InterceptCreateShaderModule;
  if (0 == strcmp(func, "vkDestroyShaderModule"))
    return (PFN_vkVoidFunction)GFR::InterceptDestroyShaderModule;
  if (0 == strcmp(func, "vkCreatePipelineCache"))
    return (PFN_vkVoidFunction)GFR::InterceptCreatePipelineCache;
  if (0 == strcmp(func, "vkDestroyPipelineCache"))
    return (PFN_vkVoidFunction)GFR::InterceptDestroyPipelineCache;
  if (0 == strcmp(func, "vkGetPipelineCacheData"))
    return (PFN_vkVoidFunction)GFR::InterceptGetPipelineCacheData;
  if (0 == strcmp(func, "vkMergePipelineCaches"))
    return (PFN_vkVoidFunction)GFR::InterceptMergePipelineCaches;
  if (0 == strcmp(func, "vkCreateGraphicsPipelines"))
    return (PFN_vkVoidFunction)GFR::InterceptCreateGraphicsPipelines;
  if (0 == strcmp(func, "vkCreateComputePipelines"))
    return (PFN_vkVoidFunction)GFR::InterceptCreateComputePipelines;
  if (0 == strcmp(func, "vkDestroyPipeline"))
    return (PFN_vkVoidFunction)GFR::InterceptDestroyPipeline;
  if (0 == strcmp(func, "vkCreatePipelineLayout"))
    return (PFN_vkVoidFunction)GFR::InterceptCreatePipelineLayout;
  if (0 == strcmp(func, "vkDestroyPipelineLayout"))
    return (PFN_vkVoidFunction)GFR::InterceptDestroyPipelineLayout;
  if (0 == strcmp(func, "vkCreateSampler"))
    return (PFN_vkVoidFunction)GFR::InterceptCreateSampler;
  if (0 == strcmp(func, "vkDestroySampler"))
    return (PFN_vkVoidFunction)GFR::InterceptDestroySampler;
  if (0 == strcmp(func, "vkCreateDescriptorSetLayout"))
    return (PFN_vkVoidFunction)GFR::InterceptCreateDescriptorSetLayout;
  if (0 == strcmp(func, "vkDestroyDescriptorSetLayout"))
    return (PFN_vkVoidFunction)GFR::InterceptDestroyDescriptorSetLayout;
  if (0 == strcmp(func, "vkCreateDescriptorPool"))
    return (PFN_vkVoidFunction)GFR::InterceptCreateDescriptorPool;
  if (0 == strcmp(func, "vkDestroyDescriptorPool"))
    return (PFN_vkVoidFunction)GFR::InterceptDestroyDescriptorPool;
  if (0 == strcmp(func, "vkResetDescriptorPool"))
    return (PFN_vkVoidFunction)GFR::InterceptResetDescriptorPool;
  if (0 == strcmp(func, "vkAllocateDescriptorSets"))
    return (PFN_vkVoidFunction)GFR::InterceptAllocateDescriptorSets;
  if (0 == strcmp(func, "vkFreeDescriptorSets"))
    return (PFN_vkVoidFunction)GFR::InterceptFreeDescriptorSets;
  if (0 == strcmp(func, "vkUpdateDescriptorSets"))
    return (PFN_vkVoidFunction)GFR::InterceptUpdateDescriptorSets;
  if (0 == strcmp(func, "vkCreateFramebuffer"))
    return (PFN_vkVoidFunction)GFR::InterceptCreateFramebuffer;
  if (0 == strcmp(func, "vkDestroyFramebuffer"))
    return (PFN_vkVoidFunction)GFR::InterceptDestroyFramebuffer;
  if (0 == strcmp(func, "vkCreateRenderPass"))
    return (PFN_vkVoidFunction)GFR::InterceptCreateRenderPass;
  if (0 == strcmp(func, "vkDestroyRenderPass"))
    return (PFN_vkVoidFunction)GFR::InterceptDestroyRenderPass;
  if (0 == strcmp(func, "vkGetRenderAreaGranularity"))
    return (PFN_vkVoidFunction)GFR::InterceptGetRenderAreaGranularity;
  if (0 == strcmp(func, "vkCreateCommandPool"))
    return (PFN_vkVoidFunction)GFR::InterceptCreateCommandPool;
  if (0 == strcmp(func, "vkDestroyCommandPool"))
    return (PFN_vkVoidFunction)GFR::InterceptDestroyCommandPool;
  if (0 == strcmp(func, "vkResetCommandPool"))
    return (PFN_vkVoidFunction)GFR::InterceptResetCommandPool;
  if (0 == strcmp(func, "vkAllocateCommandBuffers"))
    return (PFN_vkVoidFunction)GFR::InterceptAllocateCommandBuffers;
  if (0 == strcmp(func, "vkFreeCommandBuffers"))
    return (PFN_vkVoidFunction)GFR::InterceptFreeCommandBuffers;
  if (0 == strcmp(func, "vkBeginCommandBuffer"))
    return (PFN_vkVoidFunction)GFR::InterceptBeginCommandBuffer;
  if (0 == strcmp(func, "vkEndCommandBuffer"))
    return (PFN_vkVoidFunction)GFR::InterceptEndCommandBuffer;
  if (0 == strcmp(func, "vkResetCommandBuffer"))
    return (PFN_vkVoidFunction)GFR::InterceptResetCommandBuffer;
  if (0 == strcmp(func, "vkCmdBindPipeline"))
    return (PFN_vkVoidFunction)GFR::InterceptCmdBindPipeline;
  if (0 == strcmp(func, "vkCmdSetViewport"))
    return (PFN_vkVoidFunction)GFR::InterceptCmdSetViewport;
  if (0 == strcmp(func, "vkCmdSetScissor"))
    return (PFN_vkVoidFunction)GFR::InterceptCmdSetScissor;
  if (0 == strcmp(func, "vkCmdSetLineWidth"))
    return (PFN_vkVoidFunction)GFR::InterceptCmdSetLineWidth;
  if (0 == strcmp(func, "vkCmdSetDepthBias"))
    return (PFN_vkVoidFunction)GFR::InterceptCmdSetDepthBias;
  if (0 == strcmp(func, "vkCmdSetBlendConstants"))
    return (PFN_vkVoidFunction)GFR::InterceptCmdSetBlendConstants;
  if (0 == strcmp(func, "vkCmdSetDepthBounds"))
    return (PFN_vkVoidFunction)GFR::InterceptCmdSetDepthBounds;
  if (0 == strcmp(func, "vkCmdSetStencilCompareMask"))
    return (PFN_vkVoidFunction)GFR::InterceptCmdSetStencilCompareMask;
  if (0 == strcmp(func, "vkCmdSetStencilWriteMask"))
    return (PFN_vkVoidFunction)GFR::InterceptCmdSetStencilWriteMask;
  if (0 == strcmp(func, "vkCmdSetStencilReference"))
    return (PFN_vkVoidFunction)GFR::InterceptCmdSetStencilReference;
  if (0 == strcmp(func, "vkCmdBindDescriptorSets"))
    return (PFN_vkVoidFunction)GFR::InterceptCmdBindDescriptorSets;
  if (0 == strcmp(func, "vkCmdBindIndexBuffer"))
    return (PFN_vkVoidFunction)GFR::InterceptCmdBindIndexBuffer;
  if (0 == strcmp(func, "vkCmdBindVertexBuffers"))
    return (PFN_vkVoidFunction)GFR::InterceptCmdBindVertexBuffers;
  if (0 == strcmp(func, "vkCmdDraw"))
    return (PFN_vkVoidFunction)GFR::InterceptCmdDraw;
  if (0 == strcmp(func, "vkCmdDrawIndexed"))
    return (PFN_vkVoidFunction)GFR::InterceptCmdDrawIndexed;
  if (0 == strcmp(func, "vkCmdDrawIndirect"))
    return (PFN_vkVoidFunction)GFR::InterceptCmdDrawIndirect;
  if (0 == strcmp(func, "vkCmdDrawIndexedIndirect"))
    return (PFN_vkVoidFunction)GFR::InterceptCmdDrawIndexedIndirect;
  if (0 == strcmp(func, "vkCmdDispatch"))
    return (PFN_vkVoidFunction)GFR::InterceptCmdDispatch;
  if (0 == strcmp(func, "vkCmdDispatchIndirect"))
    return (PFN_vkVoidFunction)GFR::InterceptCmdDispatchIndirect;
  if (0 == strcmp(func, "vkCmdCopyBuffer"))
    return (PFN_vkVoidFunction)GFR::InterceptCmdCopyBuffer;
  if (0 == strcmp(func, "vkCmdCopyImage"))
    return (PFN_vkVoidFunction)GFR::InterceptCmdCopyImage;
  if (0 == strcmp(func, "vkCmdBlitImage"))
    return (PFN_vkVoidFunction)GFR::InterceptCmdBlitImage;
  if (0 == strcmp(func, "vkCmdCopyBufferToImage"))
    return (PFN_vkVoidFunction)GFR::InterceptCmdCopyBufferToImage;
  if (0 == strcmp(func, "vkCmdCopyImageToBuffer"))
    return (PFN_vkVoidFunction)GFR::InterceptCmdCopyImageToBuffer;
  if (0 == strcmp(func, "vkCmdUpdateBuffer"))
    return (PFN_vkVoidFunction)GFR::InterceptCmdUpdateBuffer;
  if (0 == strcmp(func, "vkCmdFillBuffer"))
    return (PFN_vkVoidFunction)GFR::InterceptCmdFillBuffer;
  if (0 == strcmp(func, "vkCmdClearColorImage"))
    return (PFN_vkVoidFunction)GFR::InterceptCmdClearColorImage;
  if (0 == strcmp(func, "vkCmdClearDepthStencilImage"))
    return (PFN_vkVoidFunction)GFR::InterceptCmdClearDepthStencilImage;
  if (0 == strcmp(func, "vkCmdClearAttachments"))
    return (PFN_vkVoidFunction)GFR::InterceptCmdClearAttachments;
  if (0 == strcmp(func, "vkCmdResolveImage"))
    return (PFN_vkVoidFunction)GFR::InterceptCmdResolveImage;
  if (0 == strcmp(func, "vkCmdSetEvent"))
    return (PFN_vkVoidFunction)GFR::InterceptCmdSetEvent;
  if (0 == strcmp(func, "vkCmdResetEvent"))
    return (PFN_vkVoidFunction)GFR::InterceptCmdResetEvent;
  if (0 == strcmp(func, "vkCmdWaitEvents"))
    return (PFN_vkVoidFunction)GFR::InterceptCmdWaitEvents;
  if (0 == strcmp(func, "vkCmdPipelineBarrier"))
    return (PFN_vkVoidFunction)GFR::InterceptCmdPipelineBarrier;
  if (0 == strcmp(func, "vkCmdBeginQuery"))
    return (PFN_vkVoidFunction)GFR::InterceptCmdBeginQuery;
  if (0 == strcmp(func, "vkCmdEndQuery"))
    return (PFN_vkVoidFunction)GFR::InterceptCmdEndQuery;
  if (0 == strcmp(func, "vkCmdResetQueryPool"))
    return (PFN_vkVoidFunction)GFR::InterceptCmdResetQueryPool;
  if (0 == strcmp(func, "vkCmdWriteTimestamp"))
    return (PFN_vkVoidFunction)GFR::InterceptCmdWriteTimestamp;
  if (0 == strcmp(func, "vkCmdCopyQueryPoolResults"))
    return (PFN_vkVoidFunction)GFR::InterceptCmdCopyQueryPoolResults;
  if (0 == strcmp(func, "vkCmdPushConstants"))
    return (PFN_vkVoidFunction)GFR::InterceptCmdPushConstants;
  if (0 == strcmp(func, "vkCmdBeginRenderPass"))
    return (PFN_vkVoidFunction)GFR::InterceptCmdBeginRenderPass;
  if (0 == strcmp(func, "vkCmdNextSubpass"))
    return (PFN_vkVoidFunction)GFR::InterceptCmdNextSubpass;
  if (0 == strcmp(func, "vkCmdEndRenderPass"))
    return (PFN_vkVoidFunction)GFR::InterceptCmdEndRenderPass;
  if (0 == strcmp(func, "vkCmdExecuteCommands"))
    return (PFN_vkVoidFunction)GFR::InterceptCmdExecuteCommands;
  if (0 == strcmp(func, "vkGetDeviceQueue2"))
    return (PFN_vkVoidFunction)GFR::InterceptGetDeviceQueue2;

#ifdef VK_USE_PLATFORM_GGP

#endif // VK_USE_PLATFORM_GGP

  // List of Vulkan functions of the implemented device extensions
  static const std::vector<std::string> device_ext_func_names{

      "vkDebugMarkerSetObjectNameEXT", "vkDebugMarkerSetObjectTagEXT",
      "vkCmdDebugMarkerBeginEXT",      "vkCmdDebugMarkerEndEXT",
      "vkCmdDebugMarkerInsertEXT",

#ifdef VK_USE_PLATFORM_GGP

#endif // VK_USE_PLATFORM_GGP

  };
  // Check if the layer implements the function in a device extension.
  if (std::find(device_ext_func_names.begin(), device_ext_func_names.end(),
                func) != device_ext_func_names.end()) {
    return nullptr;
  }

  // If the function was not found, just pass it down the chain to support
  // unregistered extensions, such as vkSwapchainCallbackEXT.
  return (PFN_vkVoidFunction)GFR::PassDeviceProcDownTheChain(dev, func);
} // NOLINT(readability/fn_size)

extern "C" DLL_EXPORT VK_LAYER_EXPORT VKAPI_ATTR VkResult VKAPI_CALL
GFR_NegotiateLoaderLayerInterfaceVersion(
    VkNegotiateLayerInterface *pVersionStruct) {
  assert(pVersionStruct != NULL);
  assert(pVersionStruct->sType == LAYER_NEGOTIATE_INTERFACE_STRUCT);
  // Fill in the function pointers if our version is at least capable of having
  // the structure contain them.
  if (pVersionStruct->loaderLayerInterfaceVersion >= 2) {
    pVersionStruct->pfnGetInstanceProcAddr = &GFR_GetInstanceProcAddr;
    pVersionStruct->pfnGetDeviceProcAddr = &GFR_GetDeviceProcAddr;
    pVersionStruct->pfnGetPhysicalDeviceProcAddr = nullptr;
  }
  if (pVersionStruct->loaderLayerInterfaceVersion >
      CURRENT_LOADER_LAYER_INTERFACE_VERSION) {
    pVersionStruct->loaderLayerInterfaceVersion =
        CURRENT_LOADER_LAYER_INTERFACE_VERSION;
  }
  return VK_SUCCESS;
}
