/*
 * Copyright (C) 2021 Google Inc.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 *
 * THIS FILE IS GENERATED BY VkSpecGen. DO NOT EDIT.
 */

// clang-format off
#include <vulkan/vulkan.h>
#include <cassert>

#include "command_common.h"
#include "command_printer.h"
#include "command_tracker.h"

void CommandTracker::Reset()
{
  commands_.clear();
  recorder_.Reset();
}

void CommandTracker::SetNameResolver(const ObjectInfoDB *name_resolver)
{
  printer_.SetNameResolver(name_resolver);
}

void CommandTracker::PrintCommandParameters(std::ostream &os, const Command &cmd, uint32_t indentation)
{
  ScopedOstream sos(os, indentation);
  switch (cmd.type)
  {
    case Command::Type::kUnknown:
      os << "";
      break;


    case Command::Type::kCmdDrawMultiEXT:
      if (cmd.parameters) {
        auto args = reinterpret_cast<CmdDrawMultiEXTArgs *>(cmd.parameters);
        printer_.PrintCmdDrawMultiEXTArgs(os, *args);
      }
      break;

    case Command::Type::kCmdDrawMultiIndexedEXT:
      if (cmd.parameters) {
        auto args = reinterpret_cast<CmdDrawMultiIndexedEXTArgs *>(cmd.parameters);
        printer_.PrintCmdDrawMultiIndexedEXTArgs(os, *args);
      }
      break;

    case Command::Type::kCmdDebugMarkerBeginEXT:
      if (cmd.parameters) {
        auto args = reinterpret_cast<CmdDebugMarkerBeginEXTArgs *>(cmd.parameters);
        printer_.PrintCmdDebugMarkerBeginEXTArgs(os, *args);
      }
      break;

    case Command::Type::kCmdDebugMarkerEndEXT:
      if (cmd.parameters) {
        auto args = reinterpret_cast<CmdDebugMarkerEndEXTArgs *>(cmd.parameters);
        printer_.PrintCmdDebugMarkerEndEXTArgs(os, *args);
      }
      break;

    case Command::Type::kCmdDebugMarkerInsertEXT:
      if (cmd.parameters) {
        auto args = reinterpret_cast<CmdDebugMarkerInsertEXTArgs *>(cmd.parameters);
        printer_.PrintCmdDebugMarkerInsertEXTArgs(os, *args);
      }
      break;

    case Command::Type::kCmdPushDescriptorSetKHR:
      if (cmd.parameters) {
        auto args = reinterpret_cast<CmdPushDescriptorSetKHRArgs *>(cmd.parameters);
        printer_.PrintCmdPushDescriptorSetKHRArgs(os, *args);
      }
      break;

    case Command::Type::kCmdSetDeviceMask:
      if (cmd.parameters) {
        auto args = reinterpret_cast<CmdSetDeviceMaskArgs *>(cmd.parameters);
        printer_.PrintCmdSetDeviceMaskArgs(os, *args);
      }
      break;

    case Command::Type::kCmdSetDeviceMaskKHR:
      if (cmd.parameters) {
        auto args = reinterpret_cast<CmdSetDeviceMaskKHRArgs *>(cmd.parameters);
        printer_.PrintCmdSetDeviceMaskKHRArgs(os, *args);
      }
      break;

    case Command::Type::kCmdDispatchBase:
      if (cmd.parameters) {
        auto args = reinterpret_cast<CmdDispatchBaseArgs *>(cmd.parameters);
        printer_.PrintCmdDispatchBaseArgs(os, *args);
      }
      break;

    case Command::Type::kCmdDispatchBaseKHR:
      if (cmd.parameters) {
        auto args = reinterpret_cast<CmdDispatchBaseKHRArgs *>(cmd.parameters);
        printer_.PrintCmdDispatchBaseKHRArgs(os, *args);
      }
      break;

    case Command::Type::kCmdPushDescriptorSetWithTemplateKHR:
      if (cmd.parameters) {
        auto args = reinterpret_cast<CmdPushDescriptorSetWithTemplateKHRArgs *>(cmd.parameters);
        printer_.PrintCmdPushDescriptorSetWithTemplateKHRArgs(os, *args);
      }
      break;

    case Command::Type::kCmdSetSampleLocationsEXT:
      if (cmd.parameters) {
        auto args = reinterpret_cast<CmdSetSampleLocationsEXTArgs *>(cmd.parameters);
        printer_.PrintCmdSetSampleLocationsEXTArgs(os, *args);
      }
      break;

    case Command::Type::kCmdBeginDebugUtilsLabelEXT:
      if (cmd.parameters) {
        auto args = reinterpret_cast<CmdBeginDebugUtilsLabelEXTArgs *>(cmd.parameters);
        printer_.PrintCmdBeginDebugUtilsLabelEXTArgs(os, *args);
      }
      break;

    case Command::Type::kCmdEndDebugUtilsLabelEXT:
      if (cmd.parameters) {
        auto args = reinterpret_cast<CmdEndDebugUtilsLabelEXTArgs *>(cmd.parameters);
        printer_.PrintCmdEndDebugUtilsLabelEXTArgs(os, *args);
      }
      break;

    case Command::Type::kCmdInsertDebugUtilsLabelEXT:
      if (cmd.parameters) {
        auto args = reinterpret_cast<CmdInsertDebugUtilsLabelEXTArgs *>(cmd.parameters);
        printer_.PrintCmdInsertDebugUtilsLabelEXTArgs(os, *args);
      }
      break;

    case Command::Type::kCmdWriteBufferMarkerAMD:
      if (cmd.parameters) {
        auto args = reinterpret_cast<CmdWriteBufferMarkerAMDArgs *>(cmd.parameters);
        printer_.PrintCmdWriteBufferMarkerAMDArgs(os, *args);
      }
      break;

    case Command::Type::kCmdBeginRenderPass2:
      if (cmd.parameters) {
        auto args = reinterpret_cast<CmdBeginRenderPass2Args *>(cmd.parameters);
        printer_.PrintCmdBeginRenderPass2Args(os, *args);
      }
      break;

    case Command::Type::kCmdBeginRenderPass2KHR:
      if (cmd.parameters) {
        auto args = reinterpret_cast<CmdBeginRenderPass2KHRArgs *>(cmd.parameters);
        printer_.PrintCmdBeginRenderPass2KHRArgs(os, *args);
      }
      break;

    case Command::Type::kCmdNextSubpass2:
      if (cmd.parameters) {
        auto args = reinterpret_cast<CmdNextSubpass2Args *>(cmd.parameters);
        printer_.PrintCmdNextSubpass2Args(os, *args);
      }
      break;

    case Command::Type::kCmdNextSubpass2KHR:
      if (cmd.parameters) {
        auto args = reinterpret_cast<CmdNextSubpass2KHRArgs *>(cmd.parameters);
        printer_.PrintCmdNextSubpass2KHRArgs(os, *args);
      }
      break;

    case Command::Type::kCmdEndRenderPass2:
      if (cmd.parameters) {
        auto args = reinterpret_cast<CmdEndRenderPass2Args *>(cmd.parameters);
        printer_.PrintCmdEndRenderPass2Args(os, *args);
      }
      break;

    case Command::Type::kCmdEndRenderPass2KHR:
      if (cmd.parameters) {
        auto args = reinterpret_cast<CmdEndRenderPass2KHRArgs *>(cmd.parameters);
        printer_.PrintCmdEndRenderPass2KHRArgs(os, *args);
      }
      break;

    case Command::Type::kCmdDrawIndirectCount:
      if (cmd.parameters) {
        auto args = reinterpret_cast<CmdDrawIndirectCountArgs *>(cmd.parameters);
        printer_.PrintCmdDrawIndirectCountArgs(os, *args);
      }
      break;

    case Command::Type::kCmdDrawIndirectCountKHR:
      if (cmd.parameters) {
        auto args = reinterpret_cast<CmdDrawIndirectCountKHRArgs *>(cmd.parameters);
        printer_.PrintCmdDrawIndirectCountKHRArgs(os, *args);
      }
      break;

    case Command::Type::kCmdDrawIndirectCountAMD:
      if (cmd.parameters) {
        auto args = reinterpret_cast<CmdDrawIndirectCountAMDArgs *>(cmd.parameters);
        printer_.PrintCmdDrawIndirectCountAMDArgs(os, *args);
      }
      break;

    case Command::Type::kCmdDrawIndexedIndirectCount:
      if (cmd.parameters) {
        auto args = reinterpret_cast<CmdDrawIndexedIndirectCountArgs *>(cmd.parameters);
        printer_.PrintCmdDrawIndexedIndirectCountArgs(os, *args);
      }
      break;

    case Command::Type::kCmdDrawIndexedIndirectCountKHR:
      if (cmd.parameters) {
        auto args = reinterpret_cast<CmdDrawIndexedIndirectCountKHRArgs *>(cmd.parameters);
        printer_.PrintCmdDrawIndexedIndirectCountKHRArgs(os, *args);
      }
      break;

    case Command::Type::kCmdDrawIndexedIndirectCountAMD:
      if (cmd.parameters) {
        auto args = reinterpret_cast<CmdDrawIndexedIndirectCountAMDArgs *>(cmd.parameters);
        printer_.PrintCmdDrawIndexedIndirectCountAMDArgs(os, *args);
      }
      break;

    case Command::Type::kCmdCopyAccelerationStructureKHR:
      if (cmd.parameters) {
        auto args = reinterpret_cast<CmdCopyAccelerationStructureKHRArgs *>(cmd.parameters);
        printer_.PrintCmdCopyAccelerationStructureKHRArgs(os, *args);
      }
      break;

    case Command::Type::kCmdCopyAccelerationStructureToMemoryKHR:
      if (cmd.parameters) {
        auto args = reinterpret_cast<CmdCopyAccelerationStructureToMemoryKHRArgs *>(cmd.parameters);
        printer_.PrintCmdCopyAccelerationStructureToMemoryKHRArgs(os, *args);
      }
      break;

    case Command::Type::kCmdCopyMemoryToAccelerationStructureKHR:
      if (cmd.parameters) {
        auto args = reinterpret_cast<CmdCopyMemoryToAccelerationStructureKHRArgs *>(cmd.parameters);
        printer_.PrintCmdCopyMemoryToAccelerationStructureKHRArgs(os, *args);
      }
      break;

    case Command::Type::kCmdWriteAccelerationStructuresPropertiesKHR:
      if (cmd.parameters) {
        auto args = reinterpret_cast<CmdWriteAccelerationStructuresPropertiesKHRArgs *>(cmd.parameters);
        printer_.PrintCmdWriteAccelerationStructuresPropertiesKHRArgs(os, *args);
      }
      break;

    case Command::Type::kCmdTraceRaysKHR:
      if (cmd.parameters) {
        auto args = reinterpret_cast<CmdTraceRaysKHRArgs *>(cmd.parameters);
        printer_.PrintCmdTraceRaysKHRArgs(os, *args);
      }
      break;

    case Command::Type::kCmdTraceRaysIndirectKHR:
      if (cmd.parameters) {
        auto args = reinterpret_cast<CmdTraceRaysIndirectKHRArgs *>(cmd.parameters);
        printer_.PrintCmdTraceRaysIndirectKHRArgs(os, *args);
      }
      break;

    case Command::Type::kCmdSetRayTracingPipelineStackSizeKHR:
      if (cmd.parameters) {
        auto args = reinterpret_cast<CmdSetRayTracingPipelineStackSizeKHRArgs *>(cmd.parameters);
        printer_.PrintCmdSetRayTracingPipelineStackSizeKHRArgs(os, *args);
      }
      break;

    case Command::Type::kCmdSetLineStippleEXT:
      if (cmd.parameters) {
        auto args = reinterpret_cast<CmdSetLineStippleEXTArgs *>(cmd.parameters);
        printer_.PrintCmdSetLineStippleEXTArgs(os, *args);
      }
      break;

    case Command::Type::kCmdBuildAccelerationStructuresKHR:
      if (cmd.parameters) {
        auto args = reinterpret_cast<CmdBuildAccelerationStructuresKHRArgs *>(cmd.parameters);
        printer_.PrintCmdBuildAccelerationStructuresKHRArgs(os, *args);
      }
      break;

    case Command::Type::kCmdBuildAccelerationStructuresIndirectKHR:
      if (cmd.parameters) {
        auto args = reinterpret_cast<CmdBuildAccelerationStructuresIndirectKHRArgs *>(cmd.parameters);
        printer_.PrintCmdBuildAccelerationStructuresIndirectKHRArgs(os, *args);
      }
      break;

    case Command::Type::kCmdSetCullModeEXT:
      if (cmd.parameters) {
        auto args = reinterpret_cast<CmdSetCullModeEXTArgs *>(cmd.parameters);
        printer_.PrintCmdSetCullModeEXTArgs(os, *args);
      }
      break;

    case Command::Type::kCmdSetFrontFaceEXT:
      if (cmd.parameters) {
        auto args = reinterpret_cast<CmdSetFrontFaceEXTArgs *>(cmd.parameters);
        printer_.PrintCmdSetFrontFaceEXTArgs(os, *args);
      }
      break;

    case Command::Type::kCmdSetPrimitiveTopologyEXT:
      if (cmd.parameters) {
        auto args = reinterpret_cast<CmdSetPrimitiveTopologyEXTArgs *>(cmd.parameters);
        printer_.PrintCmdSetPrimitiveTopologyEXTArgs(os, *args);
      }
      break;

    case Command::Type::kCmdSetViewportWithCountEXT:
      if (cmd.parameters) {
        auto args = reinterpret_cast<CmdSetViewportWithCountEXTArgs *>(cmd.parameters);
        printer_.PrintCmdSetViewportWithCountEXTArgs(os, *args);
      }
      break;

    case Command::Type::kCmdSetScissorWithCountEXT:
      if (cmd.parameters) {
        auto args = reinterpret_cast<CmdSetScissorWithCountEXTArgs *>(cmd.parameters);
        printer_.PrintCmdSetScissorWithCountEXTArgs(os, *args);
      }
      break;

    case Command::Type::kCmdBindVertexBuffers2EXT:
      if (cmd.parameters) {
        auto args = reinterpret_cast<CmdBindVertexBuffers2EXTArgs *>(cmd.parameters);
        printer_.PrintCmdBindVertexBuffers2EXTArgs(os, *args);
      }
      break;

    case Command::Type::kCmdSetDepthTestEnableEXT:
      if (cmd.parameters) {
        auto args = reinterpret_cast<CmdSetDepthTestEnableEXTArgs *>(cmd.parameters);
        printer_.PrintCmdSetDepthTestEnableEXTArgs(os, *args);
      }
      break;

    case Command::Type::kCmdSetDepthWriteEnableEXT:
      if (cmd.parameters) {
        auto args = reinterpret_cast<CmdSetDepthWriteEnableEXTArgs *>(cmd.parameters);
        printer_.PrintCmdSetDepthWriteEnableEXTArgs(os, *args);
      }
      break;

    case Command::Type::kCmdSetDepthCompareOpEXT:
      if (cmd.parameters) {
        auto args = reinterpret_cast<CmdSetDepthCompareOpEXTArgs *>(cmd.parameters);
        printer_.PrintCmdSetDepthCompareOpEXTArgs(os, *args);
      }
      break;

    case Command::Type::kCmdSetDepthBoundsTestEnableEXT:
      if (cmd.parameters) {
        auto args = reinterpret_cast<CmdSetDepthBoundsTestEnableEXTArgs *>(cmd.parameters);
        printer_.PrintCmdSetDepthBoundsTestEnableEXTArgs(os, *args);
      }
      break;

    case Command::Type::kCmdSetStencilTestEnableEXT:
      if (cmd.parameters) {
        auto args = reinterpret_cast<CmdSetStencilTestEnableEXTArgs *>(cmd.parameters);
        printer_.PrintCmdSetStencilTestEnableEXTArgs(os, *args);
      }
      break;

    case Command::Type::kCmdSetStencilOpEXT:
      if (cmd.parameters) {
        auto args = reinterpret_cast<CmdSetStencilOpEXTArgs *>(cmd.parameters);
        printer_.PrintCmdSetStencilOpEXTArgs(os, *args);
      }
      break;

    case Command::Type::kCmdSetPatchControlPointsEXT:
      if (cmd.parameters) {
        auto args = reinterpret_cast<CmdSetPatchControlPointsEXTArgs *>(cmd.parameters);
        printer_.PrintCmdSetPatchControlPointsEXTArgs(os, *args);
      }
      break;

    case Command::Type::kCmdSetRasterizerDiscardEnableEXT:
      if (cmd.parameters) {
        auto args = reinterpret_cast<CmdSetRasterizerDiscardEnableEXTArgs *>(cmd.parameters);
        printer_.PrintCmdSetRasterizerDiscardEnableEXTArgs(os, *args);
      }
      break;

    case Command::Type::kCmdSetDepthBiasEnableEXT:
      if (cmd.parameters) {
        auto args = reinterpret_cast<CmdSetDepthBiasEnableEXTArgs *>(cmd.parameters);
        printer_.PrintCmdSetDepthBiasEnableEXTArgs(os, *args);
      }
      break;

    case Command::Type::kCmdSetLogicOpEXT:
      if (cmd.parameters) {
        auto args = reinterpret_cast<CmdSetLogicOpEXTArgs *>(cmd.parameters);
        printer_.PrintCmdSetLogicOpEXTArgs(os, *args);
      }
      break;

    case Command::Type::kCmdSetPrimitiveRestartEnableEXT:
      if (cmd.parameters) {
        auto args = reinterpret_cast<CmdSetPrimitiveRestartEnableEXTArgs *>(cmd.parameters);
        printer_.PrintCmdSetPrimitiveRestartEnableEXTArgs(os, *args);
      }
      break;

    case Command::Type::kCmdCopyBuffer2KHR:
      if (cmd.parameters) {
        auto args = reinterpret_cast<CmdCopyBuffer2KHRArgs *>(cmd.parameters);
        printer_.PrintCmdCopyBuffer2KHRArgs(os, *args);
      }
      break;

    case Command::Type::kCmdCopyImage2KHR:
      if (cmd.parameters) {
        auto args = reinterpret_cast<CmdCopyImage2KHRArgs *>(cmd.parameters);
        printer_.PrintCmdCopyImage2KHRArgs(os, *args);
      }
      break;

    case Command::Type::kCmdBlitImage2KHR:
      if (cmd.parameters) {
        auto args = reinterpret_cast<CmdBlitImage2KHRArgs *>(cmd.parameters);
        printer_.PrintCmdBlitImage2KHRArgs(os, *args);
      }
      break;

    case Command::Type::kCmdCopyBufferToImage2KHR:
      if (cmd.parameters) {
        auto args = reinterpret_cast<CmdCopyBufferToImage2KHRArgs *>(cmd.parameters);
        printer_.PrintCmdCopyBufferToImage2KHRArgs(os, *args);
      }
      break;

    case Command::Type::kCmdCopyImageToBuffer2KHR:
      if (cmd.parameters) {
        auto args = reinterpret_cast<CmdCopyImageToBuffer2KHRArgs *>(cmd.parameters);
        printer_.PrintCmdCopyImageToBuffer2KHRArgs(os, *args);
      }
      break;

    case Command::Type::kCmdResolveImage2KHR:
      if (cmd.parameters) {
        auto args = reinterpret_cast<CmdResolveImage2KHRArgs *>(cmd.parameters);
        printer_.PrintCmdResolveImage2KHRArgs(os, *args);
      }
      break;

    case Command::Type::kCmdSetFragmentShadingRateKHR:
      if (cmd.parameters) {
        auto args = reinterpret_cast<CmdSetFragmentShadingRateKHRArgs *>(cmd.parameters);
        printer_.PrintCmdSetFragmentShadingRateKHRArgs(os, *args);
      }
      break;

    case Command::Type::kCmdSetVertexInputEXT:
      if (cmd.parameters) {
        auto args = reinterpret_cast<CmdSetVertexInputEXTArgs *>(cmd.parameters);
        printer_.PrintCmdSetVertexInputEXTArgs(os, *args);
      }
      break;

    case Command::Type::kCmdSetColorWriteEnableEXT:
      if (cmd.parameters) {
        auto args = reinterpret_cast<CmdSetColorWriteEnableEXTArgs *>(cmd.parameters);
        printer_.PrintCmdSetColorWriteEnableEXTArgs(os, *args);
      }
      break;

    case Command::Type::kCmdSetEvent2KHR:
      if (cmd.parameters) {
        auto args = reinterpret_cast<CmdSetEvent2KHRArgs *>(cmd.parameters);
        printer_.PrintCmdSetEvent2KHRArgs(os, *args);
      }
      break;

    case Command::Type::kCmdResetEvent2KHR:
      if (cmd.parameters) {
        auto args = reinterpret_cast<CmdResetEvent2KHRArgs *>(cmd.parameters);
        printer_.PrintCmdResetEvent2KHRArgs(os, *args);
      }
      break;

    case Command::Type::kCmdWaitEvents2KHR:
      if (cmd.parameters) {
        auto args = reinterpret_cast<CmdWaitEvents2KHRArgs *>(cmd.parameters);
        printer_.PrintCmdWaitEvents2KHRArgs(os, *args);
      }
      break;

    case Command::Type::kCmdPipelineBarrier2KHR:
      if (cmd.parameters) {
        auto args = reinterpret_cast<CmdPipelineBarrier2KHRArgs *>(cmd.parameters);
        printer_.PrintCmdPipelineBarrier2KHRArgs(os, *args);
      }
      break;

    case Command::Type::kCmdWriteTimestamp2KHR:
      if (cmd.parameters) {
        auto args = reinterpret_cast<CmdWriteTimestamp2KHRArgs *>(cmd.parameters);
        printer_.PrintCmdWriteTimestamp2KHRArgs(os, *args);
      }
      break;

    case Command::Type::kCmdWriteBufferMarker2AMD:
      if (cmd.parameters) {
        auto args = reinterpret_cast<CmdWriteBufferMarker2AMDArgs *>(cmd.parameters);
        printer_.PrintCmdWriteBufferMarker2AMDArgs(os, *args);
      }
      break;

    case Command::Type::kBeginCommandBuffer:
      if (cmd.parameters) {
        auto args = reinterpret_cast<BeginCommandBufferArgs *>(cmd.parameters);
        printer_.PrintBeginCommandBufferArgs(os, *args);
      }
      break;

    case Command::Type::kEndCommandBuffer:
      if (cmd.parameters) {
        auto args = reinterpret_cast<EndCommandBufferArgs *>(cmd.parameters);
        printer_.PrintEndCommandBufferArgs(os, *args);
      }
      break;

    case Command::Type::kResetCommandBuffer:
      if (cmd.parameters) {
        auto args = reinterpret_cast<ResetCommandBufferArgs *>(cmd.parameters);
        printer_.PrintResetCommandBufferArgs(os, *args);
      }
      break;

    case Command::Type::kCmdBindPipeline:
      if (cmd.parameters) {
        auto args = reinterpret_cast<CmdBindPipelineArgs *>(cmd.parameters);
        printer_.PrintCmdBindPipelineArgs(os, *args);
      }
      break;

    case Command::Type::kCmdSetViewport:
      if (cmd.parameters) {
        auto args = reinterpret_cast<CmdSetViewportArgs *>(cmd.parameters);
        printer_.PrintCmdSetViewportArgs(os, *args);
      }
      break;

    case Command::Type::kCmdSetScissor:
      if (cmd.parameters) {
        auto args = reinterpret_cast<CmdSetScissorArgs *>(cmd.parameters);
        printer_.PrintCmdSetScissorArgs(os, *args);
      }
      break;

    case Command::Type::kCmdSetLineWidth:
      if (cmd.parameters) {
        auto args = reinterpret_cast<CmdSetLineWidthArgs *>(cmd.parameters);
        printer_.PrintCmdSetLineWidthArgs(os, *args);
      }
      break;

    case Command::Type::kCmdSetDepthBias:
      if (cmd.parameters) {
        auto args = reinterpret_cast<CmdSetDepthBiasArgs *>(cmd.parameters);
        printer_.PrintCmdSetDepthBiasArgs(os, *args);
      }
      break;

    case Command::Type::kCmdSetBlendConstants:
      if (cmd.parameters) {
        auto args = reinterpret_cast<CmdSetBlendConstantsArgs *>(cmd.parameters);
        printer_.PrintCmdSetBlendConstantsArgs(os, *args);
      }
      break;

    case Command::Type::kCmdSetDepthBounds:
      if (cmd.parameters) {
        auto args = reinterpret_cast<CmdSetDepthBoundsArgs *>(cmd.parameters);
        printer_.PrintCmdSetDepthBoundsArgs(os, *args);
      }
      break;

    case Command::Type::kCmdSetStencilCompareMask:
      if (cmd.parameters) {
        auto args = reinterpret_cast<CmdSetStencilCompareMaskArgs *>(cmd.parameters);
        printer_.PrintCmdSetStencilCompareMaskArgs(os, *args);
      }
      break;

    case Command::Type::kCmdSetStencilWriteMask:
      if (cmd.parameters) {
        auto args = reinterpret_cast<CmdSetStencilWriteMaskArgs *>(cmd.parameters);
        printer_.PrintCmdSetStencilWriteMaskArgs(os, *args);
      }
      break;

    case Command::Type::kCmdSetStencilReference:
      if (cmd.parameters) {
        auto args = reinterpret_cast<CmdSetStencilReferenceArgs *>(cmd.parameters);
        printer_.PrintCmdSetStencilReferenceArgs(os, *args);
      }
      break;

    case Command::Type::kCmdBindDescriptorSets:
      if (cmd.parameters) {
        auto args = reinterpret_cast<CmdBindDescriptorSetsArgs *>(cmd.parameters);
        printer_.PrintCmdBindDescriptorSetsArgs(os, *args);
      }
      break;

    case Command::Type::kCmdBindIndexBuffer:
      if (cmd.parameters) {
        auto args = reinterpret_cast<CmdBindIndexBufferArgs *>(cmd.parameters);
        printer_.PrintCmdBindIndexBufferArgs(os, *args);
      }
      break;

    case Command::Type::kCmdBindVertexBuffers:
      if (cmd.parameters) {
        auto args = reinterpret_cast<CmdBindVertexBuffersArgs *>(cmd.parameters);
        printer_.PrintCmdBindVertexBuffersArgs(os, *args);
      }
      break;

    case Command::Type::kCmdDraw:
      if (cmd.parameters) {
        auto args = reinterpret_cast<CmdDrawArgs *>(cmd.parameters);
        printer_.PrintCmdDrawArgs(os, *args);
      }
      break;

    case Command::Type::kCmdDrawIndexed:
      if (cmd.parameters) {
        auto args = reinterpret_cast<CmdDrawIndexedArgs *>(cmd.parameters);
        printer_.PrintCmdDrawIndexedArgs(os, *args);
      }
      break;

    case Command::Type::kCmdDrawIndirect:
      if (cmd.parameters) {
        auto args = reinterpret_cast<CmdDrawIndirectArgs *>(cmd.parameters);
        printer_.PrintCmdDrawIndirectArgs(os, *args);
      }
      break;

    case Command::Type::kCmdDrawIndexedIndirect:
      if (cmd.parameters) {
        auto args = reinterpret_cast<CmdDrawIndexedIndirectArgs *>(cmd.parameters);
        printer_.PrintCmdDrawIndexedIndirectArgs(os, *args);
      }
      break;

    case Command::Type::kCmdDispatch:
      if (cmd.parameters) {
        auto args = reinterpret_cast<CmdDispatchArgs *>(cmd.parameters);
        printer_.PrintCmdDispatchArgs(os, *args);
      }
      break;

    case Command::Type::kCmdDispatchIndirect:
      if (cmd.parameters) {
        auto args = reinterpret_cast<CmdDispatchIndirectArgs *>(cmd.parameters);
        printer_.PrintCmdDispatchIndirectArgs(os, *args);
      }
      break;

    case Command::Type::kCmdCopyBuffer:
      if (cmd.parameters) {
        auto args = reinterpret_cast<CmdCopyBufferArgs *>(cmd.parameters);
        printer_.PrintCmdCopyBufferArgs(os, *args);
      }
      break;

    case Command::Type::kCmdCopyImage:
      if (cmd.parameters) {
        auto args = reinterpret_cast<CmdCopyImageArgs *>(cmd.parameters);
        printer_.PrintCmdCopyImageArgs(os, *args);
      }
      break;

    case Command::Type::kCmdBlitImage:
      if (cmd.parameters) {
        auto args = reinterpret_cast<CmdBlitImageArgs *>(cmd.parameters);
        printer_.PrintCmdBlitImageArgs(os, *args);
      }
      break;

    case Command::Type::kCmdCopyBufferToImage:
      if (cmd.parameters) {
        auto args = reinterpret_cast<CmdCopyBufferToImageArgs *>(cmd.parameters);
        printer_.PrintCmdCopyBufferToImageArgs(os, *args);
      }
      break;

    case Command::Type::kCmdCopyImageToBuffer:
      if (cmd.parameters) {
        auto args = reinterpret_cast<CmdCopyImageToBufferArgs *>(cmd.parameters);
        printer_.PrintCmdCopyImageToBufferArgs(os, *args);
      }
      break;

    case Command::Type::kCmdUpdateBuffer:
      if (cmd.parameters) {
        auto args = reinterpret_cast<CmdUpdateBufferArgs *>(cmd.parameters);
        printer_.PrintCmdUpdateBufferArgs(os, *args);
      }
      break;

    case Command::Type::kCmdFillBuffer:
      if (cmd.parameters) {
        auto args = reinterpret_cast<CmdFillBufferArgs *>(cmd.parameters);
        printer_.PrintCmdFillBufferArgs(os, *args);
      }
      break;

    case Command::Type::kCmdClearColorImage:
      if (cmd.parameters) {
        auto args = reinterpret_cast<CmdClearColorImageArgs *>(cmd.parameters);
        printer_.PrintCmdClearColorImageArgs(os, *args);
      }
      break;

    case Command::Type::kCmdClearDepthStencilImage:
      if (cmd.parameters) {
        auto args = reinterpret_cast<CmdClearDepthStencilImageArgs *>(cmd.parameters);
        printer_.PrintCmdClearDepthStencilImageArgs(os, *args);
      }
      break;

    case Command::Type::kCmdClearAttachments:
      if (cmd.parameters) {
        auto args = reinterpret_cast<CmdClearAttachmentsArgs *>(cmd.parameters);
        printer_.PrintCmdClearAttachmentsArgs(os, *args);
      }
      break;

    case Command::Type::kCmdResolveImage:
      if (cmd.parameters) {
        auto args = reinterpret_cast<CmdResolveImageArgs *>(cmd.parameters);
        printer_.PrintCmdResolveImageArgs(os, *args);
      }
      break;

    case Command::Type::kCmdSetEvent:
      if (cmd.parameters) {
        auto args = reinterpret_cast<CmdSetEventArgs *>(cmd.parameters);
        printer_.PrintCmdSetEventArgs(os, *args);
      }
      break;

    case Command::Type::kCmdResetEvent:
      if (cmd.parameters) {
        auto args = reinterpret_cast<CmdResetEventArgs *>(cmd.parameters);
        printer_.PrintCmdResetEventArgs(os, *args);
      }
      break;

    case Command::Type::kCmdWaitEvents:
      if (cmd.parameters) {
        auto args = reinterpret_cast<CmdWaitEventsArgs *>(cmd.parameters);
        printer_.PrintCmdWaitEventsArgs(os, *args);
      }
      break;

    case Command::Type::kCmdPipelineBarrier:
      if (cmd.parameters) {
        auto args = reinterpret_cast<CmdPipelineBarrierArgs *>(cmd.parameters);
        printer_.PrintCmdPipelineBarrierArgs(os, *args);
      }
      break;

    case Command::Type::kCmdBeginQuery:
      if (cmd.parameters) {
        auto args = reinterpret_cast<CmdBeginQueryArgs *>(cmd.parameters);
        printer_.PrintCmdBeginQueryArgs(os, *args);
      }
      break;

    case Command::Type::kCmdEndQuery:
      if (cmd.parameters) {
        auto args = reinterpret_cast<CmdEndQueryArgs *>(cmd.parameters);
        printer_.PrintCmdEndQueryArgs(os, *args);
      }
      break;

    case Command::Type::kCmdResetQueryPool:
      if (cmd.parameters) {
        auto args = reinterpret_cast<CmdResetQueryPoolArgs *>(cmd.parameters);
        printer_.PrintCmdResetQueryPoolArgs(os, *args);
      }
      break;

    case Command::Type::kCmdWriteTimestamp:
      if (cmd.parameters) {
        auto args = reinterpret_cast<CmdWriteTimestampArgs *>(cmd.parameters);
        printer_.PrintCmdWriteTimestampArgs(os, *args);
      }
      break;

    case Command::Type::kCmdCopyQueryPoolResults:
      if (cmd.parameters) {
        auto args = reinterpret_cast<CmdCopyQueryPoolResultsArgs *>(cmd.parameters);
        printer_.PrintCmdCopyQueryPoolResultsArgs(os, *args);
      }
      break;

    case Command::Type::kCmdPushConstants:
      if (cmd.parameters) {
        auto args = reinterpret_cast<CmdPushConstantsArgs *>(cmd.parameters);
        printer_.PrintCmdPushConstantsArgs(os, *args);
      }
      break;

    case Command::Type::kCmdBeginRenderPass:
      if (cmd.parameters) {
        auto args = reinterpret_cast<CmdBeginRenderPassArgs *>(cmd.parameters);
        printer_.PrintCmdBeginRenderPassArgs(os, *args);
      }
      break;

    case Command::Type::kCmdNextSubpass:
      if (cmd.parameters) {
        auto args = reinterpret_cast<CmdNextSubpassArgs *>(cmd.parameters);
        printer_.PrintCmdNextSubpassArgs(os, *args);
      }
      break;

    case Command::Type::kCmdEndRenderPass:
      if (cmd.parameters) {
        auto args = reinterpret_cast<CmdEndRenderPassArgs *>(cmd.parameters);
        printer_.PrintCmdEndRenderPassArgs(os, *args);
      }
      break;

    case Command::Type::kCmdExecuteCommands:
      if (cmd.parameters) {
        auto args = reinterpret_cast<CmdExecuteCommandsArgs *>(cmd.parameters);
        printer_.PrintCmdExecuteCommandsArgs(os, *args);
      }
      break;

#ifdef VK_USE_PLATFORM_GGP 

#endif // VK_USE_PLATFORM_GGP
  };
}



void CommandTracker::TrackPreCmdDrawMultiEXT(VkCommandBuffer commandBuffer, uint32_t drawCount, const VkMultiDrawInfoEXT* pVertexInfo, uint32_t instanceCount, uint32_t firstInstance, uint32_t stride)
{
  Command cmd;
  cmd.type = Command::Type::kCmdDrawMultiEXT;
  cmd.id = static_cast<uint32_t>(commands_.size()) + 1;
  cmd.parameters = recorder_.RecordCmdDrawMultiEXT(commandBuffer, drawCount, pVertexInfo, instanceCount, firstInstance, stride);
  commands_.push_back(cmd);
}

void CommandTracker::TrackPostCmdDrawMultiEXT(VkCommandBuffer commandBuffer, uint32_t drawCount, const VkMultiDrawInfoEXT* pVertexInfo, uint32_t instanceCount, uint32_t firstInstance, uint32_t stride)
{
  assert(commands_.back().type == Command::Type::kCmdDrawMultiEXT);
}

void CommandTracker::TrackPreCmdDrawMultiIndexedEXT(VkCommandBuffer commandBuffer, uint32_t drawCount, const VkMultiDrawIndexedInfoEXT* pIndexInfo, uint32_t instanceCount, uint32_t firstInstance, uint32_t stride, const int32_t* pVertexOffset)
{
  Command cmd;
  cmd.type = Command::Type::kCmdDrawMultiIndexedEXT;
  cmd.id = static_cast<uint32_t>(commands_.size()) + 1;
  cmd.parameters = recorder_.RecordCmdDrawMultiIndexedEXT(commandBuffer, drawCount, pIndexInfo, instanceCount, firstInstance, stride, pVertexOffset);
  commands_.push_back(cmd);
}

void CommandTracker::TrackPostCmdDrawMultiIndexedEXT(VkCommandBuffer commandBuffer, uint32_t drawCount, const VkMultiDrawIndexedInfoEXT* pIndexInfo, uint32_t instanceCount, uint32_t firstInstance, uint32_t stride, const int32_t* pVertexOffset)
{
  assert(commands_.back().type == Command::Type::kCmdDrawMultiIndexedEXT);
}

void CommandTracker::TrackPreCmdDebugMarkerBeginEXT(VkCommandBuffer commandBuffer, const VkDebugMarkerMarkerInfoEXT* pMarkerInfo)
{
  Command cmd;
  cmd.type = Command::Type::kCmdDebugMarkerBeginEXT;
  cmd.id = static_cast<uint32_t>(commands_.size()) + 1;
  cmd.parameters = recorder_.RecordCmdDebugMarkerBeginEXT(commandBuffer, pMarkerInfo);
  commands_.push_back(cmd);
}

void CommandTracker::TrackPostCmdDebugMarkerBeginEXT(VkCommandBuffer commandBuffer, const VkDebugMarkerMarkerInfoEXT* pMarkerInfo)
{
  assert(commands_.back().type == Command::Type::kCmdDebugMarkerBeginEXT);
}

void CommandTracker::TrackPreCmdDebugMarkerEndEXT(VkCommandBuffer commandBuffer)
{
  Command cmd;
  cmd.type = Command::Type::kCmdDebugMarkerEndEXT;
  cmd.id = static_cast<uint32_t>(commands_.size()) + 1;
  cmd.parameters = recorder_.RecordCmdDebugMarkerEndEXT(commandBuffer);
  commands_.push_back(cmd);
}

void CommandTracker::TrackPostCmdDebugMarkerEndEXT(VkCommandBuffer commandBuffer)
{
  assert(commands_.back().type == Command::Type::kCmdDebugMarkerEndEXT);
}

void CommandTracker::TrackPreCmdDebugMarkerInsertEXT(VkCommandBuffer commandBuffer, const VkDebugMarkerMarkerInfoEXT* pMarkerInfo)
{
  Command cmd;
  cmd.type = Command::Type::kCmdDebugMarkerInsertEXT;
  cmd.id = static_cast<uint32_t>(commands_.size()) + 1;
  cmd.parameters = recorder_.RecordCmdDebugMarkerInsertEXT(commandBuffer, pMarkerInfo);
  commands_.push_back(cmd);
}

void CommandTracker::TrackPostCmdDebugMarkerInsertEXT(VkCommandBuffer commandBuffer, const VkDebugMarkerMarkerInfoEXT* pMarkerInfo)
{
  assert(commands_.back().type == Command::Type::kCmdDebugMarkerInsertEXT);
}

void CommandTracker::TrackPreCmdPushDescriptorSetKHR(VkCommandBuffer commandBuffer, VkPipelineBindPoint pipelineBindPoint, VkPipelineLayout layout, uint32_t set, uint32_t descriptorWriteCount, const VkWriteDescriptorSet* pDescriptorWrites)
{
  Command cmd;
  cmd.type = Command::Type::kCmdPushDescriptorSetKHR;
  cmd.id = static_cast<uint32_t>(commands_.size()) + 1;
  cmd.parameters = recorder_.RecordCmdPushDescriptorSetKHR(commandBuffer, pipelineBindPoint, layout, set, descriptorWriteCount, pDescriptorWrites);
  commands_.push_back(cmd);
}

void CommandTracker::TrackPostCmdPushDescriptorSetKHR(VkCommandBuffer commandBuffer, VkPipelineBindPoint pipelineBindPoint, VkPipelineLayout layout, uint32_t set, uint32_t descriptorWriteCount, const VkWriteDescriptorSet* pDescriptorWrites)
{
  assert(commands_.back().type == Command::Type::kCmdPushDescriptorSetKHR);
}

void CommandTracker::TrackPreCmdSetDeviceMask(VkCommandBuffer commandBuffer, uint32_t deviceMask)
{
  Command cmd;
  cmd.type = Command::Type::kCmdSetDeviceMask;
  cmd.id = static_cast<uint32_t>(commands_.size()) + 1;
  cmd.parameters = recorder_.RecordCmdSetDeviceMask(commandBuffer, deviceMask);
  commands_.push_back(cmd);
}

void CommandTracker::TrackPostCmdSetDeviceMask(VkCommandBuffer commandBuffer, uint32_t deviceMask)
{
  assert(commands_.back().type == Command::Type::kCmdSetDeviceMask);
}

void CommandTracker::TrackPreCmdSetDeviceMaskKHR(VkCommandBuffer commandBuffer, uint32_t deviceMask)
{
  Command cmd;
  cmd.type = Command::Type::kCmdSetDeviceMaskKHR;
  cmd.id = static_cast<uint32_t>(commands_.size()) + 1;
  cmd.parameters = recorder_.RecordCmdSetDeviceMaskKHR(commandBuffer, deviceMask);
  commands_.push_back(cmd);
}

void CommandTracker::TrackPostCmdSetDeviceMaskKHR(VkCommandBuffer commandBuffer, uint32_t deviceMask)
{
  assert(commands_.back().type == Command::Type::kCmdSetDeviceMaskKHR);
}

void CommandTracker::TrackPreCmdDispatchBase(VkCommandBuffer commandBuffer, uint32_t baseGroupX, uint32_t baseGroupY, uint32_t baseGroupZ, uint32_t groupCountX, uint32_t groupCountY, uint32_t groupCountZ)
{
  Command cmd;
  cmd.type = Command::Type::kCmdDispatchBase;
  cmd.id = static_cast<uint32_t>(commands_.size()) + 1;
  cmd.parameters = recorder_.RecordCmdDispatchBase(commandBuffer, baseGroupX, baseGroupY, baseGroupZ, groupCountX, groupCountY, groupCountZ);
  commands_.push_back(cmd);
}

void CommandTracker::TrackPostCmdDispatchBase(VkCommandBuffer commandBuffer, uint32_t baseGroupX, uint32_t baseGroupY, uint32_t baseGroupZ, uint32_t groupCountX, uint32_t groupCountY, uint32_t groupCountZ)
{
  assert(commands_.back().type == Command::Type::kCmdDispatchBase);
}

void CommandTracker::TrackPreCmdDispatchBaseKHR(VkCommandBuffer commandBuffer, uint32_t baseGroupX, uint32_t baseGroupY, uint32_t baseGroupZ, uint32_t groupCountX, uint32_t groupCountY, uint32_t groupCountZ)
{
  Command cmd;
  cmd.type = Command::Type::kCmdDispatchBaseKHR;
  cmd.id = static_cast<uint32_t>(commands_.size()) + 1;
  cmd.parameters = recorder_.RecordCmdDispatchBaseKHR(commandBuffer, baseGroupX, baseGroupY, baseGroupZ, groupCountX, groupCountY, groupCountZ);
  commands_.push_back(cmd);
}

void CommandTracker::TrackPostCmdDispatchBaseKHR(VkCommandBuffer commandBuffer, uint32_t baseGroupX, uint32_t baseGroupY, uint32_t baseGroupZ, uint32_t groupCountX, uint32_t groupCountY, uint32_t groupCountZ)
{
  assert(commands_.back().type == Command::Type::kCmdDispatchBaseKHR);
}

void CommandTracker::TrackPreCmdPushDescriptorSetWithTemplateKHR(VkCommandBuffer commandBuffer, VkDescriptorUpdateTemplate descriptorUpdateTemplate, VkPipelineLayout layout, uint32_t set, const void* pData)
{
  Command cmd;
  cmd.type = Command::Type::kCmdPushDescriptorSetWithTemplateKHR;
  cmd.id = static_cast<uint32_t>(commands_.size()) + 1;
  cmd.parameters = recorder_.RecordCmdPushDescriptorSetWithTemplateKHR(commandBuffer, descriptorUpdateTemplate, layout, set, pData);
  commands_.push_back(cmd);
}

void CommandTracker::TrackPostCmdPushDescriptorSetWithTemplateKHR(VkCommandBuffer commandBuffer, VkDescriptorUpdateTemplate descriptorUpdateTemplate, VkPipelineLayout layout, uint32_t set, const void* pData)
{
  assert(commands_.back().type == Command::Type::kCmdPushDescriptorSetWithTemplateKHR);
}

void CommandTracker::TrackPreCmdSetSampleLocationsEXT(VkCommandBuffer commandBuffer, const VkSampleLocationsInfoEXT* pSampleLocationsInfo)
{
  Command cmd;
  cmd.type = Command::Type::kCmdSetSampleLocationsEXT;
  cmd.id = static_cast<uint32_t>(commands_.size()) + 1;
  cmd.parameters = recorder_.RecordCmdSetSampleLocationsEXT(commandBuffer, pSampleLocationsInfo);
  commands_.push_back(cmd);
}

void CommandTracker::TrackPostCmdSetSampleLocationsEXT(VkCommandBuffer commandBuffer, const VkSampleLocationsInfoEXT* pSampleLocationsInfo)
{
  assert(commands_.back().type == Command::Type::kCmdSetSampleLocationsEXT);
}

void CommandTracker::TrackPreCmdBeginDebugUtilsLabelEXT(VkCommandBuffer commandBuffer, const VkDebugUtilsLabelEXT* pLabelInfo)
{
  Command cmd;
  cmd.type = Command::Type::kCmdBeginDebugUtilsLabelEXT;
  cmd.id = static_cast<uint32_t>(commands_.size()) + 1;
  cmd.parameters = recorder_.RecordCmdBeginDebugUtilsLabelEXT(commandBuffer, pLabelInfo);
  commands_.push_back(cmd);
}

void CommandTracker::TrackPostCmdBeginDebugUtilsLabelEXT(VkCommandBuffer commandBuffer, const VkDebugUtilsLabelEXT* pLabelInfo)
{
  assert(commands_.back().type == Command::Type::kCmdBeginDebugUtilsLabelEXT);
}

void CommandTracker::TrackPreCmdEndDebugUtilsLabelEXT(VkCommandBuffer commandBuffer)
{
  Command cmd;
  cmd.type = Command::Type::kCmdEndDebugUtilsLabelEXT;
  cmd.id = static_cast<uint32_t>(commands_.size()) + 1;
  cmd.parameters = recorder_.RecordCmdEndDebugUtilsLabelEXT(commandBuffer);
  commands_.push_back(cmd);
}

void CommandTracker::TrackPostCmdEndDebugUtilsLabelEXT(VkCommandBuffer commandBuffer)
{
  assert(commands_.back().type == Command::Type::kCmdEndDebugUtilsLabelEXT);
}

void CommandTracker::TrackPreCmdInsertDebugUtilsLabelEXT(VkCommandBuffer commandBuffer, const VkDebugUtilsLabelEXT* pLabelInfo)
{
  Command cmd;
  cmd.type = Command::Type::kCmdInsertDebugUtilsLabelEXT;
  cmd.id = static_cast<uint32_t>(commands_.size()) + 1;
  cmd.parameters = recorder_.RecordCmdInsertDebugUtilsLabelEXT(commandBuffer, pLabelInfo);
  commands_.push_back(cmd);
}

void CommandTracker::TrackPostCmdInsertDebugUtilsLabelEXT(VkCommandBuffer commandBuffer, const VkDebugUtilsLabelEXT* pLabelInfo)
{
  assert(commands_.back().type == Command::Type::kCmdInsertDebugUtilsLabelEXT);
}

void CommandTracker::TrackPreCmdWriteBufferMarkerAMD(VkCommandBuffer commandBuffer, VkPipelineStageFlagBits pipelineStage, VkBuffer dstBuffer, VkDeviceSize dstOffset, uint32_t marker)
{
  Command cmd;
  cmd.type = Command::Type::kCmdWriteBufferMarkerAMD;
  cmd.id = static_cast<uint32_t>(commands_.size()) + 1;
  cmd.parameters = recorder_.RecordCmdWriteBufferMarkerAMD(commandBuffer, pipelineStage, dstBuffer, dstOffset, marker);
  commands_.push_back(cmd);
}

void CommandTracker::TrackPostCmdWriteBufferMarkerAMD(VkCommandBuffer commandBuffer, VkPipelineStageFlagBits pipelineStage, VkBuffer dstBuffer, VkDeviceSize dstOffset, uint32_t marker)
{
  assert(commands_.back().type == Command::Type::kCmdWriteBufferMarkerAMD);
}

void CommandTracker::TrackPreCmdBeginRenderPass2(VkCommandBuffer commandBuffer, const VkRenderPassBeginInfo* pRenderPassBegin, const VkSubpassBeginInfo* pSubpassBeginInfo)
{
  Command cmd;
  cmd.type = Command::Type::kCmdBeginRenderPass2;
  cmd.id = static_cast<uint32_t>(commands_.size()) + 1;
  cmd.parameters = recorder_.RecordCmdBeginRenderPass2(commandBuffer, pRenderPassBegin, pSubpassBeginInfo);
  commands_.push_back(cmd);
}

void CommandTracker::TrackPostCmdBeginRenderPass2(VkCommandBuffer commandBuffer, const VkRenderPassBeginInfo* pRenderPassBegin, const VkSubpassBeginInfo* pSubpassBeginInfo)
{
  assert(commands_.back().type == Command::Type::kCmdBeginRenderPass2);
}

void CommandTracker::TrackPreCmdBeginRenderPass2KHR(VkCommandBuffer commandBuffer, const VkRenderPassBeginInfo* pRenderPassBegin, const VkSubpassBeginInfo* pSubpassBeginInfo)
{
  Command cmd;
  cmd.type = Command::Type::kCmdBeginRenderPass2KHR;
  cmd.id = static_cast<uint32_t>(commands_.size()) + 1;
  cmd.parameters = recorder_.RecordCmdBeginRenderPass2KHR(commandBuffer, pRenderPassBegin, pSubpassBeginInfo);
  commands_.push_back(cmd);
}

void CommandTracker::TrackPostCmdBeginRenderPass2KHR(VkCommandBuffer commandBuffer, const VkRenderPassBeginInfo* pRenderPassBegin, const VkSubpassBeginInfo* pSubpassBeginInfo)
{
  assert(commands_.back().type == Command::Type::kCmdBeginRenderPass2KHR);
}

void CommandTracker::TrackPreCmdNextSubpass2(VkCommandBuffer commandBuffer, const VkSubpassBeginInfo* pSubpassBeginInfo, const VkSubpassEndInfo* pSubpassEndInfo)
{
  Command cmd;
  cmd.type = Command::Type::kCmdNextSubpass2;
  cmd.id = static_cast<uint32_t>(commands_.size()) + 1;
  cmd.parameters = recorder_.RecordCmdNextSubpass2(commandBuffer, pSubpassBeginInfo, pSubpassEndInfo);
  commands_.push_back(cmd);
}

void CommandTracker::TrackPostCmdNextSubpass2(VkCommandBuffer commandBuffer, const VkSubpassBeginInfo* pSubpassBeginInfo, const VkSubpassEndInfo* pSubpassEndInfo)
{
  assert(commands_.back().type == Command::Type::kCmdNextSubpass2);
}

void CommandTracker::TrackPreCmdNextSubpass2KHR(VkCommandBuffer commandBuffer, const VkSubpassBeginInfo* pSubpassBeginInfo, const VkSubpassEndInfo* pSubpassEndInfo)
{
  Command cmd;
  cmd.type = Command::Type::kCmdNextSubpass2KHR;
  cmd.id = static_cast<uint32_t>(commands_.size()) + 1;
  cmd.parameters = recorder_.RecordCmdNextSubpass2KHR(commandBuffer, pSubpassBeginInfo, pSubpassEndInfo);
  commands_.push_back(cmd);
}

void CommandTracker::TrackPostCmdNextSubpass2KHR(VkCommandBuffer commandBuffer, const VkSubpassBeginInfo* pSubpassBeginInfo, const VkSubpassEndInfo* pSubpassEndInfo)
{
  assert(commands_.back().type == Command::Type::kCmdNextSubpass2KHR);
}

void CommandTracker::TrackPreCmdEndRenderPass2(VkCommandBuffer commandBuffer, const VkSubpassEndInfo* pSubpassEndInfo)
{
  Command cmd;
  cmd.type = Command::Type::kCmdEndRenderPass2;
  cmd.id = static_cast<uint32_t>(commands_.size()) + 1;
  cmd.parameters = recorder_.RecordCmdEndRenderPass2(commandBuffer, pSubpassEndInfo);
  commands_.push_back(cmd);
}

void CommandTracker::TrackPostCmdEndRenderPass2(VkCommandBuffer commandBuffer, const VkSubpassEndInfo* pSubpassEndInfo)
{
  assert(commands_.back().type == Command::Type::kCmdEndRenderPass2);
}

void CommandTracker::TrackPreCmdEndRenderPass2KHR(VkCommandBuffer commandBuffer, const VkSubpassEndInfo* pSubpassEndInfo)
{
  Command cmd;
  cmd.type = Command::Type::kCmdEndRenderPass2KHR;
  cmd.id = static_cast<uint32_t>(commands_.size()) + 1;
  cmd.parameters = recorder_.RecordCmdEndRenderPass2KHR(commandBuffer, pSubpassEndInfo);
  commands_.push_back(cmd);
}

void CommandTracker::TrackPostCmdEndRenderPass2KHR(VkCommandBuffer commandBuffer, const VkSubpassEndInfo* pSubpassEndInfo)
{
  assert(commands_.back().type == Command::Type::kCmdEndRenderPass2KHR);
}

void CommandTracker::TrackPreCmdDrawIndirectCount(VkCommandBuffer commandBuffer, VkBuffer buffer, VkDeviceSize offset, VkBuffer countBuffer, VkDeviceSize countBufferOffset, uint32_t maxDrawCount, uint32_t stride)
{
  Command cmd;
  cmd.type = Command::Type::kCmdDrawIndirectCount;
  cmd.id = static_cast<uint32_t>(commands_.size()) + 1;
  cmd.parameters = recorder_.RecordCmdDrawIndirectCount(commandBuffer, buffer, offset, countBuffer, countBufferOffset, maxDrawCount, stride);
  commands_.push_back(cmd);
}

void CommandTracker::TrackPostCmdDrawIndirectCount(VkCommandBuffer commandBuffer, VkBuffer buffer, VkDeviceSize offset, VkBuffer countBuffer, VkDeviceSize countBufferOffset, uint32_t maxDrawCount, uint32_t stride)
{
  assert(commands_.back().type == Command::Type::kCmdDrawIndirectCount);
}

void CommandTracker::TrackPreCmdDrawIndirectCountKHR(VkCommandBuffer commandBuffer, VkBuffer buffer, VkDeviceSize offset, VkBuffer countBuffer, VkDeviceSize countBufferOffset, uint32_t maxDrawCount, uint32_t stride)
{
  Command cmd;
  cmd.type = Command::Type::kCmdDrawIndirectCountKHR;
  cmd.id = static_cast<uint32_t>(commands_.size()) + 1;
  cmd.parameters = recorder_.RecordCmdDrawIndirectCountKHR(commandBuffer, buffer, offset, countBuffer, countBufferOffset, maxDrawCount, stride);
  commands_.push_back(cmd);
}

void CommandTracker::TrackPostCmdDrawIndirectCountKHR(VkCommandBuffer commandBuffer, VkBuffer buffer, VkDeviceSize offset, VkBuffer countBuffer, VkDeviceSize countBufferOffset, uint32_t maxDrawCount, uint32_t stride)
{
  assert(commands_.back().type == Command::Type::kCmdDrawIndirectCountKHR);
}

void CommandTracker::TrackPreCmdDrawIndirectCountAMD(VkCommandBuffer commandBuffer, VkBuffer buffer, VkDeviceSize offset, VkBuffer countBuffer, VkDeviceSize countBufferOffset, uint32_t maxDrawCount, uint32_t stride)
{
  Command cmd;
  cmd.type = Command::Type::kCmdDrawIndirectCountAMD;
  cmd.id = static_cast<uint32_t>(commands_.size()) + 1;
  cmd.parameters = recorder_.RecordCmdDrawIndirectCountAMD(commandBuffer, buffer, offset, countBuffer, countBufferOffset, maxDrawCount, stride);
  commands_.push_back(cmd);
}

void CommandTracker::TrackPostCmdDrawIndirectCountAMD(VkCommandBuffer commandBuffer, VkBuffer buffer, VkDeviceSize offset, VkBuffer countBuffer, VkDeviceSize countBufferOffset, uint32_t maxDrawCount, uint32_t stride)
{
  assert(commands_.back().type == Command::Type::kCmdDrawIndirectCountAMD);
}

void CommandTracker::TrackPreCmdDrawIndexedIndirectCount(VkCommandBuffer commandBuffer, VkBuffer buffer, VkDeviceSize offset, VkBuffer countBuffer, VkDeviceSize countBufferOffset, uint32_t maxDrawCount, uint32_t stride)
{
  Command cmd;
  cmd.type = Command::Type::kCmdDrawIndexedIndirectCount;
  cmd.id = static_cast<uint32_t>(commands_.size()) + 1;
  cmd.parameters = recorder_.RecordCmdDrawIndexedIndirectCount(commandBuffer, buffer, offset, countBuffer, countBufferOffset, maxDrawCount, stride);
  commands_.push_back(cmd);
}

void CommandTracker::TrackPostCmdDrawIndexedIndirectCount(VkCommandBuffer commandBuffer, VkBuffer buffer, VkDeviceSize offset, VkBuffer countBuffer, VkDeviceSize countBufferOffset, uint32_t maxDrawCount, uint32_t stride)
{
  assert(commands_.back().type == Command::Type::kCmdDrawIndexedIndirectCount);
}

void CommandTracker::TrackPreCmdDrawIndexedIndirectCountKHR(VkCommandBuffer commandBuffer, VkBuffer buffer, VkDeviceSize offset, VkBuffer countBuffer, VkDeviceSize countBufferOffset, uint32_t maxDrawCount, uint32_t stride)
{
  Command cmd;
  cmd.type = Command::Type::kCmdDrawIndexedIndirectCountKHR;
  cmd.id = static_cast<uint32_t>(commands_.size()) + 1;
  cmd.parameters = recorder_.RecordCmdDrawIndexedIndirectCountKHR(commandBuffer, buffer, offset, countBuffer, countBufferOffset, maxDrawCount, stride);
  commands_.push_back(cmd);
}

void CommandTracker::TrackPostCmdDrawIndexedIndirectCountKHR(VkCommandBuffer commandBuffer, VkBuffer buffer, VkDeviceSize offset, VkBuffer countBuffer, VkDeviceSize countBufferOffset, uint32_t maxDrawCount, uint32_t stride)
{
  assert(commands_.back().type == Command::Type::kCmdDrawIndexedIndirectCountKHR);
}

void CommandTracker::TrackPreCmdDrawIndexedIndirectCountAMD(VkCommandBuffer commandBuffer, VkBuffer buffer, VkDeviceSize offset, VkBuffer countBuffer, VkDeviceSize countBufferOffset, uint32_t maxDrawCount, uint32_t stride)
{
  Command cmd;
  cmd.type = Command::Type::kCmdDrawIndexedIndirectCountAMD;
  cmd.id = static_cast<uint32_t>(commands_.size()) + 1;
  cmd.parameters = recorder_.RecordCmdDrawIndexedIndirectCountAMD(commandBuffer, buffer, offset, countBuffer, countBufferOffset, maxDrawCount, stride);
  commands_.push_back(cmd);
}

void CommandTracker::TrackPostCmdDrawIndexedIndirectCountAMD(VkCommandBuffer commandBuffer, VkBuffer buffer, VkDeviceSize offset, VkBuffer countBuffer, VkDeviceSize countBufferOffset, uint32_t maxDrawCount, uint32_t stride)
{
  assert(commands_.back().type == Command::Type::kCmdDrawIndexedIndirectCountAMD);
}

void CommandTracker::TrackPreCmdCopyAccelerationStructureKHR(VkCommandBuffer commandBuffer, const VkCopyAccelerationStructureInfoKHR* pInfo)
{
  Command cmd;
  cmd.type = Command::Type::kCmdCopyAccelerationStructureKHR;
  cmd.id = static_cast<uint32_t>(commands_.size()) + 1;
  cmd.parameters = recorder_.RecordCmdCopyAccelerationStructureKHR(commandBuffer, pInfo);
  commands_.push_back(cmd);
}

void CommandTracker::TrackPostCmdCopyAccelerationStructureKHR(VkCommandBuffer commandBuffer, const VkCopyAccelerationStructureInfoKHR* pInfo)
{
  assert(commands_.back().type == Command::Type::kCmdCopyAccelerationStructureKHR);
}

void CommandTracker::TrackPreCmdCopyAccelerationStructureToMemoryKHR(VkCommandBuffer commandBuffer, const VkCopyAccelerationStructureToMemoryInfoKHR* pInfo)
{
  Command cmd;
  cmd.type = Command::Type::kCmdCopyAccelerationStructureToMemoryKHR;
  cmd.id = static_cast<uint32_t>(commands_.size()) + 1;
  cmd.parameters = recorder_.RecordCmdCopyAccelerationStructureToMemoryKHR(commandBuffer, pInfo);
  commands_.push_back(cmd);
}

void CommandTracker::TrackPostCmdCopyAccelerationStructureToMemoryKHR(VkCommandBuffer commandBuffer, const VkCopyAccelerationStructureToMemoryInfoKHR* pInfo)
{
  assert(commands_.back().type == Command::Type::kCmdCopyAccelerationStructureToMemoryKHR);
}

void CommandTracker::TrackPreCmdCopyMemoryToAccelerationStructureKHR(VkCommandBuffer commandBuffer, const VkCopyMemoryToAccelerationStructureInfoKHR* pInfo)
{
  Command cmd;
  cmd.type = Command::Type::kCmdCopyMemoryToAccelerationStructureKHR;
  cmd.id = static_cast<uint32_t>(commands_.size()) + 1;
  cmd.parameters = recorder_.RecordCmdCopyMemoryToAccelerationStructureKHR(commandBuffer, pInfo);
  commands_.push_back(cmd);
}

void CommandTracker::TrackPostCmdCopyMemoryToAccelerationStructureKHR(VkCommandBuffer commandBuffer, const VkCopyMemoryToAccelerationStructureInfoKHR* pInfo)
{
  assert(commands_.back().type == Command::Type::kCmdCopyMemoryToAccelerationStructureKHR);
}

void CommandTracker::TrackPreCmdWriteAccelerationStructuresPropertiesKHR(VkCommandBuffer commandBuffer, uint32_t accelerationStructureCount, const VkAccelerationStructureKHR* pAccelerationStructures, VkQueryType queryType, VkQueryPool queryPool, uint32_t firstQuery)
{
  Command cmd;
  cmd.type = Command::Type::kCmdWriteAccelerationStructuresPropertiesKHR;
  cmd.id = static_cast<uint32_t>(commands_.size()) + 1;
  cmd.parameters = recorder_.RecordCmdWriteAccelerationStructuresPropertiesKHR(commandBuffer, accelerationStructureCount, pAccelerationStructures, queryType, queryPool, firstQuery);
  commands_.push_back(cmd);
}

void CommandTracker::TrackPostCmdWriteAccelerationStructuresPropertiesKHR(VkCommandBuffer commandBuffer, uint32_t accelerationStructureCount, const VkAccelerationStructureKHR* pAccelerationStructures, VkQueryType queryType, VkQueryPool queryPool, uint32_t firstQuery)
{
  assert(commands_.back().type == Command::Type::kCmdWriteAccelerationStructuresPropertiesKHR);
}

void CommandTracker::TrackPreCmdTraceRaysKHR(VkCommandBuffer commandBuffer, const VkStridedDeviceAddressRegionKHR* pRaygenShaderBindingTable, const VkStridedDeviceAddressRegionKHR* pMissShaderBindingTable, const VkStridedDeviceAddressRegionKHR* pHitShaderBindingTable, const VkStridedDeviceAddressRegionKHR* pCallableShaderBindingTable, uint32_t width, uint32_t height, uint32_t depth)
{
  Command cmd;
  cmd.type = Command::Type::kCmdTraceRaysKHR;
  cmd.id = static_cast<uint32_t>(commands_.size()) + 1;
  cmd.parameters = recorder_.RecordCmdTraceRaysKHR(commandBuffer, pRaygenShaderBindingTable, pMissShaderBindingTable, pHitShaderBindingTable, pCallableShaderBindingTable, width, height, depth);
  commands_.push_back(cmd);
}

void CommandTracker::TrackPostCmdTraceRaysKHR(VkCommandBuffer commandBuffer, const VkStridedDeviceAddressRegionKHR* pRaygenShaderBindingTable, const VkStridedDeviceAddressRegionKHR* pMissShaderBindingTable, const VkStridedDeviceAddressRegionKHR* pHitShaderBindingTable, const VkStridedDeviceAddressRegionKHR* pCallableShaderBindingTable, uint32_t width, uint32_t height, uint32_t depth)
{
  assert(commands_.back().type == Command::Type::kCmdTraceRaysKHR);
}

void CommandTracker::TrackPreCmdTraceRaysIndirectKHR(VkCommandBuffer commandBuffer, const VkStridedDeviceAddressRegionKHR* pRaygenShaderBindingTable, const VkStridedDeviceAddressRegionKHR* pMissShaderBindingTable, const VkStridedDeviceAddressRegionKHR* pHitShaderBindingTable, const VkStridedDeviceAddressRegionKHR* pCallableShaderBindingTable, VkDeviceAddress indirectDeviceAddress)
{
  Command cmd;
  cmd.type = Command::Type::kCmdTraceRaysIndirectKHR;
  cmd.id = static_cast<uint32_t>(commands_.size()) + 1;
  cmd.parameters = recorder_.RecordCmdTraceRaysIndirectKHR(commandBuffer, pRaygenShaderBindingTable, pMissShaderBindingTable, pHitShaderBindingTable, pCallableShaderBindingTable, indirectDeviceAddress);
  commands_.push_back(cmd);
}

void CommandTracker::TrackPostCmdTraceRaysIndirectKHR(VkCommandBuffer commandBuffer, const VkStridedDeviceAddressRegionKHR* pRaygenShaderBindingTable, const VkStridedDeviceAddressRegionKHR* pMissShaderBindingTable, const VkStridedDeviceAddressRegionKHR* pHitShaderBindingTable, const VkStridedDeviceAddressRegionKHR* pCallableShaderBindingTable, VkDeviceAddress indirectDeviceAddress)
{
  assert(commands_.back().type == Command::Type::kCmdTraceRaysIndirectKHR);
}

void CommandTracker::TrackPreCmdSetRayTracingPipelineStackSizeKHR(VkCommandBuffer commandBuffer, uint32_t pipelineStackSize)
{
  Command cmd;
  cmd.type = Command::Type::kCmdSetRayTracingPipelineStackSizeKHR;
  cmd.id = static_cast<uint32_t>(commands_.size()) + 1;
  cmd.parameters = recorder_.RecordCmdSetRayTracingPipelineStackSizeKHR(commandBuffer, pipelineStackSize);
  commands_.push_back(cmd);
}

void CommandTracker::TrackPostCmdSetRayTracingPipelineStackSizeKHR(VkCommandBuffer commandBuffer, uint32_t pipelineStackSize)
{
  assert(commands_.back().type == Command::Type::kCmdSetRayTracingPipelineStackSizeKHR);
}

void CommandTracker::TrackPreCmdSetLineStippleEXT(VkCommandBuffer commandBuffer, uint32_t lineStippleFactor, uint16_t lineStipplePattern)
{
  Command cmd;
  cmd.type = Command::Type::kCmdSetLineStippleEXT;
  cmd.id = static_cast<uint32_t>(commands_.size()) + 1;
  cmd.parameters = recorder_.RecordCmdSetLineStippleEXT(commandBuffer, lineStippleFactor, lineStipplePattern);
  commands_.push_back(cmd);
}

void CommandTracker::TrackPostCmdSetLineStippleEXT(VkCommandBuffer commandBuffer, uint32_t lineStippleFactor, uint16_t lineStipplePattern)
{
  assert(commands_.back().type == Command::Type::kCmdSetLineStippleEXT);
}

void CommandTracker::TrackPreCmdBuildAccelerationStructuresKHR(VkCommandBuffer commandBuffer, uint32_t infoCount, const VkAccelerationStructureBuildGeometryInfoKHR* pInfos, const VkAccelerationStructureBuildRangeInfoKHR** ppBuildRangeInfos)
{
  Command cmd;
  cmd.type = Command::Type::kCmdBuildAccelerationStructuresKHR;
  cmd.id = static_cast<uint32_t>(commands_.size()) + 1;
  cmd.parameters = recorder_.RecordCmdBuildAccelerationStructuresKHR(commandBuffer, infoCount, pInfos, ppBuildRangeInfos);
  commands_.push_back(cmd);
}

void CommandTracker::TrackPostCmdBuildAccelerationStructuresKHR(VkCommandBuffer commandBuffer, uint32_t infoCount, const VkAccelerationStructureBuildGeometryInfoKHR* pInfos, const VkAccelerationStructureBuildRangeInfoKHR** ppBuildRangeInfos)
{
  assert(commands_.back().type == Command::Type::kCmdBuildAccelerationStructuresKHR);
}

void CommandTracker::TrackPreCmdBuildAccelerationStructuresIndirectKHR(VkCommandBuffer commandBuffer, uint32_t infoCount, const VkAccelerationStructureBuildGeometryInfoKHR* pInfos, const VkDeviceAddress* pIndirectDeviceAddresses, const uint32_t* pIndirectStrides, const uint32_t** ppMaxPrimitiveCounts)
{
  Command cmd;
  cmd.type = Command::Type::kCmdBuildAccelerationStructuresIndirectKHR;
  cmd.id = static_cast<uint32_t>(commands_.size()) + 1;
  cmd.parameters = recorder_.RecordCmdBuildAccelerationStructuresIndirectKHR(commandBuffer, infoCount, pInfos, pIndirectDeviceAddresses, pIndirectStrides, ppMaxPrimitiveCounts);
  commands_.push_back(cmd);
}

void CommandTracker::TrackPostCmdBuildAccelerationStructuresIndirectKHR(VkCommandBuffer commandBuffer, uint32_t infoCount, const VkAccelerationStructureBuildGeometryInfoKHR* pInfos, const VkDeviceAddress* pIndirectDeviceAddresses, const uint32_t* pIndirectStrides, const uint32_t** ppMaxPrimitiveCounts)
{
  assert(commands_.back().type == Command::Type::kCmdBuildAccelerationStructuresIndirectKHR);
}

void CommandTracker::TrackPreCmdSetCullModeEXT(VkCommandBuffer commandBuffer, VkCullModeFlags cullMode)
{
  Command cmd;
  cmd.type = Command::Type::kCmdSetCullModeEXT;
  cmd.id = static_cast<uint32_t>(commands_.size()) + 1;
  cmd.parameters = recorder_.RecordCmdSetCullModeEXT(commandBuffer, cullMode);
  commands_.push_back(cmd);
}

void CommandTracker::TrackPostCmdSetCullModeEXT(VkCommandBuffer commandBuffer, VkCullModeFlags cullMode)
{
  assert(commands_.back().type == Command::Type::kCmdSetCullModeEXT);
}

void CommandTracker::TrackPreCmdSetFrontFaceEXT(VkCommandBuffer commandBuffer, VkFrontFace frontFace)
{
  Command cmd;
  cmd.type = Command::Type::kCmdSetFrontFaceEXT;
  cmd.id = static_cast<uint32_t>(commands_.size()) + 1;
  cmd.parameters = recorder_.RecordCmdSetFrontFaceEXT(commandBuffer, frontFace);
  commands_.push_back(cmd);
}

void CommandTracker::TrackPostCmdSetFrontFaceEXT(VkCommandBuffer commandBuffer, VkFrontFace frontFace)
{
  assert(commands_.back().type == Command::Type::kCmdSetFrontFaceEXT);
}

void CommandTracker::TrackPreCmdSetPrimitiveTopologyEXT(VkCommandBuffer commandBuffer, VkPrimitiveTopology primitiveTopology)
{
  Command cmd;
  cmd.type = Command::Type::kCmdSetPrimitiveTopologyEXT;
  cmd.id = static_cast<uint32_t>(commands_.size()) + 1;
  cmd.parameters = recorder_.RecordCmdSetPrimitiveTopologyEXT(commandBuffer, primitiveTopology);
  commands_.push_back(cmd);
}

void CommandTracker::TrackPostCmdSetPrimitiveTopologyEXT(VkCommandBuffer commandBuffer, VkPrimitiveTopology primitiveTopology)
{
  assert(commands_.back().type == Command::Type::kCmdSetPrimitiveTopologyEXT);
}

void CommandTracker::TrackPreCmdSetViewportWithCountEXT(VkCommandBuffer commandBuffer, uint32_t viewportCount, const VkViewport* pViewports)
{
  Command cmd;
  cmd.type = Command::Type::kCmdSetViewportWithCountEXT;
  cmd.id = static_cast<uint32_t>(commands_.size()) + 1;
  cmd.parameters = recorder_.RecordCmdSetViewportWithCountEXT(commandBuffer, viewportCount, pViewports);
  commands_.push_back(cmd);
}

void CommandTracker::TrackPostCmdSetViewportWithCountEXT(VkCommandBuffer commandBuffer, uint32_t viewportCount, const VkViewport* pViewports)
{
  assert(commands_.back().type == Command::Type::kCmdSetViewportWithCountEXT);
}

void CommandTracker::TrackPreCmdSetScissorWithCountEXT(VkCommandBuffer commandBuffer, uint32_t scissorCount, const VkRect2D* pScissors)
{
  Command cmd;
  cmd.type = Command::Type::kCmdSetScissorWithCountEXT;
  cmd.id = static_cast<uint32_t>(commands_.size()) + 1;
  cmd.parameters = recorder_.RecordCmdSetScissorWithCountEXT(commandBuffer, scissorCount, pScissors);
  commands_.push_back(cmd);
}

void CommandTracker::TrackPostCmdSetScissorWithCountEXT(VkCommandBuffer commandBuffer, uint32_t scissorCount, const VkRect2D* pScissors)
{
  assert(commands_.back().type == Command::Type::kCmdSetScissorWithCountEXT);
}

void CommandTracker::TrackPreCmdBindVertexBuffers2EXT(VkCommandBuffer commandBuffer, uint32_t firstBinding, uint32_t bindingCount, const VkBuffer* pBuffers, const VkDeviceSize* pOffsets, const VkDeviceSize* pSizes, const VkDeviceSize* pStrides)
{
  Command cmd;
  cmd.type = Command::Type::kCmdBindVertexBuffers2EXT;
  cmd.id = static_cast<uint32_t>(commands_.size()) + 1;
  cmd.parameters = recorder_.RecordCmdBindVertexBuffers2EXT(commandBuffer, firstBinding, bindingCount, pBuffers, pOffsets, pSizes, pStrides);
  commands_.push_back(cmd);
}

void CommandTracker::TrackPostCmdBindVertexBuffers2EXT(VkCommandBuffer commandBuffer, uint32_t firstBinding, uint32_t bindingCount, const VkBuffer* pBuffers, const VkDeviceSize* pOffsets, const VkDeviceSize* pSizes, const VkDeviceSize* pStrides)
{
  assert(commands_.back().type == Command::Type::kCmdBindVertexBuffers2EXT);
}

void CommandTracker::TrackPreCmdSetDepthTestEnableEXT(VkCommandBuffer commandBuffer, VkBool32 depthTestEnable)
{
  Command cmd;
  cmd.type = Command::Type::kCmdSetDepthTestEnableEXT;
  cmd.id = static_cast<uint32_t>(commands_.size()) + 1;
  cmd.parameters = recorder_.RecordCmdSetDepthTestEnableEXT(commandBuffer, depthTestEnable);
  commands_.push_back(cmd);
}

void CommandTracker::TrackPostCmdSetDepthTestEnableEXT(VkCommandBuffer commandBuffer, VkBool32 depthTestEnable)
{
  assert(commands_.back().type == Command::Type::kCmdSetDepthTestEnableEXT);
}

void CommandTracker::TrackPreCmdSetDepthWriteEnableEXT(VkCommandBuffer commandBuffer, VkBool32 depthWriteEnable)
{
  Command cmd;
  cmd.type = Command::Type::kCmdSetDepthWriteEnableEXT;
  cmd.id = static_cast<uint32_t>(commands_.size()) + 1;
  cmd.parameters = recorder_.RecordCmdSetDepthWriteEnableEXT(commandBuffer, depthWriteEnable);
  commands_.push_back(cmd);
}

void CommandTracker::TrackPostCmdSetDepthWriteEnableEXT(VkCommandBuffer commandBuffer, VkBool32 depthWriteEnable)
{
  assert(commands_.back().type == Command::Type::kCmdSetDepthWriteEnableEXT);
}

void CommandTracker::TrackPreCmdSetDepthCompareOpEXT(VkCommandBuffer commandBuffer, VkCompareOp depthCompareOp)
{
  Command cmd;
  cmd.type = Command::Type::kCmdSetDepthCompareOpEXT;
  cmd.id = static_cast<uint32_t>(commands_.size()) + 1;
  cmd.parameters = recorder_.RecordCmdSetDepthCompareOpEXT(commandBuffer, depthCompareOp);
  commands_.push_back(cmd);
}

void CommandTracker::TrackPostCmdSetDepthCompareOpEXT(VkCommandBuffer commandBuffer, VkCompareOp depthCompareOp)
{
  assert(commands_.back().type == Command::Type::kCmdSetDepthCompareOpEXT);
}

void CommandTracker::TrackPreCmdSetDepthBoundsTestEnableEXT(VkCommandBuffer commandBuffer, VkBool32 depthBoundsTestEnable)
{
  Command cmd;
  cmd.type = Command::Type::kCmdSetDepthBoundsTestEnableEXT;
  cmd.id = static_cast<uint32_t>(commands_.size()) + 1;
  cmd.parameters = recorder_.RecordCmdSetDepthBoundsTestEnableEXT(commandBuffer, depthBoundsTestEnable);
  commands_.push_back(cmd);
}

void CommandTracker::TrackPostCmdSetDepthBoundsTestEnableEXT(VkCommandBuffer commandBuffer, VkBool32 depthBoundsTestEnable)
{
  assert(commands_.back().type == Command::Type::kCmdSetDepthBoundsTestEnableEXT);
}

void CommandTracker::TrackPreCmdSetStencilTestEnableEXT(VkCommandBuffer commandBuffer, VkBool32 stencilTestEnable)
{
  Command cmd;
  cmd.type = Command::Type::kCmdSetStencilTestEnableEXT;
  cmd.id = static_cast<uint32_t>(commands_.size()) + 1;
  cmd.parameters = recorder_.RecordCmdSetStencilTestEnableEXT(commandBuffer, stencilTestEnable);
  commands_.push_back(cmd);
}

void CommandTracker::TrackPostCmdSetStencilTestEnableEXT(VkCommandBuffer commandBuffer, VkBool32 stencilTestEnable)
{
  assert(commands_.back().type == Command::Type::kCmdSetStencilTestEnableEXT);
}

void CommandTracker::TrackPreCmdSetStencilOpEXT(VkCommandBuffer commandBuffer, VkStencilFaceFlags faceMask, VkStencilOp failOp, VkStencilOp passOp, VkStencilOp depthFailOp, VkCompareOp compareOp)
{
  Command cmd;
  cmd.type = Command::Type::kCmdSetStencilOpEXT;
  cmd.id = static_cast<uint32_t>(commands_.size()) + 1;
  cmd.parameters = recorder_.RecordCmdSetStencilOpEXT(commandBuffer, faceMask, failOp, passOp, depthFailOp, compareOp);
  commands_.push_back(cmd);
}

void CommandTracker::TrackPostCmdSetStencilOpEXT(VkCommandBuffer commandBuffer, VkStencilFaceFlags faceMask, VkStencilOp failOp, VkStencilOp passOp, VkStencilOp depthFailOp, VkCompareOp compareOp)
{
  assert(commands_.back().type == Command::Type::kCmdSetStencilOpEXT);
}

void CommandTracker::TrackPreCmdSetPatchControlPointsEXT(VkCommandBuffer commandBuffer, uint32_t patchControlPoints)
{
  Command cmd;
  cmd.type = Command::Type::kCmdSetPatchControlPointsEXT;
  cmd.id = static_cast<uint32_t>(commands_.size()) + 1;
  cmd.parameters = recorder_.RecordCmdSetPatchControlPointsEXT(commandBuffer, patchControlPoints);
  commands_.push_back(cmd);
}

void CommandTracker::TrackPostCmdSetPatchControlPointsEXT(VkCommandBuffer commandBuffer, uint32_t patchControlPoints)
{
  assert(commands_.back().type == Command::Type::kCmdSetPatchControlPointsEXT);
}

void CommandTracker::TrackPreCmdSetRasterizerDiscardEnableEXT(VkCommandBuffer commandBuffer, VkBool32 rasterizerDiscardEnable)
{
  Command cmd;
  cmd.type = Command::Type::kCmdSetRasterizerDiscardEnableEXT;
  cmd.id = static_cast<uint32_t>(commands_.size()) + 1;
  cmd.parameters = recorder_.RecordCmdSetRasterizerDiscardEnableEXT(commandBuffer, rasterizerDiscardEnable);
  commands_.push_back(cmd);
}

void CommandTracker::TrackPostCmdSetRasterizerDiscardEnableEXT(VkCommandBuffer commandBuffer, VkBool32 rasterizerDiscardEnable)
{
  assert(commands_.back().type == Command::Type::kCmdSetRasterizerDiscardEnableEXT);
}

void CommandTracker::TrackPreCmdSetDepthBiasEnableEXT(VkCommandBuffer commandBuffer, VkBool32 depthBiasEnable)
{
  Command cmd;
  cmd.type = Command::Type::kCmdSetDepthBiasEnableEXT;
  cmd.id = static_cast<uint32_t>(commands_.size()) + 1;
  cmd.parameters = recorder_.RecordCmdSetDepthBiasEnableEXT(commandBuffer, depthBiasEnable);
  commands_.push_back(cmd);
}

void CommandTracker::TrackPostCmdSetDepthBiasEnableEXT(VkCommandBuffer commandBuffer, VkBool32 depthBiasEnable)
{
  assert(commands_.back().type == Command::Type::kCmdSetDepthBiasEnableEXT);
}

void CommandTracker::TrackPreCmdSetLogicOpEXT(VkCommandBuffer commandBuffer, VkLogicOp logicOp)
{
  Command cmd;
  cmd.type = Command::Type::kCmdSetLogicOpEXT;
  cmd.id = static_cast<uint32_t>(commands_.size()) + 1;
  cmd.parameters = recorder_.RecordCmdSetLogicOpEXT(commandBuffer, logicOp);
  commands_.push_back(cmd);
}

void CommandTracker::TrackPostCmdSetLogicOpEXT(VkCommandBuffer commandBuffer, VkLogicOp logicOp)
{
  assert(commands_.back().type == Command::Type::kCmdSetLogicOpEXT);
}

void CommandTracker::TrackPreCmdSetPrimitiveRestartEnableEXT(VkCommandBuffer commandBuffer, VkBool32 primitiveRestartEnable)
{
  Command cmd;
  cmd.type = Command::Type::kCmdSetPrimitiveRestartEnableEXT;
  cmd.id = static_cast<uint32_t>(commands_.size()) + 1;
  cmd.parameters = recorder_.RecordCmdSetPrimitiveRestartEnableEXT(commandBuffer, primitiveRestartEnable);
  commands_.push_back(cmd);
}

void CommandTracker::TrackPostCmdSetPrimitiveRestartEnableEXT(VkCommandBuffer commandBuffer, VkBool32 primitiveRestartEnable)
{
  assert(commands_.back().type == Command::Type::kCmdSetPrimitiveRestartEnableEXT);
}

void CommandTracker::TrackPreCmdCopyBuffer2KHR(VkCommandBuffer commandBuffer, const VkCopyBufferInfo2KHR* pCopyBufferInfo)
{
  Command cmd;
  cmd.type = Command::Type::kCmdCopyBuffer2KHR;
  cmd.id = static_cast<uint32_t>(commands_.size()) + 1;
  cmd.parameters = recorder_.RecordCmdCopyBuffer2KHR(commandBuffer, pCopyBufferInfo);
  commands_.push_back(cmd);
}

void CommandTracker::TrackPostCmdCopyBuffer2KHR(VkCommandBuffer commandBuffer, const VkCopyBufferInfo2KHR* pCopyBufferInfo)
{
  assert(commands_.back().type == Command::Type::kCmdCopyBuffer2KHR);
}

void CommandTracker::TrackPreCmdCopyImage2KHR(VkCommandBuffer commandBuffer, const VkCopyImageInfo2KHR* pCopyImageInfo)
{
  Command cmd;
  cmd.type = Command::Type::kCmdCopyImage2KHR;
  cmd.id = static_cast<uint32_t>(commands_.size()) + 1;
  cmd.parameters = recorder_.RecordCmdCopyImage2KHR(commandBuffer, pCopyImageInfo);
  commands_.push_back(cmd);
}

void CommandTracker::TrackPostCmdCopyImage2KHR(VkCommandBuffer commandBuffer, const VkCopyImageInfo2KHR* pCopyImageInfo)
{
  assert(commands_.back().type == Command::Type::kCmdCopyImage2KHR);
}

void CommandTracker::TrackPreCmdBlitImage2KHR(VkCommandBuffer commandBuffer, const VkBlitImageInfo2KHR* pBlitImageInfo)
{
  Command cmd;
  cmd.type = Command::Type::kCmdBlitImage2KHR;
  cmd.id = static_cast<uint32_t>(commands_.size()) + 1;
  cmd.parameters = recorder_.RecordCmdBlitImage2KHR(commandBuffer, pBlitImageInfo);
  commands_.push_back(cmd);
}

void CommandTracker::TrackPostCmdBlitImage2KHR(VkCommandBuffer commandBuffer, const VkBlitImageInfo2KHR* pBlitImageInfo)
{
  assert(commands_.back().type == Command::Type::kCmdBlitImage2KHR);
}

void CommandTracker::TrackPreCmdCopyBufferToImage2KHR(VkCommandBuffer commandBuffer, const VkCopyBufferToImageInfo2KHR* pCopyBufferToImageInfo)
{
  Command cmd;
  cmd.type = Command::Type::kCmdCopyBufferToImage2KHR;
  cmd.id = static_cast<uint32_t>(commands_.size()) + 1;
  cmd.parameters = recorder_.RecordCmdCopyBufferToImage2KHR(commandBuffer, pCopyBufferToImageInfo);
  commands_.push_back(cmd);
}

void CommandTracker::TrackPostCmdCopyBufferToImage2KHR(VkCommandBuffer commandBuffer, const VkCopyBufferToImageInfo2KHR* pCopyBufferToImageInfo)
{
  assert(commands_.back().type == Command::Type::kCmdCopyBufferToImage2KHR);
}

void CommandTracker::TrackPreCmdCopyImageToBuffer2KHR(VkCommandBuffer commandBuffer, const VkCopyImageToBufferInfo2KHR* pCopyImageToBufferInfo)
{
  Command cmd;
  cmd.type = Command::Type::kCmdCopyImageToBuffer2KHR;
  cmd.id = static_cast<uint32_t>(commands_.size()) + 1;
  cmd.parameters = recorder_.RecordCmdCopyImageToBuffer2KHR(commandBuffer, pCopyImageToBufferInfo);
  commands_.push_back(cmd);
}

void CommandTracker::TrackPostCmdCopyImageToBuffer2KHR(VkCommandBuffer commandBuffer, const VkCopyImageToBufferInfo2KHR* pCopyImageToBufferInfo)
{
  assert(commands_.back().type == Command::Type::kCmdCopyImageToBuffer2KHR);
}

void CommandTracker::TrackPreCmdResolveImage2KHR(VkCommandBuffer commandBuffer, const VkResolveImageInfo2KHR* pResolveImageInfo)
{
  Command cmd;
  cmd.type = Command::Type::kCmdResolveImage2KHR;
  cmd.id = static_cast<uint32_t>(commands_.size()) + 1;
  cmd.parameters = recorder_.RecordCmdResolveImage2KHR(commandBuffer, pResolveImageInfo);
  commands_.push_back(cmd);
}

void CommandTracker::TrackPostCmdResolveImage2KHR(VkCommandBuffer commandBuffer, const VkResolveImageInfo2KHR* pResolveImageInfo)
{
  assert(commands_.back().type == Command::Type::kCmdResolveImage2KHR);
}

void CommandTracker::TrackPreCmdSetFragmentShadingRateKHR(VkCommandBuffer commandBuffer, const VkExtent2D* pFragmentSize, const VkFragmentShadingRateCombinerOpKHR combinerOps[2])
{
  Command cmd;
  cmd.type = Command::Type::kCmdSetFragmentShadingRateKHR;
  cmd.id = static_cast<uint32_t>(commands_.size()) + 1;
  cmd.parameters = recorder_.RecordCmdSetFragmentShadingRateKHR(commandBuffer, pFragmentSize, combinerOps);
  commands_.push_back(cmd);
}

void CommandTracker::TrackPostCmdSetFragmentShadingRateKHR(VkCommandBuffer commandBuffer, const VkExtent2D* pFragmentSize, const VkFragmentShadingRateCombinerOpKHR combinerOps[2])
{
  assert(commands_.back().type == Command::Type::kCmdSetFragmentShadingRateKHR);
}

void CommandTracker::TrackPreCmdSetVertexInputEXT(VkCommandBuffer commandBuffer, uint32_t vertexBindingDescriptionCount, const VkVertexInputBindingDescription2EXT* pVertexBindingDescriptions, uint32_t vertexAttributeDescriptionCount, const VkVertexInputAttributeDescription2EXT* pVertexAttributeDescriptions)
{
  Command cmd;
  cmd.type = Command::Type::kCmdSetVertexInputEXT;
  cmd.id = static_cast<uint32_t>(commands_.size()) + 1;
  cmd.parameters = recorder_.RecordCmdSetVertexInputEXT(commandBuffer, vertexBindingDescriptionCount, pVertexBindingDescriptions, vertexAttributeDescriptionCount, pVertexAttributeDescriptions);
  commands_.push_back(cmd);
}

void CommandTracker::TrackPostCmdSetVertexInputEXT(VkCommandBuffer commandBuffer, uint32_t vertexBindingDescriptionCount, const VkVertexInputBindingDescription2EXT* pVertexBindingDescriptions, uint32_t vertexAttributeDescriptionCount, const VkVertexInputAttributeDescription2EXT* pVertexAttributeDescriptions)
{
  assert(commands_.back().type == Command::Type::kCmdSetVertexInputEXT);
}

void CommandTracker::TrackPreCmdSetColorWriteEnableEXT(VkCommandBuffer commandBuffer, uint32_t attachmentCount, const VkBool32* pColorWriteEnables)
{
  Command cmd;
  cmd.type = Command::Type::kCmdSetColorWriteEnableEXT;
  cmd.id = static_cast<uint32_t>(commands_.size()) + 1;
  cmd.parameters = recorder_.RecordCmdSetColorWriteEnableEXT(commandBuffer, attachmentCount, pColorWriteEnables);
  commands_.push_back(cmd);
}

void CommandTracker::TrackPostCmdSetColorWriteEnableEXT(VkCommandBuffer commandBuffer, uint32_t attachmentCount, const VkBool32* pColorWriteEnables)
{
  assert(commands_.back().type == Command::Type::kCmdSetColorWriteEnableEXT);
}

void CommandTracker::TrackPreCmdSetEvent2KHR(VkCommandBuffer commandBuffer, VkEvent event, const VkDependencyInfoKHR* pDependencyInfo)
{
  Command cmd;
  cmd.type = Command::Type::kCmdSetEvent2KHR;
  cmd.id = static_cast<uint32_t>(commands_.size()) + 1;
  cmd.parameters = recorder_.RecordCmdSetEvent2KHR(commandBuffer, event, pDependencyInfo);
  commands_.push_back(cmd);
}

void CommandTracker::TrackPostCmdSetEvent2KHR(VkCommandBuffer commandBuffer, VkEvent event, const VkDependencyInfoKHR* pDependencyInfo)
{
  assert(commands_.back().type == Command::Type::kCmdSetEvent2KHR);
}

void CommandTracker::TrackPreCmdResetEvent2KHR(VkCommandBuffer commandBuffer, VkEvent event, VkPipelineStageFlags2KHR stageMask)
{
  Command cmd;
  cmd.type = Command::Type::kCmdResetEvent2KHR;
  cmd.id = static_cast<uint32_t>(commands_.size()) + 1;
  cmd.parameters = recorder_.RecordCmdResetEvent2KHR(commandBuffer, event, stageMask);
  commands_.push_back(cmd);
}

void CommandTracker::TrackPostCmdResetEvent2KHR(VkCommandBuffer commandBuffer, VkEvent event, VkPipelineStageFlags2KHR stageMask)
{
  assert(commands_.back().type == Command::Type::kCmdResetEvent2KHR);
}

void CommandTracker::TrackPreCmdWaitEvents2KHR(VkCommandBuffer commandBuffer, uint32_t eventCount, const VkEvent* pEvents, const VkDependencyInfoKHR* pDependencyInfos)
{
  Command cmd;
  cmd.type = Command::Type::kCmdWaitEvents2KHR;
  cmd.id = static_cast<uint32_t>(commands_.size()) + 1;
  cmd.parameters = recorder_.RecordCmdWaitEvents2KHR(commandBuffer, eventCount, pEvents, pDependencyInfos);
  commands_.push_back(cmd);
}

void CommandTracker::TrackPostCmdWaitEvents2KHR(VkCommandBuffer commandBuffer, uint32_t eventCount, const VkEvent* pEvents, const VkDependencyInfoKHR* pDependencyInfos)
{
  assert(commands_.back().type == Command::Type::kCmdWaitEvents2KHR);
}

void CommandTracker::TrackPreCmdPipelineBarrier2KHR(VkCommandBuffer commandBuffer, const VkDependencyInfoKHR* pDependencyInfo)
{
  Command cmd;
  cmd.type = Command::Type::kCmdPipelineBarrier2KHR;
  cmd.id = static_cast<uint32_t>(commands_.size()) + 1;
  cmd.parameters = recorder_.RecordCmdPipelineBarrier2KHR(commandBuffer, pDependencyInfo);
  commands_.push_back(cmd);
}

void CommandTracker::TrackPostCmdPipelineBarrier2KHR(VkCommandBuffer commandBuffer, const VkDependencyInfoKHR* pDependencyInfo)
{
  assert(commands_.back().type == Command::Type::kCmdPipelineBarrier2KHR);
}

void CommandTracker::TrackPreCmdWriteTimestamp2KHR(VkCommandBuffer commandBuffer, VkPipelineStageFlags2KHR stage, VkQueryPool queryPool, uint32_t query)
{
  Command cmd;
  cmd.type = Command::Type::kCmdWriteTimestamp2KHR;
  cmd.id = static_cast<uint32_t>(commands_.size()) + 1;
  cmd.parameters = recorder_.RecordCmdWriteTimestamp2KHR(commandBuffer, stage, queryPool, query);
  commands_.push_back(cmd);
}

void CommandTracker::TrackPostCmdWriteTimestamp2KHR(VkCommandBuffer commandBuffer, VkPipelineStageFlags2KHR stage, VkQueryPool queryPool, uint32_t query)
{
  assert(commands_.back().type == Command::Type::kCmdWriteTimestamp2KHR);
}

void CommandTracker::TrackPreCmdWriteBufferMarker2AMD(VkCommandBuffer commandBuffer, VkPipelineStageFlags2KHR stage, VkBuffer dstBuffer, VkDeviceSize dstOffset, uint32_t marker)
{
  Command cmd;
  cmd.type = Command::Type::kCmdWriteBufferMarker2AMD;
  cmd.id = static_cast<uint32_t>(commands_.size()) + 1;
  cmd.parameters = recorder_.RecordCmdWriteBufferMarker2AMD(commandBuffer, stage, dstBuffer, dstOffset, marker);
  commands_.push_back(cmd);
}

void CommandTracker::TrackPostCmdWriteBufferMarker2AMD(VkCommandBuffer commandBuffer, VkPipelineStageFlags2KHR stage, VkBuffer dstBuffer, VkDeviceSize dstOffset, uint32_t marker)
{
  assert(commands_.back().type == Command::Type::kCmdWriteBufferMarker2AMD);
}

void CommandTracker::TrackPreBeginCommandBuffer(VkCommandBuffer commandBuffer, const VkCommandBufferBeginInfo* pBeginInfo)
{
  Command cmd;
  cmd.type = Command::Type::kBeginCommandBuffer;
  cmd.id = static_cast<uint32_t>(commands_.size()) + 1;
  cmd.parameters = recorder_.RecordBeginCommandBuffer(commandBuffer, pBeginInfo);
  commands_.push_back(cmd);
}

void CommandTracker::TrackPostBeginCommandBuffer(VkCommandBuffer commandBuffer, const VkCommandBufferBeginInfo* pBeginInfo)
{
  assert(commands_.back().type == Command::Type::kBeginCommandBuffer);
}

void CommandTracker::TrackPreEndCommandBuffer(VkCommandBuffer commandBuffer)
{
  Command cmd;
  cmd.type = Command::Type::kEndCommandBuffer;
  cmd.id = static_cast<uint32_t>(commands_.size()) + 1;
  cmd.parameters = recorder_.RecordEndCommandBuffer(commandBuffer);
  commands_.push_back(cmd);
}

void CommandTracker::TrackPostEndCommandBuffer(VkCommandBuffer commandBuffer)
{
  assert(commands_.back().type == Command::Type::kEndCommandBuffer);
}

void CommandTracker::TrackPreResetCommandBuffer(VkCommandBuffer commandBuffer, VkCommandBufferResetFlags flags)
{
  Command cmd;
  cmd.type = Command::Type::kResetCommandBuffer;
  cmd.id = static_cast<uint32_t>(commands_.size()) + 1;
  cmd.parameters = recorder_.RecordResetCommandBuffer(commandBuffer, flags);
  commands_.push_back(cmd);
}

void CommandTracker::TrackPostResetCommandBuffer(VkCommandBuffer commandBuffer, VkCommandBufferResetFlags flags)
{
  assert(commands_.back().type == Command::Type::kResetCommandBuffer);
}

void CommandTracker::TrackPreCmdBindPipeline(VkCommandBuffer commandBuffer, VkPipelineBindPoint pipelineBindPoint, VkPipeline pipeline)
{
  Command cmd;
  cmd.type = Command::Type::kCmdBindPipeline;
  cmd.id = static_cast<uint32_t>(commands_.size()) + 1;
  cmd.parameters = recorder_.RecordCmdBindPipeline(commandBuffer, pipelineBindPoint, pipeline);
  commands_.push_back(cmd);
}

void CommandTracker::TrackPostCmdBindPipeline(VkCommandBuffer commandBuffer, VkPipelineBindPoint pipelineBindPoint, VkPipeline pipeline)
{
  assert(commands_.back().type == Command::Type::kCmdBindPipeline);
}

void CommandTracker::TrackPreCmdSetViewport(VkCommandBuffer commandBuffer, uint32_t firstViewport, uint32_t viewportCount, const VkViewport* pViewports)
{
  Command cmd;
  cmd.type = Command::Type::kCmdSetViewport;
  cmd.id = static_cast<uint32_t>(commands_.size()) + 1;
  cmd.parameters = recorder_.RecordCmdSetViewport(commandBuffer, firstViewport, viewportCount, pViewports);
  commands_.push_back(cmd);
}

void CommandTracker::TrackPostCmdSetViewport(VkCommandBuffer commandBuffer, uint32_t firstViewport, uint32_t viewportCount, const VkViewport* pViewports)
{
  assert(commands_.back().type == Command::Type::kCmdSetViewport);
}

void CommandTracker::TrackPreCmdSetScissor(VkCommandBuffer commandBuffer, uint32_t firstScissor, uint32_t scissorCount, const VkRect2D* pScissors)
{
  Command cmd;
  cmd.type = Command::Type::kCmdSetScissor;
  cmd.id = static_cast<uint32_t>(commands_.size()) + 1;
  cmd.parameters = recorder_.RecordCmdSetScissor(commandBuffer, firstScissor, scissorCount, pScissors);
  commands_.push_back(cmd);
}

void CommandTracker::TrackPostCmdSetScissor(VkCommandBuffer commandBuffer, uint32_t firstScissor, uint32_t scissorCount, const VkRect2D* pScissors)
{
  assert(commands_.back().type == Command::Type::kCmdSetScissor);
}

void CommandTracker::TrackPreCmdSetLineWidth(VkCommandBuffer commandBuffer, float lineWidth)
{
  Command cmd;
  cmd.type = Command::Type::kCmdSetLineWidth;
  cmd.id = static_cast<uint32_t>(commands_.size()) + 1;
  cmd.parameters = recorder_.RecordCmdSetLineWidth(commandBuffer, lineWidth);
  commands_.push_back(cmd);
}

void CommandTracker::TrackPostCmdSetLineWidth(VkCommandBuffer commandBuffer, float lineWidth)
{
  assert(commands_.back().type == Command::Type::kCmdSetLineWidth);
}

void CommandTracker::TrackPreCmdSetDepthBias(VkCommandBuffer commandBuffer, float depthBiasConstantFactor, float depthBiasClamp, float depthBiasSlopeFactor)
{
  Command cmd;
  cmd.type = Command::Type::kCmdSetDepthBias;
  cmd.id = static_cast<uint32_t>(commands_.size()) + 1;
  cmd.parameters = recorder_.RecordCmdSetDepthBias(commandBuffer, depthBiasConstantFactor, depthBiasClamp, depthBiasSlopeFactor);
  commands_.push_back(cmd);
}

void CommandTracker::TrackPostCmdSetDepthBias(VkCommandBuffer commandBuffer, float depthBiasConstantFactor, float depthBiasClamp, float depthBiasSlopeFactor)
{
  assert(commands_.back().type == Command::Type::kCmdSetDepthBias);
}

void CommandTracker::TrackPreCmdSetBlendConstants(VkCommandBuffer commandBuffer, const float blendConstants[4])
{
  Command cmd;
  cmd.type = Command::Type::kCmdSetBlendConstants;
  cmd.id = static_cast<uint32_t>(commands_.size()) + 1;
  cmd.parameters = recorder_.RecordCmdSetBlendConstants(commandBuffer, blendConstants);
  commands_.push_back(cmd);
}

void CommandTracker::TrackPostCmdSetBlendConstants(VkCommandBuffer commandBuffer, const float blendConstants[4])
{
  assert(commands_.back().type == Command::Type::kCmdSetBlendConstants);
}

void CommandTracker::TrackPreCmdSetDepthBounds(VkCommandBuffer commandBuffer, float minDepthBounds, float maxDepthBounds)
{
  Command cmd;
  cmd.type = Command::Type::kCmdSetDepthBounds;
  cmd.id = static_cast<uint32_t>(commands_.size()) + 1;
  cmd.parameters = recorder_.RecordCmdSetDepthBounds(commandBuffer, minDepthBounds, maxDepthBounds);
  commands_.push_back(cmd);
}

void CommandTracker::TrackPostCmdSetDepthBounds(VkCommandBuffer commandBuffer, float minDepthBounds, float maxDepthBounds)
{
  assert(commands_.back().type == Command::Type::kCmdSetDepthBounds);
}

void CommandTracker::TrackPreCmdSetStencilCompareMask(VkCommandBuffer commandBuffer, VkStencilFaceFlags faceMask, uint32_t compareMask)
{
  Command cmd;
  cmd.type = Command::Type::kCmdSetStencilCompareMask;
  cmd.id = static_cast<uint32_t>(commands_.size()) + 1;
  cmd.parameters = recorder_.RecordCmdSetStencilCompareMask(commandBuffer, faceMask, compareMask);
  commands_.push_back(cmd);
}

void CommandTracker::TrackPostCmdSetStencilCompareMask(VkCommandBuffer commandBuffer, VkStencilFaceFlags faceMask, uint32_t compareMask)
{
  assert(commands_.back().type == Command::Type::kCmdSetStencilCompareMask);
}

void CommandTracker::TrackPreCmdSetStencilWriteMask(VkCommandBuffer commandBuffer, VkStencilFaceFlags faceMask, uint32_t writeMask)
{
  Command cmd;
  cmd.type = Command::Type::kCmdSetStencilWriteMask;
  cmd.id = static_cast<uint32_t>(commands_.size()) + 1;
  cmd.parameters = recorder_.RecordCmdSetStencilWriteMask(commandBuffer, faceMask, writeMask);
  commands_.push_back(cmd);
}

void CommandTracker::TrackPostCmdSetStencilWriteMask(VkCommandBuffer commandBuffer, VkStencilFaceFlags faceMask, uint32_t writeMask)
{
  assert(commands_.back().type == Command::Type::kCmdSetStencilWriteMask);
}

void CommandTracker::TrackPreCmdSetStencilReference(VkCommandBuffer commandBuffer, VkStencilFaceFlags faceMask, uint32_t reference)
{
  Command cmd;
  cmd.type = Command::Type::kCmdSetStencilReference;
  cmd.id = static_cast<uint32_t>(commands_.size()) + 1;
  cmd.parameters = recorder_.RecordCmdSetStencilReference(commandBuffer, faceMask, reference);
  commands_.push_back(cmd);
}

void CommandTracker::TrackPostCmdSetStencilReference(VkCommandBuffer commandBuffer, VkStencilFaceFlags faceMask, uint32_t reference)
{
  assert(commands_.back().type == Command::Type::kCmdSetStencilReference);
}

void CommandTracker::TrackPreCmdBindDescriptorSets(VkCommandBuffer commandBuffer, VkPipelineBindPoint pipelineBindPoint, VkPipelineLayout layout, uint32_t firstSet, uint32_t descriptorSetCount, const VkDescriptorSet* pDescriptorSets, uint32_t dynamicOffsetCount, const uint32_t* pDynamicOffsets)
{
  Command cmd;
  cmd.type = Command::Type::kCmdBindDescriptorSets;
  cmd.id = static_cast<uint32_t>(commands_.size()) + 1;
  cmd.parameters = recorder_.RecordCmdBindDescriptorSets(commandBuffer, pipelineBindPoint, layout, firstSet, descriptorSetCount, pDescriptorSets, dynamicOffsetCount, pDynamicOffsets);
  commands_.push_back(cmd);
}

void CommandTracker::TrackPostCmdBindDescriptorSets(VkCommandBuffer commandBuffer, VkPipelineBindPoint pipelineBindPoint, VkPipelineLayout layout, uint32_t firstSet, uint32_t descriptorSetCount, const VkDescriptorSet* pDescriptorSets, uint32_t dynamicOffsetCount, const uint32_t* pDynamicOffsets)
{
  assert(commands_.back().type == Command::Type::kCmdBindDescriptorSets);
}

void CommandTracker::TrackPreCmdBindIndexBuffer(VkCommandBuffer commandBuffer, VkBuffer buffer, VkDeviceSize offset, VkIndexType indexType)
{
  Command cmd;
  cmd.type = Command::Type::kCmdBindIndexBuffer;
  cmd.id = static_cast<uint32_t>(commands_.size()) + 1;
  cmd.parameters = recorder_.RecordCmdBindIndexBuffer(commandBuffer, buffer, offset, indexType);
  commands_.push_back(cmd);
}

void CommandTracker::TrackPostCmdBindIndexBuffer(VkCommandBuffer commandBuffer, VkBuffer buffer, VkDeviceSize offset, VkIndexType indexType)
{
  assert(commands_.back().type == Command::Type::kCmdBindIndexBuffer);
}

void CommandTracker::TrackPreCmdBindVertexBuffers(VkCommandBuffer commandBuffer, uint32_t firstBinding, uint32_t bindingCount, const VkBuffer* pBuffers, const VkDeviceSize* pOffsets)
{
  Command cmd;
  cmd.type = Command::Type::kCmdBindVertexBuffers;
  cmd.id = static_cast<uint32_t>(commands_.size()) + 1;
  cmd.parameters = recorder_.RecordCmdBindVertexBuffers(commandBuffer, firstBinding, bindingCount, pBuffers, pOffsets);
  commands_.push_back(cmd);
}

void CommandTracker::TrackPostCmdBindVertexBuffers(VkCommandBuffer commandBuffer, uint32_t firstBinding, uint32_t bindingCount, const VkBuffer* pBuffers, const VkDeviceSize* pOffsets)
{
  assert(commands_.back().type == Command::Type::kCmdBindVertexBuffers);
}

void CommandTracker::TrackPreCmdDraw(VkCommandBuffer commandBuffer, uint32_t vertexCount, uint32_t instanceCount, uint32_t firstVertex, uint32_t firstInstance)
{
  Command cmd;
  cmd.type = Command::Type::kCmdDraw;
  cmd.id = static_cast<uint32_t>(commands_.size()) + 1;
  cmd.parameters = recorder_.RecordCmdDraw(commandBuffer, vertexCount, instanceCount, firstVertex, firstInstance);
  commands_.push_back(cmd);
}

void CommandTracker::TrackPostCmdDraw(VkCommandBuffer commandBuffer, uint32_t vertexCount, uint32_t instanceCount, uint32_t firstVertex, uint32_t firstInstance)
{
  assert(commands_.back().type == Command::Type::kCmdDraw);
}

void CommandTracker::TrackPreCmdDrawIndexed(VkCommandBuffer commandBuffer, uint32_t indexCount, uint32_t instanceCount, uint32_t firstIndex, int32_t vertexOffset, uint32_t firstInstance)
{
  Command cmd;
  cmd.type = Command::Type::kCmdDrawIndexed;
  cmd.id = static_cast<uint32_t>(commands_.size()) + 1;
  cmd.parameters = recorder_.RecordCmdDrawIndexed(commandBuffer, indexCount, instanceCount, firstIndex, vertexOffset, firstInstance);
  commands_.push_back(cmd);
}

void CommandTracker::TrackPostCmdDrawIndexed(VkCommandBuffer commandBuffer, uint32_t indexCount, uint32_t instanceCount, uint32_t firstIndex, int32_t vertexOffset, uint32_t firstInstance)
{
  assert(commands_.back().type == Command::Type::kCmdDrawIndexed);
}

void CommandTracker::TrackPreCmdDrawIndirect(VkCommandBuffer commandBuffer, VkBuffer buffer, VkDeviceSize offset, uint32_t drawCount, uint32_t stride)
{
  Command cmd;
  cmd.type = Command::Type::kCmdDrawIndirect;
  cmd.id = static_cast<uint32_t>(commands_.size()) + 1;
  cmd.parameters = recorder_.RecordCmdDrawIndirect(commandBuffer, buffer, offset, drawCount, stride);
  commands_.push_back(cmd);
}

void CommandTracker::TrackPostCmdDrawIndirect(VkCommandBuffer commandBuffer, VkBuffer buffer, VkDeviceSize offset, uint32_t drawCount, uint32_t stride)
{
  assert(commands_.back().type == Command::Type::kCmdDrawIndirect);
}

void CommandTracker::TrackPreCmdDrawIndexedIndirect(VkCommandBuffer commandBuffer, VkBuffer buffer, VkDeviceSize offset, uint32_t drawCount, uint32_t stride)
{
  Command cmd;
  cmd.type = Command::Type::kCmdDrawIndexedIndirect;
  cmd.id = static_cast<uint32_t>(commands_.size()) + 1;
  cmd.parameters = recorder_.RecordCmdDrawIndexedIndirect(commandBuffer, buffer, offset, drawCount, stride);
  commands_.push_back(cmd);
}

void CommandTracker::TrackPostCmdDrawIndexedIndirect(VkCommandBuffer commandBuffer, VkBuffer buffer, VkDeviceSize offset, uint32_t drawCount, uint32_t stride)
{
  assert(commands_.back().type == Command::Type::kCmdDrawIndexedIndirect);
}

void CommandTracker::TrackPreCmdDispatch(VkCommandBuffer commandBuffer, uint32_t groupCountX, uint32_t groupCountY, uint32_t groupCountZ)
{
  Command cmd;
  cmd.type = Command::Type::kCmdDispatch;
  cmd.id = static_cast<uint32_t>(commands_.size()) + 1;
  cmd.parameters = recorder_.RecordCmdDispatch(commandBuffer, groupCountX, groupCountY, groupCountZ);
  commands_.push_back(cmd);
}

void CommandTracker::TrackPostCmdDispatch(VkCommandBuffer commandBuffer, uint32_t groupCountX, uint32_t groupCountY, uint32_t groupCountZ)
{
  assert(commands_.back().type == Command::Type::kCmdDispatch);
}

void CommandTracker::TrackPreCmdDispatchIndirect(VkCommandBuffer commandBuffer, VkBuffer buffer, VkDeviceSize offset)
{
  Command cmd;
  cmd.type = Command::Type::kCmdDispatchIndirect;
  cmd.id = static_cast<uint32_t>(commands_.size()) + 1;
  cmd.parameters = recorder_.RecordCmdDispatchIndirect(commandBuffer, buffer, offset);
  commands_.push_back(cmd);
}

void CommandTracker::TrackPostCmdDispatchIndirect(VkCommandBuffer commandBuffer, VkBuffer buffer, VkDeviceSize offset)
{
  assert(commands_.back().type == Command::Type::kCmdDispatchIndirect);
}

void CommandTracker::TrackPreCmdCopyBuffer(VkCommandBuffer commandBuffer, VkBuffer srcBuffer, VkBuffer dstBuffer, uint32_t regionCount, const VkBufferCopy* pRegions)
{
  Command cmd;
  cmd.type = Command::Type::kCmdCopyBuffer;
  cmd.id = static_cast<uint32_t>(commands_.size()) + 1;
  cmd.parameters = recorder_.RecordCmdCopyBuffer(commandBuffer, srcBuffer, dstBuffer, regionCount, pRegions);
  commands_.push_back(cmd);
}

void CommandTracker::TrackPostCmdCopyBuffer(VkCommandBuffer commandBuffer, VkBuffer srcBuffer, VkBuffer dstBuffer, uint32_t regionCount, const VkBufferCopy* pRegions)
{
  assert(commands_.back().type == Command::Type::kCmdCopyBuffer);
}

void CommandTracker::TrackPreCmdCopyImage(VkCommandBuffer commandBuffer, VkImage srcImage, VkImageLayout srcImageLayout, VkImage dstImage, VkImageLayout dstImageLayout, uint32_t regionCount, const VkImageCopy* pRegions)
{
  Command cmd;
  cmd.type = Command::Type::kCmdCopyImage;
  cmd.id = static_cast<uint32_t>(commands_.size()) + 1;
  cmd.parameters = recorder_.RecordCmdCopyImage(commandBuffer, srcImage, srcImageLayout, dstImage, dstImageLayout, regionCount, pRegions);
  commands_.push_back(cmd);
}

void CommandTracker::TrackPostCmdCopyImage(VkCommandBuffer commandBuffer, VkImage srcImage, VkImageLayout srcImageLayout, VkImage dstImage, VkImageLayout dstImageLayout, uint32_t regionCount, const VkImageCopy* pRegions)
{
  assert(commands_.back().type == Command::Type::kCmdCopyImage);
}

void CommandTracker::TrackPreCmdBlitImage(VkCommandBuffer commandBuffer, VkImage srcImage, VkImageLayout srcImageLayout, VkImage dstImage, VkImageLayout dstImageLayout, uint32_t regionCount, const VkImageBlit* pRegions, VkFilter filter)
{
  Command cmd;
  cmd.type = Command::Type::kCmdBlitImage;
  cmd.id = static_cast<uint32_t>(commands_.size()) + 1;
  cmd.parameters = recorder_.RecordCmdBlitImage(commandBuffer, srcImage, srcImageLayout, dstImage, dstImageLayout, regionCount, pRegions, filter);
  commands_.push_back(cmd);
}

void CommandTracker::TrackPostCmdBlitImage(VkCommandBuffer commandBuffer, VkImage srcImage, VkImageLayout srcImageLayout, VkImage dstImage, VkImageLayout dstImageLayout, uint32_t regionCount, const VkImageBlit* pRegions, VkFilter filter)
{
  assert(commands_.back().type == Command::Type::kCmdBlitImage);
}

void CommandTracker::TrackPreCmdCopyBufferToImage(VkCommandBuffer commandBuffer, VkBuffer srcBuffer, VkImage dstImage, VkImageLayout dstImageLayout, uint32_t regionCount, const VkBufferImageCopy* pRegions)
{
  Command cmd;
  cmd.type = Command::Type::kCmdCopyBufferToImage;
  cmd.id = static_cast<uint32_t>(commands_.size()) + 1;
  cmd.parameters = recorder_.RecordCmdCopyBufferToImage(commandBuffer, srcBuffer, dstImage, dstImageLayout, regionCount, pRegions);
  commands_.push_back(cmd);
}

void CommandTracker::TrackPostCmdCopyBufferToImage(VkCommandBuffer commandBuffer, VkBuffer srcBuffer, VkImage dstImage, VkImageLayout dstImageLayout, uint32_t regionCount, const VkBufferImageCopy* pRegions)
{
  assert(commands_.back().type == Command::Type::kCmdCopyBufferToImage);
}

void CommandTracker::TrackPreCmdCopyImageToBuffer(VkCommandBuffer commandBuffer, VkImage srcImage, VkImageLayout srcImageLayout, VkBuffer dstBuffer, uint32_t regionCount, const VkBufferImageCopy* pRegions)
{
  Command cmd;
  cmd.type = Command::Type::kCmdCopyImageToBuffer;
  cmd.id = static_cast<uint32_t>(commands_.size()) + 1;
  cmd.parameters = recorder_.RecordCmdCopyImageToBuffer(commandBuffer, srcImage, srcImageLayout, dstBuffer, regionCount, pRegions);
  commands_.push_back(cmd);
}

void CommandTracker::TrackPostCmdCopyImageToBuffer(VkCommandBuffer commandBuffer, VkImage srcImage, VkImageLayout srcImageLayout, VkBuffer dstBuffer, uint32_t regionCount, const VkBufferImageCopy* pRegions)
{
  assert(commands_.back().type == Command::Type::kCmdCopyImageToBuffer);
}

void CommandTracker::TrackPreCmdUpdateBuffer(VkCommandBuffer commandBuffer, VkBuffer dstBuffer, VkDeviceSize dstOffset, VkDeviceSize dataSize, const void* pData)
{
  Command cmd;
  cmd.type = Command::Type::kCmdUpdateBuffer;
  cmd.id = static_cast<uint32_t>(commands_.size()) + 1;
  cmd.parameters = recorder_.RecordCmdUpdateBuffer(commandBuffer, dstBuffer, dstOffset, dataSize, pData);
  commands_.push_back(cmd);
}

void CommandTracker::TrackPostCmdUpdateBuffer(VkCommandBuffer commandBuffer, VkBuffer dstBuffer, VkDeviceSize dstOffset, VkDeviceSize dataSize, const void* pData)
{
  assert(commands_.back().type == Command::Type::kCmdUpdateBuffer);
}

void CommandTracker::TrackPreCmdFillBuffer(VkCommandBuffer commandBuffer, VkBuffer dstBuffer, VkDeviceSize dstOffset, VkDeviceSize size, uint32_t data)
{
  Command cmd;
  cmd.type = Command::Type::kCmdFillBuffer;
  cmd.id = static_cast<uint32_t>(commands_.size()) + 1;
  cmd.parameters = recorder_.RecordCmdFillBuffer(commandBuffer, dstBuffer, dstOffset, size, data);
  commands_.push_back(cmd);
}

void CommandTracker::TrackPostCmdFillBuffer(VkCommandBuffer commandBuffer, VkBuffer dstBuffer, VkDeviceSize dstOffset, VkDeviceSize size, uint32_t data)
{
  assert(commands_.back().type == Command::Type::kCmdFillBuffer);
}

void CommandTracker::TrackPreCmdClearColorImage(VkCommandBuffer commandBuffer, VkImage image, VkImageLayout imageLayout, const VkClearColorValue* pColor, uint32_t rangeCount, const VkImageSubresourceRange* pRanges)
{
  Command cmd;
  cmd.type = Command::Type::kCmdClearColorImage;
  cmd.id = static_cast<uint32_t>(commands_.size()) + 1;
  cmd.parameters = recorder_.RecordCmdClearColorImage(commandBuffer, image, imageLayout, pColor, rangeCount, pRanges);
  commands_.push_back(cmd);
}

void CommandTracker::TrackPostCmdClearColorImage(VkCommandBuffer commandBuffer, VkImage image, VkImageLayout imageLayout, const VkClearColorValue* pColor, uint32_t rangeCount, const VkImageSubresourceRange* pRanges)
{
  assert(commands_.back().type == Command::Type::kCmdClearColorImage);
}

void CommandTracker::TrackPreCmdClearDepthStencilImage(VkCommandBuffer commandBuffer, VkImage image, VkImageLayout imageLayout, const VkClearDepthStencilValue* pDepthStencil, uint32_t rangeCount, const VkImageSubresourceRange* pRanges)
{
  Command cmd;
  cmd.type = Command::Type::kCmdClearDepthStencilImage;
  cmd.id = static_cast<uint32_t>(commands_.size()) + 1;
  cmd.parameters = recorder_.RecordCmdClearDepthStencilImage(commandBuffer, image, imageLayout, pDepthStencil, rangeCount, pRanges);
  commands_.push_back(cmd);
}

void CommandTracker::TrackPostCmdClearDepthStencilImage(VkCommandBuffer commandBuffer, VkImage image, VkImageLayout imageLayout, const VkClearDepthStencilValue* pDepthStencil, uint32_t rangeCount, const VkImageSubresourceRange* pRanges)
{
  assert(commands_.back().type == Command::Type::kCmdClearDepthStencilImage);
}

void CommandTracker::TrackPreCmdClearAttachments(VkCommandBuffer commandBuffer, uint32_t attachmentCount, const VkClearAttachment* pAttachments, uint32_t rectCount, const VkClearRect* pRects)
{
  Command cmd;
  cmd.type = Command::Type::kCmdClearAttachments;
  cmd.id = static_cast<uint32_t>(commands_.size()) + 1;
  cmd.parameters = recorder_.RecordCmdClearAttachments(commandBuffer, attachmentCount, pAttachments, rectCount, pRects);
  commands_.push_back(cmd);
}

void CommandTracker::TrackPostCmdClearAttachments(VkCommandBuffer commandBuffer, uint32_t attachmentCount, const VkClearAttachment* pAttachments, uint32_t rectCount, const VkClearRect* pRects)
{
  assert(commands_.back().type == Command::Type::kCmdClearAttachments);
}

void CommandTracker::TrackPreCmdResolveImage(VkCommandBuffer commandBuffer, VkImage srcImage, VkImageLayout srcImageLayout, VkImage dstImage, VkImageLayout dstImageLayout, uint32_t regionCount, const VkImageResolve* pRegions)
{
  Command cmd;
  cmd.type = Command::Type::kCmdResolveImage;
  cmd.id = static_cast<uint32_t>(commands_.size()) + 1;
  cmd.parameters = recorder_.RecordCmdResolveImage(commandBuffer, srcImage, srcImageLayout, dstImage, dstImageLayout, regionCount, pRegions);
  commands_.push_back(cmd);
}

void CommandTracker::TrackPostCmdResolveImage(VkCommandBuffer commandBuffer, VkImage srcImage, VkImageLayout srcImageLayout, VkImage dstImage, VkImageLayout dstImageLayout, uint32_t regionCount, const VkImageResolve* pRegions)
{
  assert(commands_.back().type == Command::Type::kCmdResolveImage);
}

void CommandTracker::TrackPreCmdSetEvent(VkCommandBuffer commandBuffer, VkEvent event, VkPipelineStageFlags stageMask)
{
  Command cmd;
  cmd.type = Command::Type::kCmdSetEvent;
  cmd.id = static_cast<uint32_t>(commands_.size()) + 1;
  cmd.parameters = recorder_.RecordCmdSetEvent(commandBuffer, event, stageMask);
  commands_.push_back(cmd);
}

void CommandTracker::TrackPostCmdSetEvent(VkCommandBuffer commandBuffer, VkEvent event, VkPipelineStageFlags stageMask)
{
  assert(commands_.back().type == Command::Type::kCmdSetEvent);
}

void CommandTracker::TrackPreCmdResetEvent(VkCommandBuffer commandBuffer, VkEvent event, VkPipelineStageFlags stageMask)
{
  Command cmd;
  cmd.type = Command::Type::kCmdResetEvent;
  cmd.id = static_cast<uint32_t>(commands_.size()) + 1;
  cmd.parameters = recorder_.RecordCmdResetEvent(commandBuffer, event, stageMask);
  commands_.push_back(cmd);
}

void CommandTracker::TrackPostCmdResetEvent(VkCommandBuffer commandBuffer, VkEvent event, VkPipelineStageFlags stageMask)
{
  assert(commands_.back().type == Command::Type::kCmdResetEvent);
}

void CommandTracker::TrackPreCmdWaitEvents(VkCommandBuffer commandBuffer, uint32_t eventCount, const VkEvent* pEvents, VkPipelineStageFlags srcStageMask, VkPipelineStageFlags dstStageMask, uint32_t memoryBarrierCount, const VkMemoryBarrier* pMemoryBarriers, uint32_t bufferMemoryBarrierCount, const VkBufferMemoryBarrier* pBufferMemoryBarriers, uint32_t imageMemoryBarrierCount, const VkImageMemoryBarrier* pImageMemoryBarriers)
{
  Command cmd;
  cmd.type = Command::Type::kCmdWaitEvents;
  cmd.id = static_cast<uint32_t>(commands_.size()) + 1;
  cmd.parameters = recorder_.RecordCmdWaitEvents(commandBuffer, eventCount, pEvents, srcStageMask, dstStageMask, memoryBarrierCount, pMemoryBarriers, bufferMemoryBarrierCount, pBufferMemoryBarriers, imageMemoryBarrierCount, pImageMemoryBarriers);
  commands_.push_back(cmd);
}

void CommandTracker::TrackPostCmdWaitEvents(VkCommandBuffer commandBuffer, uint32_t eventCount, const VkEvent* pEvents, VkPipelineStageFlags srcStageMask, VkPipelineStageFlags dstStageMask, uint32_t memoryBarrierCount, const VkMemoryBarrier* pMemoryBarriers, uint32_t bufferMemoryBarrierCount, const VkBufferMemoryBarrier* pBufferMemoryBarriers, uint32_t imageMemoryBarrierCount, const VkImageMemoryBarrier* pImageMemoryBarriers)
{
  assert(commands_.back().type == Command::Type::kCmdWaitEvents);
}

void CommandTracker::TrackPreCmdPipelineBarrier(VkCommandBuffer commandBuffer, VkPipelineStageFlags srcStageMask, VkPipelineStageFlags dstStageMask, VkDependencyFlags dependencyFlags, uint32_t memoryBarrierCount, const VkMemoryBarrier* pMemoryBarriers, uint32_t bufferMemoryBarrierCount, const VkBufferMemoryBarrier* pBufferMemoryBarriers, uint32_t imageMemoryBarrierCount, const VkImageMemoryBarrier* pImageMemoryBarriers)
{
  Command cmd;
  cmd.type = Command::Type::kCmdPipelineBarrier;
  cmd.id = static_cast<uint32_t>(commands_.size()) + 1;
  cmd.parameters = recorder_.RecordCmdPipelineBarrier(commandBuffer, srcStageMask, dstStageMask, dependencyFlags, memoryBarrierCount, pMemoryBarriers, bufferMemoryBarrierCount, pBufferMemoryBarriers, imageMemoryBarrierCount, pImageMemoryBarriers);
  commands_.push_back(cmd);
}

void CommandTracker::TrackPostCmdPipelineBarrier(VkCommandBuffer commandBuffer, VkPipelineStageFlags srcStageMask, VkPipelineStageFlags dstStageMask, VkDependencyFlags dependencyFlags, uint32_t memoryBarrierCount, const VkMemoryBarrier* pMemoryBarriers, uint32_t bufferMemoryBarrierCount, const VkBufferMemoryBarrier* pBufferMemoryBarriers, uint32_t imageMemoryBarrierCount, const VkImageMemoryBarrier* pImageMemoryBarriers)
{
  assert(commands_.back().type == Command::Type::kCmdPipelineBarrier);
}

void CommandTracker::TrackPreCmdBeginQuery(VkCommandBuffer commandBuffer, VkQueryPool queryPool, uint32_t query, VkQueryControlFlags flags)
{
  Command cmd;
  cmd.type = Command::Type::kCmdBeginQuery;
  cmd.id = static_cast<uint32_t>(commands_.size()) + 1;
  cmd.parameters = recorder_.RecordCmdBeginQuery(commandBuffer, queryPool, query, flags);
  commands_.push_back(cmd);
}

void CommandTracker::TrackPostCmdBeginQuery(VkCommandBuffer commandBuffer, VkQueryPool queryPool, uint32_t query, VkQueryControlFlags flags)
{
  assert(commands_.back().type == Command::Type::kCmdBeginQuery);
}

void CommandTracker::TrackPreCmdEndQuery(VkCommandBuffer commandBuffer, VkQueryPool queryPool, uint32_t query)
{
  Command cmd;
  cmd.type = Command::Type::kCmdEndQuery;
  cmd.id = static_cast<uint32_t>(commands_.size()) + 1;
  cmd.parameters = recorder_.RecordCmdEndQuery(commandBuffer, queryPool, query);
  commands_.push_back(cmd);
}

void CommandTracker::TrackPostCmdEndQuery(VkCommandBuffer commandBuffer, VkQueryPool queryPool, uint32_t query)
{
  assert(commands_.back().type == Command::Type::kCmdEndQuery);
}

void CommandTracker::TrackPreCmdResetQueryPool(VkCommandBuffer commandBuffer, VkQueryPool queryPool, uint32_t firstQuery, uint32_t queryCount)
{
  Command cmd;
  cmd.type = Command::Type::kCmdResetQueryPool;
  cmd.id = static_cast<uint32_t>(commands_.size()) + 1;
  cmd.parameters = recorder_.RecordCmdResetQueryPool(commandBuffer, queryPool, firstQuery, queryCount);
  commands_.push_back(cmd);
}

void CommandTracker::TrackPostCmdResetQueryPool(VkCommandBuffer commandBuffer, VkQueryPool queryPool, uint32_t firstQuery, uint32_t queryCount)
{
  assert(commands_.back().type == Command::Type::kCmdResetQueryPool);
}

void CommandTracker::TrackPreCmdWriteTimestamp(VkCommandBuffer commandBuffer, VkPipelineStageFlagBits pipelineStage, VkQueryPool queryPool, uint32_t query)
{
  Command cmd;
  cmd.type = Command::Type::kCmdWriteTimestamp;
  cmd.id = static_cast<uint32_t>(commands_.size()) + 1;
  cmd.parameters = recorder_.RecordCmdWriteTimestamp(commandBuffer, pipelineStage, queryPool, query);
  commands_.push_back(cmd);
}

void CommandTracker::TrackPostCmdWriteTimestamp(VkCommandBuffer commandBuffer, VkPipelineStageFlagBits pipelineStage, VkQueryPool queryPool, uint32_t query)
{
  assert(commands_.back().type == Command::Type::kCmdWriteTimestamp);
}

void CommandTracker::TrackPreCmdCopyQueryPoolResults(VkCommandBuffer commandBuffer, VkQueryPool queryPool, uint32_t firstQuery, uint32_t queryCount, VkBuffer dstBuffer, VkDeviceSize dstOffset, VkDeviceSize stride, VkQueryResultFlags flags)
{
  Command cmd;
  cmd.type = Command::Type::kCmdCopyQueryPoolResults;
  cmd.id = static_cast<uint32_t>(commands_.size()) + 1;
  cmd.parameters = recorder_.RecordCmdCopyQueryPoolResults(commandBuffer, queryPool, firstQuery, queryCount, dstBuffer, dstOffset, stride, flags);
  commands_.push_back(cmd);
}

void CommandTracker::TrackPostCmdCopyQueryPoolResults(VkCommandBuffer commandBuffer, VkQueryPool queryPool, uint32_t firstQuery, uint32_t queryCount, VkBuffer dstBuffer, VkDeviceSize dstOffset, VkDeviceSize stride, VkQueryResultFlags flags)
{
  assert(commands_.back().type == Command::Type::kCmdCopyQueryPoolResults);
}

void CommandTracker::TrackPreCmdPushConstants(VkCommandBuffer commandBuffer, VkPipelineLayout layout, VkShaderStageFlags stageFlags, uint32_t offset, uint32_t size, const void* pValues)
{
  Command cmd;
  cmd.type = Command::Type::kCmdPushConstants;
  cmd.id = static_cast<uint32_t>(commands_.size()) + 1;
  cmd.parameters = recorder_.RecordCmdPushConstants(commandBuffer, layout, stageFlags, offset, size, pValues);
  commands_.push_back(cmd);
}

void CommandTracker::TrackPostCmdPushConstants(VkCommandBuffer commandBuffer, VkPipelineLayout layout, VkShaderStageFlags stageFlags, uint32_t offset, uint32_t size, const void* pValues)
{
  assert(commands_.back().type == Command::Type::kCmdPushConstants);
}

void CommandTracker::TrackPreCmdBeginRenderPass(VkCommandBuffer commandBuffer, const VkRenderPassBeginInfo* pRenderPassBegin, VkSubpassContents contents)
{
  Command cmd;
  cmd.type = Command::Type::kCmdBeginRenderPass;
  cmd.id = static_cast<uint32_t>(commands_.size()) + 1;
  cmd.parameters = recorder_.RecordCmdBeginRenderPass(commandBuffer, pRenderPassBegin, contents);
  commands_.push_back(cmd);
}

void CommandTracker::TrackPostCmdBeginRenderPass(VkCommandBuffer commandBuffer, const VkRenderPassBeginInfo* pRenderPassBegin, VkSubpassContents contents)
{
  assert(commands_.back().type == Command::Type::kCmdBeginRenderPass);
}

void CommandTracker::TrackPreCmdNextSubpass(VkCommandBuffer commandBuffer, VkSubpassContents contents)
{
  Command cmd;
  cmd.type = Command::Type::kCmdNextSubpass;
  cmd.id = static_cast<uint32_t>(commands_.size()) + 1;
  cmd.parameters = recorder_.RecordCmdNextSubpass(commandBuffer, contents);
  commands_.push_back(cmd);
}

void CommandTracker::TrackPostCmdNextSubpass(VkCommandBuffer commandBuffer, VkSubpassContents contents)
{
  assert(commands_.back().type == Command::Type::kCmdNextSubpass);
}

void CommandTracker::TrackPreCmdEndRenderPass(VkCommandBuffer commandBuffer)
{
  Command cmd;
  cmd.type = Command::Type::kCmdEndRenderPass;
  cmd.id = static_cast<uint32_t>(commands_.size()) + 1;
  cmd.parameters = recorder_.RecordCmdEndRenderPass(commandBuffer);
  commands_.push_back(cmd);
}

void CommandTracker::TrackPostCmdEndRenderPass(VkCommandBuffer commandBuffer)
{
  assert(commands_.back().type == Command::Type::kCmdEndRenderPass);
}

void CommandTracker::TrackPreCmdExecuteCommands(VkCommandBuffer commandBuffer, uint32_t commandBufferCount, const VkCommandBuffer* pCommandBuffers)
{
  Command cmd;
  cmd.type = Command::Type::kCmdExecuteCommands;
  cmd.id = static_cast<uint32_t>(commands_.size()) + 1;
  cmd.parameters = recorder_.RecordCmdExecuteCommands(commandBuffer, commandBufferCount, pCommandBuffers);
  commands_.push_back(cmd);
}

void CommandTracker::TrackPostCmdExecuteCommands(VkCommandBuffer commandBuffer, uint32_t commandBufferCount, const VkCommandBuffer* pCommandBuffers)
{
  assert(commands_.back().type == Command::Type::kCmdExecuteCommands);
}

#ifdef VK_USE_PLATFORM_GGP 

#endif // VK_USE_PLATFORM_GGP
